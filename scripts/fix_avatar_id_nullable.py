#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è avatar_id –≤ —Ç–∞–±–ª–∏—Ü–µ image_generations
–î–µ–ª–∞–µ—Ç –ø–æ–ª–µ nullable –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Imagen 4
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from app.core.database import async_engine
from app.core.logger import get_logger

logger = get_logger(__name__)

async def check_and_fix_avatar_id():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ avatar_id"""
    
    try:
        async with async_engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            result = await conn.execute(text("""
                SELECT column_name, is_nullable, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'image_generations' AND column_name = 'avatar_id'
            """))
            
            row = result.first()
            if row:
                print(f"‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è avatar_id:")
                print(f"   –¢–∏–ø: {row.data_type}")
                print(f"   Nullable: {row.is_nullable}")
                
                if row.is_nullable == 'NO':
                    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ avatar_id...")
                    
                    # –î–µ–ª–∞–µ–º –ø–æ–ª–µ nullable
                    await conn.execute(text("""
                        ALTER TABLE image_generations 
                        ALTER COLUMN avatar_id DROP NOT NULL
                    """))
                    
                    print("‚úÖ –ü–æ–ª–µ avatar_id —Ç–µ–ø–µ—Ä—å nullable!")
                    return True
                else:
                    print("‚úÖ –ü–æ–ª–µ avatar_id —É–∂–µ nullable")
                    return True
            else:
                print("‚ùå –ü–æ–ª–µ avatar_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return False
                
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è avatar_id: {e}")
        return False

async def test_insert():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –∑–∞–ø–∏—Å–∏ —Å NULL avatar_id"""
    
    try:
        async with async_engine.begin() as conn:
            # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await conn.execute(text("""
                INSERT INTO image_generations (
                    id, user_id, avatar_id, generation_type, source_model,
                    original_prompt, final_prompt, quality_preset, aspect_ratio,
                    num_images, status, result_urls, prompt_metadata,
                    is_favorite, is_saved, created_at
                ) VALUES (
                    gen_random_uuid(), '550e8400-e29b-41d4-a716-446655440000'::uuid, 
                    NULL, 'imagen4', 'imagen4',
                    '—Ç–µ—Å—Ç', '—Ç–µ—Å—Ç', 'standard', '1:1',
                    1, 'PENDING', '[]'::json, '{}'::json,
                    false, true, NOW()
                )
            """))
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å NULL avatar_id –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await conn.execute(text("""
                DELETE FROM image_generations 
                WHERE original_prompt = '—Ç–µ—Å—Ç' AND generation_type = 'imagen4'
            """))
            
            return True
            
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è avatar_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Imagen 4...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ
    if await check_and_fix_avatar_id():
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        if await test_insert():
            print("üéâ Imagen 4 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            return False
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î")
        return False

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1) 