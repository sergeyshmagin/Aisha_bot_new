#!/bin/bash
# ==============================================================================
# üîß –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò AISHA BOT
# ==============================================================================

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "docker-compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env —Ñ–∞–π–ª–∞
setup_env() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [[ ! -f ".env.local" ]]; then
        log_warning ".env.local –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É—é —Å –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞..."
        if scp aisha@192.168.0.10:/opt/aisha-backend/.env .env.local 2>/dev/null; then
            log_success ".env.local —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞"
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞"
            log_info "–°–æ–∑–¥–∞–π—Ç–µ .env.local –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env.example –∫–∞–∫ —à–∞–±–ª–æ–Ω"
            exit 1
        fi
    fi
    
    if [[ ! -f ".env" ]]; then
        log_info "–°–æ–∑–¥–∞—é .env —Ñ–∞–π–ª –∏–∑ .env.local..."
        cp .env.local .env
        log_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        log_info "–û–±–Ω–æ–≤–ª—è—é .env —Ñ–∞–π–ª –∏–∑ .env.local..."
        cp .env.local .env
        log_success ".env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if ! grep -q "FAL_WEBHOOK_SECRET" .env; then
        echo "FAL_WEBHOOK_SECRET=secure_webhook_secret_2024" >> .env
        log_info "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è FAL_WEBHOOK_SECRET"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_vars() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
    if [[ ! -f ".env" ]] || [[ ! -s ".env" ]]; then
        log_error ".env —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    local required_vars=(
        "TELEGRAM_BOT_TOKEN"
        "OPENAI_API_KEY" 
        "FAL_API_KEY"
        "DATABASE_URL"
        "REDIS_URL"
    )
    
    local missing_vars=()
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" .env; then
            missing_vars+=("$var")
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ:"
        for var in "${missing_vars[@]}"; do
            echo "  - $var"
        done
        exit 1
    fi
    
    log_success "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
test_connections() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º..."
    
    # –¢–µ—Å—Ç PostgreSQL
    if nc -z 192.168.0.4 5432 2>/dev/null; then
        log_success "PostgreSQL (192.168.0.4:5432) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "PostgreSQL (192.168.0.4:5432) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç Redis
    if nc -z 192.168.0.3 6379 2>/dev/null; then
        log_success "Redis (192.168.0.3:6379) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "Redis (192.168.0.3:6379) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç MinIO
    if nc -z 192.168.0.4 9000 2>/dev/null; then
        log_success "MinIO (192.168.0.4:9000) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "MinIO (192.168.0.4:9000) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
start_development() {
    log_info "–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if docker-compose -f docker-compose.bot.dev.yml ps -q 2>/dev/null | grep -q .; then
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker-compose -f docker-compose.bot.dev.yml down
    fi
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log_info "–ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    docker-compose -f docker-compose.bot.dev.yml up -d
    
    log_success "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
    log_info "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    echo "  docker-compose -f docker-compose.bot.dev.yml logs -f aisha-bot-dev"
    echo "  docker-compose -f docker-compose.bot.dev.yml ps"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
show_usage() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  setup    - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  env      - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ .env —Ñ–∞–π–ª–æ–≤"
    echo "  check    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
    echo "  start    - –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  status   - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 setup    # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫"
    echo "  $0 start    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"
    echo "  $0 logs     # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-setup}" in
    "setup")
        echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Aisha Bot"
        echo "=============================================="
        check_dependencies
        setup_env
        check_env_vars
        test_connections
        start_development
        echo ""
        log_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        ;;
    
    "env")
        setup_env
        check_env_vars
        ;;
    
    "check")
        check_env_vars
        test_connections
        ;;
    
    "start")
        start_development
        ;;
    
    "stop")
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
        docker-compose -f docker-compose.bot.dev.yml down
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        ;;
    
    "logs")
        docker-compose -f docker-compose.bot.dev.yml logs -f aisha-bot-dev
        ;;
    
    "status")
        docker-compose -f docker-compose.bot.dev.yml ps
        ;;
    
    "--help"|"-h"|"help")
        show_usage
        ;;
    
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        show_usage
        exit 1
        ;;
esac 