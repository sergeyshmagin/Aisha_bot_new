#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ SQLAlchemy –∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î.

–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç:
- –ü–æ–ª—è –≤ –º–æ–¥–µ–ª—è—Ö vs –ø–æ–ª—è –≤ –ë–î
- –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å—ã
- –í–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Alembic
"""
import asyncio
import asyncpg
import sys
import os
import importlib
from pathlib import Path
from typing import Dict, List, Set

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.config import settings
from app.database.models import Base, Avatar
import sqlalchemy as sa

class AlembicDiagnostics:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Alembic"""
    
    def __init__(self):
        self.project_root = project_root
        
    def check_alembic_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Alembic"""
        print("\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Alembic:")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º alembic.ini
        alembic_ini = self.project_root / "alembic.ini"
        if alembic_ini.exists():
            print("‚úÖ alembic.ini –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå alembic.ini –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º alembic/env.py
        env_py = self.project_root / "alembic" / "env.py"
        if env_py.exists():
            print("‚úÖ alembic/env.py –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå alembic/env.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ env.py
        try:
            with open(env_py, 'r', encoding='utf-8') as f:
                env_content = f.read()
                
            if 'target_metadata = Base.metadata' in env_content:
                print("‚úÖ target_metadata –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print("‚ùå target_metadata –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                
            if 'from app.database.models import Base' in env_content:
                print("‚úÖ –ò–º–ø–æ—Ä—Ç Base –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –ò–º–ø–æ—Ä—Ç Base –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è env.py: {e}")
            
        return True
    
    def check_sqlalchemy_metadata(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ SQLAlchemy"""
        print("\nüìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö SQLAlchemy:")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
            
            # –ò–º–ø–æ—Ä—Ç Base
            from app.database.models import Base
            print("‚úÖ Base –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = Base.metadata
            print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(metadata.tables)} —Ç–∞–±–ª–∏—Ü")
            
            # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            model_tables = list(metadata.tables.keys())
            print(f"üìä –¢–∞–±–ª–∏—Ü—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {model_tables}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–∞–±–ª–∏—Ü—É avatars
            if 'avatars' in metadata.tables:
                avatars_table = metadata.tables['avatars']
                columns = [col.name for col in avatars_table.columns]
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ avatars: {len(columns)} –ø–æ–ª–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è FAL AI
                fal_fields = [
                    'training_type', 'fal_request_id', 'learning_rate', 
                    'trigger_phrase', 'steps', 'multiresolution_training',
                    'subject_crop', 'create_masks', 'captioning',
                    'finetune_type', 'finetune_comment'
                ]
                
                found_fal_fields = [f for f in fal_fields if f in columns]
                missing_fal_fields = [f for f in fal_fields if f not in columns]
                
                print(f"‚úÖ –ü–æ–ª—è FAL AI –≤ –º–æ–¥–µ–ª–∏: {len(found_fal_fields)}/{len(fal_fields)}")
                if found_fal_fields:
                    print(f"   –ù–∞–π–¥–µ–Ω—ã: {found_fal_fields}")
                if missing_fal_fields:
                    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_fal_fields}")
                    
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ avatars –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def check_alembic_imports(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ Alembic –º–æ–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏"""
        print("\nüîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ Alembic:")
        print("-" * 50)
        
        try:
            # –≠–º—É–ª–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–∫ –≤ alembic/env.py
            old_path = sys.path.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫–∞–∫ –≤ env.py
            env_py_dir = self.project_root / "alembic"
            sys.path.insert(0, str(env_py_dir.parent))
            
            print("üîç –≠–º—É–ª—è—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ alembic/env.py...")
            
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤ env.py
            from app.core.config import settings as alembic_settings
            print("‚úÖ app.core.config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            from app.database.models import Base as alembic_base
            print("‚úÖ app.database.models.Base –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Alembic
            alembic_metadata = alembic_base.metadata
            alembic_tables = list(alembic_metadata.tables.keys())
            print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ Alembic: {len(alembic_tables)} —Ç–∞–±–ª–∏—Ü")
            
            if 'avatars' in alembic_metadata.tables:
                avatars_cols = [col.name for col in alembic_metadata.tables['avatars'].columns]
                print(f"‚úÖ –ü–æ–ª—è avatars –≤ Alembic: {len(avatars_cols)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º FAL AI –ø–æ–ª—è
                fal_in_alembic = [f for f in ['training_type', 'fal_request_id'] if f in avatars_cols]
                print(f"üîç FAL AI –ø–æ–ª—è –≤ Alembic: {fal_in_alembic}")
            
            sys.path = old_path
            return True
            
        except Exception as e:
            sys.path = old_path
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ Alembic: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def check_enum_registration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é enum —Ç–∏–ø–æ–≤"""
        print("\nüè∑Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ enum —Ç–∏–ø–æ–≤:")
        print("-" * 50)
        
        try:
            from app.database.models import (
                AvatarTrainingType, FALFinetuneType, FALPriority
            )
            
            print("‚úÖ Enum —Ç–∏–ø—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            training_types = list(AvatarTrainingType)
            print(f"‚úÖ AvatarTrainingType: {[t.value for t in training_types]}")
            
            finetune_types = list(FALFinetuneType)
            print(f"‚úÖ FALFinetuneType: {[t.value for t in finetune_types]}")
            
            priorities = list(FALPriority)
            print(f"‚úÖ FALPriority: {[p.value for p in priorities]}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ enum —Ç–∏–ø–æ–≤: {e}")
            return False
    
    def diagnose_autogenerate_issues(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π"""
        print("\nü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Alembic:")
        print("-" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            database_url = os.getenv('DATABASE_URL', settings.DATABASE_URL)
            print(f"‚úÖ DATABASE_URL: {database_url[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º engine –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            from sqlalchemy import create_engine
            engine = create_engine(database_url.replace('+asyncpg', '+psycopg2'))
            
            with engine.connect() as conn:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
                version = conn.execute(sa.text("SELECT version()")).fetchone()[0]
                print(f"üìä PostgreSQL: {version.split(',')[0]}")
            
            engine.dispose()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            print("\nüßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:")
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª–µ–π
            modules_to_clear = [name for name in sys.modules.keys() 
                              if name.startswith('app.database')]
            print(f"üîÑ –ú–æ–¥—É–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {len(modules_to_clear)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False

class MigrationSyncChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.db_connection = None
        self.diagnostics = AlembicDiagnostics()
        
    async def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.db_connection = await asyncpg.connect(
            settings.DATABASE_URL.replace('+asyncpg', '')
        )
    
    async def disconnect_db(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_connection:
            await self.db_connection.close()
    
    async def get_db_tables(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ –ë–î"""
        tables = await self.db_connection.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """)
        return [t['table_name'] for t in tables]
    
    def get_model_tables(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ –º–æ–¥–µ–ª–µ–π SQLAlchemy"""
        return list(Base.metadata.tables.keys())
    
    async def get_db_columns(self, table_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î"""
        columns = await self.db_connection.fetch("""
            SELECT 
                column_name,
                data_type,
                is_nullable,
                column_default,
                character_maximum_length
            FROM information_schema.columns 
            WHERE table_name = $1
            ORDER BY ordinal_position
        """, table_name)
        
        return {col['column_name']: col for col in columns}
    
    def get_model_columns(self, table_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–æ–¥–µ–ª–µ–π"""
        if table_name not in Base.metadata.tables:
            return {}
            
        table = Base.metadata.tables[table_name]
        columns = {}
        
        for column in table.columns:
            columns[column.name] = {
                'name': column.name,
                'type': str(column.type),
                'nullable': column.nullable,
                'default': str(column.default) if column.default else None,
                'primary_key': column.primary_key
            }
        
        return columns
    
    async def check_table_sync(self, table_name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        db_columns = await self.get_db_columns(table_name)
        model_columns = self.get_model_columns(table_name)
        
        db_column_names = set(db_columns.keys())
        model_column_names = set(model_columns.keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        missing_in_db = model_column_names - db_column_names
        missing_in_model = db_column_names - model_column_names
        common_columns = db_column_names & model_column_names
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if missing_in_db:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î ({len(missing_in_db)}): {', '.join(sorted(missing_in_db))}")
        
        if missing_in_model:
            print(f"‚ö†Ô∏è  –ï—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏ ({len(missing_in_model)}): {', '.join(sorted(missing_in_model))}")
        
        if common_columns:
            print(f"‚úÖ –û–±—â–∏–µ –ø–æ–ª—è ({len(common_columns)}): {', '.join(sorted(common_columns))}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –ø–æ–ª–µ–π
        type_mismatches = []
        for col_name in common_columns:
            db_col = db_columns[col_name]
            model_col = model_columns[col_name]
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (PostgreSQL vs SQLAlchemy –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            if self._types_mismatch(db_col['data_type'], model_col['type']):
                type_mismatches.append(f"{col_name}: DB={db_col['data_type']} vs Model={model_col['type']}")
        
        if type_mismatches:
            print(f"‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤ ({len(type_mismatches)}):")
            for mismatch in type_mismatches:
                print(f"   - {mismatch}")
        
        return {
            'missing_in_db': missing_in_db,
            'missing_in_model': missing_in_model,
            'type_mismatches': type_mismatches
        }
    
    def _types_mismatch(self, db_type: str, model_type: str) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤"""
        # –ë–∞–∑–æ–≤—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤
        type_mapping = {
            'character varying': ['VARCHAR', 'String'],
            'uuid': ['UUID', 'PGUUID'],
            'integer': ['INTEGER', 'Integer'],
            'boolean': ['BOOLEAN', 'Boolean'],
            'timestamp with time zone': ['TIMESTAMP', 'DateTime'],
            'json': ['JSON'],
            'text': ['TEXT', 'Text'],
            'double precision': ['FLOAT', 'Float'],
            'USER-DEFINED': ['Enum']  # –î–ª—è enum —Ç–∏–ø–æ–≤
        }
        
        for db_base, model_bases in type_mapping.items():
            if db_type.lower().startswith(db_base.lower()):
                return not any(mb in model_type for mb in model_bases)
        
        return False
    
    async def check_alembic_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Alembic"""
        print("\nüîß –°—Ç–∞—Ç—É—Å Alembic:")
        print("-" * 30)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É alembic_version
            version = await self.db_connection.fetchval(
                'SELECT version_num FROM alembic_version'
            )
            print(f"‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
            migrations_dir = project_root / "alembic" / "versions"
            migration_files = list(migrations_dir.glob("*.py"))
            print(f"üìÅ –§–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migration_files)}")
            
            if migration_files:
                latest_file = max(migration_files, key=lambda x: x.name)
                print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {latest_file.name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
                try:
                    with open(latest_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                    if 'def upgrade() -> None:\n    pass' in content:
                        print("‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–≥—Ä–∞—Ü–∏—è –ü–£–°–¢–ê–Ø!")
                    else:
                        print("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Alembic: {e}")
    
    async def run_full_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("="*60)
        print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ú–ò–ì–†–ê–¶–ò–ô")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Alembic
        print("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ALEMBIC")
        print("="*60)
        
        config_ok = self.diagnostics.check_alembic_configuration()
        metadata_ok = self.diagnostics.check_sqlalchemy_metadata()
        imports_ok = self.diagnostics.check_alembic_imports()
        enums_ok = self.diagnostics.check_enum_registration()
        autogen_ok = self.diagnostics.diagnose_autogenerate_issues()
        
        diagnostics_score = sum([config_ok, metadata_ok, imports_ok, enums_ok, autogen_ok])
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnostics_score}/5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        await self.connect_db()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Alembic
            await self.check_alembic_status()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü
            db_tables = await self.get_db_tables()
            model_tables = self.get_model_tables()
            
            print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –¢–∞–±–ª–∏—Ü –≤ –ë–î: {len(db_tables)}")
            print(f"   –¢–∞–±–ª–∏—Ü –≤ –º–æ–¥–µ–ª—è—Ö: {len(model_tables)}")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            common_tables = set(db_tables) & set(model_tables)
            missing_in_db = set(model_tables) - set(db_tables)
            extra_in_db = set(db_tables) - set(model_tables)
            
            if missing_in_db:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î: {', '.join(missing_in_db)}")
            
            if extra_in_db:
                print(f"‚ö†Ô∏è  –õ–∏—à–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î: {', '.join(extra_in_db)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            print("\n" + "="*60)
            print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶")
            print("="*60)
            
            total_issues = 0
            critical_issues = 0
            
            for table_name in sorted(common_tables):
                result = await self.check_table_sync(table_name)
                issues = len(result['missing_in_db']) + len(result['missing_in_model']) + len(result['type_mismatches'])
                total_issues += issues
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –ë–î
                if result['missing_in_db']:
                    critical_issues += len(result['missing_in_db'])
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\n" + "="*60)
            print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
            print("="*60)
            
            if total_issues == 0:
                print("üéâ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!")
            else:
                print(f"‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û {total_issues} –ü–†–û–ë–õ–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {critical_issues}")
                
                if critical_issues > 0:
                    print("\nüîß –î–ï–ô–°–¢–í–ò–Ø:")
                    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/reset_migrations.py")
                    print("2. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ alembic/env.py")
                    print("3. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à Python: rm -rf __pycache__ app/__pycache__")
                    
                if diagnostics_score < 5:
                    print("4. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Alembic (—Å–º. –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—ã—à–µ)")
                    
            print("="*60)
            
        finally:
            await self.disconnect_db()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = MigrationSyncChecker()
    await checker.run_full_check()

if __name__ == "__main__":
    asyncio.run(main()) 