#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FAL AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import sys
import os
from pathlib import Path
from uuid import uuid4, UUID
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import settings
from app.core.logger import get_logger
from app.core.database import get_session
from app.services.fal.client import FalAIClient
from app.services.avatar.training_service import AvatarTrainingService
from app.database.models import Avatar, AvatarStatus, AvatarType, AvatarGender

logger = get_logger(__name__)


async def test_fal_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FAL AI –∫–ª–∏–µ–Ω—Ç"""
    print("\nüß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FAL AI –ö–õ–ò–ï–ù–¢–ê ===")
    
    client = FalAIClient()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {client.test_mode}")
    print(f"‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {client.is_available()}")
    
    config = client.get_config_summary()
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
    test_user_id = uuid4()
    test_avatar_id = uuid4()
    test_photo_urls = [
        "test/photo1.jpg",
        "test/photo2.jpg", 
        "test/photo3.jpg"
    ]
    
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
    print(f"User ID: {test_user_id}")
    print(f"Avatar ID: {test_avatar_id}")
    print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(test_photo_urls)}")
    
    try:
        finetune_id = await client.train_avatar(
            user_id=test_user_id,
            avatar_id=test_avatar_id,
            name="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä",
            gender="male",
            photo_urls=test_photo_urls
        )
        
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! Finetune ID: {finetune_id}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
        status = await client.get_training_status(finetune_id)
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–º–æ–∫)
        print(f"\nüé® –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        image_url = await client.generate_image(
            finetune_id=finetune_id,
            prompt="portrait of TOK person, professional photo"
        )
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –≤ test_fal_client")
        return False


async def test_training_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    print("\nüß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê –û–ë–£–ß–ï–ù–ò–Ø ===")
    
    async with get_session() as session:
        training_service = AvatarTrainingService(session)
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
        test_user_id = uuid4()
        test_avatar_id = uuid4()
        
        # –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –ë–î (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å)
        test_avatar = Avatar(
            id=test_avatar_id,
            user_id=test_user_id,
            name="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
            avatar_type=AvatarType.CHARACTER,
            gender=AvatarGender.MALE,
            status=AvatarStatus.READY_FOR_TRAINING
        )
        
        session.add(test_avatar)
        await session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä: {test_avatar_id}")
        
        try:
            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
            progress = await training_service.get_training_progress(test_avatar_id)
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}")
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
            print(f"\nüì® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook...")
            webhook_data = {
                "finetune_id": "test_finetune_123",
                "status": "completed",
                "progress": 100,
                "message": "Training completed successfully"
            }
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Å finetune_id
            await training_service._save_training_info(
                test_avatar_id, 
                "test_finetune_123"
            )
            
            webhook_result = await training_service.handle_webhook(webhook_data)
            print(f"Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {webhook_result}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            updated_progress = await training_service.get_training_progress(test_avatar_id)
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {updated_progress}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
            logger.exception("–û—à–∏–±–∫–∞ –≤ test_training_service")
            return False
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.delete(test_avatar)
            await session.commit()
            print(f"üßπ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω")


async def test_webhook_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É webhook"""
    print("\nüß™ === –°–ò–ú–£–õ–Ø–¶–ò–Ø WEBHOOK ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ webhook –æ—Ç FAL AI
    webhook_examples = [
        {
            "finetune_id": "test_webhook_1",
            "status": "queued",
            "progress": 0,
            "message": "Training queued"
        },
        {
            "finetune_id": "test_webhook_1", 
            "status": "in_progress",
            "progress": 30,
            "message": "Training in progress"
        },
        {
            "finetune_id": "test_webhook_1",
            "status": "in_progress", 
            "progress": 75,
            "message": "Training almost complete"
        },
        {
            "finetune_id": "test_webhook_1",
            "status": "completed",
            "progress": 100,
            "message": "Training completed successfully"
        }
    ]
    
    async with get_session() as session:
        training_service = AvatarTrainingService(session)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è webhook
        test_user_id = uuid4()
        test_avatar_id = uuid4()
        
        test_avatar = Avatar(
            id=test_avatar_id,
            user_id=test_user_id,
            name="Webhook —Ç–µ—Å—Ç –∞–≤–∞—Ç–∞—Ä",
            avatar_type=AvatarType.CHARACTER,
            gender=AvatarGender.FEMALE,
            status=AvatarStatus.TRAINING,
            finetune_id="test_webhook_1"
        )
        
        session.add(test_avatar)
        await session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è webhook: {test_avatar_id}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π webhook
            for i, webhook_data in enumerate(webhook_examples, 1):
                print(f"\nüì® Webhook {i}/4: {webhook_data['status']} ({webhook_data['progress']}%)")
                
                result = await training_service.handle_webhook(webhook_data)
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = await training_service.get_training_progress(test_avatar_id)
                print(f"   –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞: {progress['status']}, –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress['progress']}%")
                
                await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É webhook
            
            print(f"\n‚úÖ –í—Å–µ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ webhook: {e}")
            logger.exception("–û—à–∏–±–∫–∞ –≤ test_webhook_simulation")
            return False
            
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.delete(test_avatar)
            await session.commit()
            print(f"üßπ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FAL AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===")
    print(f"–†–µ–∂–∏–º: {'TEST MODE ‚úÖ' if settings.AVATAR_TEST_MODE else 'PRODUCTION ‚ö†Ô∏è'}")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = []
    
    # 1. –¢–µ—Å—Ç FAL –∫–ª–∏–µ–Ω—Ç–∞
    try:
        result1 = await test_fal_client()
        results.append(("FAL Client", result1))
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ FAL –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        results.append(("FAL Client", False))
    
    # 2. –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –æ–±—É—á–µ–Ω–∏—è
    try:
        result2 = await test_training_service()
        results.append(("Training Service", result2))
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        results.append(("Training Service", False))
    
    # 3. –¢–µ—Å—Ç webhook —Å–∏–º—É–ª—è—Ü–∏–∏
    try:
        result3 = await test_webhook_simulation()
        results.append(("Webhook Simulation", result3))
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ webhook: {e}")
        results.append(("Webhook Simulation", False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüèÅ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===")
    all_passed = True
    
    for test_name, passed in results:
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        print(f"{status} {test_name}")
        if not passed:
            all_passed = False
    
    print(f"\n{'üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!' if all_passed else '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•'}")
    
    if all_passed:
        print("\nüöÄ FAL AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö FAL AI")
        print("   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö")
    else:
        print("\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
    
    return all_passed


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚õî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main")
        sys.exit(1) 