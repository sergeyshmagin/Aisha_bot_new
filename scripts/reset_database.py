#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–í–ù–ò–ú–ê–ù–ò–ï: –í–°–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´!
"""
import asyncio
import asyncpg
from app.core.config import settings
from app.database.models import Base
from sqlalchemy import create_engine
from sqlalchemy.exc import OperationalError


async def reset_database():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î"""
    print("üî• –ù–∞—á–∏–Ω–∞—é —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        conn = await asyncpg.connect(
            user=settings.POSTGRES_USER,
            password=settings.POSTGRES_PASSWORD,
            host=settings.POSTGRES_HOST,
            port=settings.POSTGRES_PORT,
            database=settings.POSTGRES_DB
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        tables = await conn.fetch("""
            SELECT tablename FROM pg_tables 
            WHERE schemaname = 'public' 
            AND tablename != 'pg_stat_statements'
        """)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  - {table['tablename']}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        for table in tables:
            table_name = table['tablename']
            await conn.execute(f'DROP TABLE IF EXISTS "{table_name}" CASCADE')
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
        
        await conn.close()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ SQLAlchemy
        print("üèóÔ∏è  –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ...")
        engine = create_engine(
            settings.DATABASE_URL.replace("+asyncpg", ""),
            echo=True
        )
        
        Base.metadata.create_all(engine)
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∑–∞–Ω–æ–≤–æ")
        
        engine.dispose()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(reset_database()) 