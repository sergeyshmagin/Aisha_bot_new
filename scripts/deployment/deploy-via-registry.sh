#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è Aisha Bot —á–µ—Ä–µ–∑ Docker Registry
# –í–µ—Ä—Å–∏—è: 2.0 (2025-06-11)

set -euo pipefail

# üé® –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
readonly REGISTRY="192.168.0.4:5000"
readonly PROD_SERVER="192.168.0.10"
readonly PROD_USER="aisha"

# üöÄ –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
check_prerequisites() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v ssh &> /dev/null; then
        log_error "SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–µ—Å—Ç—Ä–∞
    if ! curl -s "http://${REGISTRY}/v2/" > /dev/null; then
        log_error "Docker Registry ${REGISTRY} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
        exit 1
    fi
    
    log_success "–í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –ø—É—à –æ–±—Ä–∞–∑–æ–≤
build_and_push() {
    local image_tag=${1:-"latest"}
    
    log_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ aisha-bot:${image_tag}..."
    docker build -t "aisha-bot:${image_tag}" -f docker/Dockerfile.bot .
    
    log_info "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–µ—Å—Ç—Ä–∞..."
    docker tag "aisha-bot:${image_tag}" "${REGISTRY}/aisha-bot:${image_tag}"
    
    log_info "–ü—É—à –≤ —Ä–µ–µ—Å—Ç—Ä ${REGISTRY}..."
    docker push "${REGISTRY}/aisha-bot:${image_tag}"
    
    log_success "–û–±—Ä–∞–∑ ${REGISTRY}/aisha-bot:${image_tag} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä"
}

# üîÑ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
deploy_to_production() {
    local image_tag=${1:-"latest"}
    
    log_info "–î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä ${PROD_SERVER}..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞
    ssh "${PROD_USER}@${PROD_SERVER}" "
        cd /opt/aisha-backend && 
        sed -i 's|image: .*aisha-bot.*|image: ${REGISTRY}/aisha-bot:${image_tag}|g' docker-compose.bot.simple.yml
    "
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
    ssh "${PROD_USER}@${PROD_SERVER}" "
        cd /opt/aisha-backend && 
        docker pull ${REGISTRY}/aisha-bot:${image_tag}
    "
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    ssh "${PROD_USER}@${PROD_SERVER}" "
        cd /opt/aisha-backend && 
        docker-compose -f docker-compose.bot.simple.yml down &&
        docker-compose -f docker-compose.bot.simple.yml up -d
    "
    
    log_success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
check_health() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh "${PROD_USER}@${PROD_SERVER}" "
        cd /opt/aisha-backend && 
        docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'
    "
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
    ssh "${PROD_USER}@${PROD_SERVER}" "
        cd /opt/aisha-backend && 
        docker logs aisha-bot-primary --tail 10
    "
}

# üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
üöÄ –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è Aisha Bot —á–µ—Ä–µ–∑ Docker Registry

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò] [–¢–ï–ì]

–û–ü–¶–ò–ò:
  --build-only     –¢–æ–ª—å–∫–æ —Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑
  --deploy-only    –¢–æ–ª—å–∫–æ –¥–µ–ø–ª–æ–π (–±–µ–∑ —Å–±–æ—Ä–∫–∏) 
  --check-health   –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–¢–ï–ì:
  latest          –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  v1.0.0          –í–µ—Ä—Å–∏–æ–Ω–Ω—ã–π —Ç–µ–≥
  fix-123         –¢–µ–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
  $0                        # –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π —Å —Ç–µ–≥–æ–º latest
  $0 --build-only v1.0.0    # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ v1.0.0  
  $0 --deploy-only          # –¢–æ–ª—å–∫–æ –¥–µ–ø–ª–æ–π latest
  $0 --check-health         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

–°–µ—Ä–≤–µ—Ä—ã:
  Registry: ${REGISTRY}
  Production: ${PROD_USER}@${PROD_SERVER}
EOF
}

# üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local build_only=false
    local deploy_only=false
    local check_health_only=false
    local image_tag="latest"
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            --build-only)
                build_only=true
                shift
                ;;
            --deploy-only)
                deploy_only=true
                shift
                ;;
            --check-health)
                check_health_only=true
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                image_tag="$1"
                shift
                ;;
        esac
    done
    
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è Aisha Bot"
    log_info "üìã –¢–µ–≥ –æ–±—Ä–∞–∑–∞: ${image_tag}"
    log_info "üèóÔ∏è Registry: ${REGISTRY}"
    log_info "üéØ Production: ${PROD_USER}@${PROD_SERVER}"
    
    check_prerequisites
    
    if [[ "$check_health_only" == true ]]; then
        check_health
        exit 0
    fi
    
    if [[ "$deploy_only" != true ]]; then
        build_and_push "$image_tag"
    fi
    
    if [[ "$build_only" != true ]]; then
        deploy_to_production "$image_tag"
        check_health
    fi
    
    log_success "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫
main "$@" 