#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ENUM avatarstatus –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

–°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ UPPERCASE —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ lowercase,
–∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ UPPERCASE –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enum.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/clean_avatar_status_enum.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from sqlalchemy import text

async def update_avatar_statuses():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å UPPERCASE –Ω–∞ lowercase"""
    
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤...")
    
    # –ú–∞–ø–ø–∏–Ω–≥ UPPERCASE -> lowercase
    status_mapping = {
        'DRAFT': 'draft',
        'PHOTOS_UPLOADING': 'photos_uploading', 
        'READY_FOR_TRAINING': 'ready_for_training',
        'TRAINING': 'training',
        'COMPLETED': 'completed',
        'ERROR': 'error',
        'CANCELLED': 'cancelled'
    }
    
    async with get_session() as session:
        total_updated = 0
        
        for old_status, new_status in status_mapping.items():
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã —Å UPPERCASE —Å—Ç–∞—Ç—É—Å–æ–º
                query = text("""
                    UPDATE avatars 
                    SET status = :new_status 
                    WHERE status = :old_status
                """)
                
                result = await session.execute(
                    query, 
                    {"old_status": old_status, "new_status": new_status}
                )
                
                updated_count = result.rowcount
                if updated_count > 0:
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∞–≤–∞—Ç–∞—Ä–æ–≤: {old_status} -> {new_status}")
                    total_updated += updated_count
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {old_status}: {e}")
                await session.rollback()
                return False
        
        await session.commit()
        print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {total_updated}")
        return True

async def clean_enum_values():
    """
    –û–°–¢–û–†–û–ñ–ù–û: –£–¥–∞–ª—è–µ—Ç UPPERCASE –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enum.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç lowercase –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ ENUM –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    values_to_remove = [
        'DRAFT', 'PHOTOS_UPLOADING', 'READY_FOR_TRAINING', 
        'TRAINING', 'COMPLETED', 'ERROR', 'CANCELLED'
    ]
    
    async with get_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å UPPERCASE —Å—Ç–∞—Ç—É—Å–∞–º–∏
            for value in values_to_remove:
                check_query = text("SELECT COUNT(*) FROM avatars WHERE status = :status")
                result = await session.execute(check_query, {"status": value})
                count = result.scalar()
                
                if count > 0:
                    print(f"‚ùå –ù–ï–õ–¨–ó–Ø —É–¥–∞–ª–∏—Ç—å {value} - {count} –∑–∞–ø–∏—Å–µ–π –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ!")
                    return False
            
            print("‚úÖ –í—Å–µ UPPERCASE –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å")
            
            # –£–¥–∞–ª—è–µ–º UPPERCASE –∑–Ω–∞—á–µ–Ω–∏—è (PostgreSQL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP VALUE –Ω–∞–ø—Ä—è–º—É—é)
            # –ü—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å enum
            
            # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π enum
            await session.execute(text("""
                CREATE TYPE avatarstatus_new AS ENUM (
                    'draft', 'photos_uploading', 'ready_for_training',
                    'training', 'completed', 'error', 'cancelled'
                )
            """))
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–∏–ø
            await session.execute(text("""
                ALTER TABLE avatars 
                ALTER COLUMN status TYPE avatarstatus_new 
                USING status::text::avatarstatus_new
            """))
            
            # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π enum
            await session.execute(text("DROP TYPE avatarstatus"))
            
            # 4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π enum
            await session.execute(text("ALTER TYPE avatarstatus_new RENAME TO avatarstatus"))
            
            await session.commit()
            print("‚úÖ ENUM –æ—á–∏—â–µ–Ω –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ENUM: {e}")
            await session.rollback()
            return False

async def check_final_state():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ enum –∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum
        query = text("""
            SELECT enumlabel 
            FROM pg_enum 
            WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'avatarstatus')
            ORDER BY enumlabel
        """)
        
        result = await session.execute(query)
        enum_values = result.fetchall()
        
        print("üîç –ó–Ω–∞—á–µ–Ω–∏—è ENUM avatarstatus:")
        for row in enum_values:
            print(f"  ‚Ä¢ {row.enumlabel}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
        query = text("""
            SELECT status, COUNT(*) as count
            FROM avatars
            GROUP BY status
            ORDER BY count DESC
        """)
        
        result = await session.execute(query)
        status_counts = result.fetchall()
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for row in status_counts:
            print(f"  {row.status}: {row.count} –∞–≤–∞—Ç–∞—Ä–æ–≤")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üöÄ –û—á–∏—Å—Ç–∫–∞ ENUM avatarstatus –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        print("=" * 60)
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
        success = await update_avatar_statuses()
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")
            return
        
        # 2. –û—á–∏—â–∞–µ–º enum
        success = await clean_enum_values()
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ENUM")
            return
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await check_final_state()
        
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ ENUM –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 