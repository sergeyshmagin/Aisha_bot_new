#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from app.core.di import get_user_service, get_avatar_service
from sqlalchemy import text, select
from app.database.models import Avatar, User

async def debug_gallery():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π)
    async with get_session() as session:
        user_query = select(User).limit(1)
        result = await session.execute(user_query)
        user = result.scalar_one_or_none()
        
        if not user:
            print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            return
        
        print(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})')
        print(f'üì± Telegram ID: {user.telegram_id}')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã —á–µ—Ä–µ–∑ SQL
        avatars_query = text("""
            SELECT id, name, status, training_type, is_main
            FROM avatars 
            WHERE user_id = :user_id
            ORDER BY created_at DESC
        """)
        result = await session.execute(avatars_query, {"user_id": user.id})
        avatars_sql = result.fetchall()
        
        print(f'üìä –ê–≤–∞—Ç–∞—Ä—ã —á–µ—Ä–µ–∑ SQL (–≤—Å–µ–≥–æ {len(avatars_sql)}):')
        for avatar in avatars_sql:
            print(f'   ‚Ä¢ {avatar.name} - {avatar.status} ({avatar.training_type})')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        async with get_avatar_service() as avatar_service:
            avatars_service = await avatar_service.get_user_avatars_with_photos(user.id)
        
        print(f'üìä –ê–≤–∞—Ç–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–≤—Å–µ–≥–æ {len(avatars_service)}):')
        for avatar in avatars_service:
            print(f'   ‚Ä¢ {avatar.name} - {avatar.status} ({avatar.training_type})')
            print(f'     –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(avatar.photos) if avatar.photos else 0}')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä != "DRAFT"
        non_draft = [a for a in avatars_sql if a.status != 'draft']
        print(f'üìä –ù–µ-—á–µ—Ä–Ω–æ–≤–∏–∫–∏ (–¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –≥–∞–ª–µ—Ä–µ–µ): {len(non_draft)}')
        for avatar in non_draft:
            print(f'   ‚Ä¢ {avatar.name} - {avatar.status}')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ completed
        completed_only = [a for a in avatars_sql if a.status == 'completed']
        print(f'üìä –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {len(completed_only)}')
        for avatar in completed_only:
            print(f'   ‚Ä¢ {avatar.name} - {avatar.status}')

if __name__ == "__main__":
    asyncio.run(debug_gallery()) 