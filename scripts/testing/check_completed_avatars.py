#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –∏—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from sqlalchemy import text

async def check_completed_avatars():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
        result = await session.execute(text("""
            SELECT 
                id,
                name,
                status,
                training_type,
                diffusers_lora_file_url,
                finetune_id,
                trigger_phrase,
                trigger_word,
                created_at,
                training_completed_at
            FROM avatars 
            WHERE status = 'completed'
            ORDER BY created_at DESC
        """))
        
        avatars = result.fetchall()
        
        if not avatars:
            print('‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤')
            return
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(avatars)} –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤:')
        print()
        
        for i, avatar in enumerate(avatars, 1):
            print(f'üé≠ –ê–≤–∞—Ç–∞—Ä #{i}: {avatar.name}')
            print(f'   ID: {avatar.id}')
            print(f'   –°—Ç–∞—Ç—É—Å: {avatar.status}')
            print(f'   –¢–∏–ø: {avatar.training_type}')
            print(f'   –°–æ–∑–¥–∞–Ω: {avatar.created_at}')
            if avatar.training_completed_at:
                print(f'   –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {avatar.training_completed_at}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            ready_for_generation = True
            issues = []
            
            if avatar.training_type == 'PORTRAIT':
                if not avatar.diffusers_lora_file_url:
                    ready_for_generation = False
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç LoRA —Ñ–∞–π–ª")
                else:
                    print(f'   ‚úÖ LoRA —Ñ–∞–π–ª: {avatar.diffusers_lora_file_url[:50]}...')
                
                if not avatar.trigger_phrase:
                    ready_for_generation = False
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trigger_phrase")
                else:
                    print(f'   ‚úÖ Trigger phrase: {avatar.trigger_phrase}')
                    
            elif avatar.training_type == 'STYLE':
                if not avatar.finetune_id:
                    ready_for_generation = False
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç finetune_id")
                else:
                    print(f'   ‚úÖ Finetune ID: {avatar.finetune_id}')
                
                if not avatar.trigger_word:
                    ready_for_generation = False
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trigger_word")
                else:
                    print(f'   ‚úÖ Trigger word: {avatar.trigger_word}')
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            if ready_for_generation:
                print(f'   üü¢ –ì–û–¢–û–í –ö –ì–ï–ù–ï–†–ê–¶–ò–ò')
            else:
                print(f'   üî¥ –ù–ï –ì–û–¢–û–í –ö –ì–ï–ù–ï–†–ê–¶–ò–ò')
                for issue in issues:
                    print(f'      - {issue}')
            
            print()

if __name__ == "__main__":
    asyncio.run(check_completed_avatars()) 