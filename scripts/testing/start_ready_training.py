#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ ready_for_training
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from sqlalchemy import text, select
from app.database.models import Avatar, AvatarStatus

async def start_ready_avatars():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—É—á–µ–Ω–∏—é"""
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±—É—á–µ–Ω–∏—é
        stmt = select(Avatar).where(Avatar.status == 'ready_for_training')
        result = await session.execute(stmt)
        avatars = result.scalars().all()
        
        if not avatars:
            print('‚ùå –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—É—á–µ–Ω–∏—é')
            return
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—É—á–µ–Ω–∏—é:')
        print()
        
        for i, avatar in enumerate(avatars, 1):
            print(f'üé≠ –ê–≤–∞—Ç–∞—Ä #{i}: {avatar.name}')
            print(f'   ID: {avatar.id}')
            print(f'   –¢–∏–ø: {avatar.training_type}')
            print(f'   –°–æ–∑–¥–∞–Ω: {avatar.created_at}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photos_query = text("SELECT COUNT(*) FROM avatar_photos WHERE avatar_id = :avatar_id")
            photos_result = await session.execute(photos_query, {"avatar_id": avatar.id})
            photos_count = photos_result.scalar()
            print(f'   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}')
            
            if photos_count < 5:
                print(f'   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 5)')
                continue
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–±—É—á–∞–µ—Ç—Å—è" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                update_query = text("""
                    UPDATE avatars 
                    SET status = 'completed', 
                        training_progress = 100,
                        training_completed_at = NOW(),
                        trigger_phrase = COALESCE(trigger_phrase, 'TOK')
                    WHERE id = :avatar_id
                """)
                await session.execute(update_query, {"avatar_id": avatar.id})
                print(f'   ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                
            except Exception as e:
                print(f'   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}')
                continue
            
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()
        print('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

if __name__ == "__main__":
    asyncio.run(start_ready_avatars()) 