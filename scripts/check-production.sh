#!/bin/bash

# ============================================================================
# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å–æ–≤ Aisha Bot
# ============================================================================

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PRODUCTION_SERVER="192.168.0.10"
SSH_USER="aisha"
DOMAIN="aibots.kz"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
USE_SSH=true
DETAILED=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]

–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å–æ–≤ Aisha Bot

–û–ø—Ü–∏–∏:
  --local             –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ SSH)
  --detailed          –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –ª–æ–≥–∞–º–∏
  -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  $0                  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
  $0 --detailed       # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  $0 --local          # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

EOF
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --local)
                USE_SSH=false
                shift
                ;;
            --detailed)
                DETAILED=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --*)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
                log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
            *)
                log_error "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
        esac
    done
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
exec_cmd() {
    local cmd="$1"
    
    if [[ "$USE_SSH" == "true" ]]; then
        ssh -o StrictHostKeyChecking=no "$SSH_USER@$PRODUCTION_SERVER" "$cmd"
    else
        eval "$cmd"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    if [[ "$USE_SSH" == "false" ]]; then
        log_info "üìç –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        return 0
    fi
    
    log_step "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞..."
    
    if ping -c 1 -W 5 "$PRODUCTION_SERVER" >/dev/null 2>&1; then
        log_info "‚úÖ –°–µ—Ä–≤–µ—Ä $PRODUCTION_SERVER –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "‚ùå –°–µ—Ä–≤–µ—Ä $PRODUCTION_SERVER –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$SSH_USER@$PRODUCTION_SERVER" "echo 'SSH OK'" >/dev/null 2>&1; then
        log_info "‚úÖ SSH –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "‚ùå SSH –¥–æ—Å—Ç—É–ø –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    log_step "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if exec_cmd "command -v docker >/dev/null 2>&1"; then
        log_info "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log_error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if exec_cmd "docker info >/dev/null 2>&1"; then
        log_info "‚úÖ Docker —Å–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        log_error "‚ùå Docker —Å–ª—É–∂–±–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–µ–π
check_networks() {
    log_step "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–µ–π..."
    
    local networks=$(exec_cmd "docker network ls --filter name=aisha --format '{{.Name}}' 2>/dev/null || true")
    
    if echo "$networks" | grep -q "aisha_cluster"; then
        log_info "‚úÖ –°–µ—Ç—å aisha_cluster —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        log_warn "‚ö†Ô∏è –°–µ—Ç—å aisha_cluster –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    if echo "$networks" | grep -q "aisha_bot_cluster"; then
        log_info "‚úÖ –°–µ—Ç—å aisha_bot_cluster —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        log_warn "‚ö†Ô∏è –°–µ—Ç—å aisha_bot_cluster –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    log_step "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    echo ""
    log_info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    exec_cmd "docker ps --filter 'name=aisha' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' 2>/dev/null || echo '–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Aisha –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤'"
    
    echo ""
    local containers=$(exec_cmd "docker ps -a --filter 'name=aisha' --format '{{.Names}} {{.Status}}' 2>/dev/null || true")
    
    if [[ -z "$containers" ]]; then
        log_warn "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Aisha –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "$containers" | while read -r name status; do
        if echo "$status" | grep -q "Up"; then
            log_info "‚úÖ $name: –ó–∞–ø—É—â–µ–Ω"
        elif echo "$status" | grep -q "Restarting"; then
            log_error "‚ùå $name: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–ø—Ä–æ–±–ª–µ–º–∞)"
        elif echo "$status" | grep -q "Exited"; then
            log_error "‚ùå $name: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            log_warn "‚ö†Ô∏è $name: $status"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_logs() {
    if [[ "$DETAILED" != "true" ]]; then
        return
    fi
    
    log_step "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    local problem_containers=$(exec_cmd "docker ps -a --filter 'name=aisha' --format '{{.Names}} {{.Status}}' | grep -E '(Restarting|Exited)' | cut -d' ' -f1" 2>/dev/null || true)
    
    if [[ -z "$problem_containers" ]]; then
        log_info "‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return
    fi
    
    echo "$problem_containers" | while read -r container; do
        if [[ -n "$container" ]]; then
            log_info "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container:"
            echo "----------------------------------------"
            exec_cmd "docker logs $container --tail 10 2>&1" || true
            echo "----------------------------------------"
            echo ""
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log_step "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # HTTP –ø–æ—Ä—Ç 80
    if exec_cmd "curl -f -s -m 5 http://localhost/ >/dev/null 2>&1"; then
        log_info "‚úÖ HTTP (–ø–æ—Ä—Ç 80) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "‚ùå HTTP (–ø–æ—Ä—Ç 80) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # HTTPS –ø–æ—Ä—Ç 8443
    if exec_cmd "curl -f -s -k -m 5 https://localhost:8443/ >/dev/null 2>&1"; then
        log_info "‚úÖ HTTPS (–ø–æ—Ä—Ç 8443) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "‚ùå HTTPS (–ø–æ—Ä—Ç 8443) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
    if ping -c 1 -W 3 "$PRODUCTION_SERVER" >/dev/null 2>&1; then
        if curl -f -s -m 5 "http://$DOMAIN/" >/dev/null 2>&1; then
            log_info "‚úÖ –í–Ω–µ—à–Ω–∏–π HTTP –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_warn "‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π HTTP –¥–æ—Å—Ç—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
        if curl -f -s -k -m 5 "https://$DOMAIN:8443/" >/dev/null 2>&1; then
            log_info "‚úÖ –í–Ω–µ—à–Ω–∏–π HTTPS –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_warn "‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π HTTPS –¥–æ—Å—Ç—É–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    log_step "üíª –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    local stats=$(exec_cmd "docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}' --filter 'name=aisha' 2>/dev/null || true")
    
    if [[ -n "$stats" ]]; then
        echo ""
        log_info "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        echo "$stats"
    else
        log_warn "‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
show_recommendations() {
    log_step "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
    
    local has_problems=false
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local problem_containers=$(exec_cmd "docker ps -a --filter 'name=aisha' --format '{{.Names}} {{.Status}}' | grep -E '(Restarting|Exited)'" 2>/dev/null || true)
    
    if [[ -n "$problem_containers" ]]; then
        has_problems=true
        echo ""
        log_warn "üîß –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:"
        log_info "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker logs <container_name>"
        log_info "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: cd /opt/aisha-backend && docker-compose -f docker-compose.registry.yml restart"
        log_info "   ‚Ä¢ –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ: cd /opt/aisha-backend && docker-compose -f docker-compose.registry.yml down && docker-compose -f docker-compose.registry.yml up -d"
    fi
    
    if [[ "$has_problems" == "false" ]]; then
        log_info "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    fi
    
    echo ""
    log_info "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    if [[ "$USE_SSH" == "true" ]]; then
        log_info "   ‚Ä¢ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ssh $SSH_USER@$PRODUCTION_SERVER"
        log_info "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ssh $SSH_USER@$PRODUCTION_SERVER 'docker ps'"
        log_info "   ‚Ä¢ –õ–æ–≥–∏: ssh $SSH_USER@$PRODUCTION_SERVER 'docker logs <container>'"
    else
        log_info "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: docker ps"
        log_info "   ‚Ä¢ –õ–æ–≥–∏: docker logs <container>"
        log_info "   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: docker stats"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    parse_args "$@"
    
    log_info "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å–æ–≤ Aisha Bot"
    
    if [[ "$USE_SSH" == "true" ]]; then
        log_info "üéØ –°–µ—Ä–≤–µ—Ä: $PRODUCTION_SERVER"
    else
        log_info "üìç –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    fi
    
    if [[ "$DETAILED" == "true" ]]; then
        log_info "üî¨ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞"
    fi
    
    echo ""
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_server
    check_docker
    check_networks
    check_containers
    check_logs
    check_services
    check_resources
    show_recommendations
}

# –ó–∞–ø—É—Å–∫
main "$@" 