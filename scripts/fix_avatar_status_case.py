#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤

–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç UPPERCASE —Å—Ç–∞—Ç—É—Å—ã –≤ lowercase –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥—É.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/fix_avatar_status_case.py --check    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    python scripts/fix_avatar_status_case.py --fix     # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from app.core.config import settings
from sqlalchemy import text

async def check_avatar_statuses():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤...")
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        query = text("""
            SELECT status, COUNT(*) as count
            FROM avatars
            GROUP BY status
            ORDER BY count DESC
        """)
        
        result = await session.execute(query)
        status_counts = result.fetchall()
        
        print("üìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:")
        for row in status_counts:
            case_type = "UPPERCASE" if row.status.isupper() else "lowercase"
            print(f"  {row.status} ({case_type}): {row.count} –∞–≤–∞—Ç–∞—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
        uppercase_query = text("""
            SELECT id, name, status 
            FROM avatars 
            WHERE status != LOWER(status)
            ORDER BY created_at DESC
            LIMIT 10
        """)
        
        result = await session.execute(uppercase_query)
        problematic_avatars = result.fetchall()
        
        if problematic_avatars:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(problematic_avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å UPPERCASE —Å—Ç–∞—Ç—É—Å–∞–º–∏:")
            for avatar in problematic_avatars:
                print(f"  ID: {avatar.id}, –ò–º—è: {avatar.name}, –°—Ç–∞—Ç—É—Å: {avatar.status}")
        else:
            print("\n‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!")
        
        return len(problematic_avatars)

async def fix_avatar_statuses():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...")
    
    async with get_session() as session:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ UPPERCASE —Å—Ç–∞—Ç—É—Å—ã –≤ lowercase
        query = text("""
            UPDATE avatars 
            SET status = LOWER(status)
            WHERE status != LOWER(status)
        """)
        
        result = await session.execute(query)
        updated_count = result.rowcount
        await session.commit()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∞–≤–∞—Ç–∞—Ä–æ–≤")
        
        return updated_count

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤')
    parser.add_argument('--check', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã')
    parser.add_argument('--fix', action='store_true', help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã')
    
    args = parser.parse_args()
    
    if not args.check and not args.fix:
        parser.print_help()
        return
    
    try:
        if args.check:
            problematic_count = await check_avatar_statuses()
            if problematic_count > 0:
                print(f"\nüí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/fix_avatar_status_case.py --fix")
        
        elif args.fix:
            problematic_count = await check_avatar_statuses()
            if problematic_count > 0:
                print()
                updated_count = await fix_avatar_statuses()
                print()
                await check_avatar_statuses()
            else:
                print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 