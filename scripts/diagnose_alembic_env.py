#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å alembic/env.py

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ target_metadata
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

class AlembicEnvDiagnoser:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è alembic/env.py"""
    
    def __init__(self):
        self.project_root = project_root
        self.alembic_dir = self.project_root / "alembic"
        self.env_py = self.alembic_dir / "env.py"
        
    def check_env_py_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ alembic/env.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è alembic/env.py...")
        
        if self.env_py.exists():
            print("   ‚úÖ –§–∞–π–ª alembic/env.py –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print("   ‚ùå –§–∞–π–ª alembic/env.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def read_env_py(self):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ env.py"""
        try:
            with open(self.env_py, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è env.py: {e}")
            return None
    
    def check_imports(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ env.py"""
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ env.py...")
        
        required_imports = [
            ('from app.database.models import Base', '–ò–º–ø–æ—Ä—Ç Base'),
            ('from app.core.config import settings', '–ò–º–ø–æ—Ä—Ç settings'),
            ('target_metadata = Base.metadata', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ target_metadata'),
        ]
        
        issues = []
        
        for import_line, description in required_imports:
            if import_line in content:
                print(f"   ‚úÖ {description}")
            else:
                print(f"   ‚ùå {description}")
                issues.append(import_line)
        
        return issues
    
    def check_database_url_config(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é DATABASE_URL"""
        print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DATABASE_URL...")
        
        if 'settings.DATABASE_URL' in content:
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è settings.DATABASE_URL")
            return True
        elif 'config.get_main_option("sqlalchemy.url")' in content:
            print("   ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ alembic.ini")
            return False
        else:
            print("   ‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
    
    def create_fixed_env_py(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é env.py"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ env.py...")
        
        fixed_env_content = '''from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from app.core.config import settings
from app.database.models import Base

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def get_url():
    """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return settings.DATABASE_URL

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è engine
    configuration = {
        'sqlalchemy.url': get_url(),
        'sqlalchemy.poolclass': pool.NullPool,
    }

    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
'''
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_file = self.env_py.with_suffix('.py.backup')
            if self.env_py.exists():
                self.env_py.replace(backup_file)
                print(f"   üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file.name}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            with open(self.env_py, 'w', encoding='utf-8') as f:
                f.write(fixed_env_content)
            
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è env.py")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è env.py: {e}")
            return False
    
    def test_env_py_import(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ env.py –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ env.py...")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–∫ –≤ env.py
            old_path = sys.path.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫–∞–∫ –≤ env.py
            env_dir = self.alembic_dir
            sys.path.insert(0, str(env_dir.parent))
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
            from app.core.config import settings as test_settings
            print("   ‚úÖ app.core.config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            from app.database.models import Base as test_base
            print("   ‚úÖ app.database.models.Base –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = test_base.metadata
            tables = list(metadata.tables.keys())
            print(f"   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {len(tables)} —Ç–∞–±–ª–∏—Ü")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º avatars —Ç–∞–±–ª–∏—Ü—É
            if 'avatars' in metadata.tables:
                avatars_table = metadata.tables['avatars']
                columns = [col.name for col in avatars_table.columns]
                
                fal_fields = ['training_type', 'fal_request_id']
                found_fal = [f for f in fal_fields if f in columns]
                
                print(f"   üéØ FAL AI –ø–æ–ª—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {found_fal}")
                
                if found_fal:
                    print("   ‚úÖ –ú–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å FAL AI –ø–æ–ª—è–º–∏")
                    success = True
                else:
                    print("   ‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ FAL AI –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    success = False
            else:
                print("   ‚ùå –¢–∞–±–ª–∏—Ü–∞ avatars –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                success = False
            
            sys.path = old_path
            return success
            
        except Exception as e:
            sys.path = old_path
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def check_alembic_ini(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é alembic.ini"""
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ alembic.ini...")
        
        alembic_ini = self.project_root / "alembic.ini"
        
        if not alembic_ini.exists():
            print("   ‚ùå alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            with open(alembic_ini, 'r', encoding='utf-8') as f:
                ini_content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            checks = [
                ('script_location = alembic', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤'),
                ('file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s', '–®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–æ–≤'),
                ('sqlalchemy.url = postgresql', 'URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
            ]
            
            for check_line, description in checks:
                if check_line in ini_content:
                    print(f"   ‚úÖ {description}")
                else:
                    print(f"   ‚ö†Ô∏è  {description} - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ-–¥—Ä—É–≥–æ–º—É")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è alembic.ini: {e}")
            return False
    
    def run_full_diagnosis(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        print("="*60)
        print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ALEMBIC/ENV.PY")
        print("="*60)
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        env_exists = self.check_env_py_exists()
        ini_ok = self.check_alembic_ini()
        
        if not env_exists:
            print("\n‚ùå env.py –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
            self.create_fixed_env_py()
            env_exists = True
        
        # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º env.py
        if env_exists:
            content = self.read_env_py()
            if content:
                import_issues = self.check_imports(content)
                db_config_ok = self.check_database_url_config(content)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if import_issues or not db_config_ok:
                    print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(import_issues)} –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏")
                    print("üîß –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")
                    self.create_fixed_env_py()
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
        import_success = self.test_env_py_import()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*60)
        
        score = sum([env_exists, ini_ok, import_success])
        total = 3
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if score == total:
            print("üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic –≤ –ø–æ—Ä—è–¥–∫–µ!")
            print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
        elif score >= 2:
            print("‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å reset_migrations.py")
        else:
            print("‚ùå –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Alembic")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        print("="*60)
        
        return score >= 2

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnoser = AlembicEnvDiagnoser()
    diagnoser.run_full_diagnosis()

if __name__ == "__main__":
    main() 