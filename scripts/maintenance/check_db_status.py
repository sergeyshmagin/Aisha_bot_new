#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –ë–î –∏ enum
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from sqlalchemy import text

async def check_statuses():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î –∏ enum"""
    
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ avatars
        result = await session.execute(text('SELECT DISTINCT status FROM avatars ORDER BY status'))
        db_statuses = [row[0] for row in result]
        print('üìä –°—Ç–∞—Ç—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ avatars:', db_statuses)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum –≤ PostgreSQL
        result2 = await session.execute(text("""
            SELECT enumlabel 
            FROM pg_enum 
            WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'avatarstatus') 
            ORDER BY enumlabel
        """))
        enum_values = [row[0] for row in result2]
        print('üîç –ó–Ω–∞—á–µ–Ω–∏—è enum avatarstatus:', enum_values)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        db_set = set(db_statuses)
        enum_set = set(enum_values)
        
        if db_set == enum_set:
            print('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç enum')
        else:
            print('‚ùå –ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:')
            only_in_db = db_set - enum_set
            only_in_enum = enum_set - db_set
            
            if only_in_db:
                print(f'   –¢–æ–ª—å–∫–æ –≤ –ë–î: {only_in_db}')
            if only_in_enum:
                print(f'   –¢–æ–ª—å–∫–æ –≤ enum: {only_in_enum}')

if __name__ == "__main__":
    asyncio.run(check_statuses()) 