#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ENUM avatarstatus –≤ PostgreSQL

–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ enum avatarstatus:
- completed
- photos_uploading  
- ready_for_training
- cancelled

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/update_avatar_status_enum.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from app.core.config import settings
from sqlalchemy import text

async def update_avatar_status_enum():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç ENUM avatarstatus –≤ PostgreSQL"""
    
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ENUM avatarstatus –≤ PostgreSQL...")
    
    async with get_session() as session:
        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        new_values = [
            'completed',
            'photos_uploading',
            'ready_for_training', 
            'cancelled'
        ]
        
        for value in new_values:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ENUM
                query = text(f"ALTER TYPE avatarstatus ADD VALUE IF NOT EXISTS '{value}'")
                await session.execute(query)
                await session.commit()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' –≤ ENUM avatarstatus")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è '{value}': {e}")
                await session.rollback()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ENUM
        print("\nüîç –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ENUM avatarstatus:")
        query = text("""
            SELECT enumlabel 
            FROM pg_enum 
            WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'avatarstatus')
            ORDER BY enumlabel
        """)
        
        result = await session.execute(query)
        enum_values = result.fetchall()
        
        for row in enum_values:
            print(f"  ‚Ä¢ {row.enumlabel}")
        
        print(f"\nüìä –í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ ENUM: {len(enum_values)}")

async def check_avatar_statuses():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ë–î"""
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤...")
    
    async with get_session() as session:
        query = text("""
            SELECT status, COUNT(*) as count
            FROM avatars
            GROUP BY status
            ORDER BY count DESC
        """)
        
        result = await session.execute(query)
        status_counts = result.fetchall()
        
        if status_counts:
            print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for row in status_counts:
                print(f"  {row.status}: {row.count} –∞–≤–∞—Ç–∞—Ä–æ–≤")
        else:
            print("  –ê–≤–∞—Ç–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await update_avatar_status_enum()
        await check_avatar_statuses()
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ENUM –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 