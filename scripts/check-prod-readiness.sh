#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã –¥–ª—è webhook API
# =============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROD_SERVER="192.168.0.10"
PROD_USER="aisha"
REDIS_HOST="192.168.0.3"
POSTGRES_HOST="192.168.0.4"
MINIO_HOST="192.168.0.4"
REGISTRY_HOST="192.168.0.3"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_external_services() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Redis
    if command -v nc >/dev/null 2>&1; then
        if nc -zv $REDIS_HOST 6379 2>/dev/null; then
            log_success "‚úÖ Redis ($REDIS_HOST:6379) –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_error "‚ùå Redis ($REDIS_HOST:6379) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            return 1
        fi
        
        # PostgreSQL
        if nc -zv $POSTGRES_HOST 5432 2>/dev/null; then
            log_success "‚úÖ PostgreSQL ($POSTGRES_HOST:5432) –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_error "‚ùå PostgreSQL ($POSTGRES_HOST:5432) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            return 1
        fi
        
        # MinIO
        if nc -zv $MINIO_HOST 9000 2>/dev/null; then
            log_success "‚úÖ MinIO ($MINIO_HOST:9000) –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_error "‚ùå MinIO ($MINIO_HOST:9000) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            return 1
        fi
        
        # Registry
        if nc -zv $REGISTRY_HOST 5000 2>/dev/null; then
            log_success "‚úÖ Registry ($REGISTRY_HOST:5000) –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_warning "‚ö†Ô∏è Registry ($REGISTRY_HOST:5000) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
        fi
    else
        log_warning "‚ö†Ô∏è nc (netcat) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ä—Ç–æ–≤"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞
check_production_server() {
    log_info "üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ ($PROD_SERVER)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ping
    if ping -c 1 $PROD_SERVER >/dev/null 2>&1; then
        log_success "‚úÖ –°–µ—Ä–≤–µ—Ä $PROD_SERVER –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "‚ùå –°–µ—Ä–≤–µ—Ä $PROD_SERVER –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –¥–æ—Å—Ç—É–ø
    if ssh -o ConnectTimeout=10 -o BatchMode=yes $PROD_USER@$PROD_SERVER exit 2>/dev/null; then
        log_success "‚úÖ SSH –¥–æ—Å—Ç—É–ø –∫ $PROD_USER@$PROD_SERVER —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "‚ùå SSH –¥–æ—Å—Ç—É–ø –∫ $PROD_USER@$PROD_SERVER –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        log_info "üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSH –∫–ª—é—á–∏: ssh-copy-id $PROD_USER@$PROD_SERVER"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
check_docker_on_prod() {
    log_info "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker
    if ssh $PROD_USER@$PROD_SERVER "command -v docker >/dev/null 2>&1"; then
        log_success "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        DOCKER_VERSION=$(ssh $PROD_USER@$PROD_SERVER "docker --version" 2>/dev/null)
        log_info "üì¶ $DOCKER_VERSION"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ssh $PROD_USER@$PROD_SERVER "docker ps >/dev/null 2>&1"; then
            log_success "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $PROD_USER –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ Docker"
        else
            log_warning "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $PROD_USER –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ Docker"
            log_info "üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo usermod -aG docker $PROD_USER"
        fi
    else
        log_error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
    if ssh $PROD_USER@$PROD_SERVER "command -v docker-compose >/dev/null 2>&1"; then
        log_success "‚úÖ docker-compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        COMPOSE_VERSION=$(ssh $PROD_USER@$PROD_SERVER "docker-compose --version" 2>/dev/null)
        log_info "üì¶ $COMPOSE_VERSION"
    else
        log_error "‚ùå docker-compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl_certificates() {
    log_info "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    if [[ -f "ssl/aibots_kz_full.crt" ]] && [[ -f "ssl/aibots.kz.key" ]]; then
        log_success "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if command -v openssl >/dev/null 2>&1; then
            CERT_EXPIRY=$(openssl x509 -in ssl/aibots_kz_full.crt -noout -enddate 2>/dev/null | cut -d= -f2)
            log_info "üìÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: $CERT_EXPIRY"
        fi
    else
        log_error "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ ssl/"
        log_info "üí° –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
        log_info "   - ssl/aibots_kz_full.crt"
        log_info "   - ssl/aibots.kz.key"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
check_config_files() {
    log_info "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    local files=(
        "docker-compose.webhook.prod.yml"
        "docker/nginx/nginx.conf"
        "docker/Dockerfile.webhook"
        "scripts/deploy-webhook-prod.sh"
    )
    
    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            log_success "‚úÖ $file –Ω–∞–π–¥–µ–Ω"
        else
            log_error "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return 1
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
prepare_prod_directory() {
    log_info "üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ..."
    
    ssh $PROD_USER@$PROD_SERVER "mkdir -p /opt/aisha-webhook"
    ssh $PROD_USER@$PROD_SERVER "mkdir -p /opt/aisha-webhook/ssl"
    ssh $PROD_USER@$PROD_SERVER "mkdir -p /opt/aisha-webhook/logs"
    
    log_success "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "========================================"
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã"
    echo "========================================"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_external_services
    check_production_server
    check_docker_on_prod
    check_ssl_certificates
    check_config_files
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    prepare_prod_directory
    
    echo "========================================"
    log_success "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: ./scripts/deploy-webhook-prod.sh"
    echo "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Makefile: make -f Makefile.webhook deploy"
    echo "========================================"
}

# –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
case "${1:-}" in
    "services")
        check_external_services
        ;;
    "server")
        check_production_server
        ;;
    "docker")
        check_docker_on_prod
        ;;
    "ssl")
        check_ssl_certificates
        ;;
    "config")
        check_config_files
        ;;
    *)
        main
        ;;
esac 