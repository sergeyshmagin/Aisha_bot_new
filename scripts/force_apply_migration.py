#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SQL –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–µ–π FAL AI.

–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è Alembic, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π FAL AI.
"""
import asyncio
import asyncpg
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.config import settings

class DirectSQLMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SQL –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.db_connection = None
        
    async def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.db_connection = await asyncpg.connect(
            settings.DATABASE_URL.replace('+asyncpg', '')
        )
    
    async def disconnect_db(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_connection:
            await self.db_connection.close()
    
    async def check_current_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã avatars"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã avatars...")
        
        columns = await self.db_connection.fetch("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'avatars' 
            ORDER BY ordinal_position
        """)
        
        existing_columns = [col['column_name'] for col in columns]
        
        fal_fields = [
            'training_type', 'fal_request_id', 'learning_rate', 
            'trigger_phrase', 'steps', 'multiresolution_training',
            'subject_crop', 'create_masks', 'captioning',
            'finetune_type', 'finetune_comment', 'diffusers_lora_file_url',
            'config_file_url', 'training_logs', 'training_error', 
            'webhook_url', 'last_status_check', 'fal_response_data'
        ]
        
        existing_fal = [f for f in fal_fields if f in existing_columns]
        missing_fal = [f for f in fal_fields if f not in existing_columns]
        
        print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤ avatars: {len(existing_columns)}")
        print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ FAL –ø–æ–ª—è ({len(existing_fal)}): {existing_fal}")
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ FAL –ø–æ–ª—è ({len(missing_fal)}): {missing_fal}")
        
        return missing_fal
    
    async def create_enum_types(self):
        """–°–æ–∑–¥–∞–µ—Ç enum —Ç–∏–ø—ã –¥–ª—è FAL AI"""
        print("üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ enum —Ç–∏–ø–æ–≤...")
        
        enum_commands = [
            """
            DO $$ BEGIN
                CREATE TYPE avatartrainingtype AS ENUM ('portrait', 'style');
            EXCEPTION
                WHEN duplicate_object THEN 
                    RAISE NOTICE 'Type avatartrainingtype already exists';
            END $$;
            """,
            """
            DO $$ BEGIN
                CREATE TYPE falfinetunetype AS ENUM ('full', 'lora');
            EXCEPTION
                WHEN duplicate_object THEN 
                    RAISE NOTICE 'Type falfinetunetype already exists';
            END $$;
            """,
            """
            DO $$ BEGIN
                CREATE TYPE falpriority AS ENUM ('speed', 'quality', 'high_res_only');
            EXCEPTION
                WHEN duplicate_object THEN 
                    RAISE NOTICE 'Type falpriority already exists';
            END $$;
            """
        ]
        
        for i, command in enumerate(enum_commands, 1):
            try:
                await self.db_connection.execute(command)
                print(f"   ‚úÖ Enum —Ç–∏–ø {i}/3 —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enum —Ç–∏–ø–∞ {i}: {e}")
    
    async def add_fal_fields(self, missing_fields):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è FAL AI"""
        print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(missing_fields)} –ø–æ–ª–µ–π FAL AI...")
        
        # –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π –∏ –∏—Ö —Ç–∏–ø–æ–≤
        field_definitions = {
            'training_type': 'avatartrainingtype DEFAULT \'portrait\'',
            'fal_request_id': 'VARCHAR(255)',
            'learning_rate': 'FLOAT',
            'trigger_phrase': 'VARCHAR(100)',
            'steps': 'INTEGER',
            'multiresolution_training': 'BOOLEAN DEFAULT true',
            'subject_crop': 'BOOLEAN DEFAULT true',
            'create_masks': 'BOOLEAN DEFAULT false',
            'captioning': 'BOOLEAN DEFAULT true',
            'finetune_type': 'falfinetunetype DEFAULT \'lora\'',
            'finetune_comment': 'VARCHAR(255)',
            'diffusers_lora_file_url': 'VARCHAR(500)',
            'config_file_url': 'VARCHAR(500)',
            'training_logs': 'TEXT',
            'training_error': 'TEXT',
            'webhook_url': 'VARCHAR(500)',
            'last_status_check': 'TIMESTAMP WITH TIME ZONE',
            'fal_response_data': 'JSON DEFAULT \'{}\'::json'
        }
        
        added_count = 0
        for field in missing_fields:
            if field in field_definitions:
                field_def = field_definitions[field]
                sql = f"ALTER TABLE avatars ADD COLUMN {field} {field_def};"
                
                try:
                    await self.db_connection.execute(sql)
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field}")
                    added_count += 1
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {field}: {e}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}/{len(missing_fields)} –ø–æ–ª–µ–π")
        return added_count > 0
    
    async def create_indexes(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
        print("üìë –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        index_commands = [
            "CREATE INDEX IF NOT EXISTS ix_avatars_fal_request_id ON avatars (fal_request_id);",
            "CREATE INDEX IF NOT EXISTS ix_avatars_training_type ON avatars (training_type);",
        ]
        
        for command in index_commands:
            try:
                await self.db_connection.execute(command)
                print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    async def create_alembic_version_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É alembic_version"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã alembic_version...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É alembic_version
            await self.db_connection.execute("""
                CREATE TABLE IF NOT EXISTS alembic_version (
                    version_num VARCHAR(32) NOT NULL,
                    CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
                );
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
            migration_files = list((project_root / "alembic" / "versions").glob("*.py"))
            if migration_files:
                latest_file = max(migration_files, key=lambda x: x.name)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: timestamp_id_description.py)
                migration_id = latest_file.stem.split('_')[2]
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
                await self.db_connection.execute(
                    "INSERT INTO alembic_version (version_num) VALUES ($1) ON CONFLICT DO NOTHING",
                    migration_id
                )
                
                print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ alembic_version —Å–æ–∑–¥–∞–Ω–∞ —Å –≤–µ—Ä—Å–∏–µ–π: {migration_id}")
            else:
                print("   ‚ö†Ô∏è  –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è alembic_version: {e}")
    
    async def verify_final_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º alembic_version
        try:
            version = await self.db_connection.fetchval('SELECT version_num FROM alembic_version')
            print(f"   ‚úÖ Alembic –≤–µ—Ä—Å–∏—è: {version}")
        except Exception:
            print("   ‚ùå –¢–∞–±–ª–∏—Ü–∞ alembic_version –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è avatars
        missing_fields = await self.check_current_state()
        
        if not missing_fields:
            print("   üéâ –í—Å–µ –ø–æ–ª—è FAL AI –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            return True
        else:
            print(f"   ‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å {len(missing_fields)} –ø–æ–ª—è–º–∏")
            return False
    
    async def run_force_migration(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        print("="*60)
        print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï FAL AI –ü–û–õ–ï–ô")
        print("="*60)
        
        await self.connect_db()
        
        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            missing_fields = await self.check_current_state()
            print()
            
            if not missing_fields:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è FAL AI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
                return True
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º enum —Ç–∏–ø—ã
            await self.create_enum_types()
            print()
            
            # –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
            success = await self.add_fal_fields(missing_fields)
            print()
            
            if success:
                # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                await self.create_indexes()
                print()
                
                # –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º alembic_version
                await self.create_alembic_version_table()
                print()
            
            # –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            final_success = await self.verify_final_state()
            print()
            
            if final_success:
                print("üéâ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            
            return final_success
            
        finally:
            await self.disconnect_db()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    migrator = DirectSQLMigrator()
    await migrator.run_force_migration()

if __name__ == "__main__":
    asyncio.run(main()) 