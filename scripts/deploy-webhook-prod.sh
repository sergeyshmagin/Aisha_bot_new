#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Webhook API –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä
# –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: 192.168.0.10 (aibots.kz)
# =============================================================================

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PROD_SERVER="192.168.0.10"
PROD_USER="aisha"
INFRA_REGISTRY="192.168.0.4:5000"
PROJECT_NAME="aisha-webhook-api"
COMPOSE_FILE="docker-compose.webhook.prod.yml"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [[ ! -f "$COMPOSE_FILE" ]]; then
        log_error "–§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    if [[ ! -f "docker/Dockerfile.webhook" ]]; then
        log_error "Dockerfile –¥–ª—è webhook API –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    
    if [[ ! -f "docker/nginx/nginx.conf" ]]; then
        log_error "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞
    if ! ping -c 1 "$PROD_SERVER" &> /dev/null; then
        log_error "–ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä $PROD_SERVER –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
        exit 1
    fi
    
    log_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log_info "üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è webhook API..."
    
    # –°–±–æ—Ä–∫–∞ nginx –æ–±—Ä–∞–∑–∞
    log_info "üì¶ –°–±–æ—Ä–∫–∞ nginx reverse proxy..."
    docker build -t "${INFRA_REGISTRY}/aisha-nginx-webhook:latest" \
        -f docker/nginx/Dockerfile docker/nginx/
    
    # –°–±–æ—Ä–∫–∞ webhook API –æ–±—Ä–∞–∑–∞
    log_info "üöÄ –°–±–æ—Ä–∫–∞ webhook API..."
    docker build -t "${INFRA_REGISTRY}/aisha-webhook-api:latest" \
        -f docker/Dockerfile.webhook \
        --target production .
    
    log_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ registry
push_images() {
    log_info "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ registry..."
    
    docker push "${INFRA_REGISTRY}/aisha-nginx-webhook:latest"
    docker push "${INFRA_REGISTRY}/aisha-webhook-api:latest"
    
    log_success "–û–±—Ä–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ registry"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞
prepare_production() {
    log_info "üõ†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞..."
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    ssh "$PROD_USER@$PROD_SERVER" "mkdir -p /opt/aisha-webhook"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    log_info "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    scp "$COMPOSE_FILE" "$PROD_USER@$PROD_SERVER:/opt/aisha-webhook/"
    scp -r ssl/ "$PROD_USER@$PROD_SERVER:/opt/aisha-webhook/" || log_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
    scp .env.example "$PROD_USER@$PROD_SERVER:/opt/aisha-webhook/.env.example"
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    ssh "$PROD_USER@$PROD_SERVER" << 'EOF'
cd /opt/aisha-webhook
if [[ ! -f .env ]]; then
    echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    cp .env.example .env
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    sed -i 's/DEBUG=true/DEBUG=false/' .env
    sed -i 's/SSL_ENABLED=false/SSL_ENABLED=false/' .env
    sed -i 's/API_PORT=8000/API_PORT=8001/' .env
    
    echo "‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
fi
EOF
    
    log_success "–ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
deploy_containers() {
    log_info "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ webhook API –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω..."
    
    ssh "$PROD_USER@$PROD_SERVER" << EOF
cd /opt/aisha-webhook

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f $COMPOSE_FILE down --remove-orphans || true

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
docker pull ${INFRA_REGISTRY}/aisha-nginx-webhook:latest
docker pull ${INFRA_REGISTRY}/aisha-webhook-api:latest

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –∏–∑ registry
sed -i 's|build:|# build:|g' $COMPOSE_FILE
sed -i 's|context:|# context:|g' $COMPOSE_FILE
sed -i 's|dockerfile:|# dockerfile:|g' $COMPOSE_FILE
sed -i 's|target:|# target:|g' $COMPOSE_FILE

# –î–æ–±–∞–≤–ª—è–µ–º image –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
sed -i '/webhook-api-1:/a\\    image: ${INFRA_REGISTRY}/aisha-webhook-api:latest' $COMPOSE_FILE
sed -i '/webhook-api-2:/a\\    image: ${INFRA_REGISTRY}/aisha-webhook-api:latest' $COMPOSE_FILE
sed -i '/nginx:/a\\    image: ${INFRA_REGISTRY}/aisha-nginx-webhook:latest' $COMPOSE_FILE

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f $COMPOSE_FILE up -d

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
sleep 10
docker-compose -f $COMPOSE_FILE ps
EOF
    
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
verify_deployment() {
    log_info "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook endpoint
    log_info "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint..."
    sleep 15  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    
    if curl -f -s "https://aibots.kz:8443/health" > /dev/null; then
        log_success "‚úÖ Webhook API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    else
        log_warning "‚ö†Ô∏è  HTTPS endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º HTTP..."
        if curl -f -s "http://$PROD_SERVER/health" > /dev/null; then
            log_success "‚úÖ Webhook API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP"
        else
            log_error "‚ùå Webhook API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
            return 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    log_info "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
    ssh "$PROD_USER@$PROD_SERVER" << 'EOF'
cd /opt/aisha-webhook
echo "=== –õ–æ–≥–∏ webhook-api-1 ==="
docker-compose -f docker-compose.webhook.prod.yml logs --tail=10 webhook-api-1
echo "=== –õ–æ–≥–∏ nginx ==="
docker-compose -f docker-compose.webhook.prod.yml logs --tail=10 nginx
EOF
    
    log_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    log_info "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    ssh "$PROD_USER@$PROD_SERVER" << 'EOF'
# –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
sudo tee /etc/systemd/system/aisha-webhook-monitor.service > /dev/null << 'SERVICE'
[Unit]
Description=Aisha Webhook API Monitor
After=docker.service
Requires=docker.service

[Service]
Type=oneshot
ExecStart=/usr/bin/docker-compose -f /opt/aisha-webhook/docker-compose.webhook.prod.yml ps
ExecStartPost=/usr/bin/curl -f http://localhost:8443/health
User=aisha
WorkingDirectory=/opt/aisha-webhook

[Install]
WantedBy=multi-user.target
SERVICE

# –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á—É –¥–ª—è health check
(crontab -l 2>/dev/null; echo "*/5 * * * * curl -f http://localhost:8443/health > /dev/null || echo 'Webhook API down' | logger") | crontab -

sudo systemctl daemon-reload
EOF
    
    log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "========================================"
    echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Aisha Webhook API"
    echo "üìç –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä: $PROD_SERVER"
    echo "========================================"
    
    check_environment
    build_images
    push_images
    prepare_production
    deploy_containers
    verify_deployment
    setup_monitoring
    
    echo "========================================"
    log_success "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo "üîó Webhook URL: https://aibots.kz:8443/api/v1/avatar/status_update"
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://aibots.kz:9090"
    echo "üìã –õ–æ–≥–∏: ssh $PROD_USER@$PROD_SERVER 'cd /opt/aisha-webhook && docker-compose logs -f'"
    echo "========================================"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "build")
        build_images
        ;;
    "push")
        push_images
        ;;
    "deploy")
        deploy_containers
        ;;
    "verify")
        verify_deployment
        ;;
    "monitor")
        setup_monitoring
        ;;
    "full"|"")
        main
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [build|push|deploy|verify|monitor|full]"
        echo "  build   - –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
        echo "  push    - –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ registry"
        echo "  deploy  - –¢–æ–ª—å–∫–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        echo "  verify  - –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞"
        echo "  monitor - –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        echo "  full    - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        exit 1
        ;;
esac 