#!/bin/bash

# üöÄ –î–µ–ø–ª–æ–π Aisha Bot —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker Registry
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP registry –Ω–∞ 192.168.0.4:5000

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REGISTRY_HOST="192.168.0.4"
REGISTRY_PORT="5000"
REGISTRY_URL="${REGISTRY_HOST}:${REGISTRY_PORT}"
PROJECT_NAME="aisha"
PRODUCTION_HOST="192.168.0.10"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1"
}

log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $1" >&2
}

check_prerequisites() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Registry
    if ! curl -f "http://${REGISTRY_URL}/v2/" &>/dev/null; then
        log_error "‚ùå Docker Registry –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: http://${REGISTRY_URL}"
        exit 1
    fi
    log "‚úÖ Docker Registry –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω
    if ! ssh -o ConnectTimeout=5 aisha@${PRODUCTION_HOST} 'echo "OK"' &>/dev/null; then
        log_error "‚ùå –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${PRODUCTION_HOST}"
        exit 1
    fi
    log "‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ insecure registry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if ! docker info 2>/dev/null | grep -q "Insecure Registries:" || ! docker info 2>/dev/null | grep -A 10 "Insecure Registries:" | grep -q "${REGISTRY_URL}"; then
        log_error "‚ùå Insecure registry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: scripts/docker-registry/setup-insecure-registry.sh"
        exit 1
    fi
    log "‚úÖ Insecure registry –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

build_and_push_image() {
    local service=$1
    local version=${2:-latest}
    local image_name="${REGISTRY_URL}/${PROJECT_NAME}/${service}:${version}"
    
    log "üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ $service..."
    
    case $service in
        "bot")
            docker build -f docker/Dockerfile.bot -t "$image_name" .
            ;;
        "webhook")
            docker build -f docker/Dockerfile.webhook -t "$image_name" .
            ;;
        *)
            log_error "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service"
            return 1
            ;;
    esac
    
    log "üì§ Push –æ–±—Ä–∞–∑–∞ –≤ registry..."
    docker push "$image_name"
    
    log "‚úÖ –û–±—Ä–∞–∑ $service –≥–æ—Ç–æ–≤: $image_name"
    echo "$image_name"
}

deploy_to_production() {
    local images=("$@")
    
    log "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ..."
    
    # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
    scp scripts/production/fix-environment.sh aisha@${PRODUCTION_HOST}:/tmp/
    scp scripts/production/safe-cleanup.sh aisha@${PRODUCTION_HOST}:/tmp/
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    ssh aisha@${PRODUCTION_HOST} << EOF
        set -euo pipefail
        cd /opt/aisha-backend
        
        echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        chmod +x /tmp/fix-environment.sh
        /tmp/fix-environment.sh
        
        echo "üê≥ Pull –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        for image in ${images[@]}; do
            docker pull \$image
        done
        
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose..."
        # –û–±–Ω–æ–≤–ª—è–µ–º image —Ç–µ–≥–∏ –≤ docker-compose —Ñ–∞–π–ª–∞—Ö
        # (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sed –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        
        echo "üì¶ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.bot.registry.yml down
        docker-compose -f docker-compose.bot.registry.yml up -d
        
        echo "‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
        sleep 30
        
        echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
        docker-compose -f docker-compose.bot.registry.yml ps
EOF
    
    log "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

run_health_checks() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh aisha@${PRODUCTION_HOST} << 'EOF'
        cd /opt/aisha-backend
        
        echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
        docker-compose -f docker-compose.bot.registry.yml ps
        
        echo -e "\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ==="
        for container in $(docker-compose -f docker-compose.bot.registry.yml ps -q); do
            container_name=$(docker inspect --format '{{.Name}}' $container | sed 's/^.//')
            echo "--- –õ–æ–≥–∏ $container_name (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫) ---"
            docker logs $container --tail 5 2>&1 | head -5
        done
        
        echo -e "\n=== –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ==="
        nc -z 192.168.0.4 5432 && echo "‚úÖ PostgreSQL" || echo "‚ùå PostgreSQL"
        nc -z 192.168.0.3 6379 && echo "‚úÖ Redis" || echo "‚ùå Redis"
        nc -z 192.168.0.4 5000 && echo "‚úÖ Docker Registry" || echo "‚ùå Docker Registry"
EOF
}

show_deployment_info() {
    log "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
    
    echo "üåê Registry: http://${REGISTRY_URL}"
    echo "üñ•Ô∏è  Registry UI: http://${REGISTRY_HOST}:8080"
    echo "üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω: ${PRODUCTION_HOST}"
    echo ""
    echo "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "  ‚Ä¢ –õ–æ–≥–∏: ssh aisha@${PRODUCTION_HOST} 'cd /opt/aisha-backend && docker-compose -f docker-compose.bot.registry.yml logs -f'"
    echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ssh aisha@${PRODUCTION_HOST} 'cd /opt/aisha-backend && docker-compose -f docker-compose.bot.registry.yml ps'"
    echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ssh aisha@${PRODUCTION_HOST} 'cd /opt/aisha-backend && docker-compose -f docker-compose.bot.registry.yml restart'"
}

main() {
    local services=("${@:-bot}")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–ø–ª–æ–∏–º —Ç–æ–ª—å–∫–æ bot
    local version=$(date +%Y%m%d_%H%M%S)
    
    log "üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è Aisha Bot"
    log "üì¶ –°–µ—Ä–≤–∏—Å—ã: ${services[*]}"
    log "üè∑Ô∏è  –í–µ—Ä—Å–∏—è: $version"
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_prerequisites
    
    # –°–±–æ—Ä–∫–∞ –∏ push –æ–±—Ä–∞–∑–æ–≤
    local built_images=()
    for service in "${services[@]}"; do
        image=$(build_and_push_image "$service" "$version")
        built_images+=("$image")
    done
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    deploy_to_production "${built_images[@]}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    run_health_checks
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    show_deployment_info
    
    log "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 