#!/bin/bash

# ============================================================================
# –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Aisha Bot
# –í–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

PROD_SERVER="192.168.0.10"
PROD_USER="aisha"
PROJECT_DIR="/opt/aisha-backend"

log_info "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Aisha Bot"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
setup_log_monitoring() {
    log_info "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
    cd /opt/aisha-backend
    
    echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
    cat > scripts/production/monitor-errors.sh << 'MONITOR_EOF'
#!/bin/bash

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö Aisha Bot
echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ Aisha Bot"
echo "Press Ctrl+C to stop"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤
show_logs() {
    docker logs "$1" --tail 0 -f 2>&1 | while read line; do
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        
        if echo "$line" | grep -qi "error\|exception\|traceback\|failed"; then
            echo -e "\033[0;31m[$timestamp] [$1] $line\033[0m"
        elif echo "$line" | grep -qi "transcrib"; then
            echo -e "\033[0;33m[$timestamp] [$1] $line\033[0m"
        elif echo "$line" | grep -qi "warning\|warn"; then
            echo -e "\033[1;33m[$timestamp] [$1] $line\033[0m"
        elif echo "$line" | grep -qi "info"; then
            echo -e "\033[0;32m[$timestamp] [$1] $line\033[0m"
        else
            echo "[$timestamp] [$1] $line"
        fi
    done
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è bot-primary –∏ worker
show_logs "aisha-bot-primary" &
show_logs "aisha-worker-1" &

wait
MONITOR_EOF

    chmod +x scripts/production/monitor-errors.sh
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    cat > scripts/production/check-transcription.sh << 'TRANSCRIBE_EOF'
#!/bin/bash

echo "üéôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫)"
echo "================================================"

echo ""
echo "üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ primary bot:"
docker logs aisha-bot-primary --tail 100 | grep -E -i "(transcrib|audio|voice|speech)" --color=always || echo "–ù–µ—Ç –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"

echo ""
echo "üîç –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫:"
docker logs aisha-bot-primary --tail 50 | grep -E -i "(error|exception|failed)" --color=always || echo "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"

echo ""
echo "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ primary bot:"
docker logs aisha-bot-primary --tail 10

echo ""
echo "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ worker:"
docker logs aisha-worker-1 --tail 5

echo ""
echo "üìà –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E "(bot|worker)"

echo ""
echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ storage:"
if docker exec aisha-bot-primary ls -la /app/storage/temp/ 2>/dev/null; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø –∫ storage –≤ –ø–æ—Ä—è–¥–∫–µ"
else
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ storage"
fi

echo ""
echo "üîß –î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   ./scripts/production/monitor-errors.sh"
TRANSCRIBE_EOF

    chmod +x scripts/production/check-transcription.sh
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å –ª–æ–≥–∞–º–∏
    cat > scripts/production/restart-with-logs.sh << 'RESTART_EOF'
#!/bin/bash

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ª–æ–≥–æ–≤"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.bot.simple.yml down

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ª–æ–≥–∞–º–∏
echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.bot.simple.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
echo "‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (15 —Å–µ–∫—É–Ω–¥)..."
sleep 15

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Status}}"

echo ""
echo "üìã –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤..."
exec ./scripts/production/monitor-errors.sh
RESTART_EOF

    chmod +x scripts/production/restart-with-logs.sh
    
    echo "‚úÖ –°–∫—Ä–∏–ø—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω—ã:"
    echo "   üìä scripts/production/monitor-errors.sh - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "   üéôÔ∏è scripts/production/check-transcription.sh - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"
    echo "   üîÑ scripts/production/restart-with-logs.sh - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"

EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
improve_logging_config() {
    log_info "üîß –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ config.py
    cat > /tmp/logging_patch.py << 'PATCH_EOF'
# –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è app/core/config.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å Settings)
LOG_LEVEL: str = Field(default="DEBUG", env="LOG_LEVEL")  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ DEBUG
ENABLE_SQL_LOGGING: bool = Field(default=True, env="ENABLE_SQL_LOGGING")
ENABLE_TELEGRAM_LOGGING: bool = Field(default=True, env="ENABLE_TELEGRAM_LOGGING")
ENABLE_TRANSCRIPTION_LOGGING: bool = Field(default=True, env="ENABLE_TRANSCRIPTION_LOGGING")
LOG_TO_FILE: bool = Field(default=True, env="LOG_TO_FILE")
LOG_FILE_PATH: str = Field(default="/app/logs/aisha-bot.log", env="LOG_FILE_PATH")
LOG_ROTATION_SIZE: str = Field(default="10MB", env="LOG_ROTATION_SIZE")
LOG_RETENTION_DAYS: int = Field(default=7, env="LOG_RETENTION_DAYS")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
ENABLE_DETAILED_ERROR_LOGGING: bool = Field(default=True, env="ENABLE_DETAILED_ERROR_LOGGING")
LOG_STACK_TRACES: bool = Field(default=True, env="LOG_STACK_TRACES")
TELEGRAM_ERROR_NOTIFICATION: bool = Field(default=False, env="TELEGRAM_ERROR_NOTIFICATION")

PATCH_EOF

    log_info "üíæ –ü–∞—Ç—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ /tmp/logging_patch.py"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
create_detailed_logger() {
    log_info "üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    cat > /tmp/detailed_logger.py << 'LOGGER_EOF'
"""
–ú–æ–¥—É–ª—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Aisha Bot
–í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –æ—à–∏–±–æ–∫
"""

import logging
import sys
import traceback
from pathlib import Path
from typing import Optional
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class DetailedFormatter(logging.Formatter):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    COLORS = {
        'DEBUG': '\033[0;36m',    # Cyan
        'INFO': '\033[0;32m',     # Green
        'WARNING': '\033[1;33m',  # Yellow
        'ERROR': '\033[0;31m',    # Red
        'CRITICAL': '\033[1;31m', # Bold Red
    }
    RESET = '\033[0m'
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        if hasattr(record, 'use_color') and record.use_color:
            color = self.COLORS.get(record.levelname, '')
            record.levelname = f"{color}{record.levelname}{self.RESET}"
            record.msg = f"{color}{record.msg}{self.RESET}"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—à–∏–±–æ–∫
        if record.levelno >= logging.ERROR:
            if record.exc_info:
                record.msg = f"{record.msg}\n{'='*50}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exception(*record.exc_info)}"
        
        return super().format(record)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
def setup_transcription_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    logger = logging.getLogger('transcription')
    logger.setLevel(logging.DEBUG)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.DEBUG)
    
    formatter = DetailedFormatter(
        '%(asctime)s - üéôÔ∏è TRANSCRIPTION - %(levelname)s - %(message)s'
    )
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    console_handler.addFilter(lambda record: setattr(record, 'use_color', True) or True)
    
    logger.addHandler(console_handler)
    
    return logger

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
def setup_error_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫"""
    logger = logging.getLogger('errors')
    logger.setLevel(logging.ERROR)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = logging.StreamHandler(sys.stderr)
    console_handler.setLevel(logging.ERROR)
    
    formatter = DetailedFormatter(
        '%(asctime)s - ‚ùå ERROR - %(name)s - %(levelname)s - %(message)s'
    )
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    console_handler.addFilter(lambda record: setattr(record, 'use_color', True) or True)
    
    logger.addHandler(console_handler)
    
    return logger

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
def log_exception_with_context(logger, message: str, exception: Exception, context: Optional[dict] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    error_msg = f"{message}\n"
    error_msg += f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(exception).__name__}\n"
    error_msg += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(exception)}\n"
    
    if context:
        error_msg += "–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n"
        for key, value in context.items():
            error_msg += f"  {key}: {value}\n"
    
    logger.error(error_msg, exc_info=True)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def log_errors(logger_name: str = 'errors'):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    def decorator(func):
        async def async_wrapper(*args, **kwargs):
            logger = logging.getLogger(logger_name)
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                context = {
                    'function': func.__name__,
                    'args': str(args)[:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    'kwargs': str(kwargs)[:200]
                }
                log_exception_with_context(
                    logger, 
                    f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}", 
                    e, 
                    context
                )
                raise
        
        def sync_wrapper(*args, **kwargs):
            logger = logging.getLogger(logger_name)
            try:
                return func(*args, **kwargs)
            except Exception as e:
                context = {
                    'function': func.__name__,
                    'args': str(args)[:200],
                    'kwargs': str(kwargs)[:200]
                }
                log_exception_with_context(
                    logger, 
                    f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}", 
                    e, 
                    context
                )
                raise
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    return decorator

LOGGER_EOF

    log_info "üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω –≤ /tmp/detailed_logger.py"
}

# –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
setup_log_monitoring
improve_logging_config
create_detailed_logger

log_info "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
log_info ""
log_info "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
log_info "1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –≤ –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
log_info "2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
log_info "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
log_info "4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ./scripts/production/monitor-errors.sh"
log_info ""
log_info "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:"
log_info "   ssh aisha@192.168.0.10 'cd /opt/aisha-backend && ./scripts/production/check-transcription.sh'" 