#!/bin/bash

# ============================================================================
# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Webhook —Å–µ—Ä–≤–∏—Å–∞–º–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
# –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ webhook –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç bot
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

PROD_SERVER="192.168.0.10"
PROD_USER="aisha"
PROD_DIR="/opt/aisha-backend"

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
webhook_status() {
    log_info "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
echo "=== –°—Ç–∞—Ç—É—Å Webhook –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(webhook|nginx)" || echo "Webhook –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo ""
echo "=== –õ–æ–≥–∏ webhook-api-1 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫) ==="
docker logs aisha-webhook-api-1 --tail 5 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"

echo ""  
echo "=== –õ–æ–≥–∏ webhook-api-2 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫) ==="
docker logs aisha-webhook-api-2 --tail 5 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"

echo ""
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ ==="
netstat -tlnp | grep -E ":80|:443|:8001|:8002" || echo "–ü–æ—Ä—Ç—ã –Ω–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—é—Ç—Å—è"
EOF
}

webhook_logs() {
    local service=${1:-"all"}
    
    if [ "$service" = "all" ]; then
        log_info "üìã –õ–æ–≥–∏ –≤—Å–µ—Ö webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
        ssh ${PROD_USER}@${PROD_SERVER} "cd ${PROD_DIR} && docker-compose -f docker-compose.webhook.prod.yml logs -f"
    else
        log_info "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: $service"
        ssh ${PROD_USER}@${PROD_SERVER} "cd ${PROD_DIR} && docker-compose -f docker-compose.webhook.prod.yml logs -f $service"
    fi
}

webhook_restart() {
    log_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
cd /opt/aisha-backend

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.webhook.prod.yml down

echo "üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.webhook.prod.yml up -d

echo "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (15 —Å–µ–∫—É–Ω–¥)..."
sleep 15

echo "üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(webhook|nginx)"
EOF
}

webhook_update() {
    log_info "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ webhook –æ–±—Ä–∞–∑–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
cd /opt/aisha-backend

echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker-compose -f docker-compose.webhook.prod.yml pull

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –Ω–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏..."
docker-compose -f docker-compose.webhook.prod.yml up -d

echo "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (20 —Å–µ–∫—É–Ω–¥)..."
sleep 20

echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E "(webhook|nginx)"
EOF
}

webhook_stop() {
    log_warn "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
cd /opt/aisha-backend
docker-compose -f docker-compose.webhook.prod.yml down
echo "‚úÖ Webhook —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
EOF
}

webhook_start() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
cd /opt/aisha-backend
docker-compose -f docker-compose.webhook.prod.yml up -d
echo "‚úÖ Webhook —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
EOF
}

webhook_health() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
echo "=== Health Check ==="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook-api-1
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook-api-1..."
if curl -s -f http://localhost:8001/health > /dev/null; then
    echo "‚úÖ webhook-api-1: OK"
else
    echo "‚ùå webhook-api-1: FAILED"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook-api-2  
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook-api-2..."
if curl -s -f http://localhost:8002/health > /dev/null; then
    echo "‚úÖ webhook-api-2: OK"
else
    echo "‚ùå webhook-api-2: FAILED"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx..."
if curl -s -f http://localhost/health > /dev/null; then
    echo "‚úÖ nginx: OK"
else
    echo "‚ùå nginx: FAILED"
fi

echo ""
echo "=== –ü–æ—Ä—Ç—ã ==="
netstat -tlnp | grep -E ":80|:8001|:8002" | head -10
EOF
}

bot_status_for_webhook() {
    log_info "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å bot —Å–µ—Ä–≤–∏—Å–∞–º–∏..."
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
echo "=== Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã) ==="
docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(bot|worker)" || echo "‚úÖ Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

echo ""
echo "=== –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ==="
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"

echo ""
echo "=== –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ==="
docker network ls | grep -E "(aisha|webhook)"
EOF
}

# –£–¥–∞–ª—è–µ–º bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—Ä–æ–¥–∞–∫—à–Ω (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è webhook-only —Ä–µ–∂–∏–º–∞)
remove_bot_from_prod() {
    log_warn "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –ø—Ä–æ–¥–∞–∫—à–Ω..."
    
    read -p "$(echo -e ${YELLOW}–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å bot —Å –ø—Ä–æ–¥–∞–∫—à–Ω? [y/N]: ${NC})" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        return 0
    fi
    
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
cd /opt/aisha-backend

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.bot.simple.yml down 2>/dev/null || true

echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker rm -f aisha-bot-primary aisha-worker-1 2>/dev/null || true

echo "üßπ –û—á–∏—Å—Ç–∫–∞ bot –æ–±—Ä–∞–∑–æ–≤..."
docker image rm 192.168.0.4:5000/aisha/bot:latest 2>/dev/null || true

echo "‚úÖ Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã —Å –ø—Ä–æ–¥–∞–∫—à–Ω"
echo "üìä –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker ps --format "table {{.Names}}\t{{.Status}}"
EOF
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Webhook —Å–µ—Ä–≤–∏—Å–∞–º–∏ Aisha"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook:"
    echo "  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å webhook —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs [all]  - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (all - –≤—Å–µ—Ö, –∏–ª–∏ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞)"
    echo "  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å webhook —Å–µ—Ä–≤–∏—Å—ã"
    echo "  update      - –û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "  stop        - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ webhook —Å–µ—Ä–≤–∏—Å—ã"
    echo "  start       - –ó–∞–ø—É—Å—Ç–∏—Ç—å webhook —Å–µ—Ä–≤–∏—Å—ã"
    echo "  health      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:"
    echo "  bot-status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å bot (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω)"
    echo "  remove-bot  - –£–¥–∞–ª–∏—Ç—å bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—Ä–æ–¥–∞–∫—à–Ω"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 status                # –°—Ç–∞—Ç—É—Å webhook"
    echo "  $0 logs webhook-api-1    # –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  $0 health               # Health check"
    echo "  $0 remove-bot           # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ webhook-only —Ä–µ–∂–∏–º—É"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "status")
        webhook_status
        ;;
    "logs")
        webhook_logs "$2"
        ;;
    "restart")
        webhook_restart
        ;;
    "update")
        webhook_update
        ;;
    "stop")
        webhook_stop
        ;;
    "start")
        webhook_start
        ;;
    "health")
        webhook_health
        ;;
    "bot-status")
        bot_status_for_webhook
        ;;
    "remove-bot")
        remove_bot_from_prod
        ;;
    *)
        show_help
        ;;
esac 