#!/bin/bash

# ============================================================================
# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è Aisha Bot —á–µ—Ä–µ–∑ Docker Registry (v2.0)
# –£–ª—É—á—à–µ–Ω–∏—è:
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–∏
# - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# - –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—è
# - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REGISTRY="192.168.0.4:5000"
IMAGE_NAME="aisha/bot"
PROD_SERVER="192.168.0.10"
PROD_USER="aisha"
PROD_DIR="/opt/aisha-backend"
DOCKER_NETWORK="aisha_bot_cluster"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
SKIP_LOCAL_TEST=false
SKIP_BUILD=false
FORCE_REBUILD=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-test)
            SKIP_LOCAL_TEST=true
            shift
            ;;
        --skip-build)
            SKIP_BUILD=true
            shift
            ;;
        --force-rebuild)
            FORCE_REBUILD=true
            shift
            ;;
        --help|-h)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
            echo "OPTIONS:"
            echo "  --skip-test      –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            echo "  --skip-build     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑)"
            echo "  --force-rebuild  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞"
            echo "  --help, -h       –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            exit 1
            ;;
    esac
done

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ git –∏–ª–∏ timestamp
get_version() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º short commit hash
        VERSION=$(git rev-parse --short HEAD)
        if [ -n "$(git status --porcelain)" ]; then
            VERSION="${VERSION}-dirty"
        fi
    else
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp
        VERSION=$(date +%Y%m%d-%H%M%S)
    fi
    echo $VERSION
}

VERSION=$(get_version)
FULL_IMAGE="${REGISTRY}/${IMAGE_NAME}:${VERSION}"
LATEST_IMAGE="${REGISTRY}/${IMAGE_NAME}:latest"

log_info "üöÄ –î–µ–ø–ª–æ–π Aisha Bot —á–µ—Ä–µ–∑ Docker Registry v2.0"
log_info "üì¶ –û–±—Ä–∞–∑: ${FULL_IMAGE}"
log_info "üè∑Ô∏è –í–µ—Ä—Å–∏—è: ${VERSION}"
echo ""

# ============================================================================
# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================================================================

check_environment() {
    log_step "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ registry
    if ! docker pull ${REGISTRY}/hello-world:latest 2>/dev/null; then
        log_warn "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ registry ${REGISTRY}"
        log_info "–ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä—É
    if ! ssh -o ConnectTimeout=5 ${PROD_USER}@${PROD_SERVER} "echo 'SSH connected'" &>/dev/null; then
        log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä—É ${PROD_SERVER}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º Docker —Å–µ—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
    log_info "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–µ..."
    ssh ${PROD_USER}@${PROD_SERVER} << EOF
if ! docker network ls | grep -q "${DOCKER_NETWORK}"; then
    echo "–°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–∏ ${DOCKER_NETWORK} —Å –ø–æ–¥—Å–µ—Ç—å—é..."
    docker network create --subnet=172.26.0.0/16 ${DOCKER_NETWORK}
    echo "‚úÖ –°–µ—Ç—å ${DOCKER_NETWORK} —Å–æ–∑–¥–∞–Ω–∞"
else
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Å–µ—Ç—å
    NETWORK_INFO=\$(docker network inspect ${DOCKER_NETWORK} 2>/dev/null | grep -o '"Subnet": "[^"]*"' | head -1)
    if [ -z "\$NETWORK_INFO" ]; then
        echo "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ ${DOCKER_NETWORK} —Å –ø–æ–¥—Å–µ—Ç—å—é..."
        docker network rm ${DOCKER_NETWORK}
        docker network create --subnet=172.26.0.0/16 ${DOCKER_NETWORK}
        echo "‚úÖ –°–µ—Ç—å ${DOCKER_NETWORK} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–¥—Å–µ—Ç—å—é"
    else
        echo "‚úÖ –°–µ—Ç—å ${DOCKER_NETWORK} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –ø–æ–¥—Å–µ—Ç—å—é"
    fi
fi
EOF
    
    log_info "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
}

# ============================================================================
# –®–∞–≥ 2: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ============================================================================

local_test() {
    if [ "$SKIP_LOCAL_TEST" = true ]; then
        log_info "‚è≠Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
        return 0
    fi
    
    log_step "2Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ dev –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö dev –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.bot.dev.yml down || true
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    log_info "üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    if [ "$FORCE_REBUILD" = true ]; then
        docker-compose -f docker-compose.bot.dev.yml build --no-cache aisha-bot-dev
    else
        docker-compose -f docker-compose.bot.dev.yml build aisha-bot-dev
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    log_info "üß™ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    docker-compose -f docker-compose.bot.dev.yml up -d
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    log_info "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (30 —Å–µ–∫—É–Ω–¥)..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    if ! docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(aisha-bot-dev|aisha-worker-dev)"; then
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å"
        docker-compose -f docker-compose.bot.dev.yml logs
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    log_info "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
    if docker-compose -f docker-compose.bot.dev.yml logs --tail 50 | grep -i "critical\|fatal\|error" | grep -v "TelegramNetworkError\|Request timeout\|Token is invalid"; then
        log_warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
    
    log_info "‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    echo ""
    read -p "$(echo -e ${YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω? [y/N]: ${NC})" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        docker-compose -f docker-compose.bot.dev.yml down
        exit 0
    fi
}

# ============================================================================
# –®–∞–≥ 3: –°–±–æ—Ä–∫–∞ –∏ –ø—É—à –≤ Registry (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ============================================================================

build_and_push() {
    if [ "$SKIP_BUILD" = true ]; then
        log_info "‚è≠Ô∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑"
        return 0
    fi
    
    log_step "3Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Registry..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—Ä–∞–∑
    if [ "$FORCE_REBUILD" = false ] && docker manifest inspect ${LATEST_IMAGE} &>/dev/null; then
        log_info "üîÑ –û–±—Ä–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ registry"
        read -p "$(echo -e ${YELLOW}–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑? [y/N]: ${NC})" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑"
            return 0
        fi
    fi
    
    # –°–±–æ—Ä–∫–∞ production –æ–±—Ä–∞–∑–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    log_info "üî® –°–±–æ—Ä–∫–∞ production –æ–±—Ä–∞–∑–∞..."
    BUILD_ARGS=""
    if [ "$FORCE_REBUILD" = false ]; then
        BUILD_ARGS="--cache-from ${LATEST_IMAGE}"
    else
        BUILD_ARGS="--no-cache"
    fi
    
    docker build -f docker/Dockerfile.bot ${BUILD_ARGS} -t ${FULL_IMAGE} -t ${LATEST_IMAGE} .
    
    # –ü—É—à –æ–±—Ä–∞–∑–æ–≤ –≤ registry
    log_info "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ registry..."
    docker push ${FULL_IMAGE}
    docker push ${LATEST_IMAGE}
    
    log_info "‚úÖ –û–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ registry"
}

# ============================================================================
# –®–∞–≥ 4: –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
# ============================================================================

deploy_to_production() {
    log_step "4Ô∏è‚É£ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä..."
    
    # –°–æ–∑–¥–∞–µ–º backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log_info "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    ssh ${PROD_USER}@${PROD_SERVER} "cd ${PROD_DIR} && cp docker-compose.bot.simple.yml docker-compose.bot.simple.yml.backup.$(date +%Y%m%d-%H%M%S)" 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, webhook –æ—Å—Ç–∞–≤–ª—è–µ–º
    log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω..."
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
cd /opt/aisha-backend

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose -f docker-compose.bot.simple.yml down || true

echo "Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
EOF
    
    # –ü—É–ª–ª–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
    log_info "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω..."
    ssh ${PROD_USER}@${PROD_SERVER} "docker pull ${LATEST_IMAGE}"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log_info "üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    ssh ${PROD_USER}@${PROD_SERVER} << EOF
cd /opt/aisha-backend

# –ó–∞–ø—É—Å–∫–∞–µ–º bot —Å–µ—Ä–≤–∏—Å—ã
docker-compose -f docker-compose.bot.simple.yml up -d

echo "Bot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
EOF
    
    log_info "‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# ============================================================================
# –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è
# ============================================================================

verify_deployment() {
    log_step "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    log_info "‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω (30 —Å–µ–∫—É–Ω–¥)..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    ssh ${PROD_USER}@${PROD_SERVER} << 'EOF'
echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E "(bot|webhook)"

echo ""
echo "=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ primary bot ==="
docker logs aisha-bot-primary --tail 10 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä aisha-bot-primary –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ worker ==="
docker logs aisha-worker-1 --tail 5 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä aisha-worker-1 –Ω–µ –Ω–∞–π–¥–µ–Ω"
EOF
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
    if ssh ${PROD_USER}@${PROD_SERVER} "docker logs aisha-bot-primary --tail 20 2>/dev/null" | grep -i "critical\|fatal" | grep -v "TelegramNetworkError"; then
        log_warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö"
        log_warn "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ssh ${PROD_USER}@${PROD_SERVER} 'cd ${PROD_DIR} && docker logs aisha-bot-primary --tail 50'"
    else
        log_info "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
    
    log_info "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# ============================================================================
# –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞
# ============================================================================

cleanup() {
    log_step "6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if [ "$SKIP_LOCAL_TEST" = false ]; then
        log_info "üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose -f docker-compose.bot.dev.yml down || true
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    log_info "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -f || true
    
    log_info "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# ============================================================================
# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
# ============================================================================

main() {
    echo "üéØ –¶–µ–ª—å: –î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ ${VERSION} –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω"
    echo "üìç Registry: ${REGISTRY}"
    echo "üñ•Ô∏è –ü—Ä–æ–¥–∞–∫—à–Ω: ${PROD_SERVER}"
    echo "‚öôÔ∏è –†–µ–∂–∏–º: skip-test=${SKIP_LOCAL_TEST}, skip-build=${SKIP_BUILD}, force-rebuild=${FORCE_REBUILD}"
    echo ""
    
    check_environment
    echo ""
    
    local_test
    echo ""
    
    build_and_push
    echo ""
    
    deploy_to_production
    echo ""
    
    verify_deployment
    echo ""
    
    cleanup
    echo ""
    
    log_info "üéâ –î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ ${VERSION} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    log_info ""
    log_info "üìä –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    log_info "   ssh ${PROD_USER}@${PROD_SERVER} 'cd ${PROD_DIR} && docker logs aisha-bot-primary --tail 50'"
    log_info "   ssh ${PROD_USER}@${PROD_SERVER} 'cd ${PROD_DIR} && docker ps'"
    log_info ""
    log_info "üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑:"
    log_info "   bash scripts/production/deploy-via-registry.sh --skip-test --skip-build"
}

# –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
trap 'log_error "–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏"; cleanup; exit 1' ERR

main "$@" 