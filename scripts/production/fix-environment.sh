#!/bin/bash

# üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

set -euo pipefail

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1"
}

log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $1" >&2
}

log_warning() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [WARNING] $1" >&2
}

check_telegram_token() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot Token..."
    
    if [[ -f ".env" ]]; then
        if grep -q "TELEGRAM_BOT_TOKEN=" .env && grep "TELEGRAM_BOT_TOKEN=" .env | grep -v "^$" | grep -v "TELEGRAM_BOT_TOKEN=$"; then
            log "‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ .env"
            return 0
        else
            log_error "‚ùå Telegram —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –≤ .env"
            return 1
        fi
    else
        log_error "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

fix_telegram_token() {
    log_warning "üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:"
    echo "1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram"
    echo "2. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ .env —Ñ–∞–π–ª:"
    echo "   TELEGRAM_BOT_TOKEN=your_bot_token_here"
    echo "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo ""
    echo "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Å–µ–π—á–∞—Å? [y/N]"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞:"
        read -r token
        if [[ -n "$token" ]]; then
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
            sed -i '/^TELEGRAM_BOT_TOKEN=/d' .env 2>/dev/null || true
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            echo "TELEGRAM_BOT_TOKEN=$token" >> .env
            log "‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env"
        else
            log_error "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        fi
    fi
}

ensure_docker_networks() {
    log "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–µ–π..."
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ç–µ–π
    networks=("aisha_cluster" "aisha_bot_cluster")
    
    for network in "${networks[@]}"; do
        if ! docker network ls | grep -q "$network"; then
            log "üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ $network..."
            if [[ "$network" == "aisha_bot_cluster" ]]; then
                docker network create --subnet=172.26.0.0/16 "$network"
            else
                docker network create "$network"
            fi
            log "‚úÖ –°–µ—Ç—å $network —Å–æ–∑–¥–∞–Ω–∞"
        else
            log "‚úÖ –°–µ—Ç—å $network —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        fi
    done
}

check_required_services() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if nc -z 192.168.0.4 5432 2>/dev/null; then
        log "‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω (192.168.0.4:5432)"
    else
        log_error "‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (192.168.0.4:5432)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if nc -z 192.168.0.3 6379 2>/dev/null; then
        log "‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω (192.168.0.3:6379)"
    else
        log_error "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (192.168.0.3:6379)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Registry
    if nc -z 192.168.0.4 5000 2>/dev/null; then
        log "‚úÖ Docker Registry –¥–æ—Å—Ç—É–ø–µ–Ω (192.168.0.4:5000)"
    else
        log_error "‚ùå Docker Registry –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (192.168.0.4:5000)"
    fi
}

restart_services() {
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.bot.registry.yml down || true
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    docker-compose -f docker-compose.bot.registry.yml up -d
    
    log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

show_status() {
    log "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
    
    echo "=== Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ==="
    docker-compose -f docker-compose.bot.registry.yml ps
    
    echo -e "\n=== Docker —Å–µ—Ç–∏ ==="
    docker network ls | grep aisha || echo "–°–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    echo -e "\n=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==="
    if check_telegram_token; then
        echo "‚úÖ TELEGRAM_BOT_TOKEN: –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå TELEGRAM_BOT_TOKEN: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    echo -e "\n=== –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã ==="
    check_required_services
}

main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [[ ! -f "docker-compose.bot.registry.yml" ]]; then
        log_error "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ç–∏
    ensure_docker_networks
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if ! check_telegram_token; then
        fix_telegram_token
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    check_required_services
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    show_status
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    echo ""
    echo "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã? [y/N]"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        restart_services
        sleep 10
        show_status
    fi
    
    log "‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 