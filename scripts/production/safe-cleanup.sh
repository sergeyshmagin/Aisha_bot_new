#!/bin/bash

# üßπ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
# –£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ

set -euo pipefail

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1"
}

log_warning() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [WARNING] $1" >&2
}

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
CRITICAL_NETWORKS=("aisha_cluster" "aisha_bot_cluster" "bridge" "host" "none")

safe_cleanup_containers() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    stopped_containers=$(docker ps -aq --filter "status=exited")
    if [[ -n "$stopped_containers" ]]; then
        docker rm $stopped_containers
        log "‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    else
        log "‚ÑπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
}

safe_cleanup_images() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º dangling –æ–±—Ä–∞–∑—ã
    dangling_images=$(docker images -f "dangling=true" -q)
    if [[ -n "$dangling_images" ]]; then
        docker rmi $dangling_images
        log "‚úÖ –£–¥–∞–ª–µ–Ω—ã dangling –æ–±—Ä–∞–∑—ã"
    else
        log "‚ÑπÔ∏è  Dangling –æ–±—Ä–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
}

safe_cleanup_volumes() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes..."
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
    unused_volumes=$(docker volume ls -f "dangling=true" -q)
    if [[ -n "$unused_volumes" ]]; then
        docker volume rm $unused_volumes
        log "‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes"
    else
        log "‚ÑπÔ∏è  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
}

safe_cleanup_networks() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
    all_networks=$(docker network ls --format "{{.Name}}")
    
    for network in $all_networks; do
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
        is_critical=false
        for critical in "${CRITICAL_NETWORKS[@]}"; do
            if [[ "$network" == "$critical" ]]; then
                is_critical=true
                break
            fi
        done
        
        if [[ "$is_critical" == "false" ]]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å
            network_usage=$(docker network inspect "$network" --format "{{.Containers}}" 2>/dev/null || echo "{}")
            if [[ "$network_usage" == "{}" ]]; then
                log_warning "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π —Å–µ—Ç–∏: $network"
                docker network rm "$network" 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ç—å $network"
            else
                log "‚ÑπÔ∏è  –°–µ—Ç—å $network –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            fi
        else
            log "üîí –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å $network –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è"
        fi
    done
}

cleanup_temp_files() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –û—á–∏—â–∞–µ–º /tmp –æ—Ç –∞—Ä—Ö–∏–≤–æ–≤
    rm -f /tmp/*.tar.gz /tmp/*.zip /tmp/*.tar 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    if [[ -d "logs" ]]; then
        find logs/ -name "*.log" -mtime +7 -delete 2>/dev/null || true
    fi
    
    log "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"
}

show_cleanup_summary() {
    log "üìä –ò—Ç–æ–≥–∏ –æ—á–∏—Å—Ç–∫–∏:"
    
    echo "=== –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ==="
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
    
    echo -e "\n=== –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏ ==="
    for network in "${CRITICAL_NETWORKS[@]}"; do
        if docker network ls | grep -q "$network"; then
            echo "‚úÖ $network"
        else
            echo "‚ùå $network (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!)"
        fi
    done
    
    echo -e "\n=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ ==="
    docker system df
}

ensure_critical_networks() {
    log "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ç–µ–π..."
    
    for network in "${CRITICAL_NETWORKS[@]:0:2}"; do  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ aisha —Å–µ—Ç–∏
        if ! docker network ls | grep -q "$network"; then
            log_warning "‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å $network –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
            if [[ "$network" == "aisha_bot_cluster" ]]; then
                docker network create --subnet=172.26.0.0/16 "$network"
            else
                docker network create "$network"
            fi
            log "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å $network —Å–æ–∑–¥–∞–Ω–∞"
        fi
    done
}

main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if [[ $EUID -eq 0 ]]; then
        log_warning "‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç root, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã"
    fi
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    ensure_critical_networks
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    safe_cleanup_containers
    safe_cleanup_images
    safe_cleanup_volumes
    safe_cleanup_networks
    cleanup_temp_files
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    show_cleanup_summary
    
    log "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    log "üîí –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞—â–∏—â–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 