#!/bin/bash

# ============================================================================
# –°–∫—Ä–∏–ø—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Aisha
# –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

PROJECT_ROOT=$(pwd)

log_info "üßπ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Aisha"

# 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ä—Ö–∏–≤–∞
create_archive_structure() {
    log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞—Ä—Ö–∏–≤–∞..."
    
    mkdir -p archive/{legacy_compose,legacy_scripts,old_deployments,deprecated_configs}
    
    log_info "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ö–∏–≤–∞ —Å–æ–∑–¥–∞–Ω–∞"
}

# 2. –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ docker-compose —Ñ–∞–π–ª—ã
organize_compose_files() {
    log_info "üì¶ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è Docker Compose —Ñ–∞–π–ª–æ–≤..."
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–Ω–µ)
    ACTIVE_COMPOSE=(
        "docker-compose.bot.simple.yml"    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥–∞–∫—à–Ω
        "docker-compose.bot.local.yml"     # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∞—Ä—Ö–∏–≤
    for file in docker-compose*.yml; do
        if [[ -f "$file" ]]; then
            is_active=false
            for active in "${ACTIVE_COMPOSE[@]}"; do
                if [[ "$file" == "$active" ]]; then
                    is_active=true
                    break
                fi
            done
            
            if [[ "$is_active" == false ]]; then
                log_warn "üì¶ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∞—Ä—Ö–∏–≤: $file"
                mv "$file" "archive/legacy_compose/${file}_LEGACY"
            else
                log_info "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª: $file"
            fi
        fi
    done
    
    log_info "‚úÖ Docker Compose —Ñ–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã"
}

# 3. –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã
organize_scripts() {
    log_info "üìú –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º)
    ACTIVE_SCRIPTS=(
        "scripts/production/deploy-fixed-bot.sh"
        "scripts/production/monitor-errors.sh"
        "scripts/production/check-transcription.sh"
        "scripts/production/restart-with-logs.sh"
        "scripts/production/setup-logging.sh"
        "scripts/cleanup/organize-project.sh"
    )
    
    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    LEGACY_SCRIPTS=(
        "check-prod-readiness.sh"
        "deploy-nginx.sh"
        "deploy-to-production.sh"
        "deploy-webhook-prod.sh"
        "nginx-management.sh"
    )
    
    for script in "${LEGACY_SCRIPTS[@]}"; do
        if [[ -f "scripts/$script" ]]; then
            log_warn "üìú –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∫—Ä–∏–ø—Ç: $script"
            mv "scripts/$script" "archive/legacy_scripts/${script}_LEGACY"
        fi
    done
    
    log_info "‚úÖ –°–∫—Ä–∏–ø—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã"
}

# 4. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π README –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
create_active_files_readme() {
    log_info "üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    cat > ACTIVE_FILES.md << 'EOF'
# üöÄ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ Aisha

## üì¶ Docker Compose —Ñ–∞–π–ª—ã

### –ü—Ä–æ–¥–∞–∫—à–Ω
- `docker-compose.bot.simple.yml` - **–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª**
  - –ó–∞–ø—É—Å–∫–∞–µ—Ç aisha-bot-primary (polling) + aisha-worker-1 (background tasks)
  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Docker volumes –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º (PostgreSQL, Redis, MinIO)

### –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- `docker-compose.bot.local.yml` - **–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**
  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
  - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å–∞–º
  - –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ volumes

## üìú –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

### –ü—Ä–æ–¥–∞–∫—à–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏
- `scripts/production/deploy-fixed-bot.sh` - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
- `scripts/production/monitor-errors.sh` - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- `scripts/production/check-transcription.sh` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
- `scripts/production/restart-with-logs.sh` - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
- `scripts/production/setup-logging.sh` - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

### –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
- `scripts/cleanup/organize-project.sh` - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

## üóÇÔ∏è –ê—Ä—Ö–∏–≤

–í—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤:
- `archive/legacy_compose/` - –°—Ç–∞—Ä—ã–µ docker-compose —Ñ–∞–π–ª—ã
- `archive/legacy_scripts/` - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
- `archive/old_deployments/` - –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- `archive/deprecated_configs/` - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

## üéØ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã

### –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
```bash
# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
docker-compose -f docker-compose.bot.local.yml up -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
docker logs aisha-bot-primary-local --tail 20 -f
```

### –ü—Ä–æ–¥–∞–∫—à–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
```bash
# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
./scripts/production/deploy-fixed-bot.sh

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫
ssh aisha@192.168.0.10 'cd /opt/aisha-backend && ./scripts/production/monitor-errors.sh'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
ssh aisha@192.168.0.10 'cd /opt/aisha-backend && ./scripts/production/check-transcription.sh'
```

## üîß –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞

### –°–µ—Ä–≤–∏—Å—ã
- **PostgreSQL**: 192.168.0.4:5432
- **Redis**: 192.168.0.3:6379  
- **MinIO**: 192.168.0.4:9000
- **Docker Registry**: 192.168.0.4:5000
- **–ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä**: 192.168.0.10

### –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
- `aisha-bot-primary` - –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (polling)
- `aisha-worker-1` - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
- `aisha-webhook-api-1/2` - FAL AI webhooks

## üìä –°—Ç–∞—Ç—É—Å

‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã:
- –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã polling —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã
- Storage permissions –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã  
- Worker –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ

EOF

    log_info "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ACTIVE_FILES.md"
}

# 5. –û–±–Ω–æ–≤–ª—è–µ–º .gitignore
update_gitignore() {
    log_info "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –≤ .gitignore –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if ! grep -q "archive/" .gitignore 2>/dev/null; then
        echo "" >> .gitignore
        echo "# –ê—Ä—Ö–∏–≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤" >> .gitignore
        echo "archive/" >> .gitignore
        log_info "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω archive/ –≤ .gitignore"
    else
        log_info "‚úÖ archive/ —É–∂–µ –≤ .gitignore"
    fi
}

# 6. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º
create_quick_logs_script() {
    log_info "üì± –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º..."
    
    cat > scripts/quick-logs.sh << 'EOF'
#!/bin/bash

# –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º Aisha Bot

case "${1:-help}" in
    "prod")
        echo "üìä –õ–æ–≥–∏ –ø—Ä–æ–¥–∞–∫—à–Ω primary bot:"
        ssh aisha@192.168.0.10 "docker logs aisha-bot-primary --tail 20 -f"
        ;;
    "worker")
        echo "üîÑ –õ–æ–≥–∏ –ø—Ä–æ–¥–∞–∫—à–Ω worker:"
        ssh aisha@192.168.0.10 "docker logs aisha-worker-1 --tail 20 -f"
        ;;
    "transcription")
        echo "üéôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:"
        ssh aisha@192.168.0.10 'cd /opt/aisha-backend && ./scripts/production/check-transcription.sh'
        ;;
    "monitor")
        echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫:"
        ssh aisha@192.168.0.10 'cd /opt/aisha-backend && ./scripts/production/monitor-errors.sh'
        ;;
    "local")
        echo "üì± –õ–æ–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:"
        docker logs aisha-bot-primary-local --tail 20 -f 2>/dev/null || echo "‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        ;;
    "status")
        echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω:"
        ssh aisha@192.168.0.10 "docker ps --format 'table {{.Names}}\t{{.Status}}'"
        ;;
    *)
        echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º Aisha Bot"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  prod          - –õ–æ–≥–∏ primary bot –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω"
        echo "  worker        - –õ–æ–≥–∏ worker –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω"
        echo "  transcription - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"
        echo "  monitor       - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫"
        echo "  local         - –õ–æ–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"
        echo "  status        - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 prod       # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ primary bot"
        echo "  $0 monitor    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫"
        ;;
esac
EOF

    chmod +x scripts/quick-logs.sh
    log_info "‚úÖ –°–æ–∑–¥–∞–Ω scripts/quick-logs.sh"
}

# –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
create_archive_structure
organize_compose_files
organize_scripts
create_active_files_readme
update_gitignore
create_quick_logs_script

log_info "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
log_info ""
log_info "üìä –ò—Ç–æ–≥–∏:"
log_info "  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ docker-compose —Ñ–∞–π–ª—ã: 2"
log_info "  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scripts/"
log_info "  ‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã: –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ archive/"
log_info "  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ACTIVE_FILES.md"
log_info "  ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –ª–æ–≥–∏: scripts/quick-logs.sh"
log_info ""
log_info "üöÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
log_info "   ./scripts/quick-logs.sh [–∫–æ–º–∞–Ω–¥–∞]" 