#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

async def check_user_images():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    from app.core.database import get_session
    from app.database.models import ImageGeneration
    from sqlalchemy import select, and_, func
    
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_stmt = select(func.count(ImageGeneration.id)).where(
            ImageGeneration.user_id == '2a293064-10d8-4103-9525-02335ab93f00'
        )
        total_result = await session.execute(total_stmt)
        total_count = total_result.scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø–∞–º
        imagen4_stmt = select(func.count(ImageGeneration.id)).where(
            and_(
                ImageGeneration.user_id == '2a293064-10d8-4103-9525-02335ab93f00',
                ImageGeneration.generation_type == 'imagen4'
            )
        )
        imagen4_result = await session.execute(imagen4_stmt)
        imagen4_count = imagen4_result.scalar()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º avatar
        avatar_stmt = select(func.count(ImageGeneration.id)).where(
            and_(
                ImageGeneration.user_id == '2a293064-10d8-4103-9525-02335ab93f00',
                ImageGeneration.generation_type == 'avatar'
            )
        )
        avatar_result = await session.execute(avatar_stmt)
        avatar_count = avatar_result.scalar()
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
        print(f"   üìù –í—Å–µ–≥–æ: {total_count}")
        print(f"   üé® Imagen4: {imagen4_count}")
        print(f"   üë§ Avatar: {avatar_count}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        print("üñºÔ∏è  –ü–û–°–õ–ï–î–ù–ò–ï IMAGEN4 –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
        imagen4_images_stmt = select(ImageGeneration).where(
            and_(
                ImageGeneration.user_id == '2a293064-10d8-4103-9525-02335ab93f00',
                ImageGeneration.generation_type == 'imagen4',
                ImageGeneration.result_urls.isnot(None)
            )
        ).order_by(ImageGeneration.created_at.desc()).limit(5)
        
        result = await session.execute(imagen4_images_stmt)
        imagen4_images = result.scalars().all()
        
        if not imagen4_images:
            print("   ‚ùå Imagen4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            for i, img in enumerate(imagen4_images, 1):
                print(f"   {i}. ID: {img.id}")
                print(f"      üìÖ –î–∞—Ç–∞: {img.created_at}")
                print(f"      üìù –ü—Ä–æ–º–ø—Ç: {img.original_prompt[:50]}...")
                print(f"      üîó URL: {img.result_urls[:100] if img.result_urls else '–ù–µ—Ç'}...")
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {img.status}")
                print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        print("üîç –ü–†–û–ë–õ–ï–ú–ù–´–ï –ó–ê–ü–ò–°–ò:")
        problem_stmt = select(ImageGeneration).where(
            and_(
                ImageGeneration.user_id == '2a293064-10d8-4103-9525-02335ab93f00',
                ImageGeneration.generation_type == 'imagen4'
            )
        ).order_by(ImageGeneration.created_at.desc())
        
        result = await session.execute(problem_stmt)
        all_imagen4 = result.scalars().all()
        
        for img in all_imagen4:
            if not img.result_urls or 'example.com' in str(img.result_urls):
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å {img.id}:")
                print(f"      üìÖ –î–∞—Ç–∞: {img.created_at}")
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {img.status}")
                print(f"      üîó URLs: {img.result_urls}")
                print()

if __name__ == "__main__":
    asyncio.run(check_user_images()) 