#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PENDING –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Imagen4
"""
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

async def fix_pending_imagen4():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç PENDING –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Imagen4"""
    from app.core.database import get_session
    from app.database.models import ImageGeneration, GenerationStatus
    from sqlalchemy import select, and_
    from datetime import datetime, timezone
    
    async with get_session() as session:
        # –ò—â–µ–º PENDING Imagen4 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        stmt = select(ImageGeneration).where(
            and_(
                ImageGeneration.generation_type == 'imagen4',
                ImageGeneration.status == GenerationStatus.PENDING
            )
        ).order_by(ImageGeneration.created_at.desc())
        
        result = await session.execute(stmt)
        pending_generations = result.scalars().all()
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ PENDING –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Imagen4: {len(pending_generations)}")
        
        if not pending_generations:
            print("‚úÖ –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Imagen4 –≤ –ø–æ—Ä—è–¥–∫–µ")
            return
        
        for generation in pending_generations:
            print(f"\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id}:")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {generation.created_at}")
            print(f"   üìù –ü—Ä–æ–º–ø—Ç: {generation.original_prompt[:50]}...")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {generation.status}")
            print(f"   üîó URLs: {generation.result_urls}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if generation.created_at:
                age = datetime.now() - generation.created_at.replace(tzinfo=None)
                age_minutes = age.total_seconds() / 60
                
                print(f"   ‚è±  –í–æ–∑—Ä–∞—Å—Ç: {age_minutes:.1f} –º–∏–Ω—É—Ç")
                
                # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º –µ—ë –∑–∞–≤–∏—Å—à–µ–π
                if age_minutes > 30:
                    print(f"   ‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞ - —É–¥–∞–ª—è–µ–º")
                    await session.delete(generation)
                elif age_minutes > 10:
                    print(f"   ‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                else:
                    print(f"   ‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        choice = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {len([g for g in pending_generations if (datetime.now() - g.created_at.replace(tzinfo=None)).total_seconds() / 60 > 30])} –∑–∞–≤–∏—Å—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π? (y/N): ").strip().lower()
        
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            await session.commit()
            print("‚úÖ –ó–∞–≤–∏—Å—à–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            await session.rollback()
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def check_imagen4_buckets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é bucket'–æ–≤ –¥–ª—è Imagen4"""
    from app.core.config import settings
    from app.services.storage.minio import MinioStorage
    
    print(f"\nüóÑÔ∏è  –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò MINIO:")
    print(f"   üåê Endpoint: {settings.MINIO_ENDPOINT}")
    print(f"   üîë Access Key: {settings.MINIO_ACCESS_KEY[:5]}...")
    print(f"   üì¶ Imagen4 Bucket: {getattr(settings, 'MINIO_BUCKET_IMAGEN4', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
    print(f"   üì¶ Photos Bucket: {getattr(settings, 'MINIO_BUCKET_PHOTOS', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
    
    try:
        storage = MinioStorage()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å bucket'–æ–≤
        buckets_to_check = ['imagen4', 'generated']
        
        for bucket in buckets_to_check:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                test_data = b"test"
                test_path = f"test/{bucket}_test.txt"
                
                await storage.upload_file(bucket, test_path, test_data, "text/plain")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                await storage.delete_file(bucket, test_path)
                
                print(f"   ‚úÖ Bucket '{bucket}' –¥–æ—Å—Ç—É–ø–µ–Ω")
                
            except Exception as e:
                print(f"   ‚ùå Bucket '{bucket}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MinIO: {e}")

if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PENDING –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Imagen4\n")
    print("=" * 60)
    
    asyncio.run(fix_pending_imagen4())
    asyncio.run(check_imagen4_buckets())
    
    print("\n" + "=" * 60)
    print("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 