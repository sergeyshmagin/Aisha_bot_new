#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
"""
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

async def create_test_images():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏"""
    from app.core.database import get_session
    from app.database.models import ImageGeneration, GenerationStatus
    from app.services.generation.imagen4.imagen4_service import Imagen4Service
    from app.services.generation.imagen4.models import Imagen4Request, AspectRatio
    from app.services.generation.storage.image_storage import ImageStorage
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏\n")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_prompts = [
        ("–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏", "Beautiful sunset over mountains"),
        ("–ö–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–æ–º", "Cat playing with a ball"),
        ("–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–µ–π–∑–∞–∂", "Space landscape"),
        ("–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ –≤–µ—Å–Ω–æ–π", "Blooming garden in spring"),
        ("–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∑–∞–º–æ–∫", "Ancient castle"),
    ]
    
    aspect_ratios = [AspectRatio.SQUARE, AspectRatio.PORTRAIT_3_4, AspectRatio.LANDSCAPE_16_9]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    try:
        service = Imagen4Service()
        storage = ImageStorage()
        
        if not service.is_available():
            print("‚ùå –°–µ—Ä–≤–∏—Å Imagen4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º {len(test_prompts)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n")
        
        created_count = 0
        
        for i, (ru_prompt, en_prompt) in enumerate(test_prompts, 1):
            print(f"{i}. –°–æ–∑–¥–∞–Ω–∏–µ: '{ru_prompt}'...")
            
            try:
                async with get_session() as session:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                    generation = ImageGeneration(
                        user_id="2a293064-10d8-4103-9525-02335ab93f00",
                        generation_type="imagen4",
                        original_prompt=ru_prompt,
                        final_prompt=en_prompt,
                        aspect_ratio=aspect_ratios[i % len(aspect_ratios)].value,
                        status=GenerationStatus.PENDING
                    )
                    
                    session.add(generation)
                    await session.commit()
                    await session.refresh(generation)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    request = Imagen4Request(
                        prompt=en_prompt,
                        aspect_ratio=aspect_ratios[i % len(aspect_ratios)],
                        num_images=1
                    )
                    
                    result = await service.generate_image(request)
                    
                    if result.status.value == "completed":
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        image_urls = [img.url for img in result.response.images]
                        
                        generation.status = GenerationStatus.COMPLETED
                        generation.result_urls = image_urls
                        generation.metadata = {
                            "generation_time": result.generation_time,
                            "cost_credits": result.cost_credits,
                            "images_count": len(result.response.images)
                        }
                        
                        await session.commit()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MinIO
                        try:
                            minio_urls = await storage.save_images_to_minio(generation, image_urls)
                            if minio_urls:
                                generation.result_urls = minio_urls
                                await session.commit()
                        except Exception as storage_error:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ MinIO: {storage_error}")
                        
                        created_count += 1
                        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! ID: {generation.id}")
                        
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.error_message}")
                        generation.status = GenerationStatus.FAILED
                        generation.error_message = result.error_message
                        await session.commit()
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {created_count}/{len(test_prompts)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"   üì± –¢–µ–ø–µ—Ä—å –≥–∞–ª–µ—Ä–µ—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(create_test_images()) 