#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π Imagen4 –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

from app.core.database import get_session
from app.database.models import ImageGeneration, User, GenerationStatus
from sqlalchemy import select, delete
from app.core.logger import get_logger

logger = get_logger(__name__)

async def cleanup_test_imagen4():
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ Imagen4 –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –ó–ê–ü–ò–°–ï–ô IMAGEN4")
    print("=" * 50)
    
    try:
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Sergey
            sergey_stmt = select(User).where(User.telegram_id == "174171680")
            sergey_result = await session.execute(sergey_stmt)
            sergey = sergey_result.scalar_one_or_none()
            
            if not sergey:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Sergey –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sergey.first_name} (ID: {sergey.id})")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Imagen4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_imagen4_stmt = select(ImageGeneration).where(
                ImageGeneration.user_id == sergey.id,
                ImageGeneration.generation_type == 'imagen4'
            ).order_by(ImageGeneration.created_at.desc())
            
            all_result = await session.execute(all_imagen4_stmt)
            all_images = all_result.scalars().all()
            
            print(f"\nüìä –ù–ê–ô–î–ï–ù–û {len(all_images)} –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô IMAGEN4:")
            print("-" * 60)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            test_images = []  # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            real_images = []  # –†–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
            for i, img in enumerate(all_images, 1):
                print(f"{i:2d}. üìù {img.original_prompt[:40] if img.original_prompt else '–ë–µ–∑ –ø—Ä–æ–º–ø—Ç–∞'}...")
                print(f"    üÜî ID: {img.id}")
                print(f"    üìÖ –°–æ–∑–¥–∞–Ω–æ: {img.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"    üìä –°—Ç–∞—Ç—É—Å: {img.status}")
                print(f"    üåê URL: {img.result_urls}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
                is_test = False
                
                # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
                # 1. –°–æ–¥–µ—Ä–∂–∞—Ç fal-cdn URL (–Ω–∞—à–∏ –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ)
                if img.result_urls and any('fal-cdn.batuhan-941.workers.dev' in url for url in img.result_urls):
                    is_test = True
                    print(f"    üîç –¢–ï–°–¢–û–í–´–ô: —Å–æ–¥–µ—Ä–∂–∏—Ç fal-cdn URL")
                
                # 2. –ü—Ä–æ–º–ø—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ)
                elif img.original_prompt and img.original_prompt.lower().startswith(('beautiful', 'futuristic', 'peaceful', 'abstract', 'vintage')):
                    is_test = True
                    print(f"    üîç –¢–ï–°–¢–û–í–´–ô: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç")
                
                # 3. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–µ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                elif not img.generation_time:
                    is_test = True
                    print(f"    üîç –¢–ï–°–¢–û–í–´–ô: –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                
                if is_test:
                    test_images.append(img)
                    print(f"    ‚ùå –ü–û–ú–ï–ß–ï–ù –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø")
                else:
                    real_images.append(img)
                    print(f"    ‚úÖ –°–û–•–†–ê–ù–ò–¢–¨")
                
                print()
            
            print(f"üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(real_images)}")
            print(f"   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(test_images)}")
            
            if not test_images:
                print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            print(f"\nüìã –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:")
            for i, img in enumerate(test_images, 1):
                print(f"   {i}. {img.original_prompt[:50] if img.original_prompt else '–ë–µ–∑ –ø—Ä–æ–º–ø—Ç–∞'}...")
                print(f"      ID: {img.id}")
                print(f"      –°–æ–∑–¥–∞–Ω–æ: {img.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
            print(f"   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Imagen4")
            print(f"   –û—Å—Ç–∞–Ω–µ—Ç—Å—è {len(real_images)} —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print(f"   –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!")
            
            confirm = input(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (yes/NO): ").strip()
            
            if confirm.lower() not in ['yes', '–¥–∞']:
                print(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            deleted_count = 0
            for img in test_images:
                try:
                    await session.delete(img)
                    deleted_count += 1
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: {img.original_prompt[:40]}... (ID: {img.id})")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ID {img.id}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            print(f"\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {deleted_count}")
            print(f"   üîÑ –û—Å—Ç–∞–ª–æ—Å—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(real_images)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_stmt = select(ImageGeneration).where(
                ImageGeneration.user_id == sergey.id,
                ImageGeneration.generation_type == 'imagen4'
            )
            final_result = await session.execute(final_stmt)
            final_images = final_result.scalars().all()
            
            print(f"   üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Imagen4 –≤ –±–∞–∑–µ: {len(final_images)}")
            
            if len(final_images) == 0:
                print(f"   üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Imagen4!")
            else:
                print(f"   üí° –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
                for img in final_images:
                    print(f"      - {img.original_prompt[:40]}... ({img.created_at.strftime('%Y-%m-%d')})")
                
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(cleanup_test_imagen4()) 