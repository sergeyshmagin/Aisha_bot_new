#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
  python scripts/admin/add_balance.py <telegram_id> <amount> [reason]  # –ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  python scripts/admin/add_balance.py --list                          # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  python scripts/admin/add_balance.py --interactive                   # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python scripts/admin/add_balance.py --stats                         # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import sys
import asyncio
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent.parent))

from app.core.database import get_session
from app.services.balance_service import BalanceService
from app.core.di import get_user_service_with_session
from app.core.logger import get_logger
from app.database.models.models import User
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload

logger = get_logger(__name__)

class BalanceAdminTool:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
    
    def __init__(self):
        self.session = None
        self.user_service = None
        self.balance_service = None
    
    async def __aenter__(self):
        self.session = get_session()
        await self.session.__aenter__()
        self.user_service = get_user_service_with_session(self.session)
        self.balance_service = BalanceService(self.session)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.__aexit__(exc_type, exc_val, exc_tb)

    async def get_all_users_with_balance(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –±–∞–ª–∞–Ω—Å–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            query = select(User).options(selectinload(User.balance))
            result = await self.session.execute(query)
            users = result.scalars().all()
            
            users_data = []
            for user in users:
                try:
                    balance = await self.balance_service.get_balance(user.id)
                    users_data.append({
                        'id': user.id,
                        'telegram_id': user.telegram_id,
                        'first_name': user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏',
                        'last_name': user.last_name or '',
                        'username': user.username,
                        'balance': balance,
                        'created_at': user.created_at,
                        'language_code': user.language_code or 'ru'
                    })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                    users_data.append({
                        'id': user.id,
                        'telegram_id': user.telegram_id,
                        'first_name': user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏',
                        'last_name': user.last_name or '',
                        'username': user.username,
                        'balance': 0.0,
                        'created_at': user.created_at,
                        'language_code': user.language_code or 'ru'
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            users_data.sort(key=lambda x: x['created_at'], reverse=True)
            return users_data
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    async def show_users_list(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏"""
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = await self.get_all_users_with_balance()
        
        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print("=" * 100)
        print(f"{'‚Ññ':<3} {'Telegram ID':<12} {'–ò–º—è':<20} {'Username':<15} {'–ë–∞–ª–∞–Ω—Å':<10} {'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏':<20}")
        print("=" * 100)
        
        for i, user in enumerate(users, 1):
            full_name = f"{user['first_name']} {user['last_name']}".strip()
            username = f"@{user['username']}" if user['username'] else "‚Äî"
            balance = f"{user['balance']:.0f}"
            reg_date = user['created_at'].strftime('%d.%m.%Y %H:%M') if user['created_at'] else "‚Äî"
            
            print(f"{i:<3} {user['telegram_id']:<12} {full_name[:20]:<20} {username[:15]:<15} {balance:<10} {reg_date:<20}")
        
        print("=" * 100)
        print(f"\nüí° –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–µ–ª–∏—Ç–µ –Ω—É–∂–Ω—ã–π Telegram ID –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")

    async def show_user_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = await self.get_all_users_with_balance()
        
        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        total_users = len(users)
        users_with_balance = len([u for u in users if u['balance'] > 0])
        users_without_balance = total_users - users_with_balance
        total_balance = sum(u['balance'] for u in users)
        avg_balance = total_balance / total_users if total_users > 0 else 0
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
        top_users = sorted(users, key=lambda x: x['balance'], reverse=True)[:5]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("=" * 50)
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: {users_with_balance}")
        print(f"üÜì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞: {users_without_balance}")
        print(f"üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_balance:.0f} –º–æ–Ω–µ—Ç")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {avg_balance:.0f} –º–æ–Ω–µ—Ç")
        print("=" * 50)
        
        if top_users:
            print("\nüèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:")
            print("-" * 60)
            for i, user in enumerate(top_users[:5], 1):
                full_name = f"{user['first_name']} {user['last_name']}".strip()
                username = f"@{user['username']}" if user['username'] else ""
                print(f"{i}. {full_name} {username} ‚Äî {user['balance']:.0f} –º–æ–Ω–µ—Ç")
            print("-" * 60)

    async def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        print("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        print("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await self.get_all_users_with_balance()
        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):")
        print("-" * 80)
        for i, user in enumerate(users, 1):
            full_name = f"{user['first_name']} {user['last_name']}".strip()
            username = f"@{user['username']}" if user['username'] else ""
            balance_str = f"{user['balance']:.0f} –º–æ–Ω–µ—Ç"
            print(f"{i:2}. {full_name:<25} {username:<15} (ID: {user['telegram_id']}, –±–∞–ª–∞–Ω—Å: {balance_str})")
        
        print("-" * 80)
        
        try:
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            choice = input("\nüî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            if choice.lower() == 'q':
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                return
            
            user_index = int(choice) - 1
            if user_index < 0 or user_index >= len(users):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            selected_user = users[user_index]
            full_name = f"{selected_user['first_name']} {selected_user['last_name']}".strip()
            
            print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}")
            print(f"   Telegram ID: {selected_user['telegram_id']}")
            print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {selected_user['balance']:.0f} –º–æ–Ω–µ—Ç")
            
            # –í–≤–æ–¥ —Å—É–º–º—ã
            amount_str = input("\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ").strip()
            amount = float(amount_str)
            
            if amount <= 0:
                print("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                return
            
            # –í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã
            reason = input("üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π): ").strip()
            if not reason:
                reason = "–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print(f"\nüìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}")
            print(f"   üí∞ –°—É–º–º–∞: +{amount:.0f} –º–æ–Ω–µ—Ç")
            print(f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            print(f"   üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {selected_user['balance'] + amount:.0f} –º–æ–Ω–µ—Ç")
            
            confirm = input("\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é? (y/N): ").strip().lower()
            if confirm != 'y':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            success = await self.add_balance_to_user(
                int(selected_user['telegram_id']), 
                amount, 
                reason
            )
            
            if success:
                print("‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
                
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
        except KeyboardInterrupt:
            print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def add_balance_to_user(self, telegram_id: int, amount: float, reason: str = "–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_user_by_telegram_id(telegram_id)
            
            if not user:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = await self.balance_service.get_balance(user.id)
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            result = await self.balance_service.add_balance(
                user_id=user.id,
                amount=amount,
                description=reason
            )
            
            if result["success"]:
                new_balance = await self.balance_service.get_balance(user.id)
                full_name = f"{user.first_name} {user.last_name or ''}".strip()
                username = f"@{user.username}" if user.username else "–±–µ–∑_username"
                
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} ({username}) –ø–æ–ø–æ–ª–Ω–µ–Ω")
                print(f"üí∞ –ë—ã–ª–æ: {current_balance:.0f} –º–æ–Ω–µ—Ç")
                print(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: +{amount:.0f} –º–æ–Ω–µ—Ç")
                print(f"üíé –°—Ç–∞–ª–æ: {new_balance:.0f} –º–æ–Ω–µ—Ç")
                print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
                await self.session.commit()
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/admin/add_balance.py <telegram_id> <amount> [reason]  # –ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
        print("  python scripts/admin/add_balance.py --list                          # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  python scripts/admin/add_balance.py --interactive                   # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("  python scripts/admin/add_balance.py --stats                         # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python scripts/admin/add_balance.py 174171680 250")
        print("  python scripts/admin/add_balance.py 174171680 500 '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–º 500 –º–æ–Ω–µ—Ç'")
        print("  python scripts/admin/add_balance.py --list")
        print("  python scripts/admin/add_balance.py --interactive")
        print("  python scripts/admin/add_balance.py --stats")
        return
    
    try:
        async with BalanceAdminTool() as tool:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if sys.argv[1] == "--list":
                await tool.show_users_list()
                return
            elif sys.argv[1] == "--interactive":
                await tool.interactive_mode()
                return
            elif sys.argv[1] == "--stats":
                await tool.show_user_stats()
                return
            
            # –û–±—ã—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            if len(sys.argv) < 3:
                print("‚ùå –î–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ telegram_id –∏ —Å—É–º–º—É")
                return
            
            telegram_id = int(sys.argv[1])
            amount = float(sys.argv[2])
            reason = sys.argv[3] if len(sys.argv) > 3 else "–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            
            print(f"üîÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            print(f"üë§ Telegram ID: {telegram_id}")
            print(f"üí∞ –°—É–º–º–∞: {amount:.0f} –º–æ–Ω–µ—Ç")
            print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            print("")
            
            success = await tool.add_balance_to_user(telegram_id, amount, reason)
            
            if success:
                print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                sys.exit(1)
                
    except ValueError as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
        print("Telegram ID –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 