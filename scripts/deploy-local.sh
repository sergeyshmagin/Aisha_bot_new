#!/bin/bash

# ============================================================================
# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ Aisha Bot
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
# ============================================================================

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REGISTRY_URL="192.168.0.4:5000"
DOMAIN="aibots.kz"
IMAGE_VERSION="latest"
DEPLOY_DIR="/opt/aisha-backend"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
FORCE_PULL=false
SKIP_REGISTRY_CHECK=false
VERBOSE=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–≤–µ—Ä—Å–∏—è] [–æ–ø—Ü–∏–∏]

–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ Aisha Bot

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  –≤–µ—Ä—Å–∏—è               –í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–æ–≤ –∏–∑ registry (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)

–û–ø—Ü–∏–∏:
  --force-pull        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑—ã –∏–∑ registry
  --skip-registry     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É registry
  --verbose           –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥
  -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  $0                          # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å latest –≤–µ—Ä—Å–∏—é
  $0 v2.1.0                   # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–µ—Ä—Å–∏—é v2.1.0
  $0 v2.1.0 --force-pull      # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å v2.1.0

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - Docker registry –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ${REGISTRY_URL}
  - –û–±—Ä–∞–∑—ã –∑–∞–ø—É—à–µ–Ω—ã –≤ registry:
    ‚Ä¢ ${REGISTRY_URL}/aisha/nginx:${IMAGE_VERSION}
    ‚Ä¢ ${REGISTRY_URL}/aisha/webhook:${IMAGE_VERSION}
    ‚Ä¢ ${REGISTRY_URL}/aisha/bot:${IMAGE_VERSION}

EOF
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parse_args() {
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏
    if [[ $# -gt 0 && ! "$1" =~ ^-- ]]; then
        IMAGE_VERSION="$1"
        shift
    fi
    
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force-pull)
                FORCE_PULL=true
                shift
                ;;
            --skip-registry)
                SKIP_REGISTRY_CHECK=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --*)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
                log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
            *)
                log_error "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
        esac
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ registry
check_registry_access() {
    if [[ "$SKIP_REGISTRY_CHECK" == "true" ]]; then
        log_step "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ registry"
        return 0
    fi
    
    log_step "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker Registry..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ registry
    if nc -z 192.168.0.4 5000 2>/dev/null; then
        log_info "‚úÖ Registry $REGISTRY_URL –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "‚ùå Registry $REGISTRY_URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ registry
    local images=("nginx" "webhook" "bot")
    
    for image in "${images[@]}"; do
        local registry_path="/aisha/${image}/tags/list"
        
        if curl -f -s http://$REGISTRY_URL/v2${registry_path} | grep -q "\"${IMAGE_VERSION}\""; then
            log_info "‚úÖ ${image}:${IMAGE_VERSION} –Ω–∞–π–¥–µ–Ω –≤ registry"
        else
            log_warn "‚ö†Ô∏è ${image}:${IMAGE_VERSION} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ registry"
        fi
    done
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker
setup_docker() {
    log_step "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker..."
    if ! command -v docker >/dev/null 2>&1; then
        log_error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        log_error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: curl -fsSL https://get.docker.com | sh"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker —Å–ª—É–∂–±—ã
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker —Å–ª—É–∂–±—ã..."
    if ! sudo systemctl is-active docker >/dev/null 2>&1; then
        log_info "üöÄ –ó–∞–ø—É—Å–∫ Docker —Å–ª—É–∂–±—ã..."
        sudo systemctl start docker || {
            log_error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–ª—É–∂–±—É"
            exit 1
        }
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ insecure registry
    log_info "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ insecure registry..."
    if docker info 2>/dev/null | grep -q "$REGISTRY_URL"; then
        log_info "‚úÖ Registry $REGISTRY_URL —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Docker"
    else
        log_info "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ insecure registry..."
        sudo mkdir -p /etc/docker || true
        echo "{\"insecure-registries\": [\"$REGISTRY_URL\"]}" | sudo tee /etc/docker/daemon.json || true
        sudo systemctl restart docker || {
            log_warn "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker daemon"
            log_warn "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: sudo systemctl restart docker"
        }
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Docker
        log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Docker..."
        sleep 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Docker –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        local retries=0
        local max_retries=6
        while [[ $retries -lt $max_retries ]]; do
            if docker info >/dev/null 2>&1; then
                log_info "‚úÖ Docker —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                break
            fi
            
            log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Docker... ($((retries + 1))/$max_retries)"
            sleep 5
            ((retries++))
        done
        
        if [[ $retries -eq $max_retries ]]; then
            log_error "‚ùå Docker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
            exit 1
        fi
    fi
    
    log_info "‚úÖ Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
prepare_deploy_dir() {
    log_step "üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [[ ! -d "$DEPLOY_DIR" ]]; then
        log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $DEPLOY_DIR..."
        sudo mkdir -p "$DEPLOY_DIR" || {
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $DEPLOY_DIR"
            exit 1
        }
        sudo chown $USER:$USER "$DEPLOY_DIR" || {
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $DEPLOY_DIR"
            exit 1
        }
    else
        log_info "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $DEPLOY_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    cd "$DEPLOY_DIR"
    log_info "‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞: $DEPLOY_DIR"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–µ–π
create_networks() {
    log_step "üåê –°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–µ–π..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ç–µ–π
    docker network rm aisha_cluster aisha_bot_cluster 2>/dev/null || true
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ç–µ–π
    docker network create --driver bridge --subnet=172.25.0.0/16 aisha_cluster || true
    docker network create --driver bridge --subnet=172.26.0.0/16 aisha_bot_cluster || true
    
    log_info "‚úÖ Docker —Å–µ—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—É–ª–ª –æ–±—Ä–∞–∑–æ–≤ –∏–∑ registry
pull_images() {
    log_step "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∏–∑ registry..."
    
    local images=("nginx" "webhook" "bot")
    
    for image in "${images[@]}"; do
        local registry_image="${REGISTRY_URL}/aisha/${image}:${IMAGE_VERSION}"
        
        log_info "üì• –ó–∞–≥—Ä—É–∑–∫–∞ $registry_image..."
        
        if [[ "$FORCE_PULL" == "true" ]]; then
            docker pull $registry_image
        else
            docker pull $registry_image 2>/dev/null || true
        fi
    done
    
    log_info "‚úÖ –û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_old_containers() {
    log_step "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ docker-compose —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.registry.yml --env-file cluster.env down 2>/dev/null || true
    docker-compose -f docker-compose.bot.registry.yml --env-file cluster.env down 2>/dev/null || true
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Aisha –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker stop $(docker ps -q --filter 'name=aisha') 2>/dev/null || true
    docker rm $(docker ps -aq --filter 'name=aisha') 2>/dev/null || true
    
    log_info "‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Webhook API –∫–ª–∞—Å—Ç–µ—Ä–∞
deploy_api_cluster() {
    log_step "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Webhook API –∫–ª–∞—Å—Ç–µ—Ä–∞..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–∞
    export IMAGE_VERSION=$IMAGE_VERSION
    docker-compose -f docker-compose.registry.yml --env-file cluster.env up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 15
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    local retries=0
    local max_retries=12
    while [[ $retries -lt $max_retries ]]; do
        if docker ps --filter 'name=aisha-webhook-api' --filter 'health=healthy' | grep -q aisha-webhook-api; then
            log_info "‚úÖ Webhook API –∫–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤"
            return 0
        fi
        
        log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–∏—Å–æ–≤... ($((retries + 1))/$max_retries)"
        sleep 5
        ((retries++))
    done
    
    log_warn "‚ö†Ô∏è Webhook API —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Bot –∫–ª–∞—Å—Ç–µ—Ä–∞
deploy_bot_cluster() {
    log_step "ü§ñ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Bot –∫–ª–∞—Å—Ç–µ—Ä–∞..."
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤
    export IMAGE_VERSION=$IMAGE_VERSION
    docker-compose -f docker-compose.bot.registry.yml --env-file cluster.env up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤
    log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    local retries=0
    local max_retries=8
    while [[ $retries -lt $max_retries ]]; do
        if docker ps --filter 'name=aisha-bot' --filter 'health=healthy' | grep -q aisha-bot; then
            log_info "‚úÖ Bot –∫–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤"
            return 0
        fi
        
        log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Bot —Å–µ—Ä–≤–∏—Å–æ–≤... ($((retries + 1))/$max_retries)"
        sleep 5
        ((retries++))
    done
    
    log_warn "‚ö†Ô∏è Bot —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    log_step "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log_info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker ps --filter 'name=aisha' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    
    # HTTP
    if curl -f -s -m 5 http://localhost/ >/dev/null 2>&1; then
        log_info "‚úÖ HTTP (80) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warn "‚ö†Ô∏è HTTP (80) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # HTTPS
    if curl -f -s -k -m 5 https://localhost:8443/ >/dev/null 2>&1; then
        log_info "‚úÖ HTTPS (8443) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warn "‚ö†Ô∏è HTTPS (8443) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    log_info "üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: docker ps"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parse_args "$@"
    
    log_info "üöÄ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ Aisha Bot"
    log_info "üê≥ Registry: $REGISTRY_URL"
    log_info "üè∑Ô∏è –í–µ—Ä—Å–∏—è: $IMAGE_VERSION"
    log_info "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $DEPLOY_DIR"
    
    if [[ "$FORCE_PULL" == "true" ]]; then
        log_warn "‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞"
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    check_registry_access
    setup_docker
    prepare_deploy_dir
    create_networks
    pull_images
    stop_old_containers
    deploy_api_cluster
    deploy_bot_cluster
    final_check
    
    log_info "üéâ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log_info "üåê –î–æ—Å—Ç—É–ø: http://$DOMAIN –∏ https://$DOMAIN:8443"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_error "üõë –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ"; exit 1' SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫
main "$@" 