#!/bin/bash

# ============================================================================
# üè• COMPREHENSIVE SYSTEM HEALTH CHECK
# ============================================================================

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üè• –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã Aisha Bot${NC}"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")/../.."

# ============================================================================
# üîß –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNING_CHECKS=0

check_result() {
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    case $1 in
        "pass") PASSED_CHECKS=$((PASSED_CHECKS + 1)) ;;
        "fail") FAILED_CHECKS=$((FAILED_CHECKS + 1)) ;;
        "warn") WARNING_CHECKS=$((WARNING_CHECKS + 1)) ;;
    esac
}

# ============================================================================
# üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
# ============================================================================

log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π..."

# Redis Server (192.168.0.3)
if timeout 5 redis-cli -h 192.168.0.3 -a wd7QuwAbG0wtyoOOw3Sm ping >/dev/null 2>&1; then
    log_success "‚úÖ Redis Server (192.168.0.3) –¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "pass"
else
    log_error "‚ùå Redis Server (192.168.0.3) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "fail"
fi

# PostgreSQL (192.168.0.4)
if timeout 5 pg_isready -h 192.168.0.4 -p 5432 >/dev/null 2>&1; then
    log_success "‚úÖ PostgreSQL Server (192.168.0.4) –¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "pass"
else
    log_warning "‚ö†Ô∏è PostgreSQL Server (192.168.0.4) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "warn"
fi

# MinIO (192.168.0.4:9000)
if timeout 5 curl -s http://192.168.0.4:9000/minio/health/live >/dev/null 2>&1; then
    log_success "‚úÖ MinIO Server (192.168.0.4:9000) –¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "pass"
else
    log_warning "‚ö†Ô∏è MinIO Server (192.168.0.4:9000) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "warn"
fi

# Docker Registry (192.168.0.4:5000)
if timeout 5 curl -s http://192.168.0.4:5000/v2/ >/dev/null 2>&1; then
    log_success "‚úÖ Docker Registry (192.168.0.4:5000) –¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "pass"
else
    log_warning "‚ö†Ô∏è Docker Registry (192.168.0.4:5000) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "warn"
fi

# Webhook API (192.168.0.10:8443)
if timeout 5 curl -k -s https://192.168.0.10:8443/health >/dev/null 2>&1; then
    log_success "‚úÖ Webhook API (192.168.0.10:8443) –¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "pass"
else
    log_warning "‚ö†Ô∏è Webhook API (192.168.0.10:8443) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "warn"
fi

# ============================================================================
# üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
# ============================================================================

log_info "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
if docker info >/dev/null 2>&1; then
    log_success "‚úÖ Docker daemon —Ä–∞–±–æ—Ç–∞–µ—Ç"
    check_result "pass"
else
    log_error "‚ùå Docker daemon –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
    check_result "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
if command -v docker-compose >/dev/null 2>&1; then
    log_success "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    check_result "pass"
else
    log_error "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    check_result "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
RUNNING_CONTAINERS=$(docker ps -q | wc -l)
if [ "$RUNNING_CONTAINERS" -gt 0 ]; then
    log_success "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $RUNNING_CONTAINERS"
    check_result "pass"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
    echo "   –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker ps --format "   ‚Ä¢ {{.Names}}: {{.Status}}"
else
    log_warning "‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    check_result "warn"
fi

# ============================================================================
# üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
# ============================================================================

log_info "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 80 ]; then
    log_success "‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: $((100-DISK_USAGE))%"
    check_result "pass"
elif [ "$DISK_USAGE" -lt 90 ]; then
    log_warning "‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $((100-DISK_USAGE))%"
    check_result "warn"
else
    log_error "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $((100-DISK_USAGE))%"
    check_result "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
REQUIRED_DIRS=(
    "app"
    "docker"
    "scripts"
    "ssl_certificate"
)

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        log_success "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        check_result "pass"
    else
        log_error "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        check_result "fail"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
REQUIRED_FILES=(
    "docker-compose.webhook.prod.yml"
    "prod.env"
    "requirements.txt"
    "run.py"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        log_success "‚úÖ –§–∞–π–ª $file —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        check_result "pass"
    else
        log_warning "‚ö†Ô∏è –§–∞–π–ª $file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        check_result "warn"
    fi
done

# ============================================================================
# üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# ============================================================================

log_info "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."

SSL_DIR="ssl_certificate"
if [ -d "$SSL_DIR" ]; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    SSL_FILES=(
        "$SSL_DIR/aibots.kz.crt"
        "$SSL_DIR/aibots.kz.key"
    )
    
    for ssl_file in "${SSL_FILES[@]}"; do
        if [ -f "$ssl_file" ]; then
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            if [ "${ssl_file##*.}" = "crt" ]; then
                EXPIRY_DATE=$(openssl x509 -in "$ssl_file" -noout -enddate 2>/dev/null | cut -d= -f2)
                if [ -n "$EXPIRY_DATE" ]; then
                    EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
                    CURRENT_TIMESTAMP=$(date +%s)
                    DAYS_LEFT=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
                    
                    if [ "$DAYS_LEFT" -gt 30 ]; then
                        log_success "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ($DAYS_LEFT –¥–Ω–µ–π)"
                        check_result "pass"
                    elif [ "$DAYS_LEFT" -gt 7 ]; then
                        log_warning "‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π"
                        check_result "warn"
                    else
                        log_error "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π"
                        check_result "fail"
                    fi
                else
                    log_warning "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
                    check_result "warn"
                fi
            else
                log_success "‚úÖ SSL –∫–ª—é—á $ssl_file –Ω–∞–π–¥–µ–Ω"
                check_result "pass"
            fi
        else
            log_error "‚ùå SSL —Ñ–∞–π–ª $ssl_file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            check_result "fail"
        fi
    done
else
    log_error "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    check_result "fail"
fi

# ============================================================================
# üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
# ============================================================================

log_info "üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ "$MEMORY_USAGE" -lt 80 ]; then
    log_success "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}%"
    check_result "pass"
elif [ "$MEMORY_USAGE" -lt 90 ]; then
    log_warning "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}%"
    check_result "warn"
else
    log_error "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}%"
    check_result "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU load average
LOAD_AVERAGE=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
CPU_CORES=$(nproc)
LOAD_PERCENT=$(echo "$LOAD_AVERAGE * 100 / $CPU_CORES" | bc -l | awk '{printf "%.0f", $1}')

if [ "$LOAD_PERCENT" -lt 70 ]; then
    log_success "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${LOAD_PERCENT}% (LA: $LOAD_AVERAGE)"
    check_result "pass"
elif [ "$LOAD_PERCENT" -lt 90 ]; then
    log_warning "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${LOAD_PERCENT}% (LA: $LOAD_AVERAGE)"
    check_result "warn"
else
    log_error "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${LOAD_PERCENT}% (LA: $LOAD_AVERAGE)"
    check_result "fail"
fi

# ============================================================================
# üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
# ============================================================================

log_info "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
ERROR_COUNT=$(journalctl --since "1 hour ago" --no-pager -q | grep -i error | wc -l)
if [ "$ERROR_COUNT" -eq 0 ]; then
    log_success "‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
    check_result "pass"
elif [ "$ERROR_COUNT" -lt 10 ]; then
    log_warning "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö"
    check_result "warn"
else
    log_error "‚ùå –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö"
    check_result "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –ª–æ–≥–æ–≤
if docker ps -q | head -1 >/dev/null 2>&1; then
    CONTAINER_ERRORS=0
    for container in $(docker ps --format "{{.Names}}"); do
        CONTAINER_ERROR_COUNT=$(docker logs --since=1h "$container" 2>&1 | grep -i error | wc -l)
        CONTAINER_ERRORS=$((CONTAINER_ERRORS + CONTAINER_ERROR_COUNT))
    done
    
    if [ "$CONTAINER_ERRORS" -eq 0 ]; then
        log_success "‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        check_result "pass"
    elif [ "$CONTAINER_ERRORS" -lt 5 ]; then
        log_warning "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $CONTAINER_ERRORS –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        check_result "warn"
    else
        log_error "‚ùå –ù–∞–π–¥–µ–Ω–æ $CONTAINER_ERRORS –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        check_result "fail"
    fi
fi

# ============================================================================
# üìà –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
# ============================================================================

echo ""
echo "============================================================================"
echo -e "${BLUE}üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´${NC}"
echo "============================================================================"
echo ""

# –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
if [ "$TOTAL_CHECKS" -gt 0 ]; then
    PASS_PERCENT=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))
    FAIL_PERCENT=$((FAILED_CHECKS * 100 / TOTAL_CHECKS))
    WARN_PERCENT=$((WARNING_CHECKS * 100 / TOTAL_CHECKS))
else
    PASS_PERCENT=0
    FAIL_PERCENT=0
    WARN_PERCENT=0
fi

echo "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:"
echo "  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:      $TOTAL_CHECKS"
echo "  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö:            $PASSED_CHECKS ($PASS_PERCENT%)"
echo "  ‚Ä¢ –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:  $WARNING_CHECKS ($WARN_PERCENT%)"
echo "  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö:           $FAILED_CHECKS ($FAIL_PERCENT%)"
echo ""

# –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
if [ "$FAILED_CHECKS" -eq 0 ] && [ "$WARNING_CHECKS" -eq 0 ]; then
    echo -e "${GREEN}üéâ –°–ò–°–¢–ï–ú–ê –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò${NC}"
    SYSTEM_STATUS="EXCELLENT"
elif [ "$FAILED_CHECKS" -eq 0 ]; then
    echo -e "${YELLOW}‚úÖ –°–ò–°–¢–ï–ú–ê –í –•–û–†–û–®–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)${NC}"
    SYSTEM_STATUS="GOOD"
elif [ "$FAILED_CHECKS" -lt 3 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò${NC}"
    SYSTEM_STATUS="ISSUES"
else
    echo -e "${RED}üö® –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø${NC}"
    SYSTEM_STATUS="CRITICAL"
fi

echo ""
echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"

if [ "$FAILED_CHECKS" -gt 0 ]; then
    echo "  ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å"
    echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ./scripts/utils/log-analyzer.sh"
fi

if [ "$WARNING_CHECKS" -gt 0 ]; then
    echo "  ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
    echo "  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã"
fi

if [ "$SYSTEM_STATUS" = "EXCELLENT" ]; then
    echo "  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ"
    echo "  ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
fi

echo ""
echo "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:"
echo "  ‚Ä¢ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ./scripts/utils/log-analyzer.sh"
echo "  ‚Ä¢ –î–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã: ./scripts/utils/cleanup.sh"
echo "  ‚Ä¢ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞: ./scripts/utils/backup.sh"

echo ""
echo "============================================================================"

# –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
case $SYSTEM_STATUS in
    "EXCELLENT") exit 0 ;;
    "GOOD") exit 0 ;;
    "ISSUES") exit 1 ;;
    "CRITICAL") exit 2 ;;
esac 