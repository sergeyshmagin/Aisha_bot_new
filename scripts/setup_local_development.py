#!/usr/bin/env python3
"""
üè† –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º API —Å–µ—Ä–≤–µ—Ä–æ–º aibots.kz
"""

import os
import sys
import subprocess
from pathlib import Path
from typing import Optional


def info(message: str) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"üìã {message}")


def success(message: str) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"‚úÖ {message}")


def warning(message: str) -> None:
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"‚ö†Ô∏è  {message}")


def error(message: str) -> None:
    """–û—à–∏–±–∫–∞"""
    print(f"‚ùå {message}")


def run_command(command: str, check: bool = True) -> Optional[subprocess.CompletedProcess]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ shell"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            check=check
        )
        return result
    except subprocess.CalledProcessError as e:
        error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        error(f"–í—ã–≤–æ–¥: {e.stdout}")
        error(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return None


def check_api_server() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞"""
    info("–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞ aibots.kz:8443...")
    
    result = run_command("curl -s https://aibots.kz:8443/health", check=False)
    if result and result.returncode == 0:
        success("API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    else:
        error("API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False


def check_webhook_endpoint() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å webhook endpoint"""
    info("–ü—Ä–æ–≤–µ—Ä—è—é webhook endpoint...")
    
    result = run_command("curl -s https://aibots.kz:8443/api/v1/webhook/status", check=False)
    if result and result.returncode == 0:
        success("Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        error("Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False


def check_env_file() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env"""
    env_file = Path(".env")
    
    if not env_file.exists():
        error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    info("–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env...")
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(env_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    required_vars = [
        "TELEGRAM_TOKEN",
        "DATABASE_URL", 
        "FAL_KEY",
        "OPENAI_API_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if f"{var}=" not in content or f"{var}=your_" in content:
            missing_vars.append(var)
    
    if missing_vars:
        error(f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def check_virtual_env() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    if sys.prefix == sys.base_prefix:
        error("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        info("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: source .venv/bin/activate (Linux/Mac) –∏–ª–∏ .venv\\Scripts\\activate (Windows)")
        return False
    
    success("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    return True


def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    info("–ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    required_packages = [
        "aiogram",
        "sqlalchemy", 
        "asyncpg",
        "fastapi",
        "pytest"
    ]
    
    missing_packages = []
    for package in required_packages:
        result = run_command(f"python -c 'import {package}'", check=False)
        if result and result.returncode != 0:
            missing_packages.append(package)
    
    if missing_packages:
        error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        info("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    success("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_database_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    info("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    test_script = """
import asyncio
import os
from sqlalchemy.ext.asyncio import create_async_engine

async def test_db():
    try:
        engine = create_async_engine(os.getenv('DATABASE_URL'))
        async with engine.begin() as conn:
            result = await conn.execute('SELECT 1')
            await conn.close()
        await engine.dispose()
        print('OK')
    except Exception as e:
        print(f'ERROR: {e}')

asyncio.run(test_db())
"""
    
    result = run_command(f"python -c \"{test_script}\"", check=False)
    if result and "OK" in result.stdout:
        success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        if result:
            error(f"–î–µ—Ç–∞–ª–∏: {result.stdout}")
        return False


def check_redis_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    info("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
    
    test_script = """
import os
import redis

try:
    host = os.getenv('REDIS_HOST', 'localhost')
    port = int(os.getenv('REDIS_PORT', 6379))
    password = os.getenv('REDIS_PASSWORD')
    
    r = redis.Redis(host=host, port=port, password=password, decode_responses=True)
    r.ping()
    print('OK')
except Exception as e:
    print(f'ERROR: {e}')
"""
    
    result = run_command(f"python -c \"{test_script}\"", check=False)
    if result and "OK" in result.stdout:
        success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")
        if result:
            error(f"–î–µ—Ç–∞–ª–∏: {result.stdout}")
        return False


def display_summary() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    info("\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
    print("  ü§ñ Telegram Bot (localhost) - polling mode")
    print("  üì° API Server (aibots.kz:8443) - webhook endpoint")
    print("  üóÑÔ∏è  PostgreSQL (192.168.0.4:5432) - production DB")
    print("  üî¥ Redis (192.168.0.3:6379) - production cache")
    print("  üì¶ MinIO (192.168.0.4:9000) - production storage")
    
    print("\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:")
    print("  python -m app.main              # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    print("  pytest tests/ -v                # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    print("  pytest --cov=app --cov-report=html  # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º")
    
    print("\nüîß –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("  https://aibots.kz:8443/health               # Health check API")
    print("  https://aibots.kz:8443/api/v1/webhook/status # Webhook status")
    
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("  docs/LOCAL_DEVELOPMENT_SETUP.md    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥")
    print("  docs/PLANNING.md                   # –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏")
    print("  docs/CURRENT_TASKS.md              # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Aisha Bot v2")
    print("=" * 50)
    
    checks = [
        ("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", check_virtual_env),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env", check_env_file),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", check_dependencies),
        ("API —Å–µ—Ä–≤–µ—Ä aibots.kz", check_api_server),
        ("Webhook endpoint", check_webhook_endpoint),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL", check_database_connection),
        ("Redis –∫—ç—à", check_redis_connection),
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        print(f"\nüîç {name}:")
        if check_func():
            passed += 1
        else:
            warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å: {name}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        display_summary()
    else:
        error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:")
        print("  1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source .venv/bin/activate")
        print("  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        print("  4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    return passed == total


if __name__ == "__main__":
    success_status = main()
    sys.exit(0 if success_status else 1) 