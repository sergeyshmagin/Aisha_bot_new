#!/usr/bin/env python3
import asyncio
from app.core.database import get_session
from sqlalchemy import text

async def check():
    async with get_session() as session:
        print('üîç PostgreSQL enum —Ç–∏–ø—ã:')
        result = await session.execute(text("""
            SELECT t.typname, e.enumlabel 
            FROM pg_type t 
            JOIN pg_enum e ON t.oid = e.enumtypid 
            WHERE t.typname = 'avatarstatus'
            ORDER BY e.enumsortorder;
        """))
        enum_values = []
        for row in result.fetchall():
            enum_values.append(row[1])
            print(f'   {row[1]}')
        
        print('\nüóÑÔ∏è –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:')
        result = await session.execute(text('SELECT DISTINCT status FROM avatars LIMIT 5;'))
        data_values = []
        for row in result.fetchall():
            data_values.append(row[0])
            print(f'   {row[0]}')
        
        print(f'\nüìä –ê–Ω–∞–ª–∏–∑:')
        print(f'   Enum –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {enum_values}')
        print(f'   –î–∞–Ω–Ω—ã–µ –≤ –ë–î: {data_values}')
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        mismatch = []
        for data_val in data_values:
            if data_val not in enum_values:
                mismatch.append(data_val)
        
        if mismatch:
            print(f'‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¥–∞–Ω–Ω—ã–µ {mismatch} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç enum {enum_values}')
        else:
            print(f'‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç enum –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º')

if __name__ == "__main__":
    asyncio.run(check()) 