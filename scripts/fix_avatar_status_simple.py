#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤

–ó–∞–º–µ–Ω—è–µ—Ç UPPERCASE —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ lowercase —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/fix_avatar_status_simple.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.database import get_session
from app.core.config import settings
from sqlalchemy import text

async def fix_avatar_statuses():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤...")
    
    # –ú–∞–ø–ø–∏–Ω–≥ UPPERCASE -> lowercase
    status_mapping = {
        'COMPLETED': 'completed',
        'READY_FOR_TRAINING': 'ready_for_training',
        'PHOTOS_UPLOADING': 'photos_uploading',
        'TRAINING': 'training',
        'DRAFT': 'draft',
        'ERROR': 'error',
        'CANCELLED': 'cancelled'
    }
    
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        print("üìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:")
        query = text("SELECT status, COUNT(*) as count FROM avatars GROUP BY status ORDER BY count DESC")
        result = await session.execute(query)
        status_counts = result.fetchall()
        
        for row in status_counts:
            print(f"  {row.status}: {row.count} –∞–≤–∞—Ç–∞—Ä–æ–≤")
        
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
        
        total_updated = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª—å–Ω–æ
        for old_status, new_status in status_mapping.items():
            query = text(f"UPDATE avatars SET status = '{new_status}' WHERE status = '{old_status}'")
            result = await session.execute(query)
            updated_count = result.rowcount
            
            if updated_count > 0:
                print(f"  ‚úÖ {old_status} ‚Üí {new_status}: {updated_count} –∞–≤–∞—Ç–∞—Ä–æ–≤")
                total_updated += updated_count
        
        await session.commit()
        
        print(f"\nüìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated} –∞–≤–∞—Ç–∞—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –°—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        result = await session.execute(query)
        status_counts = result.fetchall()
        
        for row in status_counts:
            print(f"  {row.status}: {row.count} –∞–≤–∞—Ç–∞—Ä–æ–≤")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await fix_avatar_statuses()
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 