#!/bin/bash

# üîì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Insecure Docker Registry –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ HTTPS –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏

set -euo pipefail

REGISTRY_HOST="192.168.0.4"
REGISTRY_PORT="5000"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $1"
}

log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $1" >&2
}

configure_docker_daemon() {
    log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker daemon –¥–ª—è insecure registry..."
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é daemon.json
    DAEMON_CONFIG="/etc/docker/daemon.json"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ -f "$DAEMON_CONFIG" ]]; then
        sudo cp "$DAEMON_CONFIG" "$DAEMON_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
        log "üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $DAEMON_CONFIG.backup.*"
    fi
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo tee "$DAEMON_CONFIG" > /dev/null << EOF
{
  "insecure-registries": [
    "$REGISTRY_HOST:$REGISTRY_PORT"
  ],
  "registry-mirrors": [],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
EOF
    
    log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker daemon –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

restart_docker() {
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker..."
    
    if command -v systemctl &> /dev/null; then
        sudo systemctl restart docker
        sleep 5
        if systemctl is-active --quiet docker; then
            log "‚úÖ Docker –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            log_error "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Docker"
            exit 1
        fi
    else
        log "‚ö†Ô∏è  systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é"
    fi
}

test_registry() {
    log "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ registry..."
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if curl -f "http://$REGISTRY_HOST:$REGISTRY_PORT/v2/" &>/dev/null; then
        log "‚úÖ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ registry —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        CATALOG=$(curl -s "http://$REGISTRY_HOST:$REGISTRY_PORT/v2/_catalog")
        log "üìã –ö–∞—Ç–∞–ª–æ–≥ –æ–±—Ä–∞–∑–æ–≤: $CATALOG"
    else
        log_error "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ registry"
        return 1
    fi
}

show_usage() {
    log "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ insecure registry:"
    cat << EOF

1. –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞:
   docker tag my-image:latest $REGISTRY_HOST:$REGISTRY_PORT/my-image:latest

2. Push –æ–±—Ä–∞–∑–∞:
   docker push $REGISTRY_HOST:$REGISTRY_PORT/my-image:latest

3. Pull –æ–±—Ä–∞–∑–∞:
   docker pull $REGISTRY_HOST:$REGISTRY_PORT/my-image:latest

4. –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:
   curl http://$REGISTRY_HOST:$REGISTRY_PORT/v2/_catalog

5. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–≥–æ–≤:
   curl http://$REGISTRY_HOST:$REGISTRY_PORT/v2/my-image/tags/list

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Insecure registry –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ!
   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

EOF
}

main() {
    log "üîì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ insecure Docker registry –∫–ª–∏–µ–Ω—Ç–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if [[ $EUID -eq 0 ]]; then
        log_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root"
        exit 1
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    configure_docker_daemon
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if command -v systemctl &> /dev/null; then
        restart_docker
    else
        log "‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    fi
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_registry
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    show_usage
    
    log "üéâ Insecure registry –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 