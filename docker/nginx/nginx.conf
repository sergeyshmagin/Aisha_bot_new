# ============================================================================
# NGINX Configuration для масштабируемой архитектуры
# Load balancing для webhook API кластера
# ============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Оптимизация для высокой нагрузки
worker_rlimit_nofile 65535;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Основные настройки производительности
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # Размеры буферов
    client_body_buffer_size 128k;
    client_max_body_size 100M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Redis кеширование для сессий и данных
    upstream redis_backend {
        server 192.168.0.3:6379 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    # Настройка кеширования в памяти
    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;
    proxy_cache_path /tmp/nginx_webhook levels=1:2 keys_zone=webhook_cache:5m max_size=50m inactive=30m use_temp_path=off;

    # Логирование с дополнительными метриками
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'cache="$upstream_cache_status"';

    log_format webhook '$remote_addr - [$time_local] "$request" '
                      '$status $body_bytes_sent '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'urt="$upstream_response_time" "$http_user_agent" '
                      'cache="$upstream_cache_status" req_id="$request_id"';

    access_log /var/log/nginx/access.log main buffer=16k flush=2m;
    error_log /var/log/nginx/error.log warn;

    # Gzip сжатие
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting зоны для webhook API
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    limit_req_zone $request_id zone=webhook_req:10m rate=5r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Upstream для webhook API с балансировкой нагрузки
    upstream webhook_api {
        # Первичный экземпляр webhook API
        server aisha-webhook-api-1:8001 max_fails=2 fail_timeout=30s weight=3;
        # Вторичный экземпляр для load balancing
        server aisha-webhook-api-2:8001 max_fails=2 fail_timeout=30s weight=2 backup;
        
        # Настройки keep-alive для производительности
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
        
        # Балансировка по методу least_conn для webhook'ов
        least_conn;
    }

    # Upstream для основного API (если потребуется)
    upstream main_api {
        server aisha-api-prod:8000 max_fails=3 fail_timeout=30s;
        keepalive 16;
        keepalive_requests 50;
        keepalive_timeout 60s;
    }

    # HTTP сервер (редирект на HTTPS)
    server {
        listen 80;
        server_name aibots.kz www.aibots.kz;

        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn perip 10;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Редирект на HTTPS
        location / {
            return 301 https://aibots.kz:8443$request_uri;
        }
    }

    # HTTPS сервер на порту 8443 для webhook API
    server {
        listen 8443 ssl http2;
        server_name aibots.kz;

        # Rate limiting
        limit_conn perip 20;
        limit_conn perserver 1000;

        # SSL сертификаты
        ssl_certificate /etc/nginx/ssl/aibots_kz_full.crt;
        ssl_certificate_key /etc/nginx/ssl/aibots.kz.key;

        # Современные SSL настройки
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Request-ID $request_id always;

        # Главный webhook endpoint для FAL AI
        location /api/v1/avatar/status_update {
            # Строгий rate limiting для webhook
            limit_req zone=webhook burst=10 nodelay;
            limit_req zone=webhook_req burst=3 nodelay;

            # Только POST запросы
            if ($request_method != POST) {
                return 405 '{"error": "Method not allowed", "allowed": ["POST"]}';
            }

            # Проверка Content-Type
            if ($content_type !~ "application/json") {
                return 400 '{"error": "Invalid Content-Type", "expected": "application/json"}';
            }

            # Кеширование GET health checks (если есть)
            proxy_cache webhook_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_bypass $cookie_nocache $arg_nocache;
            
            # Прокси к webhook API с балансировкой
            proxy_pass http://webhook_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Original-URI $request_uri;

            # Специальные таймауты для webhook (FAL AI требует быстрый ответ)
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Буферизация для webhook
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Retry политика для webhook
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;

            # Специальное логирование webhook запросов
            access_log /var/log/nginx/webhook_access.log webhook;
            error_log /var/log/nginx/webhook_error.log warn;
        }

        # Test webhook endpoint
        location /api/v1/avatar/test_webhook {
            limit_req zone=api burst=5 nodelay;

            proxy_pass http://webhook_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Request-ID $request_id;

            # Быстрые таймауты для тест endpoint
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 10s;

            access_log /var/log/nginx/webhook_test.log main;
        }

        # Health check endpoint для webhook API
        location /health {
            limit_req zone=api burst=20 nodelay;

            # Кеширование health checks
            proxy_cache api_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            
            proxy_pass http://webhook_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;

            # Быстрые таймауты для health check
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 5s;

            # Не логировать health check (слишком много запросов)
            access_log off;
        }

        # Status endpoint для мониторинга webhook API
        location /api/v1/webhook/status {
            limit_req zone=api burst=10 nodelay;
            
            # Ограничение доступа только с локальной сети
            allow 192.168.0.0/24;
            allow 127.0.0.1;
            deny all;

            proxy_pass http://webhook_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Request-ID $request_id;

            access_log /var/log/nginx/webhook_status.log main;
        }

        # Все остальные API endpoints
        location /api/ {
            limit_req zone=api burst=30 nodelay;
            
            # Кеширование для GET запросов
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri$args";
            proxy_cache_bypass $cookie_nocache $arg_nocache;
            
            proxy_pass http://webhook_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Стандартные таймауты для API
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Буферизация
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Retry политика
            proxy_next_upstream error timeout http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 15s;

            access_log /var/log/nginx/api_access.log main;
        }

        # Nginx status для мониторинга (только локальный доступ)
        location /nginx_status {
            allow 192.168.0.0/24;
            allow 127.0.0.1;
            deny all;
            
            stub_status on;
            access_log off;
        }

        # Блокировка всех остальных запросов
        location / {
            return 404 '{"error": "Not found", "message": "This endpoint is not available", "request_id": "$request_id"}';
            add_header Content-Type application/json always;
            add_header X-Request-ID $request_id always;
        }

        # Основное логирование nginx
        access_log /var/log/nginx/nginx_access.log main;
        error_log /var/log/nginx/nginx_error.log warn;

        # Скрываем .htaccess и другие служебные файлы
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
} 