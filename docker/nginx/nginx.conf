# nginx.conf для продакшена Aisha Bot v2 (адаптирован под текущую конфигурацию)

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Основные настройки производительности
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # Размеры буферов
    client_body_buffer_size 128k;
    client_max_body_size 100M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Логирование
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format webhook '$remote_addr - [$time_local] "$request" '
                      '$status $body_bytes_sent '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'urt="$upstream_response_time" "$http_user_agent"';

    access_log /var/log/nginx/access.log main buffer=16k flush=2m;
    error_log /var/log/nginx/error.log warn;

    # Gzip сжатие
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting зоны (как в текущей конфигурации)
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Upstream для API сервера (адаптирован под Docker)
    upstream aisha_api {
        server aisha-api-prod:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # HTTP сервер (редирект на HTTPS)
    server {
        listen 80;
        server_name _;

        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn perip 10;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Редирект на HTTPS
        location / {
            return 301 https://$host:8443$request_uri;
        }
    }

    # HTTPS сервер на порту 8443 (как в текущей конфигурации)
    server {
        listen 8443 ssl http2;
        server_name aibots.kz;

        # Rate limiting
        limit_conn perip 20;
        limit_conn perserver 1000;

        # SSL сертификаты (как в текущей конфигурации)
        ssl_certificate /etc/nginx/ssl/aibots_kz_full.crt;
        ssl_certificate_key /etc/nginx/ssl/aibots.kz.key;

        # Современные SSL настройки
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security headers (как в текущей конфигурации)
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Webhook endpoint (основной для FAL AI) - как в текущей конфигурации
        location /api/v1/avatar/status_update {
            limit_req zone=webhook burst=5 nodelay;

            # Только POST запросы
            if ($request_method != POST) {
                return 405;
            }

            # Дополнительная проверка на валидность JSON
            if ($content_type != "application/json") {
                return 400;
            }

            proxy_pass http://aisha_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;

            # Таймауты для webhook
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Специальное логирование webhook запросов
            access_log /var/log/nginx/webhook_access.log webhook;
            error_log /var/log/nginx/webhook_error.log;
        }

        # Health check endpoint (без лимитов)
        location /health {
            limit_req zone=api burst=10 nodelay;

            # Внутренний health check для nginx
            if ($request_uri = /health) {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            # Проксирование health check на API
            proxy_pass http://aisha_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;

            # Быстрые таймауты для health check
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;

            # Не логировать health check запросы
            access_log off;
        }

        # Status endpoint (для мониторинга)
        location /status {
            limit_req zone=api burst=5 nodelay;

            proxy_pass http://aisha_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;

            access_log /var/log/nginx/status_access.log main;
        }

        # Webhook status endpoint
        location /api/v1/webhook/status {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://aisha_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;

            access_log /var/log/nginx/webhook_status_access.log main;
        }

        # API endpoints с rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://aisha_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Таймауты
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Буферизация
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # Блокировка всех остальных запросов (как в текущей конфигурации)
        location / {
            return 404 '{"error": "Not found", "message": "This endpoint is not available"}';
            add_header Content-Type application/json always;
        }

        # Основное логирование nginx
        access_log /var/log/nginx/nginx_access.log main;
        error_log /var/log/nginx/nginx_error.log warn;

        # Скрываем .htaccess и другие служебные файлы
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
} 