#!/bin/bash

# ============================================================================
# Entrypoint –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ Aisha Telegram Bot
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∂–∏–º–æ–≤: polling, polling_standby, worker, webhook
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_required_env() {
    local required_vars=(
        "POSTGRES_HOST"
        "POSTGRES_DB" 
        "POSTGRES_USER"
        "POSTGRES_PASSWORD"
        "REDIS_HOST"
        "INSTANCE_ID"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            log_error "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            exit 1
        fi
    done
    
    log_info "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
check_redis() {
    log_info "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis..."
    
    python3 -c "
import redis
import os
import sys

try:
    r = redis.Redis(
        host=os.getenv('REDIS_HOST'),
        port=int(os.getenv('REDIS_PORT', 6379)),
        db=int(os.getenv('REDIS_DB', 0)),
        password=os.getenv('REDIS_PASSWORD'),
        decode_responses=True,
        socket_timeout=5
    )
    r.ping()
    print('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}')
    sys.exit(1)
" || exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
check_postgres() {
    log_info "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    
    python3 -c "
import asyncpg
import asyncio
import os
import sys

async def check_db():
    try:
        conn = await asyncpg.connect(
            host=os.getenv('POSTGRES_HOST'),
            port=int(os.getenv('POSTGRES_PORT', 5432)),
            database=os.getenv('POSTGRES_DB'),
            user=os.getenv('POSTGRES_USER'),
            password=os.getenv('POSTGRES_PASSWORD')
        )
        await conn.close()
        print('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}')
        sys.exit(1)

asyncio.run(check_db())
" || exit 1
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞)
run_migrations() {
    if [[ "${BOT_CLUSTER_NODE_ID:-1}" == "1" ]]; then
        log_info "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        
        python3 -c "
import asyncio
from alembic.config import Config
from alembic import command
import os

def run_migrations():
    try:
        alembic_cfg = Config('/app/alembic.ini')
        alembic_cfg.set_main_option('sqlalchemy.url', 
            f'postgresql+asyncpg://{os.getenv(\"POSTGRES_USER\")}:{os.getenv(\"POSTGRES_PASSWORD\")}@{os.getenv(\"POSTGRES_HOST\")}:{os.getenv(\"POSTGRES_PORT\")}/{os.getenv(\"POSTGRES_DB\")}')
        
        command.upgrade(alembic_cfg, 'head')
        print('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}')
        raise

run_migrations()
" || {
            log_error "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
            exit 1
        }
    else
        log_info "‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä)"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
main() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ Aisha Bot - –≠–∫–∑–µ–º–ø–ª—è—Ä: ${INSTANCE_ID}"
    log_info "üìç –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${1:-polling}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_required_env
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–±–µ–∑ wait_for_service)
    check_redis
    check_postgres
    
    # –ú–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    case "${1:-polling}" in
        "polling")
            log_info "ü§ñ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling"
            export BOT_MODE="polling"
            exec python3 main.py
            ;;
            
        "polling_standby")
            log_info "‚è∏Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling standby"
            export BOT_MODE="polling_standby"
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è standby —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            sleep 10
            exec python3 main.py
            ;;
            
        "worker")
            log_info "‚öôÔ∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ background worker"
            export BOT_MODE="worker"
            exec python3 -c "
import asyncio
import sys
sys.path.append('/app')
from app.workers.background_worker import BackgroundWorker

async def main():
    worker = BackgroundWorker()
    await worker.start()

asyncio.run(main())
"
            ;;
            
        "webhook")
            log_info "üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook"
            export BOT_MODE="webhook"
            exec python3 main.py
            ;;
            
        *)
            log_error "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $1"
            log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: polling, polling_standby, worker, webhook"
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'log_info "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."; exit 0' SIGTERM SIGINT

# –ó–∞–ø—É—Å–∫
main "$@" 