#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Status Checker
"""
import asyncio
import sys
import os
from datetime import datetime
from uuid import UUID

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_status_checker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π status checker"""
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Status Checker")
    print(f"   –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º status checker
        from app.services.avatar.fal_training_service.status_checker import status_checker
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_avatar_id = UUID("7dec7e16-9b8f-4f74-9100-e4d6df417a14")  # ID –∞–≤–∞—Ç–∞—Ä–∞ Sergey
        test_request_id = "12012296-af62-4ff8-861c-5cc837281aad"  # –¢–µ–∫—É—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ
        test_training_type = "style"
        
        print(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        print(f"   Avatar ID: {test_avatar_id}")
        print(f"   Request ID: {test_request_id}")
        print(f"   Training Type: {test_training_type}")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await status_checker.start_status_monitoring(
            test_avatar_id, 
            test_request_id, 
            test_training_type
        )
        
        print("‚úÖ Status Checker –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ...")
        print()
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥—ë–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞–±–æ—Ç—É
        await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

async def check_fal_status_directly():
    """–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI"""
    
    print(f"üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI")
    print("=" * 60)
    
    try:
        from app.services.avatar.fal_training_service.status_checker import status_checker
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_request_id = "12012296-af62-4ff8-861c-5cc837281aad"
        test_training_type = "style"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint
        if test_training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:  # style
            endpoint = "fal-ai/flux-pro-trainer"
        
        status_url = f"https://queue.fal.run/{endpoint}/requests/{test_request_id}/status"
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        print(f"   Request ID: {test_request_id}")
        print(f"   Endpoint: {endpoint}")
        print(f"   URL: {status_url}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_data = await status_checker._check_fal_status(status_url)
        
        if status_data:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:")
            print(f"   Status: {status_data.get('status')}")
            print(f"   Queue Position: {status_data.get('queue_position', 'N/A')}")
            
            # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if status_data.get("status") == "COMPLETED":
                print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                
                result_data = await status_checker._get_training_result(test_request_id, test_training_type)
                
                if result_data:
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:")
                    response_data = result_data.get("response", {})
                    
                    if test_training_type == "style":
                        finetune_id = response_data.get("finetune_id")
                        config_file = response_data.get("config_file", {})
                        
                        print(f"   Finetune ID: {finetune_id}")
                        print(f"   Config File URL: {config_file.get('url', 'N/A')}")
                    
                    print(f"\nüìã –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                    import json
                    print(json.dumps(response_data, indent=2))
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Status Checker")
    print()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é
    await check_fal_status_directly()
    
    print("\n" + "="*60 + "\n")
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await test_status_checker()

if __name__ == "__main__":
    asyncio.run(main()) 