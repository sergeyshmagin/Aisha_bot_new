#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ FAL AI
"""
import asyncio
import sys
import os
from uuid import UUID

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_session
from app.services.avatar.fal_training_service import FALTrainingService
from app.services.avatar.training_service import AvatarTrainingService
from app.core.di import get_avatar_service

async def check_avatar_training_status(avatar_id_str: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        avatar_id = UUID(avatar_id_str)
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {avatar_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ –∏–∑ –ë–î
        async with get_avatar_service() as avatar_service:
            avatar = await avatar_service.get_avatar(avatar_id)
            
            if not avatar:
                print(f"‚ùå –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
            
            print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–µ:")
            print(f"   –ò–º—è: {avatar.name}")
            print(f"   –°—Ç–∞—Ç—É—Å: {avatar.status}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {avatar.training_progress}%")
            print(f"   Finetune ID: {avatar.finetune_id}")
            print(f"   FAL Request ID: {avatar.fal_request_id}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å request_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ FAL AI
            if avatar.fal_request_id:
                print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI...")
                
                fal_service = FALTrainingService()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è
                training_type = "style" if avatar.training_type and "style" in str(avatar.training_type).lower() else "portrait"
                print(f"   –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status_result = await fal_service.check_training_status(
                        avatar.fal_request_id, 
                        training_type
                    )
                    
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç FAL AI:")
                    print(f"   Status: {status_result.get('status', 'unknown')}")
                    print(f"   Logs: {len(status_result.get('logs', []))} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if status_result.get('status') == 'completed':
                        print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                        
                        result = await fal_service.get_training_result(
                            avatar.fal_request_id,
                            training_type
                        )
                        
                        print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è:")
                        if 'diffusers_lora_file' in result:
                            print(f"   LoRA —Ñ–∞–π–ª: {result['diffusers_lora_file']['url']}")
                        if 'config_file' in result:
                            print(f"   –ö–æ–Ω—Ñ–∏–≥: {result['config_file']['url']}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                        print(f"\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î...")
                        async with get_session() as session:
                            training_service = AvatarTrainingService(session)
                            
                            # –°–æ–∑–¥–∞–µ–º webhook –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            webhook_data = {
                                "request_id": avatar.fal_request_id,
                                "status": "completed",
                                **result
                            }
                            
                            success = await training_service.handle_webhook(webhook_data)
                            if success:
                                print(f"‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î")
                    
                    elif status_result.get('status') == 'in_progress':
                        print(f"‚è≥ –û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
                        
                    elif status_result.get('status') == 'failed':
                        print(f"‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
                        if 'error' in status_result:
                            print(f"   –û—à–∏–±–∫–∞: {status_result['error']}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI: {e}")
            
            else:
                print(f"‚ö†Ô∏è FAL Request ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ FAL AI")
        
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID: {avatar_id_str}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def check_all_training_avatars():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è"""
    print(f"üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        async with get_avatar_service() as avatar_service:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è
            from app.database.models import AvatarStatus
            from sqlalchemy import select
            
            async with get_session() as session:
                from app.database.models import Avatar
                
                # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
                stmt = select(Avatar).where(
                    Avatar.status.in_([
                        AvatarStatus.TRAINING,
                        AvatarStatus.TRAINING_QUEUED,
                        AvatarStatus.TRAINING_IN_PROGRESS
                    ])
                )
                
                result = await session.execute(stmt)
                training_avatars = result.scalars().all()
                
                if not training_avatars:
                    print(f"üì≠ –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è")
                    return
                
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(training_avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è:")
                
                for avatar in training_avatars:
                    print(f"\n{'='*50}")
                    await check_avatar_training_status(str(avatar.id))
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        avatar_id = sys.argv[1]
        print(f"üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {avatar_id}")
        asyncio.run(check_avatar_training_status(avatar_id))
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è")
        asyncio.run(check_all_training_avatars())

if __name__ == "__main__":
    print(f"üöÄ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤")
    print(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"   python check_training_status.py                    # –í—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –≤ –æ–±—É—á–µ–Ω–∏–∏")
    print(f"   python check_training_status.py <avatar_id>        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä")
    print(f"")
    
    main() 