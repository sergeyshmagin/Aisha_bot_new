#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –∞–≤—Ç–æ–≤—ã–±–æ—Ä–æ–º API –∏ webhook
"""
import asyncio
import uuid
from uuid import UUID

from app.core.config import settings
from app.services.avatar.fal_training_service import FALTrainingService
from app.core.logger import get_logger

logger = get_logger(__name__)

async def test_avatar_training_system():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:
    1. –í—ã–±–æ—Ä API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    2. –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤")
    print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {settings.AVATAR_TEST_MODE}")
    print(f"üîó Webhook URL: {settings.FAL_WEBHOOK_URL}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    fal_service = FALTrainingService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_avatar_id = UUID("12345678-1234-5678-9012-123456789abc")
    test_training_url = "https://example.com/test_photos.zip"
    
    # –¢–µ—Å—Ç 1: –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("üé≠ –¢–µ—Å—Ç 1: –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    try:
        request_id_portrait = await fal_service.start_avatar_training(
            avatar_id=test_avatar_id,
            training_type="portrait",
            training_data_url=test_training_url,
            user_preferences={"quality": "balanced"}
        )
        
        print(f"‚úÖ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {request_id_portrait}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—É—á–µ–Ω–∏—è
        info = fal_service.get_training_type_info("portrait")
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info['name']} - {info['description']}")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}")
        print(f"üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: {info['technology']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 2: –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("üé® –¢–µ—Å—Ç 2: –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    try:
        request_id_style = await fal_service.start_avatar_training(
            avatar_id=test_avatar_id,
            training_type="style",
            training_data_url=test_training_url,
            user_preferences={"quality": "fast"}
        )
        
        print(f"‚úÖ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {request_id_style}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—É—á–µ–Ω–∏—è
        info = fal_service.get_training_type_info("style")
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info['name']} - {info['description']}")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}")
        print(f"üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: {info['technology']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print("üìä –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è")
    try:
        if 'request_id_portrait' in locals():
            status = await fal_service.check_training_status(
                request_id_portrait, 
                "portrait"
            )
            print(f"üé≠ –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ: {status.get('status', 'unknown')}")
            print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {status.get('progress', 0)}%")
            
            if status.get('logs'):
                print(f"üìù –õ–æ–≥–∏: {status['logs'][-1]}")
        
        if 'request_id_style' in locals():
            status = await fal_service.check_training_status(
                request_id_style, 
                "style"
            )
            print(f"üé® –°—Ç–∞—Ç—É—Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {status.get('status', 'unknown')}")
            print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {status.get('progress', 0)}%")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    print("üéØ –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    try:
        if 'request_id_portrait' in locals():
            result = await fal_service.get_training_result(
                request_id_portrait,
                "portrait"
            )
            print(f"üé≠ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ:")
            print(f"   üìÅ –§–∞–π–ª –º–æ–¥–µ–ª–∏: {result.get('diffusers_lora_file', {}).get('file_name', 'N/A')}")
            print(f"   üîó URL: {result.get('mock_model_url', 'N/A')}")
            print(f"   üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {result.get('test_mode', False)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 5: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    print("‚öôÔ∏è –¢–µ—Å—Ç 5: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    config = fal_service.get_config_summary()
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {config['test_mode']}")
    print(f"üîó Webhook URL: {config['webhook_url']}")
    print(f"üîë API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {config['api_key_configured']}")
    print(f"üì¶ FAL –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {config['fal_client_available']}")
    print(f"üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: {', '.join(config['supported_training_types'])}")
    print(f"‚ö° –ü—Ä–µ—Å–µ—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞: {', '.join(config['quality_presets'])}")
    
    print()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def test_webhook_simulation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é webhook –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    """
    print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–∏–º—É–ª—è—Ü–∏–∏")
    
    if not settings.AVATAR_TEST_MODE:
        print("‚ö†Ô∏è –¢–µ—Å—Ç webhook —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        return
    
    if not getattr(settings, 'FAL_ENABLE_WEBHOOK_SIMULATION', False):
        print("‚ö†Ô∏è Webhook —Å–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return
    
    fal_service = FALTrainingService()
    test_avatar_id = UUID("87654321-4321-8765-2109-987654321cba")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å webhook —Å–∏–º—É–ª—è—Ü–∏–µ–π...")
    
    try:
        request_id = await fal_service.start_avatar_training(
            avatar_id=test_avatar_id,
            training_type="portrait",
            training_data_url="https://example.com/test.zip"
        )
        
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {request_id}")
        print(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ webhook —á–µ—Ä–µ–∑ {getattr(settings, 'FAL_MOCK_TRAINING_DURATION', 30)} —Å–µ–∫—É–Ω–¥...")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏
        await asyncio.sleep(getattr(settings, 'FAL_MOCK_TRAINING_DURATION', 30) + 5)
        
        print("üì° Webhook —Å–∏–º—É–ª—è—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

if __name__ == "__main__":
    print("üé≠ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_avatar_training_system())
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç webhook —Å–∏–º—É–ª—è—Ü–∏–∏
    asyncio.run(test_webhook_simulation())
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 