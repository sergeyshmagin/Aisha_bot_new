import sys
sys.path.append('.')
from app.services.generation.cinematic_prompt_service import CinematicPromptService
import asyncio

async def debug_pipeline():
    service = CinematicPromptService()
    
    user_prompt = "–¥–µ–≤—É—à–∫–∞ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ —É–ª–∏—Ü–µ"
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{user_prompt}'")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
    needs_translation = service._needs_translation(user_prompt)
    print(f"üî§ –ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {needs_translation}")
    
    if needs_translation:
        translated = await service._translate_with_gpt(user_prompt) 
        print(f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{translated}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–µ—Ç–µ–∫—Ü–∏—é –Ω–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
        translated_lower = translated.lower()
        shot_type = service._determine_shot_type(translated_lower)
        print(f"üéØ –¢–∏–ø –∫–∞–¥—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞: '{shot_type}'")
    
    # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    result = await service.create_cinematic_prompt(
        user_prompt=user_prompt,
        avatar_type="portrait"
    )
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"üìä –ü–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
    parts = result['processed'].split(', ')
    for i, part in enumerate(parts[:5], 1):
        print(f"  {i}. {part}")

asyncio.run(debug_pipeline()) 