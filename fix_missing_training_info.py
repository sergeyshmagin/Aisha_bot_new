#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –∫–æ–≥–¥–∞ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ FAL AI, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î
"""
import asyncio
import sys
import os
from uuid import UUID

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_session
from app.services.avatar.fal_training_service import FALTrainingService
from app.services.avatar.training_service import AvatarTrainingService
from app.database.models import Avatar, AvatarStatus
from sqlalchemy import select, update

async def fix_avatar_training_info(avatar_id_str: str, fal_request_id: str):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        avatar_id_str: ID –∞–≤–∞—Ç–∞—Ä–∞
        fal_request_id: Request ID –æ—Ç FAL AI –∏–∑ –ª–æ–≥–æ–≤
    """
    try:
        avatar_id = UUID(avatar_id_str)
        print(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {avatar_id}")
        print(f"üìã FAL Request ID: {fal_request_id}")
        
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            stmt = select(Avatar).where(Avatar.id == avatar_id)
            result = await session.execute(stmt)
            avatar = result.scalar_one_or_none()
            
            if not avatar:
                print(f"‚ùå –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
            
            print(f"üìã –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–µ:")
            print(f"   –ò–º—è: {avatar.name}")
            print(f"   –°—Ç–∞—Ç—É—Å: {avatar.status}")
            print(f"   FAL Request ID: {avatar.fal_request_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏
            print(f"\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏...")
            
            update_stmt = update(Avatar).where(Avatar.id == avatar_id).values(
                fal_request_id=fal_request_id,
                status=AvatarStatus.TRAINING_IN_PROGRESS,
                training_progress=10  # –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            )
            
            await session.execute(update_stmt)
            await session.commit()
            
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ FAL AI
            print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI...")
            
            fal_service = FALTrainingService()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è (–∏–∑ –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞ –≤–∏–¥–Ω–æ —á—Ç–æ —ç—Ç–æ Style)
            training_type = "style" if "style" in avatar.name.lower() else "portrait"
            print(f"   –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_result = await fal_service.check_training_status(
                    fal_request_id, 
                    training_type
                )
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç FAL AI:")
                print(f"   Status: {status_result.get('status', 'unknown')}")
                print(f"   Logs: {len(status_result.get('logs', []))} –∑–∞–ø–∏—Å–µ–π")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if status_result.get('status') == 'completed':
                    print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                    
                    result = await fal_service.get_training_result(
                        fal_request_id,
                        training_type
                    )
                    
                    print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è:")
                    if 'diffusers_lora_file' in result:
                        print(f"   LoRA —Ñ–∞–π–ª: {result['diffusers_lora_file']['url']}")
                    if 'config_file' in result:
                        print(f"   –ö–æ–Ω—Ñ–∏–≥: {result['config_file']['url']}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î —á–µ—Ä–µ–∑ webhook
                    print(f"\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î...")
                    training_service = AvatarTrainingService(session)
                    
                    # –°–æ–∑–¥–∞–µ–º webhook –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    webhook_data = {
                        "request_id": fal_request_id,
                        "status": "completed",
                        **result
                    }
                    
                    success = await training_service.handle_webhook(webhook_data)
                    if success:
                        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î")
                
                elif status_result.get('status') == 'in_progress':
                    print(f"‚è≥ –û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = 50  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è in_progress
                    update_stmt = update(Avatar).where(Avatar.id == avatar_id).values(
                        training_progress=progress
                    )
                    await session.execute(update_stmt)
                    await session.commit()
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {progress}%")
                    
                elif status_result.get('status') == 'failed':
                    print(f"‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    if 'error' in status_result:
                        print(f"   –û—à–∏–±–∫–∞: {status_result['error']}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
                    update_stmt = update(Avatar).where(Avatar.id == avatar_id).values(
                        status=AvatarStatus.ERROR,
                        training_progress=0
                    )
                    await session.execute(update_stmt)
                    await session.commit()
                    print(f"üíæ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ERROR")
                
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI: {e}")
                return False
        
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID: {avatar_id_str}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def check_fal_request_directly(fal_request_id: str, training_type: str = "style"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ FAL AI –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞–≤–∞—Ç–∞—Ä—É
    
    Args:
        fal_request_id: Request ID –æ—Ç FAL AI
        training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (style –∏–ª–∏ portrait)
    """
    print(f"üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI")
    print(f"üìã Request ID: {fal_request_id}")
    print(f"üìã –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
    
    try:
        fal_service = FALTrainingService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_result = await fal_service.check_training_status(
            fal_request_id, 
            training_type
        )
        
        print(f"\n‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç FAL AI:")
        print(f"   Status: {status_result.get('status', 'unknown')}")
        print(f"   Logs: {len(status_result.get('logs', []))} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'logs' in status_result and status_result['logs']:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
            for log in status_result['logs'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                print(f"   {log}")
        
        # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if status_result.get('status') == 'completed':
            print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            
            result = await fal_service.get_training_result(
                fal_request_id,
                training_type
            )
            
            print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è:")
            for key, value in result.items():
                if isinstance(value, dict) and 'url' in value:
                    print(f"   {key}: {value['url']}")
                else:
                    print(f"   {key}: {value}")
        
        return status_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI: {e}")
        import traceback
        traceback.print_exc()
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) == 3:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏
        avatar_id = sys.argv[1]
        fal_request_id = sys.argv[2]
        print(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏")
        asyncio.run(fix_avatar_training_info(avatar_id, fal_request_id))
    elif len(sys.argv) == 2:
        # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI
        fal_request_id = sys.argv[1]
        print(f"üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ FAL AI")
        asyncio.run(check_fal_request_directly(fal_request_id))
    else:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"   python fix_missing_training_info.py <fal_request_id>                    # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        print(f"   python fix_missing_training_info.py <avatar_id> <fal_request_id>        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")

if __name__ == "__main__":
    print(f"üöÄ –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏")
    print(f"")
    
    main() 