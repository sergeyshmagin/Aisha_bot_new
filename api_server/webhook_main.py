"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç legacy –∫–æ–¥ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
"""
import asyncio
import os
from datetime import datetime
from typing import Dict, Any, Optional
from uuid import UUID
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Request, BackgroundTasks, Depends
from fastapi.responses import JSONResponse
from aiogram import Bot
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.config import settings
from app.core.logger import get_logger
from app.core.database import get_session
from app.database.models.models import Avatar, AvatarStatus, User

logger = get_logger(__name__)

# =================== STARTUP & SHUTDOWN ===================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π Bot instance –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot_instance: Optional[Bot] = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle management –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot_instance
    
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook API —Å–µ—Ä–≤–µ—Ä–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bot
    if settings.TELEGRAM_TOKEN:
        bot_instance = Bot(token=settings.TELEGRAM_TOKEN)
        logger.info("ü§ñ Bot instance –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        async with get_session() as session:
            await session.execute(select(1))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook API —Å–µ—Ä–≤–µ—Ä–∞")
    if bot_instance:
        await bot_instance.session.close()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Aisha Bot Webhook API", 
    version="2.0.0",
    description="Webhook API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è –æ—Ç FAL AI",
    lifespan=lifespan
)

# =================== DEPENDENCIES ===================

async def get_db() -> AsyncSession:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î"""
    async with get_session() as session:
        yield session

# =================== UTILITY FUNCTIONS ===================

async def send_avatar_ready_notification(user_telegram_id: str, avatar_name: str, training_type: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞  
        training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
    """
    try:
        if not bot_instance:
            logger.warning("‚ö†Ô∏è Bot instance –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        if training_type == "portrait":
            emoji = "üé≠"
            type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
        else:
            emoji = "üé®"
            type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
        
        message = (
            f"üéâ –í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!\n\n"
            f"{emoji} **{avatar_name}** ({type_name} —Å—Ç–∏–ª—å)\n"
            f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
        )
        
        await bot_instance.send_message(
            chat_id=user_telegram_id,
            text=message,
            parse_mode="Markdown"
        )
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")

async def find_avatar_by_request_id(session: AsyncSession, request_id: str) -> Optional[Avatar]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ request_id
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        request_id: ID –∑–∞–ø—Ä–æ—Å–∞ FAL AI
        
    Returns:
        Avatar –∏–ª–∏ None
    """
    try:
        query = select(Avatar).where(Avatar.fal_request_id == request_id)
        result = await session.execute(query)
        avatar = result.scalar_one_or_none()
        
        if avatar:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä {avatar.name} (ID: {avatar.id}) –¥–ª—è request_id: {request_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return avatar
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ request_id {request_id}: {e}")
        return None

async def update_avatar_status_from_webhook(
    session: AsyncSession, 
    avatar: Avatar, 
    webhook_data: Dict[str, Any]
) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ webhook –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        webhook_data: –î–∞–Ω–Ω—ã–µ webhook
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        status = webhook_data.get("status", "unknown")
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ FAL AI –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            "IN_QUEUE": AvatarStatus.TRAINING,
            "IN_PROGRESS": AvatarStatus.TRAINING,
            "COMPLETED": AvatarStatus.COMPLETED,
            "FAILED": AvatarStatus.ERROR,
            "CANCELLED": AvatarStatus.CANCELLED,
            "completed": AvatarStatus.COMPLETED,
            "failed": AvatarStatus.ERROR,
            "cancelled": AvatarStatus.CANCELLED,
        }
        
        new_status = status_mapping.get(status, AvatarStatus.TRAINING)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {
            "status": new_status,
            "updated_at": datetime.utcnow(),
            "last_status_check": datetime.utcnow()
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if "progress" in webhook_data:
            progress = webhook_data.get("progress", 0)
            if isinstance(progress, (int, float)) and 0 <= progress <= 100:
                update_data["training_progress"] = int(progress)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        if new_status == AvatarStatus.COMPLETED:
            update_data["training_completed_at"] = datetime.utcnow()
            update_data["training_progress"] = 100
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if "result" in webhook_data:
                result = webhook_data["result"]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL LoRA —Ñ–∞–π–ª–∞
                if "diffusers_lora_file" in result:
                    update_data["diffusers_lora_file_url"] = result["diffusers_lora_file"]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º config —Ñ–∞–π–ª
                if "config_file" in result:
                    update_data["config_file_url"] = result["config_file"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º fal_response_data
            current_data = avatar.fal_response_data or {}
            current_data.update({
                "webhook_completion": {
                    "timestamp": datetime.utcnow().isoformat(),
                    "status": status,
                    "data": webhook_data
                }
            })
            update_data["fal_response_data"] = current_data
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        elif new_status == AvatarStatus.ERROR:
            error_message = webhook_data.get("error", "Training failed")
            update_data["training_error"] = error_message
            
            # –û–±–Ω–æ–≤–ª—è–µ–º fal_response_data
            current_data = avatar.fal_response_data or {}
            current_data.update({
                "webhook_error": {
                    "timestamp": datetime.utcnow().isoformat(),
                    "error": error_message,
                    "data": webhook_data
                }
            })
            update_data["fal_response_data"] = current_data
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stmt = update(Avatar).where(Avatar.id == avatar.id).values(**update_data)
        await session.execute(stmt)
        await session.commit()
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name} –æ–±–Ω–æ–≤–ª–µ–Ω: {avatar.status} -> {new_status}")
        return True
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
        await session.rollback()
        return False

async def get_user_by_avatar(session: AsyncSession, avatar: Avatar) -> Optional[User]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–≤–∞—Ç–∞—Ä—É
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        avatar: –ê–≤–∞—Ç–∞—Ä
        
    Returns:
        User –∏–ª–∏ None
    """
    try:
        query = select(User).where(User.id == avatar.user_id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        return user
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
        return None

# =================== WEBHOOK HANDLERS ===================

async def handle_fal_webhook(webhook_data: Dict[str, Any]) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç FAL AI
    
    Args:
        webhook_data: –î–∞–Ω–Ω—ã–µ –æ—Ç FAL AI
        
    Returns:
        bool: True –µ—Å–ª–∏ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É FAL webhook: {webhook_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        request_id = (
            webhook_data.get("request_id") or
            webhook_data.get("finetune_id") or
            webhook_data.get("id")
        )
        
        if not request_id:
            logger.error("‚ùå request_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ webhook –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = webhook_data.get("status", "unknown")
        logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º request_id: {request_id}, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –†–∞–±–æ—Ç–∞–µ–º —Å –ë–î
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä
            avatar = await find_avatar_by_request_id(session, request_id)
            
            if not avatar:
                logger.warning(f"‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
            success = await update_avatar_status_from_webhook(session, avatar, webhook_data)
            
            if not success:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                return False
            
            # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if status in ["COMPLETED", "completed"]:
                user = await get_user_by_avatar(session, avatar)
                
                if user and user.telegram_id:
                    training_type = avatar.training_type.value if avatar.training_type else "portrait"
                    
                    await send_avatar_ready_notification(
                        user_telegram_id=user.telegram_id,
                        avatar_name=avatar.name,
                        training_type=training_type
                    )
                    
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
        
        logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è request_id: {request_id}")
        return True
        
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return False

# =================== API ENDPOINTS ===================

@app.post("/webhook/fal/status")
async def fal_status_webhook(request: Request, background_tasks: BackgroundTasks):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook –æ—Ç FAL AI –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
        webhook_data = await request.json()
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω FAL webhook: {webhook_data}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        background_tasks.add_task(handle_fal_webhook, webhook_data)
        
        # –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º FAL AI —á—Ç–æ webhook –ø–æ–ª—É—á–µ–Ω
        return JSONResponse(
            content={
                "status": "received",
                "timestamp": datetime.utcnow().isoformat(),
                "request_id": webhook_data.get("request_id") or webhook_data.get("id")
            },
            status_code=200
        )
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook: {e}")
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç webhook: {str(e)}"
        )

@app.post("/webhook/fal/portrait")
async def fal_portrait_webhook(request: Request, background_tasks: BackgroundTasks):
    """
    –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π endpoint –¥–ª—è flux-lora-portrait-trainer webhook
    """
    try:
        webhook_data = await request.json()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        webhook_data["training_type"] = "portrait"
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω FAL portrait webhook: {webhook_data}")
        
        background_tasks.add_task(handle_fal_webhook, webhook_data)
        
        return JSONResponse(
            content={
                "status": "received",
                "training_type": "portrait",
                "timestamp": datetime.utcnow().isoformat(),
                "request_id": webhook_data.get("request_id") or webhook_data.get("id")
            },
            status_code=200
        )
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è portrait webhook: {e}")
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç portrait webhook: {str(e)}"
        )

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        async with get_session() as session:
            await session.execute(select(1))
            db_status = "healthy"
    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: {e}")
        db_status = "unhealthy"
    
    return {
        "status": "healthy",
        "service": "Aisha Bot Webhook API",
        "version": "2.0.0",
        "database": db_status,
        "bot_initialized": bot_instance is not None,
        "timestamp": datetime.utcnow().isoformat()
    }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Aisha Bot Webhook API Server",
        "version": "2.0.0",
        "endpoints": {
            "main_webhook": "/webhook/fal/status",
            "portrait_webhook": "/webhook/fal/portrait",
            "health": "/health"
        }
    }

@app.get("/avatars/training")
async def get_training_avatars(session: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
    """
    try:
        query = select(Avatar).where(Avatar.status == AvatarStatus.TRAINING)
        result = await session.execute(query)
        avatars = result.scalars().all()
        
        avatars_data = []
        for avatar in avatars:
            avatars_data.append({
                "id": str(avatar.id),
                "name": avatar.name,
                "status": avatar.status.value,
                "progress": avatar.training_progress,
                "request_id": avatar.fal_request_id,
                "training_type": avatar.training_type.value if avatar.training_type else None,
                "started_at": avatar.training_started_at.isoformat() if avatar.training_started_at else None,
                "last_check": avatar.last_status_check.isoformat() if avatar.last_status_check else None
            })
        
        return {
            "count": len(avatars_data),
            "avatars": avatars_data
        }
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏—Ö—Å—è –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=8000,
        log_config={
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "default": {
                    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                },
            },
            "handlers": {
                "default": {
                    "formatter": "default",
                    "class": "logging.StreamHandler",
                    "stream": "ext://sys.stdout",
                },
            },
            "root": {
                "level": "INFO",
                "handlers": ["default"],
            },
        }
    ) 