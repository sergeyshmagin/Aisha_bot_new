#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ webhook
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""
import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.core.config import settings
from app.routers import fal_webhook

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Aisha Bot Webhook API",
    description="API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI",
    version="2.0.0"
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(fal_webhook.router)

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Aisha Bot Webhook API",
        "version": "2.0.0",
        "status": "running",
        "endpoints": {
            "webhook": "/api/v1/avatar/status_update",
            "test": "/api/v1/avatar/test_webhook"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "ssl_enabled": settings.SSL_ENABLED,
        "webhook_url": settings.FAL_WEBHOOK_URL
    }

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Aisha Bot Webhook API")
    print(f"   Host: {settings.API_HOST}")
    print(f"   Port: {settings.API_PORT}")
    print(f"   SSL: {settings.SSL_ENABLED}")
    print(f"   Webhook URL: {settings.FAL_WEBHOOK_URL}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    run_config = {
        "app": "main:app",
        "host": settings.API_HOST,
        "port": settings.API_PORT,
        "reload": settings.API_RELOAD,
        "log_level": "info"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º SSL –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if settings.SSL_ENABLED:
        from pathlib import Path
        
        ssl_cert = Path(settings.SSL_CERT_PATH)
        ssl_key = Path(settings.SSL_KEY_PATH)
        
        if ssl_cert.exists() and ssl_key.exists():
            run_config.update({
                "ssl_certfile": str(ssl_cert),
                "ssl_keyfile": str(ssl_key)
            })
            print(f"   SSL Cert: {ssl_cert}")
            print(f"   SSL Key: {ssl_key}")
        else:
            print("‚ö†Ô∏è  SSL —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ –±–µ–∑ SSL")
    
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(**run_config)

if __name__ == "__main__":
    main() 