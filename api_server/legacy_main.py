"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI
–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
"""
import os
import logging
from typing import Dict, Any, Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Request, BackgroundTasks
from fastapi.responses import JSONResponse
from aiogram import Bot
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy import select

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è  
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://aisha_user:KbZZGJHX09KSH7r9ev4m@192.168.0.4:5432/aisha")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
FAL_API_KEY = os.getenv("FAL_API_KEY", "")

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –ë–î
async_engine = create_async_engine(
    DATABASE_URL,
    pool_size=3,
    max_overflow=5,
    pool_timeout=30,
    pool_recycle=3600,
    echo=False
)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
AsyncSessionLocal = async_sessionmaker(
    async_engine,
    class_=AsyncSession,
    expire_on_commit=False
)

@asynccontextmanager
async def get_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ë–î"""
    session = AsyncSessionLocal()
    try:
        yield session
        await session.commit()
    except Exception:
        await session.rollback()
        raise
    finally:
        await session.close()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Aisha Bot Webhook API", version="2.0.0")

# Bot instance
bot_instance = None

async def get_bot() -> Optional[Bot]:
    """–ü–æ–ª—É—á–∞–µ—Ç Bot instance"""
    global bot_instance
    if bot_instance is None and TELEGRAM_BOT_TOKEN:
        bot_instance = Bot(token=TELEGRAM_BOT_TOKEN)
    return bot_instance

async def send_notification(user_telegram_id: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot = await get_bot()
        if bot:
            await bot.send_message(chat_id=user_telegram_id, text=message)
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@app.post("/api/v1/avatar/status_update")
async def fal_status_webhook(request: Request, background_tasks: BackgroundTasks):
    """Endpoint –¥–ª—è webhook –æ—Ç FAL AI"""
    try:
        webhook_data = await request.json()
        logger.info(f"[FAL WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook: {webhook_data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(handle_fal_webhook, webhook_data)
        
        return JSONResponse(
            content={"status": "received", "message": "webhook processed"},
            status_code=200
        )
        
    except Exception as e:
        logger.exception(f"[FAL WEBHOOK] –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=400, detail="Invalid webhook format")

async def handle_fal_webhook(webhook_data: Dict[str, Any]) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç FAL AI"""
    try:
        logger.info(f"[FAL WEBHOOK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {webhook_data}")
        
        status = webhook_data.get("status")
        request_id = webhook_data.get("request_id") or webhook_data.get("finetune_id")
        
        if status == "completed" and request_id:
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –Ω–∞—Ö–æ–¥–∏–º –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            async with get_session() as session:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
                result = await session.execute(
                    select("avatars.user_id", "avatars.name")
                    .select_from("avatars")
                    .where("avatars.fal_request_id = :request_id")
                    .params(request_id=request_id)
                )
                row = result.first()
                
                if row:
                    user_id, avatar_name = row
                    
                    # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_result = await session.execute(
                        select("users.telegram_id")
                        .select_from("users") 
                        .where("users.id = :user_id")
                        .params(user_id=user_id)
                    )
                    user_row = user_result.first()
                    
                    if user_row and user_row[0]:
                        message = f"üéâ –í–∞—à –∞–≤–∞—Ç–∞—Ä '{avatar_name}' –≥–æ—Ç–æ–≤! –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."
                        await send_notification(user_row[0], message)
                        
                        logger.info(f"[FAL WEBHOOK] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω webhook –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_name}")
                    else:
                        logger.warning(f"[FAL WEBHOOK] Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.warning(f"[FAL WEBHOOK] –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        logger.exception(f"[FAL WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "webhook-api", "database": "connected"}

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {"message": "Aisha Bot Webhook API", "version": "2.0.0"}

@app.post("/api/v1/avatar/test_webhook")
async def test_webhook(request: Request):
    """–¢–µ—Å—Ç–æ–≤—ã–π webhook endpoint"""
    try:
        data = await request.json()
        logger.info(f"[TEST WEBHOOK] –ü–æ–ª—É—á–µ–Ω: {data}")
        return {"status": "test_received", "data": data}
    except Exception as e:
        logger.error(f"[TEST WEBHOOK] –û—à–∏–±–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 