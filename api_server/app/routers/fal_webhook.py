"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –±–æ—Ç–∞
"""
from typing import Dict, Any, Optional
from fastapi import APIRouter, Request, HTTPException, Depends, BackgroundTasks
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
import aiohttp
from uuid import UUID
import sys
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è production
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
try:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π app/core/database.py
    from app.core.database import get_session  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_session –≤–º–µ—Å—Ç–æ get_async_session
    from app.services.avatar.training_service import AvatarTrainingService
    from app.core.di import get_user_service_with_session  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from app.core.config import settings as main_settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {e}")
    print(f"üîß Project root: {project_root}")
    print(f"üîß Python path: {sys.path}")
    raise

from ..core.config import settings
from ..core.logger import get_webhook_logger

logger = get_webhook_logger()

router = APIRouter(prefix="/api/v1/avatar", tags=["avatar"])

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –ë–î –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def get_db_session() -> AsyncSession:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    async with get_session() as session:
        yield session

@router.post("/status_update")
async def handle_fal_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    session: AsyncSession = Depends(get_db_session)
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç FAL AI –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = await request.json()
        
        logger.info(f"[WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç FAL AI: {webhook_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        request_id = webhook_data.get("request_id")
        status = webhook_data.get("status")
        
        if not request_id:
            logger.error("[WEBHOOK] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç request_id –≤ webhook")
            raise HTTPException(status_code=400, detail="Missing request_id")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        training_type = request.query_params.get("training_type", "portrait")
        
        logger.info(f"[WEBHOOK] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '{status}' –¥–ª—è request_id: {request_id}, —Ç–∏–ø: {training_type}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        background_tasks.add_task(
            process_webhook_background,
            webhook_data,
            training_type
        )
        
        return JSONResponse(
            status_code=200,
            content={"status": "received", "request_id": request_id}
        )
        
    except Exception as e:
        logger.exception(f"[WEBHOOK] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_webhook_background(
    webhook_data: Dict[str, Any],
    training_type: str
):
    """
    –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç FAL AI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π –ë–î –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """
    request_id = webhook_data.get("request_id")
    status = webhook_data.get("status")
    
    logger.info(f"[WEBHOOK BACKGROUND] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {request_id}, —Å—Ç–∞—Ç—É—Å: {status}")
    logger.info(f"[WEBHOOK BACKGROUND] –î–∞–Ω–Ω—ã–µ webhook: {webhook_data}")
    logger.info(f"[WEBHOOK BACKGROUND] –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π async context manager
        logger.info(f"[WEBHOOK BACKGROUND] –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î...")
        
        async with get_session() as session:
            try:
                logger.info(f"[WEBHOOK BACKGROUND] –°–µ—Å—Å–∏—è –ë–î —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
                training_service = AvatarTrainingService(session)
                logger.info(f"[WEBHOOK BACKGROUND] –°–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤–∞—Ç–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                avatar = await training_service._find_avatar_by_request_id(request_id)
                if not avatar:
                    logger.error(f"[WEBHOOK BACKGROUND] –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –ù–ï –Ω–∞–π–¥–µ–Ω!")
                    return
                
                logger.info(f"[WEBHOOK BACKGROUND] –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä: {avatar.name} (ID: {avatar.id})")
                logger.info(f"[WEBHOOK BACKGROUND] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞: {avatar.status}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
                logger.info(f"[WEBHOOK BACKGROUND] –í—ã–∑—ã–≤–∞–µ–º handle_webhook...")
                success = await training_service.handle_webhook(webhook_data)
                
                if success:
                    logger.info(f"[WEBHOOK BACKGROUND] ‚úÖ Webhook {request_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ –∞–≤–∞—Ç–∞—Ä
                    await session.refresh(avatar)
                    logger.info(f"[WEBHOOK BACKGROUND] –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞: {avatar.status}")
                    logger.info(f"[WEBHOOK BACKGROUND] Finetune ID: {avatar.finetune_id}")
                    
                    # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if status and status.lower() == "completed":
                        logger.info(f"[WEBHOOK BACKGROUND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏...")
                        await send_completion_notification(webhook_data, session, training_type)
                else:
                    logger.error(f"[WEBHOOK BACKGROUND] ‚ùå Webhook {request_id} –ù–ï –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
            except Exception as e:
                logger.exception(f"[WEBHOOK BACKGROUND] –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏: {e}")
                await session.rollback()
                raise
        
    except Exception as e:
        logger.exception(f"[WEBHOOK BACKGROUND] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def send_completion_notification(
    webhook_data: Dict[str, Any],
    session: AsyncSession,
    training_type: str
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä training_type –∏ —É–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    try:
        request_id = webhook_data.get("request_id")
        logger.info(f"[NOTIFICATION] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {request_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä –ø–æ request_id
        training_service = AvatarTrainingService(session)
        avatar = await training_service._find_avatar_by_request_id(request_id)
        
        if not avatar:
            logger.warning(f"[NOTIFICATION] –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info(f"[NOTIFICATION] –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä: {avatar.name} (ID: {avatar.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = get_user_service_with_session(session)
        user = await user_service.get_user_by_id(avatar.user_id)
        
        if not user or not user.telegram_id:
            logger.warning(f"[NOTIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            return
        
        logger.info(f"[NOTIFICATION] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        bot = Bot(token=main_settings.TELEGRAM_TOKEN)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if training_type == "portrait":
                emoji = "üé≠"
                type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
            else:
                emoji = "üé®"
                type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
            
            message = (
                f"üéâ **–í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!**\n\n"
                f"{emoji} **{avatar.name}** ({type_name} —Å—Ç–∏–ª—å)\n"
                f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ‚Üí –ê–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
                    callback_data="avatar_gallery"
                )],
                [InlineKeyboardButton(
                    text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    callback_data=f"avatar_generate:{avatar.id}"
                )]
            ])
            
            logger.info(f"[NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            logger.info(f"[NOTIFICATION] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
        finally:
            await bot.session.close()
        
    except Exception as e:
        logger.exception(f"[NOTIFICATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@router.get("/test_webhook")
async def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    return {
        "status": "ok",
        "message": "Webhook API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "fal_webhook_url": settings.FAL_WEBHOOK_URL,
        "ssl_enabled": settings.SSL_ENABLED,
        "main_settings_webhook": main_settings.FAL_WEBHOOK_URL
    }
