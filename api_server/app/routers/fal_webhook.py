"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –±–æ—Ç–∞
"""
from typing import Dict, Any, Optional
from fastapi import APIRouter, Request, HTTPException, Depends, BackgroundTasks
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
import aiohttp
from uuid import UUID
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from app.database.connection import get_async_session
from app.services.avatar.training_service import AvatarTrainingService
from app.services.user import get_user_service_with_session
from app.core.config import settings as main_settings
from ..core.config import settings
from ..core.logger import get_webhook_logger

logger = get_webhook_logger()

router = APIRouter(prefix="/api/v1/avatar", tags=["avatar"])

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –ë–î –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def get_db_session() -> AsyncSession:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    async for session in get_async_session():
        return session

@router.post("/status_update")
async def handle_fal_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    session: AsyncSession = Depends(get_db_session)
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç FAL AI –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = await request.json()
        
        logger.info(f"[WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç FAL AI: {webhook_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        request_id = webhook_data.get("request_id")
        status = webhook_data.get("status")
        
        if not request_id:
            logger.error("[WEBHOOK] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç request_id –≤ webhook")
            raise HTTPException(status_code=400, detail="Missing request_id")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        training_type = request.query_params.get("training_type", "portrait")
        
        logger.info(f"[WEBHOOK] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '{status}' –¥–ª—è request_id: {request_id}, —Ç–∏–ø: {training_type}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        background_tasks.add_task(
            process_webhook_background,
            webhook_data,
            training_type
        )
        
        return JSONResponse(
            status_code=200,
            content={"status": "received", "request_id": request_id}
        )
        
    except Exception as e:
        logger.exception(f"[WEBHOOK] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_webhook_background(
    webhook_data: Dict[str, Any],
    training_type: str
):
    """
    –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç FAL AI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    try:
        request_id = webhook_data.get("request_id")
        status = webhook_data.get("status")
        
        logger.info(f"[WEBHOOK BACKGROUND] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {request_id}, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        async for session in get_async_session():
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
                training_service = AvatarTrainingService(session)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
                success = await training_service.handle_webhook(webhook_data)
                
                if success:
                    logger.info(f"[WEBHOOK BACKGROUND] Webhook {request_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if status and status.lower() == "completed":
                        await send_completion_notification(webhook_data, session)
                else:
                    logger.warning(f"[WEBHOOK BACKGROUND] Webhook {request_id} –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
            except Exception as e:
                logger.exception(f"[WEBHOOK BACKGROUND] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ—Å—Å–∏–∏: {e}")
                await session.rollback()
                raise
            finally:
                await session.close()
        
    except Exception as e:
        logger.exception(f"[WEBHOOK BACKGROUND] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def send_completion_notification(
    webhook_data: Dict[str, Any],
    session: AsyncSession
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    """
    try:
        request_id = webhook_data.get("request_id")
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä –ø–æ request_id
        training_service = AvatarTrainingService(session)
        avatar = await training_service._find_avatar_by_request_id(request_id)
        
        if not avatar:
            logger.warning(f"[NOTIFICATION] –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = get_user_service_with_session(session)
        user = await user_service.get_user_by_id(avatar.user_id)
        
        if not user or not user.telegram_id:
            logger.warning(f"[NOTIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        bot = Bot(token=main_settings.TELEGRAM_TOKEN)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            training_type = webhook_data.get("training_type", "portrait")
            if training_type == "portrait":
                emoji = "üé≠"
                type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
            else:
                emoji = "üé®"
                type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
            
            message = (
                f"üéâ **–í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!**\n\n"
                f"{emoji} **{avatar.name}** ({type_name} —Å—Ç–∏–ª—å)\n"
                f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ‚Üí –ê–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
            )
            
            await bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="Markdown"
            )
            
            logger.info(f"[NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
        finally:
            await bot.session.close()
        
    except Exception as e:
        logger.exception(f"[NOTIFICATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@router.get("/test_webhook")
async def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    return {
        "status": "ok",
        "message": "Webhook API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "fal_webhook_url": settings.FAL_WEBHOOK_URL,
        "ssl_enabled": settings.SSL_ENABLED,
        "main_settings_webhook": main_settings.FAL_WEBHOOK_URL
    } 