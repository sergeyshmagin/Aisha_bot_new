"""
Webhook —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç FAL AI
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
"""
import asyncio
from typing import Dict, Any, Optional
from fastapi import APIRouter, Request, HTTPException, Depends, BackgroundTasks
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
import aiohttp

from ..core.config import settings
from ..core.logger import get_webhook_logger

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

from app.database.connection import get_async_session
from app.services.avatar.training_service import AvatarTrainingService
from app.services.user import get_user_service_with_session

router = APIRouter(prefix="/api/v1", tags=["FAL Webhook"])
webhook_logger = get_webhook_logger()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π Bot instance
bot_instance: Optional[Bot] = None

async def get_bot() -> Bot:
    """–ü–æ–ª—É—á–∞–µ—Ç Bot instance –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global bot_instance
    if bot_instance is None:
        bot_instance = Bot(token=settings.TELEGRAM_TOKEN)
    return bot_instance

def parse_fal_comment(comment: str) -> Dict[str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç FAL AI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    –§–æ—Ä–º–∞—Ç: 'user_id=123;avatar_id=abc;training_type=portrait'
    """
    result = {}
    if not comment:
        return result
    
    try:
        for part in comment.split(";"):
            if "=" in part:
                key, value = part.split("=", 1)
                result[key.strip()] = value.strip()
    except Exception as e:
        webhook_logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è '{comment}': {e}")
    
    return result

async def send_avatar_ready_notification(
    user_telegram_id: str, 
    avatar_name: str, 
    training_type: str
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞
    """
    try:
        bot = await get_bot()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        if training_type == "portrait":
            emoji = "üé≠"
            type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å"
        else:
            emoji = "üé®"
            type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å"
        
        message = (
            f"üéâ **–í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!**\n\n"
            f"{emoji} **{avatar_name}** ({type_name})\n"
            f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
        )
        
        await bot.send_message(
            chat_id=user_telegram_id,
            text=message,
            parse_mode="Markdown"
        )
        
        webhook_logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
        return True
        
    except Exception as e:
        webhook_logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
        return False

@router.post("/avatar/status_update")
async def fal_avatar_status_webhook(
    request: Request, 
    background_tasks: BackgroundTasks,
    session: AsyncSession = Depends(get_async_session)
):
    """
    Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç FAL AI –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ä–æ–≥–æ endpoint —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = await request.json()
        
        webhook_logger.info(f"[FAL WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook: {webhook_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        request_id = webhook_data.get("request_id") or webhook_data.get("finetune_id")
        status = webhook_data.get("status")
        comment = webhook_data.get("comment", "")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ avatar_id –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        user_id = webhook_data.get("user_id")
        avatar_id = webhook_data.get("avatar_id")
        training_type = webhook_data.get("training_type", "portrait")
        
        # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if (not user_id or not avatar_id) and comment:
            parsed_comment = parse_fal_comment(comment)
            user_id = user_id or parsed_comment.get("user_id")
            avatar_id = avatar_id or parsed_comment.get("avatar_id")
            training_type = training_type or parsed_comment.get("training_type", "portrait")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not request_id:
            webhook_logger.error(f"request_id/finetune_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ webhook: {webhook_data}")
            raise HTTPException(status_code=400, detail="request_id/finetune_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ FAL AI
        background_tasks.add_task(
            handle_fal_webhook_processing,
            webhook_data,
            session
        )
        
        # –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º FAL AI
        return JSONResponse(
            content={
                "status": "received",
                "request_id": request_id,
                "message": "Webhook –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            },
            status_code=200
        )
        
    except HTTPException:
        raise
    except Exception as e:
        webhook_logger.exception(f"[FAL WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

async def handle_fal_webhook_processing(
    webhook_data: Dict[str, Any], 
    session: AsyncSession
) -> bool:
    """
    –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç FAL AI
    """
    try:
        webhook_logger.info(f"[FAL WEBHOOK] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {webhook_data}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        training_service = AvatarTrainingService(session)
        user_service = get_user_service_with_session(session)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        success = await training_service.handle_webhook(webhook_data)
        
        if not success:
            webhook_logger.warning("[FAL WEBHOOK] Webhook –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        status = webhook_data.get("status")
        if status in ["completed", "ready"]:
            await send_completion_notification(webhook_data, training_service, user_service)
        
        webhook_logger.info("[FAL WEBHOOK] –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        webhook_logger.exception(f"[FAL WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

async def send_completion_notification(
    webhook_data: Dict[str, Any],
    training_service: AvatarTrainingService,
    user_service
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        request_id = webhook_data.get("request_id") or webhook_data.get("finetune_id")
        training_type = webhook_data.get("training_type", "portrait")
        
        if not request_id:
            webhook_logger.warning("[FAL WEBHOOK] –ù–µ—Ç request_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä –ø–æ request_id
        avatar = await training_service._find_avatar_by_request_id(request_id)
        
        if not avatar:
            webhook_logger.warning(f"[FAL WEBHOOK] –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user_by_id(avatar.user_id)
        
        if not user or not user.telegram_id:
            webhook_logger.warning(f"[FAL WEBHOOK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_sent = await send_avatar_ready_notification(
            user_telegram_id=str(user.telegram_id),
            avatar_name=avatar.name,
            training_type=training_type
        )
        
        if notification_sent:
            webhook_logger.info(f"[FAL WEBHOOK] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
        
        return notification_sent
        
    except Exception as e:
        webhook_logger.exception(f"[FAL WEBHOOK] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "service": "Aisha Bot FAL Webhook API",
        "ssl_enabled": settings.SSL_ENABLED
    }

@router.get("/webhook/status")
async def webhook_status():
    """–°—Ç–∞—Ç—É—Å webhook —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "webhook_endpoint": "/api/v1/avatar/status_update",
        "ssl_configured": settings.SSL_ENABLED,
        "telegram_bot_configured": bool(settings.TELEGRAM_TOKEN),
        "fal_api_configured": bool(settings.FAL_API_KEY)
    } 