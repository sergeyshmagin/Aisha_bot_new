"""
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ fal_request_id –¥–ª—è SERGEY-STYLE-150-ST –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ FAL AI
"""
import asyncio
from uuid import UUID
from sqlalchemy import select, update
from app.core.database import get_session
from app.database.models import Avatar

async def set_fal_request_id_from_screenshot():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç fal_request_id –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ FAL AI"""
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ fal_request_id –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ FAL AI...")
    
    # –ò–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∏–¥–Ω–æ: e82db8dd-99e2-46cc-9bc5-6727f0911790
    correct_fal_request_id = "e82db8dd-99e2-46cc-9bc5-6727f0911790"
    
    print(f"üéØ fal_request_id –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {correct_fal_request_id}")
    
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä
        query = select(Avatar).where(Avatar.name == "SERGEY-STYLE-150-ST")
        result = await session.execute(query)
        avatar = result.scalar_one_or_none()
        
        if not avatar:
            print("‚ùå –ê–≤–∞—Ç–∞—Ä SERGEY-STYLE-150-ST –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"‚úÖ –ê–≤–∞—Ç–∞—Ä –Ω–∞–π–¥–µ–Ω: {avatar.id}")
        print(f"   –¢–µ–∫—É—â–∏–π fal_request_id: {avatar.fal_request_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º fal_request_id
        stmt = update(Avatar).where(Avatar.id == avatar.id).values(
            fal_request_id=correct_fal_request_id
        )
        await session.execute(stmt)
        await session.commit()
        
        print(f"‚úÖ fal_request_id –æ–±–Ω–æ–≤–ª–µ–Ω: {correct_fal_request_id}")
        return True

async def test_fal_api_with_correct_id():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FAL AI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º request_id"""
    print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAL AI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º request_id...")
    
    request_id = "e82db8dd-99e2-46cc-9bc5-6727f0911790"
    
    try:
        from app.core.config import settings
        import aiohttp
        import json
        
        fal_api_key = settings.effective_fal_api_key
        if not fal_api_key:
            print(f"‚ùå FAL API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        endpoint = "fal-ai/flux-pro-trainer"
        result_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}"
        
        headers = {
            "Authorization": f"Key {fal_api_key}",
            "Content-Type": "application/json"
        }
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å –∫: {result_url}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(result_url, headers=headers) as response:
                print(f"   HTTP –∫–æ–¥: {response.status}")
                
                if response.status == 200:
                    try:
                        result_data = await response.json()
                        print(f"   JSON –æ—Ç–≤–µ—Ç:")
                        print(f"      {json.dumps(result_data, indent=2, ensure_ascii=False)}")
                        
                        finetune_id = result_data.get("finetune_id")
                        if finetune_id:
                            print(f"‚úÖ finetune_id –Ω–∞–π–¥–µ–Ω: {finetune_id}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                            expected_finetune_id = "df9f2a81-f27b-4621-9a25-bf50474bf0dd"
                            if finetune_id == expected_finetune_id:
                                print(f"‚úÖ finetune_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—É!")
                            else:
                                print(f"‚ö†Ô∏è finetune_id –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:")
                                print(f"   –ü–æ–ª—É—á–µ–Ω: {finetune_id}")
                                print(f"   –û–∂–∏–¥–∞–ª—Å—è: {expected_finetune_id}")
                            
                            return finetune_id
                        else:
                            print(f"‚ùå finetune_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                            return None
                    except Exception as e:
                        text = await response.text()
                        print(f"   Text –æ—Ç–≤–µ—Ç: {text[:500]}...")
                        print(f"   JSON –æ—à–∏–±–∫–∞: {e}")
                        return None
                else:
                    text = await response.text()
                    print(f"   –û—à–∏–±–∫–∞ HTTP {response.status}: {text}")
                    return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FAL API: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–ì–û FAL_REQUEST_ID")
    print("=" * 50)
    
    # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π fal_request_id
    success = await set_fal_request_id_from_screenshot()
    
    if success:
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º FAL API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        finetune_id = await test_fal_api_with_correct_id()
        
        if finetune_id:
            print(f"\nüéâ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω finetune_id: {finetune_id}")
            print(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å finetune_id")
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 