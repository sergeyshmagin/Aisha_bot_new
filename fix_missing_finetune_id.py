"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ finetune_id –¥–ª—è SERGEY-STYLE-150-ST
"""
import asyncio
from uuid import UUID
from sqlalchemy import select, update
from app.core.database import get_session
from app.database.models import Avatar, AvatarTrainingType, AvatarStatus
from app.services.avatar.finetune_updater_service import FinetuneUpdaterService

async def check_sergey_style_150_st():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SERGEY-STYLE-150-ST"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è SERGEY-STYLE-150-ST...")
    
    async with get_session() as session:
        query = select(Avatar).where(Avatar.name == "SERGEY-STYLE-150-ST")
        result = await session.execute(query)
        avatar = result.scalar_one_or_none()
        
        if avatar:
            print(f"‚úÖ –ê–≤–∞—Ç–∞—Ä –Ω–∞–π–¥–µ–Ω:")
            print(f"   ID: {avatar.id}")
            print(f"   –ò–º—è: {avatar.name}")
            print(f"   –°—Ç–∞—Ç—É—Å: {avatar.status.value}")
            print(f"   –¢–∏–ø: {avatar.training_type.value}")
            print(f"   finetune_id: {avatar.finetune_id}")
            print(f"   fal_request_id: {avatar.fal_request_id}")
            print(f"   LoRA URL: {avatar.diffusers_lora_file_url}")
            print(f"   Config URL: {avatar.config_file_url}")
            print(f"   Trigger word: {avatar.trigger_word}")
            return avatar
        else:
            print("‚ùå –ê–≤–∞—Ç–∞—Ä SERGEY-STYLE-150-ST –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

async def get_real_finetune_id_from_fal(fal_request_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π finetune_id –∏–∑ FAL AI API"""
    print(f"\nüåê –ó–∞–ø—Ä–æ—Å –∫ FAL AI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è finetune_id...")
    print(f"   fal_request_id: {fal_request_id}")
    
    try:
        from app.core.config import settings
        import aiohttp
        import json
        
        fal_api_key = settings.effective_fal_api_key
        if not fal_api_key:
            print(f"‚ùå FAL API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # URL –¥–ª—è Style –∞–≤–∞—Ç–∞—Ä–æ–≤
        endpoint = "fal-ai/flux-pro-trainer"
        result_url = f"https://queue.fal.run/{endpoint}/requests/{fal_request_id}"
        
        headers = {
            "Authorization": f"Key {fal_api_key}",
            "Content-Type": "application/json"
        }
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å –∫: {result_url}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(result_url, headers=headers) as response:
                print(f"   HTTP –∫–æ–¥: {response.status}")
                
                if response.status == 200:
                    try:
                        result_data = await response.json()
                        print(f"   JSON –æ—Ç–≤–µ—Ç:")
                        print(f"      {json.dumps(result_data, indent=2, ensure_ascii=False)}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º finetune_id
                        finetune_id = result_data.get("finetune_id")
                        
                        if finetune_id:
                            print(f"‚úÖ finetune_id –Ω–∞–π–¥–µ–Ω: {finetune_id}")
                            return finetune_id
                        else:
                            print(f"‚ùå finetune_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                            return None
                        
                    except Exception as json_error:
                        text = await response.text()
                        print(f"   Text –æ—Ç–≤–µ—Ç: {text[:500]}...")
                        print(f"   JSON –æ—à–∏–±–∫–∞: {json_error}")
                        return None
                else:
                    text = await response.text()
                    print(f"   –û—à–∏–±–∫–∞ HTTP {response.status}: {text}")
                    return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FAL API –≤—ã–∑–æ–≤–∞: {e}")
        return None

async def update_finetune_id_manually(avatar_id: UUID, finetune_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç finetune_id –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ FinetuneUpdaterService"""
    print(f"\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ finetune_id —á–µ—Ä–µ–∑ FinetuneUpdaterService...")
    
    async with get_session() as session:
        updater = FinetuneUpdaterService(session)
        
        success = await updater.update_finetune_id_by_id(
            avatar_id=avatar_id,
            new_finetune_id=finetune_id,
            reason="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ finetune_id –∏–∑ FAL AI",
            updated_by="manual_fix_script"
        )
        
        if success:
            print(f"‚úÖ finetune_id —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è finetune_id")
        
        return success

async def verify_update(avatar_id: UUID, expected_finetune_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ"""
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    async with get_session() as session:
        avatar = await session.get(Avatar, avatar_id)
        if not avatar:
            print(f"‚ùå –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üìä –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   finetune_id: {avatar.finetune_id}")
        print(f"   diffusers_lora_file_url: {avatar.diffusers_lora_file_url}")
        print(f"   config_file_url: {avatar.config_file_url}")
        print(f"   trigger_word: {avatar.trigger_word}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º
        print(f"\nüîç –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º Style –∞–≤–∞—Ç–∞—Ä–∞:")
        has_finetune = bool(avatar.finetune_id)
        no_lora = avatar.diffusers_lora_file_url is None
        has_trigger = bool(avatar.trigger_word)
        
        print(f"   finetune_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if has_finetune else '‚ùå'}")
        print(f"   LoRA –æ—á–∏—â–µ–Ω: {'‚úÖ' if no_lora else '‚ùå'}")
        print(f"   trigger_word —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if has_trigger else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ finetune_id –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if avatar.finetune_id == expected_finetune_id:
            print(f"‚úÖ finetune_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É!")
            return True
        else:
            print(f"‚ùå finetune_id –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É:")
            print(f"   –ü–æ–ª—É—á–µ–Ω: {avatar.finetune_id}")
            print(f"   –û–∂–∏–¥–∞–ª—Å—è: {expected_finetune_id}")
            return False

async def check_update_history(avatar_id: UUID):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π finetune_id"""
    print(f"\nüìã –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π finetune_id...")
    
    async with get_session() as session:
        updater = FinetuneUpdaterService(session)
        history = await updater.get_update_history(avatar_id)
        
        if history:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(history)} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:")
            for i, record in enumerate(history, 1):
                print(f"   {i}. {record.get('timestamp', 'N/A')}")
                print(f"      –°—Ç–∞—Ä—ã–π: {record.get('old_finetune_id', 'N/A')}")
                print(f"      –ù–æ–≤—ã–π: {record.get('new_finetune_id', 'N/A')}")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞: {record.get('reason', 'N/A')}")
                print(f"      –ö–µ–º: {record.get('updated_by', 'N/A')}")
                print("")
        else:
            print(f"üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ï–ì–û FINETUNE_ID")
    print("=" * 60)
    
    # –û–∂–∏–¥–∞–µ–º—ã–π finetune_id –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ FAL AI
    expected_finetune_id = "df9f2a81-f27b-4621-9a25-bf50474bf0dd"
    print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π finetune_id: {expected_finetune_id}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    avatar = await check_sergey_style_150_st()
    if not avatar:
        return
    
    avatar_id = avatar.id
    fal_request_id = avatar.fal_request_id
    
    print(f"\nüí° –ü—Ä–æ–±–ª–µ–º–∞: finetune_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {expected_finetune_id}")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π finetune_id –∏–∑ FAL AI
    real_finetune_id = await get_real_finetune_id_from_fal(fal_request_id)
    
    if real_finetune_id:
        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω finetune_id –∏–∑ FAL AI: {real_finetune_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
        if real_finetune_id == expected_finetune_id:
            print(f"‚úÖ finetune_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞!")
        else:
            print(f"‚ö†Ô∏è finetune_id –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ:")
            print(f"   –ò–∑ FAL AI: {real_finetune_id}")
            print(f"   –û–∂–∏–¥–∞–ª—Å—è: {expected_finetune_id}")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º finetune_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await update_finetune_id_manually(avatar_id, real_finetune_id)
        
        if success:
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await verify_update(avatar_id, real_finetune_id)
            
            # 5. –°–º–æ—Ç—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await check_update_history(avatar_id)
        
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å finetune_id –∏–∑ FAL AI")
        print(f"üí° –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        success = await update_finetune_id_manually(avatar_id, expected_finetune_id)
        
        if success:
            await verify_update(avatar_id, expected_finetune_id)
            await check_update_history(avatar_id)
    
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 