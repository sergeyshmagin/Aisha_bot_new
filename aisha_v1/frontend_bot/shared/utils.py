import logging
from typing import Optional
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from io import BytesIO
from frontend_bot.repositories.user_repository import UserRepository
from sqlalchemy.ext.asyncio import AsyncSession


async def clear_old_wizard_messages(
    bot,
    user_session,
    chat_id: int,
    user_id: int,
    keep_msg_id: Optional[int] = None,
) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–∑–∞—Ä–¥–∞, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ).
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å traceback.
    """
    if user_id not in user_session:
        return
    msg_ids = user_session[user_id]["wizard_message_ids"]
    for mid in msg_ids:
        if keep_msg_id is not None and mid == keep_msg_id:
            continue
        try:
            await bot.delete_message(chat_id, mid)
        except Exception as e:
            logging.exception(
                "[clear_old_wizard_messages] Exception –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "
                f"{mid}: {e}"
            )
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π message_id
    if keep_msg_id:
        user_session[user_id]["wizard_message_ids"] = [keep_msg_id]
    else:
        user_session[user_id]["wizard_message_ids"] = []


async def delete_last_error_message(bot, user_session, user_id, chat_id):
    if user_id not in user_session:
        return
    old_err = user_session[user_id]["last_error_msg"]
    if old_err:
        try:
            await bot.delete_message(chat_id, old_err)
        except Exception:
            pass
        user_session[user_id]["last_error_msg"] = None


async def delete_last_info_message(bot, user_session, user_id, chat_id):
    if user_id not in user_session:
        return
    msg_id = user_session[user_id].get("last_info_msg_id")
    if msg_id:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
        user_session[user_id]["last_info_msg_id"] = None


async def send_and_track(bot, user_session, user_id, chat_id, *args, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_session: –°–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è bot.send_message
        **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è bot.send_message
        
    Returns:
        Message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    msg = await bot.send_message(chat_id, *args, **kwargs)
    if user_id not in user_session:
        user_session[user_id] = {"wizard_message_ids": []}
    user_session[user_id]["wizard_message_ids"].append(msg.message_id)
    return msg


async def send_photo_validation_error(bot, chat_id, photo_bytes, error_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –∏ inline-–∫–Ω–æ–ø–∫–æ–π '–ü–æ–Ω—è—Ç–Ω–æ'.
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        photo_bytes: –±–∞–π—Ç—ã —Ñ–æ—Ç–æ
        error_text: —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    Returns:
        Message: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error"))
    text = (
        f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {error_text}\n"
        "üì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
    )
    return await bot.send_photo(
        chat_id, BytesIO(photo_bytes), caption=text, reply_markup=markup
    )


async def get_or_update_user(message: Message, session: AsyncSession):
    user_repo = UserRepository(session)
    u = message.from_user
    user = await user_repo.get_or_create(
        telegram_id=u.id,
        username=getattr(u, "username", None),
        first_name=getattr(u, "first_name", None),
        last_name=getattr(u, "last_name", None),
        language_code=getattr(u, "language_code", None),
        is_bot=getattr(u, "is_bot", False),
        is_premium=getattr(u, "is_premium", False),
    )
    await user_repo.update_if_changed(
        user,
        getattr(u, "username", None),
        getattr(u, "first_name", None),
        getattr(u, "last_name", None),
    )
    return user
