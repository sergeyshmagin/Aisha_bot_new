from frontend_bot.keyboards.common import confirm_keyboard
from frontend_bot.texts.avatar.texts import PHOTO_NAME_EMPTY, AVATAR_CONFIRM_TEXT
from frontend_bot.services.avatar_manager import get_current_avatar_id
from frontend_bot.services.state_utils import set_state, get_state, clear_state
from frontend_bot.bot_instance import bot
from frontend_bot.config import settings
from frontend_bot.services.fal_trainer import train_avatar
from frontend_bot.keyboards.reply import my_avatars_keyboard
from frontend_bot.texts.common import ERROR_FILE
from frontend_bot.utils.validators import validate_user_avatar
from frontend_bot.keyboards.avatar import avatar_confirm_keyboard
import logging
from frontend_bot.handlers.avatar.state import user_session
from frontend_bot.services.avatar_workflow import update_draft_avatar, finalize_draft_avatar
from sqlalchemy.ext.asyncio import AsyncSession
from database.config import AsyncSessionLocal
from frontend_bot.repositories.user_repository import UserRepository
from frontend_bot.services.avatar_validator import validate_avatar_exists, validate_avatar_photos, validate_avatar_state
from frontend_bot.services.avatar_fsm_service import set_avatar_type, set_avatar_name, confirm_avatar, edit_avatar_name

print("CONFIRM HANDLERS LOADED")
# –ú–æ–¥—É–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–º
# –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞ handle_avatar_confirm_yes,
# handle_avatar_confirm_edit, handle_avatar_cancel, handle_create_avatar
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ avatar_manager,
# state_manager, utils, config –∏ —Ç.–¥.

logger = logging.getLogger(__name__)

MENU_COMMANDS = [
    "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
    "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤–∞—Ç–∞—Ä—ã",
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
]

CANCEL_COMMANDS = [
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    "–û—Ç–º–µ–Ω–∞",
]
ALL_MENU_COMMANDS = [
    "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
    "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤–∞—Ç–∞—Ä—ã",
    "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ",
    "‚ú® –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ",
    "üñº –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
    "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ",
    "üñº –û–±—Ä–∞–∑—ã",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
]

async def show_avatar_confirm(chat_id, user_id, avatar_id, session):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar_id (str): ID –∞–≤–∞—Ç–∞—Ä–∞
        session (AsyncSession): –°–µ—Å—Å–∏—è –ë–î
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    is_valid, msg = await validate_avatar_exists(user_id, avatar_id, session)
    if not is_valid:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {msg}")
        return
        
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ç–æ
    is_valid, msg = await validate_avatar_photos(user_id, avatar_id, session)
    if not is_valid:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {msg}")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞
    from frontend_bot.services.avatar_manager import get_avatar_data
    avatar_data = await get_avatar_data(user_id, avatar_id, session)
    
    if not avatar_data:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞")
        return
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = AVATAR_CONFIRM_TEXT.format(
        title=avatar_data.get("title", "-"),
        gender=avatar_data.get("gender", "-"),
        photo_count=len(avatar_data.get("photos", [])),
        price=150,  # TODO: –±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        balance=250,  # TODO: –±—Ä–∞—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await bot.send_message(
        chat_id,
        text,
        parse_mode="HTML",
        reply_markup=avatar_confirm_keyboard(),
    )

@bot.callback_query_handler(func=lambda call: call.data == "avatar_confirm_yes")
async def handle_avatar_confirm_yes(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    if not avatar_id:
        await bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä.")
        await bot.answer_callback_query(call.id)
        return
    async with AsyncSessionLocal() as session:
        await confirm_avatar(user_id, avatar_id, session)
    await bot.send_message(call.message.chat.id, "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ")
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "avatar_confirm_edit")
async def handle_avatar_confirm_edit(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    if not avatar_id:
        await bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä.")
        await bot.answer_callback_query(call.id)
        return
    async with AsyncSessionLocal() as session:
        await edit_avatar_name(user_id, avatar_id, session)
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:")
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in ["avatar_type_man", "avatar_type_woman"])
async def handle_avatar_type(call, db: AsyncSession = None):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    if not avatar_id:
        await bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä.")
        await bot.answer_callback_query(call.id)
        return
    gender = "man" if call.data == "avatar_type_man" else "woman"
    session = db
    if session is None:
        from frontend_bot.database import get_async_session
        async with get_async_session() as session:
            await set_avatar_type(user_id, avatar_id, gender, session)
    else:
        await set_avatar_type(user_id, avatar_id, gender, session)
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:")
    await bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.text not in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞"])
async def handle_avatar_name_input(message, db: AsyncSession = None):
    user_id = message.from_user.id
    state = await get_state(user_id, db)
    if state != "avatar_enter_name":
        return
    name = message.text.strip()
    if not name:
        await bot.send_message(message.chat.id, PHOTO_NAME_EMPTY)
        return
    avatar_id = get_current_avatar_id(user_id)
    if not avatar_id:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä.")
        return
    session = db
    if session is None:
        from frontend_bot.database import get_async_session
        async with get_async_session() as session:
            await set_avatar_name(user_id, avatar_id, name, session)
    else:
        await set_avatar_name(user_id, avatar_id, name, session)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–ø–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ç.–¥.) ...

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handle_avatar_confirm_edit,
# handle_avatar_cancel, handle_create_avatar) –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
