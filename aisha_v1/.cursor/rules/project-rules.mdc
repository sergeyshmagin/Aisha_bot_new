---
description: 
globs: 
alwaysApply: true
---
Бизнес-логика — только в services/.
Шаблоны сообщений, caption, ошибки — только в texts/.
Клавиатуры — только в keyboards/.
Shared-утилиты и прогресс-бары — только в shared/.
Файловые операции — только через aiofiles (async).
Внешние процессы — только через asyncio.create_subprocess_exec.
Не использовать sync-функции (open, os.path, shutil) в async-коде.
Переходы между меню и состояниями FSM — только через сервисные функции (никаких прямых переходов в хендлерах).
Хендлеры — максимально тонкие: только маршрутизация и вызовы сервисов, без бизнес-логики.
Регистрация хендлеров — сначала специфичные, затем универсальные (universal text handler — в самом конце). Порядок регистрации фиксировать в docs/architecture.md.
Перед добавлением хендлера — проверять, не перекрывает ли он универсальные обработчики.
Не создавать дублирующие функции/шаблоны/клавиатуры — использовать shared-модули.
Покрывать тестами (минимум ручными) все переходы между состояниями FSM и возвраты в меню. Описывать кейсы тестирования в docs/best_practices.md.
Все ошибки логировать через logger.exception, пользователю отправлять информативные сообщения.
Публичные функции и классы — с docstring и аннотациями типов.
Все архитектурные решения и best practices фиксировать в docs/.
README.md — только краткое описание и ссылки на docs/architecture.md, docs/best_practices.md, docs/async_and_safety.md.
Для конкурентного доступа использовать asyncio.Lock.
В случае добавления универсального хендлера — обязательно документировать его поведение и ограничения в docs/architecture.md.
Best practices async Python — строго соблюдать.
Если потребуется добавить новые глобальные переменные для состояния — делай это только в state.py. В обработчиках — только импортируй и используй.