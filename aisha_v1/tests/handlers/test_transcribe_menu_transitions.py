"""–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏."""

import pytest
from unittest.mock import patch, AsyncMock
# from frontend_bot.services.state_utils import set_state, get_state, clear_state
from frontend_bot.keyboards.main_menu_keyboard import main_menu_keyboard
from frontend_bot.keyboards.reply import transcript_format_keyboard
from frontend_bot.services.shared_menu import send_main_menu
from tests.handlers.test_handlers import (
    handle_transcribe_menu,
    handle_transcribe_history,
    handle_transcribe_new,
    handle_transcribe_back,
)
import sys
import types


@pytest.fixture
async def clean_state():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
    await clear_state()
    yield
    await clear_state()


@pytest.fixture
def mock_bot():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–æ–∫–∞ –±–æ—Ç–∞."""
    return AsyncMock()


@pytest.fixture
def create_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    def _create_message(user_id: int, text: str):
        message = AsyncMock()
        message.from_user.id = user_id
        message.chat.id = user_id
        message.text = text
        return message
    return _create_message


@pytest.fixture(autouse=True)
def mock_state_manager(monkeypatch):
    """–ú–æ–∫–∞–µ—Ç _load_states –∏ _save_states –Ω–∞ in-memory dict –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ FSM –≤ —Ç–µ—Å—Ç–∞—Ö."""
    state = {}
    async def _load_states():
        return state.copy()
    async def _save_states(new_state):
        state.clear()
        state.update(new_state)
    monkeypatch.setattr("frontend_bot.services.state_manager._load_states", _load_states)
    monkeypatch.setattr("frontend_bot.services.state_manager._save_states", _save_states)
    yield


@pytest.mark.asyncio
async def test_main_menu_to_transcribe(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è transcribe
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "main_menu", session)
    message = create_message(user_id, "üéô –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")

    # Act
    await handle_transcribe_menu(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" in args[1]
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert isinstance(keyboard, transcript_format_keyboard().__class__)
    state = await get_state(user_id)
    assert state == "transcribe"


@pytest.mark.asyncio
async def test_transcribe_to_history(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è transcribe_history
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "transcribe", session)
    message = create_message(user_id, "üìã –ò—Å—Ç–æ—Ä–∏—è")

    # Act
    await handle_transcribe_history(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π" in args[1]
    state = await get_state(user_id)
    assert state == "transcribe_history"


@pytest.mark.asyncio
async def test_transcribe_to_new(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è transcribe_upload
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "transcribe", session)
    message = create_message(user_id, "üìù –ù–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")

    # Act
    await handle_transcribe_new(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª" in args[1]
    state = await get_state(user_id)
    assert state == "transcribe_upload"


@pytest.mark.asyncio
async def test_back_from_transcribe(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "transcribe", session)
    message = create_message(user_id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    # Act
    await handle_transcribe_back(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert isinstance(keyboard, main_menu_keyboard().__class__)
    state = await get_state(user_id)
    assert state == "main_menu"


@pytest.mark.asyncio
async def test_back_from_history(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "transcribe_history", session)
    message = create_message(user_id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    # Act
    await handle_transcribe_back(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert isinstance(keyboard, transcript_format_keyboard().__class__)
    state = await get_state(user_id)
    assert state == "transcribe" 