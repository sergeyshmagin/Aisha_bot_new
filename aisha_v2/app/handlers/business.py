"""
LEGACY: –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
–í–µ—Å—å –∫–æ–¥ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""
# --- LEGACY: —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ business.py.LEGACY, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ---
# from aiogram import Router, F
# from aiogram.types import Message, CallbackQuery
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aisha_v2.app.keyboards.business import get_business_menu
# from aisha_v2.app.keyboards.main import get_main_menu
# from aisha_v2.app.core.di import get_user_service
# from aisha_v2.app.services.audio.service import AudioProcessingService
# from aisha_v2.app.services.text_processing import TextProcessingService
# from aisha_v2.app.core.logger import get_logger
# ...
# –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ LEGACY

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aisha_v2.app.keyboards.business import get_business_menu
from aisha_v2.app.keyboards.main import get_main_menu
from aisha_v2.app.core.di import get_user_service
# from aisha_v2.app.services.audio.service import AudioProcessingService  # LEGACY: —É–¥–∞–ª–µ–Ω–æ
from aisha_v2.app.services.text_processing import TextProcessingService
from aisha_v2.app.core.logger import get_logger

logger = get_logger(__name__)
router = Router()

class BusinessStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    waiting_for_audio = State()
    waiting_for_text = State()
    processing = State()

@router.callback_query(F.data == "business_audio")
async def process_audio(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
    """
    await call.answer("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...", show_alert=False)
    await state.set_state(BusinessStates.waiting_for_audio)
    new_text = (
        "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, OGG\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB"
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if call.message.text != new_text:
        await call.message.edit_text(
            new_text,
            reply_markup=get_business_menu()
        )

@router.callback_query(F.data == "business_text")
async def process_text(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
    """
    await call.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...", show_alert=False)
    await state.set_state(BusinessStates.waiting_for_text)
    await call.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=get_business_menu()
    )

@router.message(BusinessStates.waiting_for_audio)
async def handle_audio(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    """
    try:
        if not message.audio and not message.voice:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=get_business_menu()
            )
            return

        await state.set_state(BusinessStates.processing)
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")

        # audio_service = AudioProcessingService()
        # result = await audio_service.process_audio(message.audio or message.voice, message.from_user.id, message.bot)
        pass

        await state.clear()
        # --- LEGACY: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
        # await message.answer(
        #     "‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
        #     f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
        #     reply_markup=get_business_menu()
        # )
        # --- END LEGACY ---
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TranscriptProcessingHandler –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ UX

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ",
            reply_markup=get_business_menu()
        )

@router.message(BusinessStates.waiting_for_text)
async def handle_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    try:
        if not message.text:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç",
                reply_markup=get_business_menu()
            )
            return

        await state.set_state(BusinessStates.processing)
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")

        async with TextProcessingService() as text_service:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
            # result = await text_service.process_text(message.text)
            pass

        await state.clear()
        await message.answer(
            "‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
            reply_markup=get_business_menu()
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞",
            reply_markup=get_business_menu()
        ) 