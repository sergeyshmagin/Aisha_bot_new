"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
"""
import logging
from typing import Dict, List, Optional
from datetime import datetime
from io import BytesIO

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from aisha_v2.app.handlers.transcript_base import TranscriptBaseHandler
from aisha_v2.app.utils.timezone import TimezoneUtils
from aisha_v2.app.keyboards.transcript import (
    get_back_to_transcript_keyboard,
    get_transcript_actions_keyboard,
    get_transcripts_keyboard,
    get_transcript_menu_keyboard,
)
from aisha_v2.app.core.di import (
    get_transcript_service,
    get_user_service,
)
from aisha_v2.app.utils.uuid_utils import safe_uuid

logger = logging.getLogger(__name__)

class TranscriptViewHandler(TranscriptBaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    """
    
    def __init__(self):
        self.router = Router()

    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.callback_query.register(
            self._handle_transcribe_menu,
            F.data == "transcribe_back_to_menu"
        )
        self.router.callback_query.register(
            self._handle_view_transcript,
            F.data.startswith("transcribe_view_")
        )

    async def _handle_transcribe_menu(self, call: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        """
        await call.message.delete()
        await call.message.answer(
            "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_transcript_menu_keyboard()
        )
    
    async def _view_transcript(self, call: CallbackQuery, state: FSMContext, telegram_id: int, transcript_id):
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        
        Args:
            call: CallbackQuery
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            transcript_id: UUID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        """
        async with self.get_session() as session:
            transcript_service = get_transcript_service(session)
            user_service = get_user_service(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = await user_service.get_user_by_telegram_id(telegram_id)
            if not user:
                await call.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            transcript = await transcript_service.get_transcript(user.id, transcript_id)
            if not transcript:
                await call.answer("–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            content = await transcript_service.get_transcript_content(user.id, transcript_id)
            if not content:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", show_alert=True)
                return
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try:
                text = content.decode("utf-8")
            except UnicodeDecodeError:
                try:
                    text = content.decode("cp1251")
                except UnicodeDecodeError:
                    await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = await user_service.get_user_state(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            created_at = transcript.get("created_at")
            date_str = ""
            try:
                if isinstance(created_at, str):
                    try:
                        dt = datetime.fromisoformat(created_at)
                        date_str = dt.strftime('%Y-%m-%d_%H-%M')
                    except ValueError:
                        date_str = datetime.now().strftime('%Y-%m-%d_%H-%M')
                elif hasattr(created_at, 'strftime'):
                    date_str = created_at.strftime('%Y-%m-%d_%H-%M')
                else:
                    date_str = datetime.now().strftime('%Y-%m-%d_%H-%M')
            except Exception as e:
                date_str = datetime.now().strftime('%Y-%m-%d_%H-%M')
                logger.debug(f"Error processing date: {e}, using current date")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = transcript.get("metadata", {})
            source = metadata.get("source", "text")
            filename = metadata.get("filename", "")
            duration = metadata.get("duration", "")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_date = ''
            try:
                user_timezone = "UTC+5"
                if user and hasattr(user, 'timezone') and user.timezone:
                    user_timezone = user.timezone
                if isinstance(created_at, datetime) or isinstance(created_at, str):
                    display_date = TimezoneUtils.format_date_with_timezone(
                        created_at, user_timezone, "%d.%m.%Y %H:%M"
                    )
                else:
                    display_date = date_str.replace('_', ' ')
            except Exception as e:
                logger.error(f"Error formatting date with timezone: {e}")
                display_date = date_str.replace('_', ' ')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            file_prefix = "audio" if source == "audio" else "text"
            file_name = f"{file_prefix}_{date_str}.txt"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            word_count = len(text.split()) if text else 0
            duration_str = f"{duration} —Å–µ–∫." if duration else ""
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if user_state and user_state.get("message_id") and user_state.get("message_id") != call.message.message_id:
                try:
                    await call.message.bot.delete_message(
                        chat_id=call.message.chat.id,
                        message_id=user_state["message_id"]
                    )
                except Exception as e:
                    logger.error(f"Error deleting previous message: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º
            caption = f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n\n"
            if source == "audio":
                caption += f"üé§ –ê—É–¥–∏–æ—Ñ–∞–π–ª: {filename if filename else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                if duration_str:
                    caption += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
            else:
                caption += f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename if filename else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            caption += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}\n"
            caption += f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {display_date}\n"
            file = BytesIO(text.encode('utf-8'))
            file.name = file_name
            sent_message = await call.message.answer_document(
                document=file,
                caption=caption,
                reply_markup=get_transcript_actions_keyboard(str(transcript_id))
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_service.set_user_state(user.id, {
                "state": "view_transcript",
                "message_id": sent_message.message_id,
                "transcript_id": str(transcript_id)
            })
    
    async def _handle_view_transcript(self, call: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        """
        try:
            transcript_id = safe_uuid(call.data.replace("transcribe_view_", "").strip())
            if not transcript_id:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)
                return
            await self._view_transcript(call, state, call.from_user.id, transcript_id)
        except ValueError as e:
            logger.error(f"Error parsing UUID: {e}")
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)
