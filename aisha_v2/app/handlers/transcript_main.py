"""
--- LEGACY: –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤, —á–∞—Å—Ç–∏—á–Ω–æ —É—Å—Ç–∞—Ä–µ–ª ---
# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç TranscriptProcessingHandler
# –î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:
# - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ (–∞–∫—Ç—É–∞–ª—å–Ω–æ)
# - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–æ)
# - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ/—Ç–µ–∫—Å—Ç–∞ (LEGACY - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ TranscriptProcessingHandler)
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from aisha_v2.app.handlers.transcript_base import TranscriptBaseHandler
from aisha_v2.app.core.di import (
    get_audio_processing_service,
    get_text_processing_service,
    get_transcript_service,
    get_user_service,
)
from aisha_v2.app.utils.uuid_utils import safe_uuid
from aisha_v2.app.keyboards.transcript import get_transcript_menu_keyboard, get_back_to_menu_keyboard, get_transcript_actions_keyboard
from aisha_v2.app.handlers.state import TranscribeStates

logger = logging.getLogger(__name__)


class TranscriptMainHandler(TranscriptBaseHandler):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ (FSM).
    """

    PAGE_SIZE = 5

    def __init__(self):
        self.router = Router()
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self._handle_open_transcript, F.text.regexp(r"^/open_"))  # legacy, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
        self.router.message.register(self._handle_history_command, Command("history"))
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        self.router.callback_query.register(self._handle_history_page, F.data.startswith("transcribe_history_page_"))
        self.router.callback_query.register(self._handle_open_transcript_cb, F.data.startswith("transcribe_open_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ transcribe_*)
        self.router.callback_query.register(
            self._handle_transcript_callback, 
            F.data.in_(["transcribe_audio", "transcribe_text", "transcribe_history", "transcribe_back_to_menu"])
        )
        
        # –ö–æ–º–∞–Ω–¥—ã –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (legacy)
        self.router.message.register(
            self._handle_open_transcript,
            F.text.regexp(r'^/open_[a-f0-9\-]+$')
        )

    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        self.router.message.register(self._handle_transcribe_command, Command("transcribe"))
        self.router.message.register(self._handle_transcribe_menu, StateFilter(TranscribeStates.menu), F.text == "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
        
        # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(
            self._handle_history_page,
            F.data.startswith("transcribe_history_page_")
        )
        
        self.router.callback_query.register(
            self._handle_open_transcript_cb,
            F.data.startswith("transcribe_open_")
        )
        
        self.router.callback_query.register(
            self._handle_transcript_callback,
            F.data.startswith("transcribe_")
        )
        
        # --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù: –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ transcript_* –¥–µ–π—Å—Ç–≤–∏–π ---
        # self.router.callback_query.register(
        #     self._handle_unknown_callback,
        #     F.data.regexp(r'.*')
        # )
        
        # --- LEGACY: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ/—Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TranscriptProcessingHandler ---
        # self.router.message.register(self._handle_audio, F.audio, StateFilter(TranscribeStates.waiting_audio))
        # self.router.message.register(self._handle_voice, F.voice, StateFilter(TranscribeStates.waiting_audio))
        # self.router.message.register(self._handle_text, F.text, StateFilter(TranscribeStates.waiting_text))

    async def _handle_transcribe_command(self, message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /transcribe
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            await state.set_state(TranscribeStates.menu)
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üé§ –ê—É–¥–∏–æ", callback_data="transcribe_audio"),
                InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="transcribe_text")
            )
            builder.row(InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="transcribe_history"))
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transcribe_back_to_menu"))
            
            await message.answer(
                "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /transcribe: {e}")
            await state.set_state(TranscribeStates.error)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _handle_transcribe_menu(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        try:
            await state.set_state(TranscribeStates.menu)
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üé§ –ê—É–¥–∏–æ", callback_data="transcribe_audio"),
                InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="transcribe_text")
            )
            builder.row(InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="transcribe_history"))
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transcribe_back_to_menu"))
            
            await message.answer(
                "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            await state.set_state(TranscribeStates.error)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _send_history_page(self, message_or_call, user_id: int, page: int = 0, edit: bool = False):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        async with self.get_session() as session:
            transcript_service = get_transcript_service(session)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TranscriptService
            user_id_str = str(user_id) if not isinstance(user_id, str) else user_id
            transcripts = await transcript_service.list_transcripts(user_id_str, limit=self.PAGE_SIZE, offset=page * self.PAGE_SIZE)
            total = len(transcripts)
            if not transcripts:
                text = "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤:\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ"
                kb = get_back_to_menu_keyboard()
                if edit and hasattr(message_or_call, 'message') and message_or_call.message.text:
                    try:
                        await message_or_call.message.edit_text(text, reply_markup=kb)
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message_or_call.message.answer(text, reply_markup=kb)
                else:
                    await message_or_call.answer(text, reply_markup=kb)
                return
            text = f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤</b> (—Å—Ç—Ä. {page+1}):\n\n"
            builder = InlineKeyboardBuilder()
            for t in transcripts:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
                file_name = t.get("metadata", {}).get("file_name") or str(t.get("id"))
                created_at = t.get("created_at", "‚Äî")
                if isinstance(created_at, str):
                    created_at = created_at.replace('T', ' ')[:16]
                transcript_type = "–ê—É–¥–∏–æ" if t.get("metadata", {}).get("source") == "audio" else "–¢–µ–∫—Å—Ç"
                btn_text = f"{file_name} | {created_at} | {transcript_type}"
                builder.row(InlineKeyboardButton(text=btn_text, callback_data=f"transcribe_open_{t['id']}"))
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"transcribe_history_page_{page-1}"))
            if total == self.PAGE_SIZE:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"transcribe_history_page_{page+1}"))
            if nav_buttons:
                builder.row(*nav_buttons)
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu"))
            if edit and hasattr(message_or_call, 'message') and message_or_call.message.text:
                try:
                    await message_or_call.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message_or_call.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await message_or_call.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")

    async def _handle_history_command(self, message: Message, state: FSMContext):
        """
        –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        async with self.get_session() as session:
            user_service = get_user_service(session)
            user = await user_service.get_user_by_telegram_id(message.from_user.id)
            if not user:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            await self._send_history_page(message, str(user.id), page=0)

    async def _handle_history_page(self, call: CallbackQuery, state: FSMContext):
        """
        Callback –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            page = int(call.data.rsplit("_", 1)[-1])
            async with self.get_session() as session:
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                if not user:
                    await call.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                await self._send_history_page(call, str(user.id), page=page, edit=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await call.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)

    async def _handle_open_transcript_cb(self, call: CallbackQuery, state: FSMContext):
        """
        Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            transcript_id = safe_uuid(call.data.replace("transcribe_open_", "").strip())
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)
                return
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                if not user:
                    await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                transcript = await transcript_service.get_transcript(str(user.id), transcript_id)
                if not transcript:
                    await call.answer("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                content = await transcript_service.get_transcript_content(str(user.id), transcript_id)
                if content:
                    try:
                        text = content.decode("utf-8")
                    except Exception:
                        text = None
                    if text:
                        transcript["preview"] = text[:300]
                from aisha_v2.app.handlers.transcript_processing import TranscriptProcessingHandler
                card_text = TranscriptProcessingHandler().render_transcript_card(transcript)
                keyboard = get_transcript_actions_keyboard(str(transcript["id"]))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º —Ç–µ–∫—Å—Ç)
                if call.message.text:
                    try:
                        await call.message.edit_text(card_text, reply_markup=keyboard, parse_mode="HTML")
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await call.message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await call.message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (callback): {e}")
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)

    # --- LEGACY: –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ/—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ TranscriptProcessingHandler ---
    # async def _handle_audio(self, message: Message, state: FSMContext):
    #     """
    #     –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    #     
    #     Args:
    #         message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    #         state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    #     """
    #     try:
    #         from aisha_v2.app.handlers.transcript_processing import TranscriptProcessingHandler
    #         
    #         # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    #         processing_handler = TranscriptProcessingHandler()
    #         await processing_handler._handle_audio_processing(message, state)
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
    #         await state.set_state(TranscribeStates.error)
    #         await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
    
    # async def _handle_voice(self, message: Message, state: FSMContext):
    #     """
    #     –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    #     
    #     Args:
    #         message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    #         state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    #     """
    #     try:
    #         from aisha_v2.app.handlers.transcript_processing import TranscriptProcessingHandler
    #         
    #         # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    #         processing_handler = TranscriptProcessingHandler()
    #         await processing_handler._handle_audio_processing(message, state)
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    #         await state.set_state(TranscribeStates.error)
    #         await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    # async def _handle_text(self, message: Message, state: FSMContext):
    #     """
    #     –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    #     
    #     Args:
    #         message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    #         state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    #     """
    #     try:
    #         from aisha_v2.app.handlers.transcript_processing import TranscriptProcessingHandler
    #         
    #         # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    #         processing_handler = TranscriptProcessingHandler()
    #         await processing_handler._handle_text_processing(message, state)
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
    #         await state.set_state(TranscribeStates.error)
    #         await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")

    async def _handle_open_transcript(self, message: Message, state: FSMContext):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /open_{id} –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            parts = message.text.strip().split("_", 1)
            if len(parts) != 2 or not parts[1]:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /open_<id>")
                return
            transcript_id = safe_uuid(parts[1])
            if not transcript_id:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                if not user:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                transcript = await transcript_service.get_transcript(str(user.id), transcript_id)
                if not transcript:
                    await message.answer("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                # –ü–æ–ª—É—á–∞–µ–º preview —Ç–µ–∫—Å—Ç–∞
                content = await transcript_service.get_transcript_content(str(user.id), transcript_id)
                if content:
                    try:
                        text = content.decode("utf-8")
                    except Exception:
                        text = None
                    if text:
                        transcript["preview"] = text[:300]
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ processing handler
                from aisha_v2.app.handlers.transcript_processing import TranscriptProcessingHandler
                card_text = TranscriptProcessingHandler().render_transcript_card(transcript)
                keyboard = get_transcript_actions_keyboard(str(transcript["id"]))
                await message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.")

    async def _handle_transcript_callback(self, call: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        """
        try:
            action = call.data.split("_")[1]
            
            if action == "audio":
                await state.set_state(TranscribeStates.waiting_audio)
                builder = InlineKeyboardBuilder()
                builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu"))
                
                await call.message.edit_text(
                    "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:",
                    reply_markup=builder.as_markup()
                )
                
            elif action == "text":
                await state.set_state(TranscribeStates.waiting_text)
                builder = InlineKeyboardBuilder()
                builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu"))
                
                await call.message.edit_text(
                    "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                    reply_markup=builder.as_markup()
                )
                
            elif action == "history":
                async with self.get_session() as session:
                    user_service = get_user_service(session)
                    user = await user_service.get_user_by_telegram_id(call.from_user.id)
                    if not user:
                        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                        return
                    await self._send_history_page(call, str(user.id), page=0, edit=True)
                
            elif action == "back":
                await state.clear()
                await call.message.edit_text(
                    "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=get_transcript_menu_keyboard()
                )
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
