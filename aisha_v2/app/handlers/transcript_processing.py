"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ, —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TranscriptService (MinIO + –ë–î).
"""
import logging
from datetime import datetime
from typing import Dict, Optional, Any, Union
from io import BytesIO
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from uuid import UUID
from pydantic import BaseModel, Field

from aisha_v2.app.core.config import settings
from aisha_v2.app.handlers.transcript_base import TranscriptBaseHandler
from aisha_v2.app.core.di import (
    get_audio_processing_service,
    get_text_processing_service,
    get_transcript_service,
    get_user_service,
)
from aisha_v2.app.keyboards.transcript import (
    get_transcript_actions_keyboard,
    get_back_to_transcript_keyboard,
    get_back_to_menu_keyboard,
)
from aisha_v2.app.utils.uuid_utils import safe_uuid
from aisha_v2.app.handlers.state import TranscribeStates

logger = logging.getLogger(__name__)

class TranscriptResult(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
    id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
    transcript_key: str = Field(..., description="–ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")

class TranscriptProcessingHandler(TranscriptBaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TranscriptService (MinIO + –ë–î).
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        super().__init__()
        self.router = Router()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω TranscriptProcessingHandler")

    async def register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è:
        - –û–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        - –û–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        - –î–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º
        """
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤")
        
        # –í–ê–ñ–ù–û: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –†–ê–ù–¨–®–ï —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö!
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è - —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_text)
        self.router.message.register(
            self._handle_text_processing,
            F.document,
            StateFilter(TranscribeStates.waiting_text)
        )
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–û–°–õ–ï —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.router.message.register(
            self._handle_audio_universal,
            F.audio
        )
        
        self.router.message.register(
            self._handle_audio_universal,
            F.voice
        )
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
        self.router.callback_query.register(
            self._handle_transcript_format,
            F.data.startswith("transcript_format_")
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ (summary, todo, protocol)
        self.router.callback_query.register(
            self._handle_transcript_actions,
            F.data.startswith("transcript_summary_") | 
            F.data.startswith("transcript_todo_") | 
            F.data.startswith("transcript_protocol_")
        )
        
        self.router.callback_query.register(
            self._handle_back_to_transcribe_menu,
            F.data == "transcribe_back_to_menu"
        )

    async def _handle_audio_universal(self, message: Message, state: FSMContext) -> None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        current_state = await state.get_state()
        logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ/voice –æ—Ç user_id={message.from_user.id}, current_state={current_state}")
        
        # –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current_state in [TranscribeStates.processing, TranscribeStates.result]:
            logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
            
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f"[AUDIO_UNIVERSAL] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é
        try:
            processing_msg = await message.answer("üéµ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
            await state.set_state(TranscribeStates.processing)

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            if message.voice:
                file_id = message.voice.file_id
                duration = message.voice.duration
                file_name = f"voice_{message.message_id}.ogg"
            else:
                file_id = message.audio.file_id  
                duration = message.audio.duration
                file_name = message.audio.file_name or f"audio_{message.message_id}.mp3"
            
            file = await message.bot.get_file(file_id)
            downloaded_file = await message.bot.download_file(file.file_path)

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            async with self.get_session() as session:
                audio_service = get_audio_processing_service(session)
                result = await audio_service.process_audio(downloaded_file.getvalue())
                
                if not result.success:
                    logger.error(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {result.error}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
                    return
                
                text = result.text
                logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞, –¥–ª–∏–Ω–∞: {len(text)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                if not user:
                    logger.error(f"[AUDIO_UNIVERSAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {message.from_user.id}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                transcript_service = get_transcript_service(session)
                transcript = await transcript_service.save_transcript(
                    user_id=user.id,
                    audio_data=downloaded_file.getvalue(),
                    transcript_data=text.encode('utf-8'),
                    metadata={
                        "source": "audio",
                        "duration": duration,
                        "file_id": file_id,
                        "file_name": file_name,
                        "word_count": len(text.split()) if text else 0
                    }
                )
                
                if not transcript or not transcript.get("transcript_key"):
                    logger.error(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return
                    
                logger.info(f"[AUDIO_UNIVERSAL] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {transcript}")

                await self._send_transcript_result(message, transcript, processing_msg)
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.exception(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
            await state.set_state(TranscribeStates.error)
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_text_processing(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ .txt
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        logger.info(f"[TEXT] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç user_id={message.from_user.id}, state={await state.get_state()}")
        try:
            if not message.document or message.document.mime_type != "text/plain" or not message.document.file_name.endswith(".txt"):
                await message.reply(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return

            processing_msg = await message.answer("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
            await state.set_state(TranscribeStates.processing)

            file = await message.bot.get_file(message.document.file_id)
            file_bytes_io = await message.bot.download_file(file.file_path)
            text = file_bytes_io.read().decode("utf-8")
            file_name = message.document.file_name

            async with self.get_session() as session:
                text_service = get_text_processing_service(session)
                processed_text = await text_service.process_text(text)
                
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                
                if not user:
                    logger.error(f"[TEXT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {message.from_user.id}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                transcript = await transcript_service.save_transcript(
                    user_id=user.id,
                    transcript_data=processed_text.encode('utf-8'),
                    metadata={
                        "source": "text",
                        "length": len(text),
                        "file_name": file_name,
                        "word_count": len(processed_text.split()) if processed_text else 0
                    }
                )
                
                await self._send_transcript_result(message, transcript, processing_msg)
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.exception(f"[TEXT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_format_transcript(self, call: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        
        Args:
            call: CallbackQuery —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            data = call.data.split("_")
            if len(data) < 4:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return

            transcript_id = safe_uuid(data[2])
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return

            format_type = data[3]
            await state.set_state(TranscribeStates.format_selection)

            async with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                
                if not user:
                    logger.error(f"[FORMAT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {call.from_user.id}")
                    await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                    
                content = await transcript_service.get_transcript_content(user.id, transcript_id)
                if not content:
                    logger.error(f"[FORMAT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_id}")
                    await call.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return

                text = content.decode('utf-8')
                text_service = get_text_processing_service(session)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                if format_type == "summary":
                    formatted_text = await text_service.format_summary(text)
                elif format_type == "todo":
                    formatted_text = await text_service.format_todo(text)
                elif format_type == "protocol":
                    formatted_text = await text_service.format_protocol(text)
                else:
                    logger.error(f"[FORMAT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
                    await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                formatted_transcript = await transcript_service.save_transcript(
                    user_id=call.from_user.id,
                    transcript_data=formatted_text.encode('utf-8'),
                    metadata={
                        "source": "format",
                        "original_id": str(transcript_id),
                        "format_type": format_type
                    }
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self._send_transcript_result(call.message, formatted_transcript, None)
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.exception(f"[FORMAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await call.message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    def render_transcript_card(self, transcript: dict) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = transcript.get("metadata", {})
        file_name = metadata.get("file_name", "–§–∞–π–ª")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = transcript.get("created_at")
        if isinstance(created_at, str):
            created_at_str = created_at.replace('T', ' ')[:16]
        elif created_at:
            created_at_str = created_at.strftime("%Y-%m-%d %H:%M")
        else:
            created_at_str = "‚Äî"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        transcript_type = "–ê—É–¥–∏–æ" if metadata.get("source") == "audio" else "–¢–µ–∫—Å—Ç"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        word_count = metadata.get("word_count")
        if not word_count:
            text = transcript.get("text") or transcript.get("preview")
            if text:
                word_count = len(text.split())
            else:
                word_count = "‚Äî"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
        text_preview = transcript.get("preview")
        if not text_preview:
            text = transcript.get("text")
            if text:
                text_preview = text[:200] + "..." if len(text) > 200 else text
            else:
                text_preview = "‚Äî"
        
        card = (
            f"<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç</b>\n"
            f"üìé –§–∞–π–ª: {file_name}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at_str}\n"
            f"üìù –¢–∏–ø: {transcript_type}\n"
            f"üìä –°–ª–æ–≤: {word_count}\n\n"
            f"¬´{text_preview}¬ª"
        )
        return card

    async def _send_transcript_result(
        self, 
        message: Message, 
        transcript: Dict[str, Any], 
        status_message: Optional[Message] = None
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å —Ñ–∞–π–ª–æ–º.
        """
        try:
            if status_message:
                await status_message.delete()
            
            transcript_result = TranscriptResult(
                id=str(transcript["id"]),
                transcript_key=transcript["transcript_key"],
                metadata=transcript.get("metadata", {})
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è preview –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                    
                content = await transcript_service.get_transcript_content(user.id, safe_uuid(transcript["id"]))
                if not content:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return
                
                try:
                    text = content.decode("utf-8")
                    transcript["preview"] = text[:300] + "..." if len(text) > 300 else text
                    transcript["text"] = text  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                metadata = transcript.get("metadata", {})
                original_file_name = metadata.get("file_name")
                if original_file_name:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    file_name = original_file_name
                    if not file_name.endswith('.txt'):
                        file_name += '.txt'
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ ID
                    created_at = transcript.get("created_at", "")
                    if isinstance(created_at, str):
                        date_part = created_at[:10]  # YYYY-MM-DD
                    else:
                        date_part = "unknown"
                    file_name = f"{date_part}_transcript_{transcript['id'][:8]}.txt"
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é BufferedInputFile
                from aiogram.types import BufferedInputFile
                input_file = BufferedInputFile(content, filename=file_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                keyboard = get_transcript_actions_keyboard(transcript_result.id)
                card_text = self.render_transcript_card(transcript)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∫–∞–∫ caption
                await message.answer_document(
                    document=input_file,
                    caption=card_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.exception(f"[RESULT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_transcript_actions(self, call: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º: summary, todo, protocol
        """
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data: transcript_summary_<id>, transcript_todo_<id>, etc.
            parts = call.data.split("_", 2)
            if len(parts) < 3:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            action = parts[1]  # summary, todo, protocol
            transcript_id = safe_uuid(parts[2])
            
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ GPT
            await state.set_state(TranscribeStates.format_selection)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            processing_msg = await call.message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT...")

            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                
                if not user:
                    await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                    
                content = await transcript_service.get_transcript_content(user.id, transcript_id)
                if not content:
                    logger.error(f"[GPT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_id}")
                    await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return

                text = content.decode('utf-8')
                text_service = get_text_processing_service(session)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT
                if action == "summary":
                    formatted_text = await text_service.format_summary(text)
                    format_name = "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
                    file_prefix = "summary"
                elif action == "todo":
                    formatted_text = await text_service.format_todo(text)
                    format_name = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
                    file_prefix = "todo"
                elif action == "protocol":
                    formatted_text = await text_service.format_protocol(text)
                    format_name = "–ü—Ä–æ—Ç–æ–∫–æ–ª"
                    file_prefix = "protocol"
                else:
                    logger.error(f"[GPT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {action}")
                    await processing_msg.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ñ–∞–π–ª
                from aiogram.types import BufferedInputFile
                file_data = formatted_text.encode('utf-8')
                input_file = BufferedInputFile(file_data, filename=f"{file_prefix}_{transcript_id}.txt")
                
                await processing_msg.delete()
                await call.message.answer_document(
                    document=input_file,
                    caption=f"üìÑ {format_name}",
                    reply_markup=get_back_to_transcript_keyboard(transcript_id)
                )
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.exception(f"[ACTIONS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await call.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_transcript_format(self, call: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        
        Args:
            call: CallbackQuery —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            data = call.data.split("_")
            if len(data) < 4:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return

            transcript_id = safe_uuid(data[2])
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return

            format_type = data[3]
            await state.set_state(TranscribeStates.format_selection)

            async with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                
                if not user:
                    logger.error(f"[FORMAT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {call.from_user.id}")
                    await call.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                    
                content = await transcript_service.get_transcript_content(user.id, transcript_id)
                if not content:
                    logger.error(f"[FORMAT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_id}")
                    await call.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return

                text = content.decode('utf-8')
                text_service = get_text_processing_service(session)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                if format_type == "summary":
                    formatted_text = await text_service.format_summary(text)
                elif format_type == "todo":
                    formatted_text = await text_service.format_todo(text)
                elif format_type == "protocol":
                    formatted_text = await text_service.format_protocol(text)
                else:
                    logger.error(f"[FORMAT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
                    await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                formatted_transcript = await transcript_service.save_transcript(
                    user_id=call.from_user.id,
                    transcript_data=formatted_text.encode('utf-8'),
                    metadata={
                        "source": "format",
                        "original_id": str(transcript_id),
                        "format_type": format_type
                    }
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self._send_transcript_result(call.message, formatted_transcript, None)
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.exception(f"[FORMAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await call.message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_back_to_transcribe_menu(self, call: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        """
        await call.answer()
        await state.set_state(TranscribeStates.waiting_text)
