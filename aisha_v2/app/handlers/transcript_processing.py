"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏.
"""
import logging
from datetime import datetime
from typing import Dict, Optional, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from aisha_v2.app.core.config import settings
from aisha_v2.app.handlers.transcript_base import TranscriptBaseHandler
from aisha_v2.app.core.di import (
    get_audio_processing_service,
    get_text_processing_service,
    get_transcript_service,
    get_user_service,
)
from aisha_v2.app.keyboards.transcript import (
    get_transcript_actions_keyboard,
    get_back_to_transcript_keyboard,
    get_back_to_menu_keyboard,
)
from aisha_v2.app.utils.uuid_utils import safe_uuid
from aisha_v2.app.handlers.state import TranscribeStates
from aisha_v2.app.services.audio_processing.service import AudioService
from aisha_v2.app.services.audio_processing.factory import get_audio_service

logger = logging.getLogger(__name__)

class TranscriptProcessingHandler(TranscriptBaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    """
    
    def __init__(self):
        self.router = Router()

    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        self.router.message.register(
            self._handle_audio_processing,
            F.audio,
            StateFilter(TranscribeStates.waiting_audio)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        self.router.message.register(
            self._handle_text_processing,
            F.text,
            StateFilter(TranscribeStates.waiting_text)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        self.router.callback_query.register(
            self._handle_format_transcript,
            F.data.startswith("transcribe_format_")
        )

    async def _handle_audio_processing(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"[AUDIO] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ/voice –æ—Ç user_id={message.from_user.id}, state={await state.get_state()}")
        try:
            processing_msg = await message.answer("üéµ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
            await state.set_state(TranscribeStates.processing)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if message.audio:
                file = await message.audio.get_file()
                duration = message.audio.duration
                file_id = message.audio.file_id
            elif message.voice:
                file = await message.voice.get_file()
                duration = message.voice.duration
                file_id = message.voice.file_id
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
            downloaded_file = await message.bot.download_file(file.file_path)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            async with self.get_session() as session:
                audio_service = get_audio_processing_service(session)
                text = await audio_service.transcribe_audio(downloaded_file)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                transcript = await transcript_service.create_transcript(
                    user_id=user.id,
                    text=text,
                    metadata={
                        "source": "audio",
                        "duration": duration,
                        "file_id": file_id
                    }
                )
                await self._send_transcript_result(message, transcript, processing_msg)
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
            await state.set_state(TranscribeStates.error)
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_text_processing(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        logger.info(f"[TEXT] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç user_id={message.from_user.id}, state={await state.get_state()}, text={message.text[:100]}")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            processing_msg = await message.answer("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
            await state.set_state(TranscribeStates.processing)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            async with self.get_session() as session:
                text_service = get_text_processing_service(session)
                processed_text = await text_service.process_text(message.text)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                transcript_service = get_transcript_service(session)
                user_service = get_user_service(session)
                
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                transcript = await transcript_service.create_transcript(
                    user_id=user.id,
                    text=processed_text,
                    metadata={
                        "source": "text",
                        "length": len(message.text)
                    }
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await self._send_transcript_result(message, transcript, processing_msg)
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _handle_format_transcript(self, call: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            data = call.data.split("_")
            if len(data) < 4:
                await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return

            transcript_id = safe_uuid(data[2])
            if not transcript_id:
                await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return

            format_type = data[3]
            await state.set_state(TranscribeStates.format_selection)

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                transcript = await transcript_service.get_transcript(transcript_id)
                
                if not transcript:
                    await call.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                text_service = get_text_processing_service(session)
                formatted_text = await text_service.format_text(transcript.text, format_type)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await call.message.edit_text(
                    f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{formatted_text}",
                    reply_markup=get_back_to_transcript_keyboard(str(transcript_id))
                )
                await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await state.set_state(TranscribeStates.error)
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")

    async def _send_transcript_result(self, message: Message, transcript: Dict, status_message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            await status_message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.reply(
                f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìù –¢–µ–∫—Å—Ç:\n{transcript['text'][:1000]}...\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_transcript_actions_keyboard(str(transcript['id']))
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

async def get_transcript_text(transcript_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –µ–≥–æ ID –∏–∑ –ë–î.
    """
    async with self.get_session() as session:
        transcript_service = get_transcript_service(session)
        transcript = await transcript_service.get_transcript(transcript_id)
        if not transcript:
            return ""
        return transcript.text

@router.callback_query(F.data.startswith("transcript_"))
async def process_transcript_format(call: CallbackQuery, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (summary, todo, protocol).
    """
    data = call.data.split("_")
    if len(data) < 3:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return
    action, format_type, transcript_id = data[0], data[1], "_".join(data[2:])
    transcript_text = await get_transcript_text(transcript_id)
    audio_service = get_audio_service()
    if format_type == "summary":
        result_text = await audio_service.summarize_text(transcript_text)
        file_name = f"summary_{transcript_id}.txt"
        caption = "üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</b>"
    elif format_type == "todo":
        result_text = await audio_service.create_bullet_points(transcript_text)
        file_name = f"todo_{transcript_id}.txt"
        caption = "‚úÖ <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>"
    elif format_type == "protocol":
        result_text = await audio_service.generate_protocol(transcript_text)
        file_name = f"protocol_{transcript_id}.txt"
        caption = "üìä <b>–ü—Ä–æ—Ç–æ–∫–æ–ª</b>"
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    with open(file_name, "w", encoding="utf-8") as f:
        f.write(result_text)
    await call.message.answer_document(
        FSInputFile(file_name),
        caption=caption,
        reply_markup=get_transcript_actions_keyboard(transcript_id),
        parse_mode="HTML"
    )
