"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏.
"""
from typing import Dict, List
from uuid import UUID
from datetime import datetime
import logging

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aisha_v2.app.utils.timezone import TimezoneUtils
from aisha_v2.app.utils.uuid_utils import safe_uuid


def get_transcript_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    """
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="üé§ –ê—É–¥–∏–æ", callback_data="transcribe_audio"),
        InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="transcribe_text")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="transcribe_history")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transcribe_back_to_menu")
    )
    return keyboard


def get_transcripts_keyboard(transcripts: List[Dict], telegram_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    
    Args:
        transcripts: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    for transcript in transcripts:
        # –ü–æ–ª—É—á–∞–µ–º created_at
        created_at = transcript.get("created_at")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            if isinstance(created_at, int):
                # –ï—Å–ª–∏ —ç—Ç–æ timestamp (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                dt = datetime.fromtimestamp(created_at)
                date_str = dt.strftime("%d.%m.%Y %H:%M")
            elif isinstance(created_at, datetime):
                # –ï—Å–ª–∏ —ç—Ç–æ datetime
                date_str = created_at.strftime("%d.%m.%Y %H:%M")
            elif isinstance(created_at, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ datetime
                try:
                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    date_str = dt.strftime("%d.%m.%Y %H:%M")
                except ValueError:
                    date_str = created_at
            else:
                # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                date_str = str(created_at) if created_at is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except Exception as e:
            logging.error(f"Error formatting date in get_transcripts_keyboard: {e}, type: {type(created_at)}, value: {created_at}")
            date_str = str(created_at) if created_at is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        source = transcript["metadata"].get("source", "unknown") if transcript.get("metadata") else "unknown"
        label = f"{'üé§' if source == 'audio' else 'üìÑ'} {date_str}"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID
        uuid_obj = safe_uuid(transcript['id'])
        if not uuid_obj:
            logging.error(f"Invalid UUID in transcript: {transcript['id']}")
            continue
            
        builder.add(
            InlineKeyboardButton(
                label, callback_data=f"transcribe_view_{str(uuid_obj)}"
            )
        )
    
    builder.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="transcribe_back_to_menu")
    )
    
    return builder.as_markup()


def get_format_keyboard(transcript_id: str | UUID) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UUID –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    uuid_obj = safe_uuid(transcript_id)
    if not uuid_obj:
        raise ValueError(f"Invalid UUID: {transcript_id}")
    transcript_id_str = str(uuid_obj)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            "üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            callback_data=f"transcribe_format_{transcript_id_str}_summary",
        ),
        InlineKeyboardButton(
            "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
            callback_data=f"transcribe_format_{transcript_id_str}_todo",
        ),
    )
    builder.row(
        InlineKeyboardButton(
            "üìä –ü—Ä–æ—Ç–æ–∫–æ–ª",
            callback_data=f"transcribe_format_{transcript_id_str}_protocol",
        ),
    )
    builder.row(
        InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="transcribe_back_to_menu"
        )
    )
    return builder.as_markup()


def get_transcript_actions_keyboard(transcript_id: str | UUID) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º
    
    Args:
        transcript_id: ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ UUID)
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UUID –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    uuid_obj = safe_uuid(transcript_id)
    if not uuid_obj:
        raise ValueError(f"Invalid UUID: {transcript_id}")
    transcript_id_str = str(uuid_obj)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            callback_data=f"transcript_summary_{transcript_id_str}"
        ),
        InlineKeyboardButton(
            text="‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
            callback_data=f"transcript_todo_{transcript_id_str}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìä –ü—Ä–æ—Ç–æ–∫–æ–ª",
            callback_data=f"transcript_protocol_{transcript_id_str}"
        ),
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"transcript_back_{transcript_id_str}"
        )
    )
    return builder.as_markup()


def get_back_to_transcript_keyboard(transcript_id: str | UUID) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UUID –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    uuid_obj = safe_uuid(transcript_id)
    if not uuid_obj:
        raise ValueError(f"Invalid UUID: {transcript_id}")
    transcript_id_str = str(uuid_obj)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É", callback_data=f"transcribe_back_to_transcript_{transcript_id_str}")
    )
    return builder.as_markup()


def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu")
    )
    return builder.as_markup()
