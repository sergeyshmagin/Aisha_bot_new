"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
"""
import re
from datetime import datetime
from typing import Optional


def format_finetune_comment(avatar_name: str, telegram_username: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ FAL AI
    
    Args:
        avatar_name: –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞
        telegram_username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å @)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è - @username"
    
    Examples:
        >>> format_finetune_comment("–ê–Ω–Ω–∞", "ivan_petrov")
        "–ê–Ω–Ω–∞ - @ivan_petrov"
        >>> format_finetune_comment("–•—É–¥–æ–∂–Ω–∏–∫", "@maria_art")
        "–•—É–¥–æ–∂–Ω–∏–∫ - @maria_art"
    """
    # –û—á–∏—â–∞–µ–º –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean_name = re.sub(r'[^\w\s\-_]', '', avatar_name).strip()[:30]
    
    # –û—á–∏—â–∞–µ–º username –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_username = telegram_username.replace('@', '').strip()
    clean_username = re.sub(r'[^\w]', '', clean_username)
    
    # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if not clean_name:
        clean_name = "–ê–≤–∞—Ç–∞—Ä"
    
    # –ï—Å–ª–∏ username –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if not clean_username:
        clean_username = "user"
    
    return f"{clean_name} - @{clean_username}"


def format_finetune_comment_detailed(
    avatar_name: str, 
    telegram_username: str, 
    avatar_type: str = "character"
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–∏–ø–æ–º –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        avatar_name: –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞
        telegram_username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ (character, style, portrait)
    
    Returns:
        –ü–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¢–∏–ø: –ò–º—è (@username)"
    """
    type_names = {
        "character": "–ü–µ—Ä—Å–æ–Ω–∞–∂",
        "style": "–°—Ç–∏–ª—å", 
        "portrait": "–ü–æ—Ä—Ç—Ä–µ—Ç",
        "general": "–û–±—â–∏–π"
    }
    
    type_name = type_names.get(avatar_type, "–ê–≤–∞—Ç–∞—Ä")
    basic_comment = format_finetune_comment(avatar_name, telegram_username)
    
    return f"{type_name}: {basic_comment}"


def format_finetune_comment_debug(
    avatar_name: str, 
    telegram_username: str, 
    avatar_id: str
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    
    Args:
        avatar_name: –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞
        telegram_username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
    
    Returns:
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –¥–∞—Ç–æ–π –∏ ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    """
    basic_comment = format_finetune_comment(avatar_name, telegram_username)
    date = datetime.now().strftime("%d.%m")
    short_id = str(avatar_id).replace('-', '')[:8]
    
    return f"{basic_comment} ({date}, {short_id})"


def generate_trigger_word(avatar_id: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π trigger_word –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        avatar_id: UUID –∞–≤–∞—Ç–∞—Ä–∞
    
    Returns:
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "TOK_xxxxxxxx"
    
    Examples:
        >>> generate_trigger_word("4a473199-ae2e-4b0d-a212-68fbd58877f4")
        "TOK_4a473199"
    """
    # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
    short_id = str(avatar_id).replace('-', '')[:8]
    return f"TOK_{short_id}"


def generate_trigger_word_advanced(avatar_id: str, avatar_name: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π trigger_word —Å —á–∞—Å—Ç—å—é –∏–º–µ–Ω–∏
    
    Args:
        avatar_id: UUID –∞–≤–∞—Ç–∞—Ä–∞
        avatar_name: –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞
    
    Returns:
        –¢—Ä–∏–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "TOK_name_id"
    """
    # –û—á–∏—â–∞–µ–º –∏–º—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ
    clean_name = re.sub(r'[^\w]', '', avatar_name.lower())[:8]
    short_id = str(avatar_id).replace('-', '')[:6]
    
    if clean_name:
        return f"TOK_{clean_name}_{short_id}"
    else:
        return f"TOK_{short_id}"


def validate_avatar_name(name: str) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        name: –ò–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        Tuple (is_valid, error_message)
    """
    if not name or not name.strip():
        return False, "–ò–º—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(name.strip()) < 2:
        return False, "–ò–º—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
    
    if len(name.strip()) > 50:
        return False, "–ò–º—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[<>:"/\\|?*]', name):
        return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, None


def sanitize_username(username: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç username –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        username: Username –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π username
    """
    if not username:
        return "user"
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean = username.replace('@', '').strip()
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean = re.sub(r'[^\w]', '', clean)
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
    if not clean:
        return "user"
    
    return clean[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É


def get_avatar_type_display_name(avatar_type: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–∏–ø–∞ –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ (style, portrait, character, etc.)
    
    Returns:
        –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
    """
    type_names = {
        "style": "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
        "portrait": "üé≠ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π", 
        "character": "üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂",
        "general": "üåü –û–±—â–∏–π",
        "product": "üì¶ –ü—Ä–æ–¥—É–∫—Ç"
    }
    
    return type_names.get(avatar_type, f"ü§ñ {avatar_type.title()}")


def format_training_duration(iterations: int, training_type: str = "style") -> str:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        iterations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    """
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é)
    time_coefficients = {
        "style": 1.2,      # flux-pro-trainer
        "portrait": 0.8,   # flux-lora-portrait-trainer
        "character": 1.0,
        "general": 1.5
    }
    
    coefficient = time_coefficients.get(training_type, 1.0)
    estimated_seconds = iterations * coefficient
    
    if estimated_seconds < 300:  # < 5 –º–∏–Ω—É—Ç
        return f"~{int(estimated_seconds/60)} –º–∏–Ω"
    elif estimated_seconds < 1800:  # < 30 –º–∏–Ω—É—Ç
        return f"~{int(estimated_seconds/60)} –º–∏–Ω"
    else:  # > 30 –º–∏–Ω—É—Ç
        hours = int(estimated_seconds / 3600)
        minutes = int((estimated_seconds % 3600) / 60)
        if hours > 0:
            return f"~{hours}—á {minutes}–º–∏–Ω"
        else:
            return f"~{minutes} –º–∏–Ω"


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "format_finetune_comment",
    "format_finetune_comment_detailed", 
    "format_finetune_comment_debug",
    "generate_trigger_word",
    "generate_trigger_word_advanced",
    "validate_avatar_name",
    "sanitize_username",
    "get_avatar_type_display_name",
    "format_training_duration"
] 