"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/avatar/gallery.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from typing import List, Optional
from uuid import UUID
import logging

from aiogram.types import CallbackQuery, InputMediaPhoto, BufferedInputFile
from aiogram.fsm.context import FSMContext

from app.core.di import get_user_service, get_avatar_service
from app.services.storage import StorageService
from app.database.models import AvatarGender, AvatarStatus, AvatarTrainingType
from .keyboards import GalleryKeyboards
from .models import gallery_cache

logger = logging.getLogger(__name__)

class AvatarCardsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.keyboards = GalleryKeyboards()
    
    async def send_avatar_card(
        self, 
        callback: CallbackQuery, 
        user_id: UUID, 
        avatars: List, 
        avatar_idx: int = 0
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤–∞—Ç–∞—Ä–∞"""
        
        if not avatars or avatar_idx >= len(avatars):
            await callback.message.edit_text(
                "‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=self.keyboards.get_empty_gallery_keyboard()
            )
            return
        
        avatar = avatars[avatar_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ
        text = self._format_avatar_card_text(avatar, avatar_idx, len(avatars))
        
        keyboard = self.keyboards.get_avatar_card_keyboard(
            avatar_idx, 
            len(avatars), 
            str(avatar.id), 
            avatar.is_main,
            avatar.status
        )
        
        # –ï—Å–ª–∏ —É –∞–≤–∞—Ç–∞—Ä–∞ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if avatar.photos and len(avatar.photos) > 0:
            try:
                photo_data = await self._load_avatar_preview(avatar)
                if photo_data:
                    await self._send_card_with_photo(callback, text, keyboard, photo_data)
                    return
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
        
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await self._send_card_text_only(callback, text, keyboard)

    async def handle_avatar_card_navigation(self, callback: CallbackQuery, direction: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∞–≤–∞—Ç–∞—Ä–æ–≤"""
        try:
            user_telegram_id = callback.from_user.id
            current_idx = int(callback.data.split(":")[1])
            
            cache_data = await gallery_cache.get_avatars(user_telegram_id)
            if not cache_data:
                await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                return
            
            total_avatars = cache_data["total_count"]
            
            if direction == "prev":
                new_idx = (current_idx - 1) % total_avatars  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
            else:  # "next"
                new_idx = (current_idx + 1) % total_avatars  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await gallery_cache.update_current_idx(user_telegram_id, new_idx)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∏–∑ –ë–î (–∫—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ID)
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                
            await self.send_avatar_card(callback, user.id, avatars, new_idx)
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–≤–∞—Ç–∞—Ä–∞–º: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    def _format_avatar_card_text(self, avatar, avatar_idx: int, total_avatars: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
        name = avatar.name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞
        gender_str = "üë® –ú—É–∂—Å–∫–æ–π" if avatar.gender == AvatarGender.MALE else "üë© –ñ–µ–Ω—Å–∫–∏–π"
        
        # –ß–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        status_map = {
            AvatarStatus.DRAFT: "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
            AvatarStatus.PHOTOS_UPLOADING: "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ",
            AvatarStatus.READY_FOR_TRAINING: "‚è≥ –ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é", 
            AvatarStatus.TRAINING: "üîÑ –û–±—É—á–∞–µ—Ç—Å—è",
            AvatarStatus.COMPLETED: "‚úÖ –ì–æ—Ç–æ–≤",
            AvatarStatus.ERROR: "‚ùå –û—à–∏–±–∫–∞",
            AvatarStatus.CANCELLED: "‚èπÔ∏è –û—Ç–º–µ–Ω–µ–Ω"
        }
        status_str = status_map.get(avatar.status, str(avatar.status))
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        type_map = {
            AvatarTrainingType.PORTRAIT: "üé≠ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
            AvatarTrainingType.STYLE: "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
        }
        type_str = type_map.get(avatar.training_type, str(avatar.training_type))
        
        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        created_str = avatar.created_at.strftime("%d.%m.%Y %H:%M") if avatar.created_at else "‚Äî"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos_count = len(avatar.photos) if avatar.photos else 0
        
        main_str = "‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä" if avatar.is_main else ""
        
        return f"""üé≠ **{name}**

{main_str}

üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ üöª –ü–æ–ª: {gender_str}
‚Ä¢ üéØ –¢–∏–ø: {type_str}
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å: {status_str}
‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}
‚Ä¢ üìÖ –°–æ–∑–¥–∞–Ω: {created_str}

({avatar_idx + 1} –∏–∑ {total_avatars})"""

    async def _load_avatar_preview(self, avatar) -> Optional[bytes]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ MinIO"""
        try:
            storage = StorageService()
            first_photo = avatar.photos[0]
            return await storage.download_file("avatars", first_photo.minio_key)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            return None

    async def _send_card_with_photo(self, callback: CallbackQuery, text: str, keyboard, photo_data: bytes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–æ—Ç–æ"""
        photo_file = BufferedInputFile(photo_data, filename="preview.jpg")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_media
            await callback.message.edit_media(
                media=InputMediaPhoto(media=photo_file, caption=text, parse_mode="Markdown"),
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            try:
                await callback.message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            await callback.message.answer_photo(
                photo=photo_file,
                caption=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

    async def _send_card_text_only(self, callback: CallbackQuery, text: str, keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º"""
        if callback.message.photo:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∞ –ø—Ä–µ–≤—å—é –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                await callback.message.delete()
            except Exception:
                pass
            
            await callback.message.answer(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ - –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            ) 