"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/avatar/photo_upload.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import asyncio
from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from uuid import UUID
from typing import List, Optional, Tuple
import logging

from app.core.di import get_user_service, get_avatar_service
from app.services.avatar.photo_service import PhotoUploadService
from app.database.models import AvatarPhoto
from .models import PhotoUploadConfig

logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫
user_upload_locks = {}

class UploadHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self):
        self.config = PhotoUploadConfig()
    
    async def handle_photo_upload(self, message: Message, state: FSMContext, bot: Bot) -> Tuple[bool, Optional[str], int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Returns:
            tuple: (success, error_message, photos_count)
        """
        try:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            
            if not avatar_id_str:
                return False, "–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", 0
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_db_id = await self._get_user_db_id(user_id)
            if not user_db_id:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            photos_count = await self._check_photo_limits(avatar_id)
            if photos_count >= self.config.MAX_PHOTOS:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {self.config.MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", photos_count
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∑–∞–≥—Ä—É–∑–æ–∫
            if user_id not in user_upload_locks:
                user_upload_locks[user_id] = asyncio.Lock()
            
            async with user_upload_locks[user_id]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                loading_msg = await message.answer("üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
                
                try:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
                    photo_bytes = await self._download_photo(bot, message)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ PhotoUploadService
                    uploaded_photo = await self._upload_photo_to_service(
                        avatar_id, user_db_id, photo_bytes, message.photo[-1].file_id
                    )
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    await loading_msg.delete()
                    
                    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await self._delete_original_photo(bot, message)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
                    _, photos_count = await self._get_avatar_photos(avatar_id)
                    
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ {uploaded_photo.id} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, –≤—Å–µ–≥–æ: {photos_count}")
                    return True, None, photos_count
                    
                except Exception as upload_error:
                    await loading_msg.delete()
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    await self._handle_upload_error_with_photo(bot, message, upload_error, photo_bytes)
                    return False, str(upload_error), photos_count
                    
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 0

    async def _get_user_db_id(self, user_id: int) -> Optional[UUID]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
        try:
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_id)
                return user.id if user else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    async def _check_photo_limits(self, avatar_id: UUID) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
        try:
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
                return total
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return 0

    async def _download_photo(self, bot: Bot, message: Message) -> bytes:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Telegram"""
        photo = message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file_info = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file_info.file_path)
        return file_data.read()

    async def _upload_photo_to_service(self, avatar_id: UUID, user_id: UUID, photo_bytes: bytes, file_id: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ PhotoUploadService"""
        async with get_avatar_service() as avatar_service:
            session = avatar_service.session
            photo_service = PhotoUploadService(session)
            return await photo_service.upload_photo(
                avatar_id=avatar_id,
                user_id=user_id,
                photo_data=photo_bytes,
                filename=f"telegram_photo_{file_id}.jpg"
            )

    async def _get_avatar_photos(self, avatar_id: UUID) -> Tuple[List[AvatarPhoto], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
        async with get_avatar_service() as avatar_service:
            return await avatar_service.get_avatar_photos(avatar_id)

    async def _delete_original_photo(self, bot: Bot, message: Message):
        """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞"""
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.message_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ: {e}")

    async def _handle_upload_error_with_photo(self, bot: Bot, message: Message, error: Exception, photo_bytes: bytes):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–∫–∞–∑–æ–º —Å–∞–º–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._delete_original_photo(bot, message)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            error_text = self._format_error_message(str(error))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–Ω—è—Ç–Ω–æ"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error_photo")]
            ])
            
            # –°–æ–∑–¥–∞–µ–º caption —Å –æ—à–∏–±–∫–æ–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏
            caption = f"""‚ùå –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {error_text}

üì∏ –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞.

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –†–∞–∑–º–µ—Ä –æ—Ç {self.config.MIN_RESOLUTION}√ó{self.config.MIN_RESOLUTION} –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ –§–æ—Ä–º–∞—Ç JPG –∏–ª–∏ PNG
‚Ä¢ –ë–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
            photo_input = BufferedInputFile(photo_bytes, filename="rejected_photo.jpg")
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_input,
                caption=caption,
                reply_markup=keyboard
            )
            
            logger.warning(f"–ü–æ–∫–∞–∑–∞–Ω–æ —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n{str(error)}")

    def _format_error_message(self, error_msg: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        error_msg_lower = error_msg.lower()
        
        if "–Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é" in error_msg_lower:
            if "—Ä–∞–∑–º–µ—Ä" in error_msg_lower:
                return f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–∏–Ω–∏–º—É–º {self.config.MIN_RESOLUTION}√ó{self.config.MIN_RESOLUTION} –ø–∏–∫—Å–µ–ª–µ–π)"
            elif "–¥—É–±–ª–∏–∫–∞—Ç" in error_msg_lower or "—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in error_msg_lower:
                return "–≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ"
            elif "—Ñ–æ—Ä–º–∞—Ç" in error_msg_lower:
                return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG –∏–ª–∏ PNG)"
            elif "—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞" in error_msg_lower:
                return f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {self.config.MAX_FILE_SIZE // (1024*1024)}MB)"
            else:
                return error_msg.replace("–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ", "")
        elif "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç" in error_msg_lower:
            return f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {self.config.MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏" 