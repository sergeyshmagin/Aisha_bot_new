"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/transcript_processing.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import logging
from typing import Optional
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.core.config import settings
from app.handlers.state import TranscribeStates
from app.core.di import (
    get_audio_processing_service,
    get_user_service_with_session,
    get_transcript_service
)

logger = logging.getLogger(__name__)

class AudioHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    
    def __init__(self, get_session_func):
        """
        Args:
            get_session_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        """
        self.get_session = get_session_func
    
    async def handle_audio_universal(self, message: Message, state: FSMContext) -> None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        current_state = await state.get_state()
        logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ/voice –æ—Ç user_id={message.from_user.id}, current_state={current_state}")
        
        # –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current_state in [TranscribeStates.processing, TranscribeStates.result]:
            logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
            
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f"[AUDIO_UNIVERSAL] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é
        try:
            processing_msg = await message.answer("üéµ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
            await state.set_state(TranscribeStates.processing)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = self._extract_file_info(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if not await self._validate_file_size(message, file_info, processing_msg, state):
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            transcript_text = await self._process_audio_file(message, file_info, processing_msg)
            
            if transcript_text:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                transcript = await self._save_transcript(message, transcript_text, file_info)
                
                if transcript and transcript.get("transcript_key"):
                    from .main_handler import TranscriptProcessingHandler
                    handler = TranscriptProcessingHandler()
                    await handler._send_transcript_result(message, transcript, processing_msg)
                    await state.set_state(TranscribeStates.result)
                    return
            
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
            await state.set_state(TranscribeStates.error)
                
        except Exception as e:
            logger.exception(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
            await state.set_state(TranscribeStates.error)

    def _extract_file_info(self, message: Message) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.voice:
            return {
                "file_id": message.voice.file_id,
                "duration": message.voice.duration,
                "file_name": f"voice_{message.message_id}.ogg",
                "file_size": message.voice.file_size,
                "file_format": "ogg",
                "source_type": "voice"
            }
        else:
            return {
                "file_id": message.audio.file_id,
                "duration": message.audio.duration,
                "file_name": message.audio.file_name or f"audio_{message.message_id}.mp3",
                "file_size": message.audio.file_size,
                "file_format": self._extract_audio_format(message.audio.file_name, message.audio.mime_type),
                "source_type": "audio"
            }

    async def _validate_file_size(self, message: Message, file_info: dict, processing_msg: Message, state: FSMContext) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å"""
        file_size = file_info.get("file_size")
        max_file_size = settings.MAX_AUDIO_SIZE  # 1GB
        
        if file_size and file_size > max_file_size:
            logger.warning(f"[AUDIO_UNIVERSAL] –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–ª–∏–º–∏—Ç: {max_file_size})")
            await message.reply(
                f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n"
                f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} –ú–ë\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_file_size / (1024*1024*1024)} –ì–ë\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                parse_mode="Markdown"
            )
            await state.set_state(TranscribeStates.error)
            return False
        
        return True

    async def _process_audio_file(self, message: Message, file_info: dict, processing_msg: Message) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"""
        file_size = file_info.get("file_size")
        telegram_api_limit = settings.TELEGRAM_API_LIMIT  # 20MB
        
        if file_size and file_size > telegram_api_limit:
            return await self._process_large_audio(message, file_info, processing_msg)
        else:
            return await self._process_regular_audio(message, file_info)

    async def _process_large_audio(self, message: Message, file_info: dict, processing_msg: Message) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"""
        file_size = file_info["file_size"]
        telegram_api_limit = settings.TELEGRAM_API_LIMIT
        
        logger.info(f"[AUDIO_UNIVERSAL] –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size} –±–∞–π—Ç), –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_msg.edit_text(
            f"üìÅ **–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω**\n\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} –ú–ë\n"
            f"üìè –õ–∏–º–∏—Ç Bot API: {telegram_api_limit / (1024*1024):.0f} –ú–ë\n\n"
            f"üß† **–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞—É–∑—ã –≤ –∞—É–¥–∏–æ\n"
            f"‚Ä¢ –†–∞–∑–¥–µ–ª—è—é –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª—è—é –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            f"‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            parse_mode="Markdown"
        )
        
        try:
            from app.services.large_audio_processor import try_process_large_audio
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            bot_token = message.bot.token
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å file_path
            file_path = None
            try:
                file = await message.bot.get_file(file_info["file_id"])
                file_path = file.file_path
                logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—É—á–µ–Ω file_path –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
            except Exception as e:
                logger.warning(f"[AUDIO_UNIVERSAL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_path: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await processing_msg.edit_text(
                f"üìÅ **–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω**\n\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} –ú–ë\n"
                f"ü§ñ **–ó–∞–ø—É—Å–∫–∞—é —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–æ—Ç–∫–∏...**\n"
                f"üîÑ –°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—É–¥–∏–æ\n"
                f"‚ö° –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–∞—É–∑–∞–º",
                parse_mode="Markdown"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º audio_service
            async with self.get_session() as session:
                audio_service = get_audio_processing_service(session)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                transcript_text = await try_process_large_audio(
                    bot_token=bot_token,
                    file_id=file_info["file_id"],
                    file_path=file_path,
                    file_size=file_size,
                    audio_service=audio_service
                )
            
            if transcript_text:
                logger.info(f"[AUDIO_UNIVERSAL] –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await processing_msg.edit_text(
                    f"‚úÖ **–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} –ú–ë\n"
                    f"üìù –ü–æ–ª—É—á–µ–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                    f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã\n"
                    f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
                    parse_mode="Markdown"
                )
                
                return transcript_text
            
        except Exception as e:
            logger.exception(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        await processing_msg.edit_text(
            f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**\n\n"
            f"üìä **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size / (1024*1024):.1f} –ú–ë\n"
            f"üìè **–õ–∏–º–∏—Ç Bot API:** {telegram_api_limit / (1024*1024):.0f} –ú–ë\n\n"
            f"üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n"
            f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (üìé ‚Üí –§–∞–π–ª)\n"
            f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –º–µ–Ω—å—à–µ {telegram_api_limit / (1024*1024):.0f} –ú–ë\n"
            f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ –∞—É–¥–∏–æ –¥–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n\n"
            f"üí° **–î–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:** —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç",
            parse_mode="Markdown"
        )
        
        return None

    async def _process_regular_audio(self, message: Message, file_info: dict) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã (‚â§20MB)"""
        try:
            # –û–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤ <= 20MB
            file = await message.bot.get_file(file_info["file_id"])
            downloaded_file = await message.bot.download_file(file.file_path)

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            async with self.get_session() as session:
                audio_service = get_audio_processing_service(session)
                logger.info(f"[AUDIO_UNIVERSAL] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {file_info['file_format']} —Ñ–∞–π–ª: {file_info['file_name']}")
                result = await audio_service.process_audio(downloaded_file.getvalue())
                
                if not result.success:
                    logger.error(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {result.error}")
                    return None
                
                text = result.text
                logger.info(f"[AUDIO_UNIVERSAL] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞, –¥–ª–∏–Ω–∞: {len(text)}")
                return text
                
        except Exception as e:
            logger.exception(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            return None

    async def _save_transcript(self, message: Message, transcript_text: str, file_info: dict) -> Optional[dict]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –ë–î"""
        try:
            async with self.get_session() as session:
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                
                if not user:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = {
                        "id": message.from_user.id,
                        "username": message.from_user.username,
                        "first_name": message.from_user.first_name,
                        "last_name": message.from_user.last_name,
                        "language_code": message.from_user.language_code or "ru",
                        "is_bot": message.from_user.is_bot,
                        "is_premium": getattr(message.from_user, "is_premium", False)
                    }
                    user = await user_service.register_user(user_data)
                    if not user:
                        logger.error(f"[AUDIO_UNIVERSAL] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
                        return None

                transcript_service = get_transcript_service(session)
                transcript = await transcript_service.save_transcript(
                    user_id=user.id,
                    transcript_data=transcript_text.encode('utf-8'),
                    metadata={
                        "source": file_info["source_type"],
                        "duration": file_info.get("duration"),
                        "file_id": file_info["file_id"],
                        "file_name": file_info["file_name"],
                        "file_size": file_info.get("file_size"),
                        "word_count": len(transcript_text.split()) if transcript_text else 0,
                        "processing_method": "large_file" if file_info.get("file_size", 0) > settings.TELEGRAM_API_LIMIT else "regular"
                    }
                )
                
                return transcript
                
        except Exception as e:
            logger.exception(f"[AUDIO_UNIVERSAL] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return None

    def _extract_audio_format(self, file_name: Optional[str], mime_type: Optional[str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ MIME —Ç–∏–ø—É"""
        if file_name:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if '.' in file_name:
                extension = file_name.split('.')[-1].lower()
                if extension in settings.AUDIO_FORMATS:
                    return extension
        
        if mime_type:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ MIME —Ç–∏–ø—É
            mime_to_format = {
                "audio/mpeg": "mp3",
                "audio/mp3": "mp3", 
                "audio/wav": "wav",
                "audio/wave": "wav",
                "audio/x-wav": "wav",
                "audio/ogg": "ogg",
                "audio/opus": "opus",
                "audio/mp4": "m4a",
                "audio/x-m4a": "m4a",
                "audio/aac": "aac",
                "audio/flac": "flac",
                "audio/x-flac": "flac"
            }
            return mime_to_format.get(mime_type, "mp3")
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é MP3
        return "mp3"

    async def handle_audio_document(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ.
        """
        current_state = await state.get_state()
        logger.info(f"[AUDIO_DOCUMENT] –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç user_id={message.from_user.id}, current_state={current_state}")
        
        # –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current_state in [TranscribeStates.processing, TranscribeStates.result]:
            logger.info(f"[AUDIO_DOCUMENT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç text_handler)
        if current_state == TranscribeStates.waiting_text:
            logger.info(f"[AUDIO_DOCUMENT] –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º
        file_name = message.document.file_name or ""
        mime_type = message.document.mime_type or ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        file_format = self._extract_audio_format(file_name, mime_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç
        if file_format not in settings.AUDIO_FORMATS and not mime_type.startswith("audio/"):
            logger.info(f"[AUDIO_DOCUMENT] –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º: {file_name}, mime: {mime_type}")
            return
        
        logger.info(f"[AUDIO_DOCUMENT] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç: {file_name} ({file_format})")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–∞—É–¥–∏–æ –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å handle_audio_universal
        class AudioDocument:
            def __init__(self, document):
                self.file_id = document.file_id
                self.duration = None  # –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.file_name = document.file_name
                self.file_size = document.file_size
                self.mime_type = document.mime_type
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º message.audio –Ω–∞ –Ω–∞—à –æ–±—ä–µ–∫—Ç
        original_audio = getattr(message, 'audio', None)
        message.audio = AudioDocument(message.document)
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∞—É–¥–∏–æ
            await self.handle_audio_universal(message, state)
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if original_audio:
                message.audio = original_audio
            else:
                delattr(message, 'audio') 