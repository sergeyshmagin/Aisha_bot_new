"""
–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
from typing import List
from uuid import UUID

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from app.core.di import get_user_service, get_avatar_service
from app.core.logger import get_logger
from app.services.generation.style_service import StyleService
from app.services.generation.generation_service import ImageGenerationService, GENERATION_COST
from app.services.generation.image_analysis_service import ImageAnalysisService
from app.services.user_settings import UserSettingsService
from app.database.models.generation import StyleCategory, StyleTemplate, ImageGeneration, GenerationStatus
from app.database.models import AvatarStatus, UserSettings
from .states import GenerationStates
from app.shared.utils.telegram_utils import safe_edit_callback_message

logger = get_logger(__name__)
router = Router()


class GenerationMainHandler:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.style_service = StyleService()
        self.generation_service = ImageGenerationService()
        self.image_analysis_service = ImageAnalysisService()
        self.user_settings_service = UserSettingsService()
    
    async def show_generation_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_balance = await user_service.get_user_balance(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                main_avatar = await avatar_service.get_main_avatar(user.id)
                if not main_avatar:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if main_avatar.status != AvatarStatus.COMPLETED:
                    await callback.answer("‚ùå –í–∞—à –∞–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è!", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            popular_categories = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)
            favorites = []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            avatar_type_text = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π" if main_avatar.training_type.value == "portrait" else "–°—Ç–∏–ª–µ–≤–æ–π"
            
            text = f"""üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
üë§ –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä: {main_avatar.name} ({avatar_type_text})
üí∞ –ë–∞–ª–∞–Ω—Å: {user_balance:.0f} –µ–¥–∏–Ω–∏—Ü
üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {GENERATION_COST:.0f} –µ–¥–∏–Ω–∏—Ü –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏</b>"""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._build_generation_menu_keyboard(
                popular_categories, 
                favorites, 
                main_avatar.id,
                user_balance
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            success = await safe_edit_callback_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            if success:
                logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            else:
                logger.info(f"–ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    def _build_generation_menu_keyboard(
        self, 
        popular_categories: List[StyleCategory],
        favorites: List[StyleTemplate],
        avatar_id: UUID,
        user_balance: float
    ) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        buttons = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
        has_balance = user_balance >= GENERATION_COST
        
        if has_balance:
            # –î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            buttons.append([
                InlineKeyboardButton(
                    text="üìù –°–≤–æ–π –ø—Ä–æ–º–ø—Ç",
                    callback_data=f"gen_custom:{avatar_id}"
                ),
                InlineKeyboardButton(
                    text="üì∏ –ü—Ä–æ–º–ø—Ç –ø–æ —Ñ–æ—Ç–æ",
                    callback_data=f"gen_photo:{avatar_id}"
                )
            ])
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞
            buttons.append([
                InlineKeyboardButton(
                    text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    callback_data="balance_topup"
                )
            ])
        
        # –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
        buttons.append([
            InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
                callback_data="gen_change_avatar"
            )
        ])
        
        # –ú–æ—è –≥–∞–ª–µ—Ä–µ—è
        buttons.append([
            InlineKeyboardButton(
                text="üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è",
                callback_data="my_gallery"
            )
        ])
        
        # –ù–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def show_custom_prompt_input(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º avatar_id –∏–∑ callback_data (gen_custom:{avatar_id})
            data_parts = callback.data.split(":")
            avatar_id = UUID(data_parts[1])
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar or avatar.user_id != user.id:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.status != AvatarStatus.COMPLETED:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!", show_alert=True)
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
            text = f"""üìù <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
‚ú® <b>–¢–∏–ø:</b> {avatar.training_type.value.title()}

üìã <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>

üéØ <b>–ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º–∞:</b>
‚Ä¢ üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
‚Ä¢ üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–• —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ ‚ú® –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–æ–∂–∏ –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —â–µ—Ç–∏–Ω–∞
‚Ä¢ üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
‚Ä¢ ‚ö° –ë–æ—Ä—å–±–∞ —Å "–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–º" —ç—Ñ—Ñ–µ–∫—Ç–æ–º

üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–∞–¥—Ä–æ–≤:</b>
‚Ä¢ "–ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ—Ñ–∏—Å–µ" ‚Üí –¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
‚Ä¢ "–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç" ‚Üí —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç  
‚Ä¢ "casual —Ñ–æ—Ç–æ" ‚Üí –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ –∂–∏–∑–Ω–∏
‚Ä¢ "Superman costume –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç" ‚Üí –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç

‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–æ–∂–∏ —Å –ø–æ—Ä–∞–º–∏
‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —â–µ—Ç–∏–Ω–∞ –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
‚Ä¢ –ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —Ç–µ–Ω–∏
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å

‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –õ–Æ–ë–û–ô –ø—Ä–æ–º–ø—Ç:</b>
–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è FLUX Pro!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—è–º",
                        callback_data="generation_menu"
                    )
                ]
            ])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            success = await safe_edit_callback_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º avatar_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.update_data(avatar_id=str(avatar_id))
            await state.set_state(GenerationStates.waiting_for_custom_prompt)
            
            if success:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            else:
                logger.info(f"–§–æ—Ä–º–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
            
        except ValueError as e:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def process_custom_prompt(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            
            if not avatar_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await state.clear()
                return
            
            custom_prompt = message.text
            user_telegram_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –î–û –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(UUID(avatar_id))
                if not avatar or avatar.user_id != user.id:
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.status != AvatarStatus.COMPLETED:
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                    await state.clear()
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            user_settings = await self.user_settings_service.get_user_settings(user.id)
            quick_mode = user_settings.quick_generation_mode if user_settings else False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                avatar_id=str(avatar_id),
                custom_prompt=custom_prompt,
                avatar_name=avatar.name
            )
            
            if quick_mode:
                # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_aspect_ratio = user_settings.default_aspect_ratio if user_settings else "1:1"
                await self._start_generation(message, state, default_aspect_ratio)
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
                await self.show_aspect_ratio_selection(message, state)
            
        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.)
            await message.reply(f"‚ùå {str(e)}")
            await state.clear()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await state.clear()
    
    async def show_aspect_ratio_selection(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            data = await state.get_data()
            custom_prompt = data.get("custom_prompt", "")
            avatar_name = data.get("avatar_name", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            user_telegram_id = message.from_user.id
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                default_ratio = "1:1"
                if user:
                    default_ratio = await self.user_settings_service.get_default_aspect_ratio(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            aspect_options = UserSettings.get_aspect_ratio_options()
            
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–ó–ê
            analysis_text = str(analysis_result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'))
            analysis_preview = analysis_text[:100] + ('...' if len(analysis_text) > 100 else '')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤–º–µ—Å—Ç–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            prompt_info = f"–°–æ–∑–¥–∞–Ω ({len(analysis_result.get('prompt', ''))} —Å–∏–º–≤–æ–ª–æ–≤)"
            
            text = f"""üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üîç <b>–ê–Ω–∞–ª–∏–∑:</b> {analysis_preview}

‚úçÔ∏è <b>–ü—Ä–æ–º–ø—Ç:</b> {prompt_info}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>"""

            # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤
            keyboard_rows = []
            
            logger.info(f"[DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π: {list(aspect_options.keys())}")
            
            for ratio_key, ratio_info in aspect_options.items():
                # –û—Ç–º–µ—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                icon = "‚úÖ" if ratio_key == default_ratio else ""
                button_text = f"{icon} {ratio_info['name']}"
                callback_data = f"aspect_ratio:{ratio_key}"
                
                logger.info(f"[DEBUG] –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É: text='{button_text}', callback_data='{callback_data}'")
                
                keyboard_rows.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=callback_data
                    )
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
                text += f"\n{ratio_info['name']} - {ratio_info['description']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard_rows.append([
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="user_settings"
                )
            ])
            
            keyboard_rows.append([
                InlineKeyboardButton(
                    text="üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
                    callback_data="generation_menu"
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            
            await message.reply(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
            await state.set_state(GenerationStates.waiting_for_aspect_ratio_selection)
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await state.clear()
    
    async def process_aspect_ratio_selection(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
        logger.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω aspect_ratio callback: {callback.data}")
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–∑ callback_data
            callback_parts = callback.data.split(":")
            aspect_ratio = ":".join(callback_parts[1:])  # –ë–µ—Ä–µ—Ç "3:4" –∏–∑ "aspect_ratio:3:4"
            logger.info(f"[DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {aspect_ratio}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ
            valid_options = UserSettings.get_aspect_ratio_options()
            logger.info(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {list(valid_options.keys())}")
            
            if aspect_ratio not in valid_options:
                logger.warning(f"[DEBUG] –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {aspect_ratio} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {list(valid_options.keys())}")
                try:
                    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", show_alert=True)
                except TelegramBadRequest:
                    logger.warning("Callback —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
                return
            
            logger.info(f"[DEBUG] –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {aspect_ratio} –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            is_photo_analysis = data.get("is_photo_analysis", False)
            
            if is_photo_analysis:
                # –î–ª—è —Ñ–æ—Ç–æ-–∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–µ–º analysis_result –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                analysis_result = {
                    'analysis': data.get("original_analysis", ""),
                    'prompt': data.get("custom_prompt", "")
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                await self._start_photo_generation(callback.message, state, aspect_ratio, analysis_result)
            else:
                # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                await self._start_generation_from_callback(callback, state, aspect_ratio)
            
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï - callback.answer() —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª
            try:
                await callback.answer()
            except TelegramBadRequest as e:
                if "query is too old" in str(e):
                    logger.info(f"Callback —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è {callback.from_user.id}, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ callback.answer() –≤ process_aspect_ratio_selection: {e}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞: {e}")
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö  
            try:
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            except TelegramBadRequest:
                logger.warning(f"Callback —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")
    
    async def _start_generation(self, message: Message, state: FSMContext, aspect_ratio: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        
        try:
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            if not all([avatar_id, custom_prompt]):
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                await state.clear()
                return
            
            user_telegram_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            aspect_options = UserSettings.get_aspect_ratio_options()
            aspect_name = aspect_options.get(aspect_ratio, {}).get("name", aspect_ratio)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            processing_message = await message.reply(
                f"""üé® <b>–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìê <b>–†–∞–∑–º–µ—Ä:</b> {aspect_name}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º)

‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...</b>
üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_custom(
                user_id=user.id,
                avatar_id=UUID(avatar_id),
                custom_prompt=custom_prompt,
                quality_preset="photorealistic_max",
                aspect_ratio=aspect_ratio,
                num_images=1
            )
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            await self._monitor_generation_status(processing_message, generation, custom_prompt, avatar_name)
            
            await state.clear()
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id} —Å —Ä–∞–∑–º–µ—Ä–æ–º {aspect_ratio} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except ValueError as e:
            await message.reply(f"‚ùå {str(e)}")
            await state.clear()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await state.clear()
    
    async def _start_generation_from_callback(self, callback: CallbackQuery, state: FSMContext, aspect_ratio: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ callback (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞)"""
        
        try:
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            if not all([avatar_id, custom_prompt]):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç - –µ—Å–ª–∏ callback —É—Å—Ç–∞—Ä–µ–ª, –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                try:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
                except TelegramBadRequest:
                    logger.warning(f"Callback —É—Å—Ç–∞—Ä–µ–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
                await state.clear()
                return
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    try:
                        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    except TelegramBadRequest:
                        logger.warning(f"Callback —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                    await state.clear()
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            aspect_options = UserSettings.get_aspect_ratio_options()
            aspect_name = aspect_options.get(aspect_ratio, {}).get("name", aspect_ratio)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await callback.message.edit_text(
                f"""üé® <b>–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìê <b>–†–∞–∑–º–µ—Ä:</b> {aspect_name} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {aspect_ratio})
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º)

‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...</b>
üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # ‚úÖ –í–ê–ñ–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú await callback.answer() –≤ –Ω–∞—á–∞–ª–µ!
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_custom(
                user_id=user.id,
                avatar_id=UUID(avatar_id),
                custom_prompt=custom_prompt,
                quality_preset="photorealistic_max",
                aspect_ratio=aspect_ratio,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                num_images=1
            )
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            await self._monitor_generation_status(callback.message, generation, custom_prompt, avatar_name)
            
            await state.clear()
            
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô callback.answer() –í –ö–û–ù–¶–ï
            # –ï—Å–ª–∏ callback —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª - –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            try:
                await callback.answer()
            except TelegramBadRequest as e:
                if "query is too old" in str(e):
                    logger.info(f"Callback —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ callback.answer(): {e}")
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id} —Å —Ä–∞–∑–º–µ—Ä–æ–º {aspect_ratio} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except ValueError as e:
            try:
                await callback.answer(f"‚ùå {str(e)}", show_alert=True)
            except TelegramBadRequest:
                logger.warning(f"Callback —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            await state.clear()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ callback: {e}")
            try:
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            except TelegramBadRequest:
                logger.warning(f"Callback —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ: {e}")
            await state.clear()

    async def _monitor_generation_status(self, message, generation, original_prompt: str, avatar_name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        
        import asyncio
        max_attempts = 120  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º (–ø–æ 1 —Å–µ–∫—É–Ω–¥–µ)
        attempt = 0
        
        while attempt < max_attempts:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                current_generation = await self.generation_service.get_generation_by_id(generation.id)
                
                if not current_generation:
                    await message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        parse_mode="HTML"
                    )
                    return
                
                if current_generation.status == GenerationStatus.COMPLETED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await self._show_final_result(message, current_generation, original_prompt, avatar_name)
                    return
                    
                elif current_generation.status == GenerationStatus.FAILED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    await self._show_final_error(message, current_generation)
                    return
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç - –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)
                attempt += 1
                
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(1)
                attempt += 1
        
        # –¢–∞–π–º–∞—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            f"""‚è∞ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {original_prompt[:60]}{'...' if len(original_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –≥–∞–ª–µ—Ä–µ–µ""",
            parse_mode="HTML"
        )

    async def _show_final_result(self, message, generation, original_prompt: str, avatar_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            if not generation.result_urls or len(generation.result_urls) == 0:
                await message.edit_text(
                    "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    parse_mode="HTML"
                )
                return
            
            duration = (generation.completed_at - generation.created_at).total_seconds() if generation.completed_at else 0
            
            text = f"""‚ú® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {original_prompt[:60]}{'...' if len(original_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
‚ö° <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º
‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {duration:.1f}—Å

üéâ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ",
                        callback_data="generation_menu"
                    ),
                    InlineKeyboardButton(
                        text="üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è",
                        callback_data="my_gallery"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                        callback_data=f"show_prompt:{generation.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result_url = generation.result_urls[0]
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ 1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ URL
                await message.reply_photo(
                    photo=result_url,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                await message.delete()
                
            except Exception as telegram_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {telegram_error}")
                
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
                    import aiohttp
                    from aiogram.types import BufferedInputFile
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.get(result_url) as response:
                            if response.status == 200:
                                image_data = await response.read()
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                                content_type = response.headers.get('content-type', 'image/jpeg')
                                extension = '.jpg' if 'jpeg' in content_type else '.png' if 'png' in content_type else '.jpg'
                                
                                photo_input = BufferedInputFile(
                                    image_data, 
                                    filename=f"generated_image_{generation.id}{extension}"
                                )
                                
                                await message.reply_photo(
                                    photo=photo_input,
                                    caption=text,
                                    reply_markup=keyboard,
                                    parse_mode="HTML"
                                )
                                
                                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                await message.delete()
                                
                                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation.id}")
                                
                            else:
                                raise Exception(f"HTTP {response.status} –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                                
                except Exception as download_error:
                    logger.exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {download_error}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await message.edit_text(
                        text + "\n\n‚ùå <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é.",
                parse_mode="HTML"
            )

    async def _show_final_error(self, message, generation):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        error_message = generation.error_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        
        text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message[:100]}{'...' if len(error_message) > 100 else ''}

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–º–ø—Ç  
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data="generation_menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ]
        ])
        
        await message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def show_full_prompt(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–ø–∏—Ä—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data (show_prompt:{generation_id})
            data_parts = callback.data.split(":")
            generation_id = UUID(data_parts[1])
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.get_generation_by_id(generation_id)
            if not generation:
                await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if generation.user_id != user.id:
                await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º –≤ –∫–æ–ø–∏—Ä—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            prompt_text = f"""{generation.final_prompt}"""

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            info_text = f"""üìù –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢

üé≠ –ê–≤–∞—Ç–∞—Ä: {generation.avatar.name}
üìä ID: {str(generation.id)[:8]}
üí° –î–ª–∏–Ω–∞: {len(generation.final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤

üìã –í–∞—à –ø—Ä–æ–º–ø—Ç: {generation.original_prompt}

üëÜ –ü—Ä–æ–º–ø—Ç –≤—ã—à–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        callback_data="generation_menu"
                    ),
                    InlineKeyboardButton(
                        text="üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è",
                        callback_data="my_gallery"
                    )
                ]
            ])
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.reply(
                prompt_text,
                parse_mode=None  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await callback.message.reply(
                info_text,
                reply_markup=keyboard,
                parse_mode=None  # –ë–µ–∑ HTML –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            )
            
            await callback.answer("üìù –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
            
        except ValueError as e:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_photo_prompt_input(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º avatar_id –∏–∑ callback_data (gen_photo:{avatar_id})
            data_parts = callback.data.split(":")
            avatar_id = UUID(data_parts[1])
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar or avatar.user_id != user.id:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.status != AvatarStatus.COMPLETED:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!", show_alert=True)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Vision API
            if not self.image_analysis_service.is_available():
                await callback.answer("‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            text = f"""üì∏ <b>–ü—Ä–æ–º–ø—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–º—É —Ñ–æ—Ç–æ</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
‚ú® <b>–¢–∏–ø:</b> {avatar.training_type.value.title()}

üìã <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>

ü§ñ <b>–ò–ò-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
‚Ä¢ üîç GPT-4 Vision –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ
‚Ä¢ ‚úçÔ∏è –°–æ–∑–¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
‚Ä¢ üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
‚Ä¢ üóëÔ∏è –í–∞—à–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞

üí° <b>–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ –í–∏–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏ –ª–∏—Ü–∞, –æ–¥–µ–∂–¥—ã, –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç—ã, –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–¥—Ä—ã
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–æ—Ç–æ

üì± <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—è–º",
                        callback_data="generation_menu"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º avatar_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.update_data(avatar_id=str(avatar_id))
            await state.set_state(GenerationStates.waiting_for_reference_photo)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except ValueError as e:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã —Ñ–æ—Ç–æ-–ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def process_reference_photo(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            
            if not avatar_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await state.clear()
                return
            
            user_telegram_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –î–û –∞–Ω–∞–ª–∏–∑–∞
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(UUID(avatar_id))
                if not avatar or avatar.user_id != user.id:
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.status != AvatarStatus.COMPLETED:
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                    await state.clear()
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
            analysis_message = await message.reply(
                f"""üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
ü§ñ <b>–ò–ò-–∞–Ω–∞–ª–∏–∑:</b> GPT-4 Vision
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra

‚è≥ <b>–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>
‚Ä¢ üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...
‚Ä¢ ‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...
‚Ä¢ üé® –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...

üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            if message.photo:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                photo = message.photo[-1]
                file_info = await message.bot.get_file(photo.file_id)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                image_data = await message.bot.download_file(file_info.file_path)
                image_bytes = image_data.read()
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(image_bytes)} –±–∞–π—Ç, file_id: {photo.file_id}")
            elif message.document and message.document.mime_type and message.document.mime_type.startswith('image/'):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                file_info = await message.bot.get_file(message.document.file_id)
                image_data = await message.bot.download_file(file_info.file_path)
                image_bytes = image_data.read()
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(image_bytes)} –±–∞–π—Ç, file_id: {message.document.file_id}")
            else:
                await analysis_message.edit_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª)",
                    parse_mode="HTML"
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            avatar_type = avatar.training_type.value if avatar.training_type else "portrait"
            analysis_result = await self.image_analysis_service.analyze_image_for_prompt(
                image_bytes, avatar_type
            )
            
            if not analysis_result.get("prompt"):
                await analysis_message.edit_text(
                    f"""‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {analysis_result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')}

üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (JPG, PNG)""",
                    parse_mode="HTML"
                )
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ
            try:
                await message.delete()
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ (message_id: {message.message_id})")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
            await analysis_message.edit_text(
                f"""‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üîç <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
{analysis_result['analysis']}

‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:</b>
‚Ä¢ –î–ª–∏–Ω–∞: {len(analysis_result['prompt'])} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°—Ç–∏–ª—å: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 8K
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏: –î–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</b>""",
                parse_mode="HTML"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            user_settings = await self.user_settings_service.get_user_settings(user.id)
            quick_mode = user_settings.quick_generation_mode if user_settings else False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                avatar_id=str(avatar_id),
                custom_prompt=analysis_result['prompt'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç GPT Vision
                avatar_name=avatar.name,
                is_photo_analysis=True,
                original_analysis=analysis_result['analysis']
            )
            
            if quick_mode:
                # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_aspect_ratio = user_settings.default_aspect_ratio if user_settings else "1:1"
                await self._start_photo_generation(analysis_message, state, default_aspect_ratio, analysis_result)
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
                await self._show_photo_aspect_ratio_selection(analysis_message, state, analysis_result)
            
        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.)
            await message.reply(f"‚ùå {str(e)}")
            await state.clear()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            await state.clear()

    async def _show_photo_aspect_ratio_selection(self, message: Message, state: FSMContext, analysis_result: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            data = await state.get_data()
            custom_prompt = data.get("custom_prompt", "")
            avatar_name = data.get("avatar_name", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            user_telegram_id = message.chat.id  # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º chat.id
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                default_ratio = "1:1"
                if user:
                    default_ratio = await self.user_settings_service.get_default_aspect_ratio(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            aspect_options = UserSettings.get_aspect_ratio_options()
            
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–ó–ê
            analysis_text = str(analysis_result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'))
            analysis_preview = analysis_text[:100] + ('...' if len(analysis_text) > 100 else '')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤–º–µ—Å—Ç–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            prompt_info = f"–°–æ–∑–¥–∞–Ω ({len(analysis_result.get('prompt', ''))} —Å–∏–º–≤–æ–ª–æ–≤)"
            
            text = f"""üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üîç <b>–ê–Ω–∞–ª–∏–∑:</b> {analysis_preview}

‚úçÔ∏è <b>–ü—Ä–æ–º–ø—Ç:</b> {prompt_info}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>"""

            # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤
            keyboard_rows = []
            
            for ratio_key, ratio_info in aspect_options.items():
                # –û—Ç–º–µ—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                icon = "‚úÖ" if ratio_key == default_ratio else ""
                button_text = f"{icon} {ratio_info['name']}"
                
                keyboard_rows.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"aspect_ratio:{ratio_key}"
                    )
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
                text += f"\n{ratio_info['name']} - {ratio_info['description']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard_rows.append([
                InlineKeyboardButton(
                    text="üîô –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
                    callback_data="generation_menu"
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            
            await message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
            await state.set_state(GenerationStates.waiting_for_aspect_ratio_selection)
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            logger.info(f"[DEBUG] Analysis data: {analysis_result}")  # –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ: {e}")
            await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await state.clear()
    
    async def _start_photo_generation(self, message: Message, state: FSMContext, aspect_ratio: str, analysis_result: dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–æ—Ç–æ-–∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        
        try:
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            if not all([avatar_id, custom_prompt]):
                await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                await state.clear()
                return
            
            user_telegram_id = message.chat.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            aspect_options = UserSettings.get_aspect_ratio_options()
            aspect_name = aspect_options.get(aspect_ratio, {}).get("name", aspect_ratio)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await message.edit_text(
                f"""üé® <b>–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ...</b>

üîç <b>–ê–Ω–∞–ª–∏–∑:</b> {str(analysis_result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'))[:80]}{'...' if len(str(analysis_result.get('analysis', ''))) > 80 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìê <b>–†–∞–∑–º–µ—Ä:</b> {aspect_name}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º)

‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...</b>
üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_custom(
                user_id=user.id,
                avatar_id=UUID(avatar_id),
                custom_prompt=custom_prompt,
                quality_preset="photorealistic_max",
                aspect_ratio=aspect_ratio,
                num_images=1
            )
            
            # üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if hasattr(generation, 'prompt_metadata'):
                if not generation.prompt_metadata:
                    generation.prompt_metadata = {}
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
                generation.prompt_metadata['vision_analysis'] = {
                    'analysis': analysis_result['analysis'],
                    'original_prompt_from_image': analysis_result['prompt'],
                    'reference_photo_processed': True,
                    'revolutionary_negatives_applied': analysis_result.get('revolutionary_negatives_applied', False)
                }
                
                # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º negative_prompt –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
                if analysis_result.get('negative_prompt'):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å negative_prompt - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ prompt_processing
                    if 'prompt_processing' not in generation.prompt_metadata:
                        generation.prompt_metadata['prompt_processing'] = {}
                    
                    generation.prompt_metadata['prompt_processing']['negative_prompt'] = analysis_result['negative_prompt']
                    generation.prompt_metadata['prompt_processing']['negative_prompt_source'] = 'vision_analysis'
                    
                    logger.info(f"[Photo Analysis] Negative prompt –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(analysis_result['negative_prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
                elif analysis_result.get('revolutionary_negatives_applied'):
                    # –î–ª—è FLUX Pro –Ω–µ–≥–∞—Ç–∏–≤—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
                    if 'prompt_processing' not in generation.prompt_metadata:
                        generation.prompt_metadata['prompt_processing'] = {}
                    
                    generation.prompt_metadata['prompt_processing']['negative_prompt'] = None
                    generation.prompt_metadata['prompt_processing']['negative_prompt_source'] = 'flux_pro_embedded'
                    
                    logger.info(f"[Photo Analysis] –ù–µ–≥–∞—Ç–∏–≤—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è FLUX Pro")
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            await self._monitor_generation_status(
                message, 
                generation, 
                f"[–§–æ—Ç–æ-–∞–Ω–∞–ª–∏–∑] {custom_prompt}", 
                avatar_name
            )
            
            await state.clear()
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id} —Å —Ä–∞–∑–º–µ—Ä–æ–º {aspect_ratio} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except ValueError as e:
            await message.edit_text(f"‚ùå {str(e)}")
            await state.clear()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await state.clear()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
generation_handler = GenerationMainHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "generation_menu")
async def handle_generation_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await generation_handler.show_generation_menu(callback)

@router.callback_query(F.data.startswith("gen_custom:"))
async def handle_custom_prompt_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.show_custom_prompt_input(callback, state)

@router.message(F.text, StateFilter(GenerationStates.waiting_for_custom_prompt))
async def handle_custom_prompt_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.process_custom_prompt(message, state)

@router.callback_query(F.data.startswith("show_prompt:"))
async def handle_show_full_prompt(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.show_full_prompt(callback)

@router.callback_query(F.data.startswith("gen_photo:"))
async def handle_photo_prompt_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ-–ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.show_photo_prompt_input(callback, state)

@router.message(F.photo, StateFilter(GenerationStates.waiting_for_reference_photo))
async def handle_reference_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await generation_handler.process_reference_photo(message, state)

@router.message(F.document, StateFilter(GenerationStates.waiting_for_reference_photo))
async def handle_reference_photo_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await generation_handler.process_reference_photo(message, state)

@router.message(F.text, StateFilter(GenerationStates.waiting_for_reference_photo))
async def handle_text_instead_of_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.reply(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.\n\n"
        "üí° –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª.",
        parse_mode="HTML"
    )

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.startswith("gen_template:"))
async def handle_template_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞"""
    await callback.answer("üöß –®–∞–±–ª–æ–Ω—ã —Å—Ç–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data.startswith("gen_category:"))
async def show_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.answer("üöß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "gen_all_categories")
async def show_all_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await callback.answer("üöß –ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "gen_favorites")
async def show_favorites(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
    await callback.answer("üöß –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "noop")
async def handle_noop(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö callback'–æ–≤"""
    await callback.answer()

@router.callback_query(F.data.startswith("aspect_ratio:"))
async def handle_aspect_ratio_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    logger.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω aspect_ratio callback: {callback.data}")
    await generation_handler.process_aspect_ratio_selection(callback, state)

@router.callback_query(F.data == "user_settings")
async def handle_user_settings_request(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.message(F.text, StateFilter(GenerationStates.waiting_for_aspect_ratio_selection))
async def handle_text_instead_of_aspect_ratio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    await message.reply(
        "üìê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω.",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "gen_change_avatar")
async def handle_change_avatar_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∞"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤
    from app.handlers.avatar import avatar_main_handler
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    await state.clear()
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤
    await avatar_main_handler.show_avatar_menu(callback, state) 