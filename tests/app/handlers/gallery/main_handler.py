"""
–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–∞—Ä—Ç–æ—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –ø–æ –æ–±—Ä–∞–∑—Ü—É –≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
"""
import math
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from uuid import UUID
import asyncio

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message, InputMediaPhoto, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from app.core.di import get_user_service, get_avatar_service, get_redis
from app.core.database import get_session
from app.core.logger import get_logger
from app.services.generation.generation_service import ImageGenerationService
from app.database.models.generation import ImageGeneration, GenerationStatus
from app.database.models import Avatar
from app.shared.utils.telegram_utils import safe_edit_callback_message
from .states import GalleryStates
from app.database.repositories import ImageGenerationRepository
from app.services.user import UserService
from app.services.gallery_service import gallery_service
from app.handlers.gallery.states import GalleryData, gallery_state_manager
from app.utils.keyboards import create_gallery_keyboard

logger = get_logger(__name__)
router = Router()


class ImageGalleryCache:
    """–ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Redis –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(self):
        self._memory_cache = {}  # Fallback –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
    
    async def set_images(self, user_id: int, images: List[ImageGeneration], current_idx: int = 0):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à"""
        
        cache_data = {
            'image_ids': [str(img.id) for img in images],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID
            'current_idx': current_idx,
            'total_count': len(images),
            'timestamp': datetime.now().isoformat()
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis
        try:
            redis_client = await get_redis()
            cache_key = f"gallery_cache:{user_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ 1 —á–∞—Å
            await redis_client.setex(
                cache_key, 
                3600,  # 1 —á–∞—Å TTL
                json.dumps(cache_data)
            )
            
            logger.debug(f"–ö—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å: {e}")
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∫–∞–∫ fallback
        self._memory_cache[user_id] = {
            'images': images,
            'current_idx': current_idx,
            'total_count': len(images),
            'timestamp': datetime.now()
        }
    
    async def get_images(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
        try:
            redis_client = await get_redis()
            cache_key = f"gallery_cache:{user_id}"
            
            cached_data = await redis_client.get(cache_key)
            if cached_data:
                cache_info = json.loads(cached_data)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ ID
                images = await self._restore_images_by_ids(cache_info['image_ids'])
                if images:
                    result = {
                        'images': images,
                        'current_idx': cache_info['current_idx'],
                        'total_count': len(images),
                        'timestamp': datetime.fromisoformat(cache_info['timestamp'])
                    }
                    
                    logger.debug(f"–ö—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω –∏–∑ Redis")
                    return result
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å: {e}")
        
        # Fallback –Ω–∞ –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        return self._memory_cache.get(user_id)
    
    async def _restore_images_by_ids(self, image_ids: List[str]) -> List[ImageGeneration]:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∏—Ö ID (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û - bulk –∑–∞–ø—Ä–æ—Å)"""
        
        try:
            if not image_ids:
                return []
            
            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Bulk –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ N+1 –∑–∞–ø—Ä–æ—Å–æ–≤
            generation_service = ImageGenerationService()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UUID
            uuid_ids = []
            for img_id in image_ids:
                try:
                    uuid_ids.append(UUID(img_id))
                except ValueError:
                    logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π UUID –≤ –∫–µ—à–µ –≥–∞–ª–µ—Ä–µ–∏: {img_id}")
                    continue
            
            if not uuid_ids:
                return []
            
            # Bulk –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ä–∞–∑—É
            images = await generation_service.get_generations_by_ids(uuid_ids)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å URL
            filtered_images = []
            for img in images:
                if img and img.status == GenerationStatus.COMPLETED and img.result_urls:
                    filtered_images.append(img)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –≤ image_ids
            sorted_images = []
            for img_id in image_ids:
                for img in filtered_images:
                    if str(img.id) == img_id:
                        sorted_images.append(img)
                        break
            
            logger.debug(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(sorted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ {len(image_ids)} ID –æ–¥–Ω–∏–º bulk –∑–∞–ø—Ä–æ—Å–æ–º")
            return sorted_images
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ ID: {e}")
            return []
    
    async def update_current_idx(self, user_id: int, new_idx: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redis
        try:
            redis_client = await get_redis()
            cache_key = f"gallery_cache:{user_id}"
            
            cached_data = await redis_client.get(cache_key)
            if cached_data:
                cache_info = json.loads(cached_data)
                cache_info['current_idx'] = new_idx
                
                await redis_client.setex(
                    cache_key, 
                    3600,  # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º TTL
                    json.dumps(cache_info)
                )
                
                logger.debug(f"–ò–Ω–¥–µ–∫—Å –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redis: {new_idx}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –≤ Redis: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        if user_id in self._memory_cache:
            self._memory_cache[user_id]['current_idx'] = new_idx
    
    async def clear_user_cache(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –û—á–∏—â–∞–µ–º Redis
        try:
            redis_client = await get_redis()
            cache_key = f"gallery_cache:{user_id}"
            await redis_client.delete(cache_key)
            
            logger.debug(f"–ö—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω –≤ Redis")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis –∫—ç—à–∞: {e}")
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        if user_id in self._memory_cache:
            del self._memory_cache[user_id]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
gallery_cache = ImageGalleryCache()


class GalleryMainHandler:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–∞—Ä—Ç–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ"""
    
    def __init__(self):
        self.generation_service = ImageGenerationService()
    
    async def show_gallery_main(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–∞–ª–µ—Ä–µ–∏"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≥–∞–ª–µ—Ä–µ—é...", show_alert=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            images = await self._get_user_completed_images(user.id)
            
            if not images:
                await self._show_empty_gallery_message(callback)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await gallery_cache.set_images(user_telegram_id, images, 0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ
            await self._send_image_card(callback, images, 0)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –æ—Ç–∫—Ä—ã–ª –≥–∞–ª–µ—Ä–µ—é ({len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def handle_image_navigation(self, callback: CallbackQuery, direction: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        try:
            user_telegram_id = callback.from_user.id
            current_idx = int(callback.data.split(":")[1])
            
            cache_data = await gallery_cache.get_images(user_telegram_id)
            if not cache_data:
                await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                return
            
            images = cache_data["images"]
            total_images = len(images)
            
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            if direction == "prev":
                new_idx = (current_idx - 1) % total_images
            else:  # "next"
                new_idx = (current_idx + 1) % total_images
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            await gallery_cache.update_current_idx(user_telegram_id, new_idx)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await self._send_image_card(callback, images, new_idx)
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–∞–ª–µ—Ä–µ–µ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _send_image_card(self, callback: CallbackQuery, images: List[ImageGeneration], img_idx: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–≤—å—é"""
        
        if not images or img_idx >= len(images):
            await callback.message.edit_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        generation = images[img_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        text = self._format_image_card_text(generation, img_idx, len(images))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self._get_image_card_keyboard(img_idx, len(images), str(generation.id))
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if generation.result_urls and len(generation.result_urls) > 0:
            try:
                image_data = await self._download_image(generation.result_urls[0])
                if image_data:
                    await self._send_card_with_image(callback, text, keyboard, image_data)
                    return
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {generation.id}: {e}")
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await self._send_card_text_only(callback, text, keyboard)
    
    def _format_image_card_text(self, generation: ImageGeneration, img_idx: int, total_images: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (–ë–ï–ó —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        avatar_name = generation.avatar.name if generation.avatar and generation.avatar.name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_status = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" if getattr(generation, 'is_favorite', False) else ""
        
        # –†–∞–∑–º–µ—Ä (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        aspect_ratio = getattr(generation, 'aspect_ratio', '1:1')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ë–ï–ó –ø—Ä–æ–º–ø—Ç–∞ (–µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–º–ø—Ç")
        text_parts = [
            f"üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_idx + 1} –∏–∑ {total_images}*",
            "",
            f"üé≠ *–ê–≤–∞—Ç–∞—Ä:* {avatar_name}",
            f"üìê *–†–∞–∑–º–µ—Ä:* {aspect_ratio}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if favorite_status:
            text_parts.append("")
            text_parts.append(favorite_status)
        
        return "\n".join(text_parts)
    
    def _get_image_card_keyboard(self, img_idx: int, total_images: int, generation_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ª—É—á—à–∏–º UX"""
        
        buttons = []
        
        # üîù –ë–õ–û–ö 1: –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–∞–ª–µ—Ä–µ–µ (–Ω–∞–≤–µ—Ä—Ö—É)
        top_row = [
            InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="gallery_filters"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gallery_stats")
        ]
        buttons.append(top_row)
        
        # üîÑ –ë–õ–û–ö 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        nav_row = []
        
        if img_idx > 0:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"gallery_image_prev:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="noop"))
        
        nav_row.append(InlineKeyboardButton(text=f"{img_idx + 1}/{total_images}", callback_data="noop"))
        
        if img_idx < total_images - 1:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"gallery_image_next:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="noop"))
        
        buttons.append(nav_row)
        
        # üìã –ë–õ–û–ö 3: –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        content_row = [
            InlineKeyboardButton(text="üìã –ü—Ä–æ–º–ø—Ç", callback_data=f"gallery_full_prompt:{generation_id}"),
            InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"gallery_regenerate:{generation_id}")
        ]
        buttons.append(content_row)
        
        # ‚ù§Ô∏è –ë–õ–û–ö 4: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        interaction_row = [
            InlineKeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"gallery_toggle_favorite:{generation_id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"gallery_delete:{generation_id}")
        ]
        buttons.append(interaction_row)
        
        # üè† –ë–õ–û–ö 5: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        back_row = [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
        buttons.append(back_row)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def _send_card_with_image(self, callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup, image_data: bytes):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        
        try:
            image_file = BufferedInputFile(image_data, filename="gallery_image.jpg")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if callback.message.photo:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=image_file, caption=text, parse_mode="Markdown"),
                    reply_markup=keyboard
                )
            else:
                # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                
                await callback.message.answer_photo(
                    photo=image_file,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        except TelegramBadRequest as markdown_error:
            if "parse entities" in str(markdown_error):
                # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –ø–∞—Ä—Å–∏–Ω–≥–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {markdown_error}")
                try:
                    image_file = BufferedInputFile(image_data, filename="gallery_image.jpg")
                    
                    if callback.message.photo:
                        await callback.message.edit_media(
                            media=InputMediaPhoto(media=image_file, caption=text, parse_mode=None),
                            reply_markup=keyboard
                        )
                    else:
                        try:
                            await callback.message.delete()
                        except Exception:
                            pass
                        
                        await callback.message.answer_photo(
                            photo=image_file,
                            caption=text,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                except Exception as fallback_error:
                    logger.exception(f"–û—à–∏–±–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ fallback –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {fallback_error}")
                    await self._send_card_text_only(callback, text, keyboard)
            else:
                logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {markdown_error}")
                await self._send_card_text_only(callback, text, keyboard)
        except Exception as e:
            logger.exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            await self._send_card_text_only(callback, text, keyboard)
    
    async def _send_card_text_only(self, callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º"""
        
        error_suffix = "\n\n‚ùå *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*"
        
        try:
            if callback.message.photo:
                # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                
                await callback.message.answer(
                    text=text + error_suffix,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    text=text + error_suffix,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        except TelegramBadRequest as markdown_error:
            if "parse entities" in str(markdown_error):
                # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤ —Ç–µ–∫—Å—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {markdown_error}")
                error_suffix_plain = "\n\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                
                try:
                    if callback.message.photo:
                        try:
                            await callback.message.delete()
                        except Exception:
                            pass
                        
                        await callback.message.answer(
                            text=text + error_suffix_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback.message.edit_text(
                            text=text + error_suffix_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                except Exception as fallback_error:
                    logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ fallback –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {fallback_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)
            else:
                logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {markdown_error}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            await callback.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _download_image(self, url: str) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        
        try:
            import aiohttp
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.read()
                    else:
                        logger.warning(f"HTTP {response.status} –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {url}")
                        return None
                        
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            return None
    
    async def _get_user_completed_images(self, user_id: UUID) -> List[ImageGeneration]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            all_images = await self.generation_service.get_user_generations(
                user_id=user_id,
                limit=1000,
                offset=0
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            completed_images = [
                img for img in all_images 
                if img.status == GenerationStatus.COMPLETED and img.result_urls
            ]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            completed_images.sort(key=lambda x: x.created_at, reverse=True)
            
            return completed_images
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
    
    async def _show_empty_gallery_message(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ"""
        
        text = """üì∑ **–í–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞**

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

üé® **–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç  
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

‚ú® **–ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generation_menu")
            ],
            [
                InlineKeyboardButton(text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="avatar_menu")
            ],
            [
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await callback.message.answer(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
    
    async def show_gallery_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–ª–µ—Ä–µ–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            try:
                redis_client = await get_redis()
                cache_key = f"gallery_stats:{user_telegram_id}"
                cached_stats = await redis_client.get(cache_key)
                
                if cached_stats:
                    import json
                    stats = json.loads(cached_stats)
                    logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                else:
                    stats = None
            except Exception as cache_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∫–µ—à–∞: {cache_error}")
                stats = None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not stats:
                stats = await self._get_detailed_stats(user.id)
                
                # üöÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 5 –º–∏–Ω—É—Ç
                try:
                    redis_client = await get_redis()
                    cache_key = f"gallery_stats:{user_telegram_id}"
                    import json
                    await redis_client.setex(cache_key, 300, json.dumps(stats))  # 5 –º–∏–Ω—É—Ç TTL
                    logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–µ—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                except Exception as cache_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–µ—à: {cache_error}")
            
            text = f"""üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–ª–µ—Ä–µ–∏*

üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* {stats['total_images']}

‚ù§Ô∏è *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ:* {stats['favorite_images']}

üé≠ *–ê–≤–∞—Ç–∞—Ä—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {stats['used_avatars']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_avatars']}

üìÖ *–ó–∞ 30 –¥–Ω–µ–π:*
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {stats['recent_images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: \\~{stats['estimated_credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤

üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:* {stats['last_generation']}

üìà *–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥:* {stats['most_active_period']}"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ", callback_data="my_gallery")
                ]
            ])
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            try:
                if callback.message.photo:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass
                    
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            except TelegramBadRequest as edit_error:
                if "parse entities" in str(edit_error):
                    # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    text_plain = text.replace('*', '').replace('\\~', '~')
                    
                    if callback.message.photo:
                        try:
                            await callback.message.delete()
                        except Exception:
                            pass
                        
                        await callback.message.answer(
                            text=text_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback.message.edit_text(
                            text=text_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    async def _get_detailed_stats(self, user_id: UUID) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            all_generations = await self.generation_service.get_user_generations(
                user_id=user_id,
                limit=1000,
                offset=0
            )
            
            total_images = len(all_generations)
            
            # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            favorite_images = len([g for g in all_generations if getattr(g, 'is_favorite', False)])
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
            used_avatars = len(set(g.avatar_id for g in all_generations if g.avatar_id))
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é –ë–î
            async with get_session() as session:
                from sqlalchemy import select
                from app.database.models import Avatar, AvatarStatus
                
                stmt = select(Avatar).where(
                    Avatar.user_id == user_id,
                    Avatar.status == AvatarStatus.COMPLETED
                )
                result = await session.execute(stmt)
                active_avatars = len(list(result.scalars().all()))
            
            # –ó–∞ 30 –¥–Ω–µ–π
            thirty_days_ago = datetime.utcnow() - timedelta(days=30)
            recent_images = len([g for g in all_generations if g.created_at >= thirty_days_ago])
            estimated_credits = recent_images * 5  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            last_generation = "–ù–∏–∫–æ–≥–¥–∞"
            if all_generations:
                sorted_gens = sorted(all_generations, key=lambda x: x.created_at, reverse=True)
                last_generation = sorted_gens[0].created_at.strftime("%d.%m.%Y %H:%M")
            
            # –ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            most_active_period = "–£—Ç—Ä–æ (9:00-12:00)"  # –ó–∞–≥–ª—É—à–∫–∞
            
            return {
                'total_images': total_images,
                'favorite_images': favorite_images,
                'used_avatars': used_avatars,
                'active_avatars': active_avatars,
                'recent_images': recent_images,
                'estimated_credits': estimated_credits,
                'last_generation': last_generation,
                'most_active_period': most_active_period
            }
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_images': 0,
                'favorite_images': 0,
                'used_avatars': 0,
                'active_avatars': 0,
                'recent_images': 0,
                'estimated_credits': 0,
                'last_generation': "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                'most_active_period': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
    
    async def delete_image(self, callback: CallbackQuery, generation_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            generation = await self.generation_service.get_generation_by_id(UUID(generation_id))
            if not generation:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                return
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ ID –∫ UUID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            try:
                generation_user_id = UUID(str(generation.user_id)) if not isinstance(generation.user_id, UUID) else generation.user_id
                user_id_uuid = UUID(str(user.id)) if not isinstance(user.id, UUID) else user.id
                
                if generation_user_id != user_id_uuid:
                    logger.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {generation_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_uuid} (–≤–ª–∞–¥–µ–ª–µ—Ü: {generation_user_id})")
                    await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                    return
            except (ValueError, TypeError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –∫ UUID: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            prompt_preview = generation.original_prompt[:40] + "..." if len(generation.original_prompt) > 40 else generation.original_prompt
            created_str = generation.created_at.strftime("%d.%m.%Y %H:%M")
            
            text = f"""üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*

‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?

üìù *–ü—Ä–æ–º–ø—Ç:* {prompt_preview}
üé≠ *–ê–≤–∞—Ç–∞—Ä:* {generation.avatar.name}
üìÖ *–°–æ–∑–¥–∞–Ω–æ:* {created_str}
üÜî *ID:* {str(generation.id)[:8]}

‚ùó *–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!*"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"gallery_delete_confirm:{generation_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_gallery")
                ],
                [
                    InlineKeyboardButton(text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ", callback_data="my_gallery")
                ]
            ])
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            try:
                if callback.message.photo:
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass
                    
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            except Exception as send_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {send_error}")
                await callback.message.answer(
                    text=text,
                    reply_markup=keyboard,
                    parse_mode=None
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    
    async def confirm_delete_image(self, callback: CallbackQuery, generation_id: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.get_generation_by_id(UUID(generation_id))
            if not generation:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
            cache_data = await gallery_cache.get_images(user_telegram_id)
            current_idx = 0
            if cache_data:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i, img in enumerate(cache_data["images"]):
                    if str(img.id) == generation_id:
                        current_idx = i
                        break
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            await self.generation_service.delete_generation(UUID(generation_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            updated_images = await self._get_user_completed_images(user.id)
            
            if not updated_images:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –≥–∞–ª–µ—Ä–µ—é
                await self._show_empty_gallery_message(callback)
                await callback.answer("üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞", show_alert=True)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∫–∞–∑–∞
            new_idx = current_idx
            if new_idx >= len(updated_images):
                # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ
                new_idx = len(updated_images) - 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∏ –∏–Ω–¥–µ–∫—Å–æ–º
            await gallery_cache.set_images(user_telegram_id, updated_images, new_idx)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            await self._send_image_card(callback, updated_images, new_idx)
            
            await callback.answer("üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} —É–¥–∞–ª–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {generation_id}, –ø–æ–∫–∞–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {new_idx}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
gallery_main_handler = GalleryMainHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "my_gallery")
async def handle_gallery_main(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–∞–ª–µ—Ä–µ–∏"""
    await gallery_main_handler.show_gallery_main(callback, state)

@router.callback_query(F.data.startswith("gallery_image_prev:"))
async def handle_gallery_prev(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    await gallery_main_handler.handle_image_navigation(callback, "prev")

@router.callback_query(F.data.startswith("gallery_image_next:"))
async def handle_gallery_next(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    await gallery_main_handler.handle_image_navigation(callback, "next")

@router.callback_query(F.data == "gallery_stats")
async def handle_gallery_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ callback gallery_stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await gallery_main_handler.show_gallery_stats(callback)

@router.callback_query(F.data.startswith("gallery_full_prompt:"))
async def handle_gallery_full_prompt(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    try:
        logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ callback gallery_full_prompt: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ generation_id
        try:
            generation_id_str = callback.data.split(":")[1]
            generation_id = UUID(generation_id_str)
            logger.info(f"üÜî –ò–∑–≤–ª–µ—á–µ–Ω generation_id: {generation_id}")
        except (IndexError, ValueError) as parse_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data '{callback.data}': {parse_error}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_telegram_id = callback.from_user.id
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
            if not user:
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–º–ø—Ç–∞")
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        generation_service = ImageGenerationService()
        generation = await generation_service.get_generation_by_id(generation_id)
        
        if not generation:
            logger.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {generation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ ID –∫ UUID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            generation_user_id = UUID(str(generation.user_id)) if not isinstance(generation.user_id, UUID) else generation.user_id
            user_id_uuid = UUID(str(user.id)) if not isinstance(user.id, UUID) else user.id
            
            if generation_user_id != user_id_uuid:
                logger.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {generation_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_uuid} (–≤–ª–∞–¥–µ–ª–µ—Ü: {generation_user_id})")
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                return
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –∫ UUID: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {generation.id}, –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(generation.final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not generation.final_prompt:
            logger.warning(f"‚ùå –£ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç final_prompt")
            await callback.answer("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ –∫–æ–¥–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º
        prompt_text = f"""```
{generation.final_prompt}
```"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ", callback_data="my_gallery"),
                InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generation_menu")
            ]
        ])
        
        try:
            # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å Markdown
            await callback.message.reply(
                prompt_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å Markdown –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
        except TelegramBadRequest as markdown_error:
            if "parse entities" in str(markdown_error):
                # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –≤ –ø—Ä–æ–º–ø—Ç–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ HTML: {markdown_error}")
                
                # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è HTML
                html_text = f"""<pre>{generation.final_prompt}</pre>"""
                
                try:
                    await callback.message.reply(
                        html_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å HTML –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
                except Exception as html_error:
                    # –£—Ä–æ–≤–µ–Ω—å 3: –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    logger.exception(f"–û—à–∏–±–∫–∞ –∏ —Å HTML, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {html_error}")
                    
                    await callback.message.reply(
                        generation.final_prompt,
                        reply_markup=keyboard,
                        parse_mode=None
                    )
                    logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram
                logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–º–ø—Ç–∞: {markdown_error}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
                return
        
        await callback.answer("üìù –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        logger.info(f"üéØ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω callback gallery_full_prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
        
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.startswith("gallery_regenerate:"))
async def handle_gallery_regenerate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer("üöß –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data.startswith("gallery_toggle_favorite:"))
async def handle_gallery_toggle_favorite(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    await callback.answer("üöß –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data.startswith("gallery_delete:"))
async def handle_gallery_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    generation_id = callback.data.split(":")[1]
    await gallery_main_handler.delete_image(callback, generation_id)

@router.callback_query(F.data.startswith("gallery_delete_confirm:"))
async def handle_gallery_delete_confirm(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    generation_id = callback.data.split(":")[1]
    await gallery_main_handler.confirm_delete_image(callback, generation_id)

@router.callback_query(F.data == "gallery_search")
async def handle_gallery_search(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ –≥–∞–ª–µ—Ä–µ–µ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ñ–∏–ª—å—Ç—Ä—ã"""
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    from .filter_handler import gallery_filter_handler
    await gallery_filter_handler.show_filter_menu(callback, state)

@router.callback_query(F.data == "noop")
async def handle_noop(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö callback'–æ–≤ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

async def show_gallery_image(callback_query: CallbackQuery, current_index: int, user_gallery_cache_key: str):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    """
    try:
        start_time = datetime.utcnow()
        user_id = UUID(str(callback_query.from_user.id))
        
        # ‚úÖ 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏
        gallery_data = await gallery_state_manager.get_gallery_data(user_gallery_cache_key)
        if not gallery_data:
            await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –û–±–Ω–æ–≤–ª—è—é...")
            await handle_gallery_main(callback_query)
            return
        
        # ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
        if current_index < 0 or current_index >= len(gallery_data.image_ids):
            await callback_query.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # ‚úÖ 3. –ü–æ–ª—É—á–∞–µ–º ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_id = UUID(gallery_data.image_ids[current_index])
        
        # ‚úÖ 4. –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        image_data = await gallery_service.get_single_image_optimized(image_id, user_id)
        
        if not image_data:
            await callback_query.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # ‚úÖ 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –∫–µ—à–µ
        await gallery_state_manager.update_gallery_index(user_gallery_cache_key, current_index)
        
        # ‚úÖ 6. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
        text = _format_image_card_text(image_data, current_index + 1, gallery_data.total_count)
        keyboard = create_gallery_keyboard(current_index, gallery_data.total_count, str(image_id))
        
        # ‚úÖ 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = image_data["result_urls"][0] if image_data.get("result_urls") else None
        
        if not image_url:
            await callback_query.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        # ‚úÖ 8. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            if callback_query.message.photo:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await callback_query.message.edit_media(
                    media=InputMediaPhoto(media=image_url, caption=text),
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback_query.message.delete()
                await callback_query.message.answer_photo(
                    photo=image_url,
                    caption=text,
                    reply_markup=keyboard
                )
        except TelegramBadRequest as e:
            if "there is no text in the message to edit" in str(e).lower():
                # Fallback: —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback_query.message.delete()
                await callback_query.message.answer_photo(
                    photo=image_url,
                    caption=text,
                    reply_markup=keyboard
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # ‚úÖ 9. –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        end_time = datetime.utcnow()
        duration = (end_time - start_time).total_seconds() * 1000
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {current_index + 1}/{gallery_data.total_count} –ø–æ–∫–∞–∑–∞–Ω–æ –∑–∞ {duration:.0f}ms")
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ–µ: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def _format_image_card_text(image_data: Dict, current: int, total: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        avatar_name = "–ë–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞"
        if image_data.get("avatar"):
            avatar_name = image_data["avatar"].get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if image_data.get("created_at"):
            try:
                date_obj = datetime.fromisoformat(image_data["created_at"].replace('Z', '+00:00'))
                created_date = date_obj.strftime("%d.%m.%Y %H:%M")
            except:
                pass
        
        # –°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_status = "‚≠ê" if image_data.get("is_favorite") else ""
        
        text = f"üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {current} –∏–∑ {total}* {favorite_status}\n\n"
        text += f"üë§ *–ê–≤–∞—Ç–∞—Ä:* {avatar_name}\n"
        text += f"üìê *–†–∞–∑–º–µ—Ä:* {image_data.get('aspect_ratio', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üé® *–ö–∞—á–µ—Å—Ç–≤–æ:* {image_data.get('quality_preset', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')}\n"
        text += f"üìÖ *–°–æ–∑–¥–∞–Ω–æ:* {created_date}"
        
        return text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return f"üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {current} –∏–∑ {total}*"


async def _safe_send_message(callback_query: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback"""
    try:
        # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        if callback_query.message.photo:
            await callback_query.message.delete()
            await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            
    except TelegramBadRequest as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {e}")
        try:
            # –£—Ä–æ–≤–µ–Ω—å 2: Fallback –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            plain_text = text.replace("*", "").replace("_", "").replace("`", "")
            if callback_query.message.photo:
                await callback_query.message.delete()
                await callback_query.message.answer(plain_text, reply_markup=keyboard)
            else:
                await callback_query.message.edit_text(plain_text, reply_markup=keyboard)
                
        except Exception as fallback_error:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
            # –£—Ä–æ–≤–µ–Ω—å 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ –≥–∞–ª–µ—Ä–µ—é.")
            except:
                pass


@router.callback_query(F.data.startswith("gallery_next:"))
async def handle_gallery_next(callback_query: CallbackQuery):
    """–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ–µ"""
    try:
        gallery_cache_key = callback_query.data.split(":", 1)[1]
        gallery_data = await gallery_state_manager.get_gallery_data(gallery_cache_key)
        
        if not gallery_data:
            await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
            await handle_gallery_main(callback_query)
            return
        
        next_index = gallery_data.current_index + 1
        if next_index >= len(gallery_data.image_ids):
            await callback_query.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        await show_gallery_image(callback_query, next_index, gallery_cache_key)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("gallery_prev:"))
async def handle_gallery_prev(callback_query: CallbackQuery):
    """–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ–µ"""
    try:
        gallery_cache_key = callback_query.data.split(":", 1)[1]
        gallery_data = await gallery_state_manager.get_gallery_data(gallery_cache_key)
        
        if not gallery_data:
            await callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
            await handle_gallery_main(callback_query)
            return
        
        prev_index = gallery_data.current_index - 1
        if prev_index < 0:
            await callback_query.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        await show_gallery_image(callback_query, prev_index, gallery_cache_key)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 