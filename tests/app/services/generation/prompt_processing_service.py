"""
–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""
import aiohttp
from typing import Optional, Dict, Any
import time
import random
import re
import json

from app.core.config import settings
from app.core.logger import get_logger
from app.shared.utils.openai import get_openai_headers
from .cinematic_prompt_service import CinematicPromptService

logger = get_logger(__name__)


class PromptProcessingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.openai_api_key = settings.OPENAI_API_KEY
        self.model = "gpt-4o"
        self.cinematic_service = CinematicPromptService()
    
    async def process_prompt(self, user_prompt: str, avatar_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–≤–∞—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
        Args:
            user_prompt: –ü—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ (portrait)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ negative prompt
        """
        start_time = time.time()
        
        try:
            logger.info(f"[Prompt Processing] –ù–∞—á–∞—Ç–∞ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: '{user_prompt[:50]}...'")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å
            cinematic_result = await self.cinematic_service.create_cinematic_prompt(
                user_prompt=user_prompt,
                avatar_type=avatar_type,
                style_preset="photorealistic"
            )
            
            # –°–æ–∑–¥–∞–µ–º negative prompt
            negative_prompt = self.get_negative_prompt(avatar_type)
            
            processing_time = time.time() - start_time
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "original": user_prompt,
                "processed": cinematic_result["processed"],
                "negative_prompt": negative_prompt,
                "translation_needed": cinematic_result.get("translation_applied", False),
                "cinematic_enhancement": cinematic_result.get("enhancement_applied", False),
                "style": cinematic_result.get("style", "cinematic"),
                "processing_time": processing_time,
                "word_count": cinematic_result.get("word_count", 0),
                "technical_level": cinematic_result.get("technical_level", "professional")
            }
            
            logger.info(f"[Prompt Processing] –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
            logger.info(f"[Cinematic] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–ø—Ç: {len(result['processed'])} —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∏–ª—å: {result['style']}")
            
            return result
            
        except Exception as e:
            logger.exception(f"[Prompt Processing] –û—à–∏–±–∫–∞ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            return {
                "original": user_prompt,
                "processed": f"TOK, {user_prompt}" if avatar_type == "portrait" else user_prompt,
                "negative_prompt": self.get_negative_prompt(avatar_type),
                "translation_needed": False,
                "cinematic_enhancement": False,
                "style": "fallback",
                "processing_time": time.time() - start_time
            }

    async def _translate_with_gpt(self, russian_text: str) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ GPT API
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
        """
        if not settings.OPENAI_API_KEY:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
            return self._translate_to_english(russian_text)
        
        system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

üéØ –ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–≤–µ–¥–∏ —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤.

üìã –ü–†–ê–í–ò–õ–ê –ü–ï–†–ï–í–û–î–ê:
1. –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
2. –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç —Ç–æ—á–Ω–æ (–ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞ ‚Üí Burj Khalifa, –î—É–±–∞–π ‚Üí Dubai)
3. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
4. –£—Å–∏–ª–∏–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
5. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥

–ü–†–ò–ú–ï–†–´:
‚Ä¢ "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ –Ω–∞ —Ñ–æ–Ω–µ –ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞" ‚Üí "man in suit in front of Burj Khalifa"
‚Ä¢ "–¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ—Ñ–∏—Å–µ" ‚Üí "business portrait in office"
‚Ä¢ "–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ —É–ª–∏—Ü–µ" ‚Üí "full body on street"

–û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

        try:
            url = "https://api.openai.com/v1/chat/completions"
            headers = get_openai_headers(settings.OPENAI_API_KEY)
            data = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": russian_text}
                ],
                "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                "max_tokens": 200
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        translated = result["choices"][0]["message"]["content"].strip()
                        logger.info(f"[GPT Translation] –£—Å–ø–µ—à–Ω–æ: '{russian_text}' ‚Üí '{translated}'")
                        return translated
                    else:
                        error_text = await response.text()
                        logger.error(f"GPT API error: {error_text}")
                        return self._translate_to_english(russian_text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return self._translate_to_english(russian_text)

    async def create_enhanced_detailed_prompt(self, base_prompt: str, avatar_type: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        
        prompt_lower = base_prompt.lower()
        
        # üöÄ –ü–†–û–í–ï–†–Ø–ï–ú: –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ –æ—á–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω—ã–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(base_prompt) > 400 and self._is_already_detailed(base_prompt):
            logger.info(f"[Detailed Mode] –ü—Ä–æ–º–ø—Ç —É–∂–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π ({len(base_prompt)} —Å–∏–º–≤–æ–ª–æ–≤) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ TOK –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not base_prompt.startswith("TOK"):
                return f"TOK, {base_prompt}"
            return base_prompt
        
        # üéØ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –ò –°–û–ó–î–ê–ï–ú –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ü–†–û–ú–ü–¢
        
        # 1. –ù–∞—á–∏–Ω–∞–µ–º —Å TOK –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        if avatar_type == "portrait":
            enhanced_parts = ["TOK"]
        else:
            enhanced_parts = []
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ñ–æ—Ç–æ
        tech_specs = [
            "A high-quality, cinematic, ultra-realistic",
            self._determine_shot_type(prompt_lower),
            "photograph, captured by a professional medium-format digital camera",
            "in style of super-detailed 8K resolution imagery"
        ]
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è
        lighting_desc = self._analyze_and_enhance_lighting(prompt_lower)
        tech_specs.append(lighting_desc)
        
        enhanced_parts.extend(tech_specs)
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        composition = self._create_composition_description(prompt_lower)
        enhanced_parts.append(composition)
        
        # 5. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_desc = self._enhance_character_description(base_prompt, prompt_lower)
        enhanced_parts.append(character_desc)
        
        # 6. –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑—ã –∏ —Ä–∞–∫—É—Ä—Å–∞
        pose_desc = self._create_detailed_pose_description(prompt_lower)
        enhanced_parts.append(pose_desc)
        
        # 7. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–æ–Ω–∞
        environment_desc = self._create_detailed_environment(prompt_lower)
        if environment_desc:
            enhanced_parts.append(environment_desc)
        
        # 8. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –∏ —Ñ–æ–∫—É—Å–∞
        camera_details = [
            "The depth of field is exceptional, ensuring sharp focus on the subject",
            "shot on vintage medium-format camera with 85mm lens",
            "shallow depth of field with professional bokeh",
            "high-end editorial photography style"
        ]
        enhanced_parts.extend(camera_details)
        
        # 9. –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
        color_palette = self._determine_color_palette(prompt_lower)
        enhanced_parts.append(color_palette)
        
        # 10. –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_details = [
            "razor-sharp focus with optimal detail retention",
            "well-defined eyes with natural catchlight",
            "realistic face with visible pores and authentic shadows",
            "natural skin texture with fine detail",
            "no facial deformation, no duplicate features"
        ]
        enhanced_parts.extend(quality_details)
        
        # üîó –û–ë–™–ï–î–ò–ù–Ø–ï–ú –≤ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        enhanced_prompt = ". ".join(enhanced_parts) + "."
        
        # üßπ –ß–ò–°–¢–ö–ê –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
        enhanced_prompt = self._clean_and_optimize_prompt(enhanced_prompt)
        
        logger.info(f"[Cinematic Enhancement] {len(base_prompt)} ‚Üí {len(enhanced_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"[Style] –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω")
        
        return enhanced_prompt

    def _is_already_detailed(self, prompt: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º"""
        detailed_indicators = [
            'cinematic', 'ultra-realistic', '8K resolution', 'professional camera',
            'golden hour', 'directional lighting', 'depth of field', 'razor-sharp focus',
            'color palette', 'editorial photography', 'medium-format', 'bokeh',
            'captured by', 'shot on', 'exceptional quality'
        ]
        return sum(1 for indicator in detailed_indicators if indicator.lower() in prompt.lower()) >= 3

    def _determine_shot_type(self, prompt_lower: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–∞–¥—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if any(word in prompt_lower for word in ['full body', 'standing', 'walking', '–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç', '—Å—Ç–æ—è']):
            return "full-body portrait"
        elif any(word in prompt_lower for word in ['half body', 'waist up', '–ø–æ –ø–æ—è—Å', '—Ç–æ—Ä—Å']):
            return "half-body portrait"
        elif any(word in prompt_lower for word in ['close-up', 'headshot', '–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω', '–≥–æ–ª–æ–≤–∞']):
            return "close-up portrait"
        else:
            return "medium portrait"

    def _analyze_and_enhance_lighting(self, prompt_lower: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        if any(word in prompt_lower for word in ['sunset', 'evening', '–∑–∞–∫–∞—Ç', '–≤–µ—á–µ—Ä']):
            return "featuring warm, directional side lighting during the golden hour"
        elif any(word in prompt_lower for word in ['studio', 'office', 'indoor', '—Å—Ç—É–¥–∏—è', '–æ—Ñ–∏—Å']):
            return "featuring professional studio lighting with controlled shadows and highlights"
        elif any(word in prompt_lower for word in ['natural', 'outdoor', 'street', 'natural light', '—É–ª–∏—Ü–∞']):
            return "featuring natural diffused lighting with soft shadows"
        elif any(word in prompt_lower for word in ['dramatic', 'contrast', 'shadow', '–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π']):
            return "featuring dramatic directional lighting with deep contrasts"
        else:
            return "featuring warm, professional lighting with optimal exposure"

    def _create_composition_description(self, prompt_lower: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
        base_composition = "The composition is expertly framed"
        
        if any(word in prompt_lower for word in ['center', 'middle', '—Ü–µ–Ω—Ç—Ä']):
            return f"{base_composition}, with the subject positioned centrally in the frame"
        elif any(word in prompt_lower for word in ['left', 'right', 'side', '—Å–±–æ–∫—É']):
            return f"{base_composition}, with the subject positioned slightly off-center for dynamic balance"
        else:
            return f"{base_composition}, following the rule of thirds for visual impact"

    def _enhance_character_description(self, original_prompt: str, prompt_lower: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        # –ë–µ—Ä–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        character_base = original_prompt.strip()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        gender_context = ""
        if any(word in prompt_lower for word in ['man', 'male', '–º—É–∂—á–∏–Ω–∞', '–ø–∞—Ä–µ–Ω—å']):
            gender_context = "featuring a confident man"
        elif any(word in prompt_lower for word in ['woman', 'female', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—É—à–∫–∞']):
            gender_context = "featuring an elegant woman"
        else:
            gender_context = "featuring a charismatic person"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
        details = [
            "with natural facial features and authentic expression",
            "showcasing contemporary styling with precise attention to detail"
        ]
        
        if any(word in prompt_lower for word in ['hair', '–≤–æ–ª–æ—Å—ã']):
            details.append("with expertly styled hair showing natural texture")
        
        if any(word in prompt_lower for word in ['suit', 'dress', 'costume', '–∫–æ—Å—Ç—é–º', '–ø–ª–∞—Ç—å–µ']):
            details.append("wearing impeccably tailored attire with refined fabric details")
        
        return f"{gender_context}, {character_base}, {', '.join(details)}"

    def _create_detailed_pose_description(self, prompt_lower: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑—ã –∏ —Ä–∞–∫—É—Ä—Å–∞"""
        if any(word in prompt_lower for word in ['confident', 'strong', '—É–≤–µ—Ä–µ–Ω–Ω—ã–π']):
            return "posed with confident body language and natural stance, gazing directly at the camera with engaging intensity"
        elif any(word in prompt_lower for word in ['relaxed', 'casual', 'natural', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π']):
            return "in a relaxed, natural pose with authentic body positioning and genuine expression"
        elif any(word in prompt_lower for word in ['dramatic', 'intense', '–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π']):
            return "striking a dramatic pose with intentional positioning and captivating presence"
        else:
            return "positioned with natural elegance and authentic body language, creating compelling visual narrative"

    def _create_detailed_environment(self, prompt_lower: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–æ–Ω–∞"""
        if any(word in prompt_lower for word in ['office', 'business', '–æ—Ñ–∏—Å', '–¥–µ–ª–æ–≤–æ–π']):
            return ("Set in a sophisticated modern office environment, with clean architectural lines "
                   "and professional interior design elements visible in the softly blurred background, "
                   "featuring warm ambient lighting and contemporary furnishings")
        
        elif any(word in prompt_lower for word in ['studio', '—Å—Ç—É–¥–∏—è']):
            return ("In a professional photography studio setting with controlled environment, "
                   "featuring seamless backdrop and expertly positioned lighting equipment, "
                   "creating optimal conditions for maximum image quality")
        
        elif any(word in prompt_lower for word in ['outdoor', 'street', 'city', '—É–ª–∏—Ü–∞', '–≥–æ—Ä–æ–¥']):
            return ("Against an urban landscape backdrop with architectural elements softly blurred, "
                   "featuring city atmosphere with natural depth and environmental context, "
                   "showcasing the relationship between subject and metropolitan setting")
        
        elif any(word in prompt_lower for word in ['nature', 'forest', 'park', '–ø—Ä–∏—Ä–æ–¥–∞', '–ª–µ—Å']):
            return ("Surrounded by natural landscape with organic textures and soft environmental elements, "
                   "featuring verdant background with natural depth of field, "
                   "creating harmonious connection with the natural world")
        
        elif any(word in prompt_lower for word in ['dubai', 'burj khalifa', '–¥—É–±–∞–π']):
            return ("Set against the iconic Dubai skyline with the majestic Burj Khalifa towering in the background, "
                   "featuring the modern architectural marvel softly blurred with atmospheric perspective, "
                   "showcasing the grandeur of contemporary urban achievement")
        
        else:
            return ("Set against a carefully curated background with optimal depth of field, "
                   "featuring environmental elements that complement the subject without distraction, "
                   "creating sophisticated visual context")

    def _determine_color_palette(self, prompt_lower: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if any(word in prompt_lower for word in ['warm', 'golden', 'sunset', '—Ç–µ–ø–ª—ã–π', '–∑–æ–ª–æ—Ç–æ–π']):
            return ("The color palette emphasizes warm golden tones, rich ambers, and deep honey hues, "
                   "creating an inviting and luxurious atmospheric mood")
        
        elif any(word in prompt_lower for word in ['cool', 'blue', 'modern', '—Ö–æ–ª–æ–¥–Ω—ã–π', '—Å–∏–Ω–∏–π']):
            return ("The color palette features sophisticated cool tones, deep blues, and crisp whites, "
                   "conveying contemporary elegance and professional refinement")
        
        elif any(word in prompt_lower for word in ['dramatic', 'contrast', 'black', '–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π']):
            return ("The color palette utilizes dramatic contrasts between deep shadows and bright highlights, "
                   "featuring rich blacks, pristine whites, and selective color accents")
        
        elif any(word in prompt_lower for word in ['natural', 'earth', 'green', 'natural', '–ø—Ä–∏—Ä–æ–¥–Ω—ã–π']):
            return ("The color palette draws from natural earth tones, featuring organic greens, warm browns, "
                   "and soft beiges that create harmony with the natural environment")
        
        else:
            return ("The color palette is carefully balanced with rich, saturated colors and subtle tonal variations, "
                   "creating visual depth and emotional resonance throughout the composition")

    def _clean_and_optimize_prompt(self, prompt: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã
        sentences = prompt.split('. ')
        unique_sentences = []
        seen_keywords = set()
        
        for sentence in sentences:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            words = set(sentence.lower().split())
            if not any(word in seen_keywords for word in words):
                unique_sentences.append(sentence)
                seen_keywords.update(words)
        
        cleaned_prompt = '. '.join(unique_sentences)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        cleaned_prompt = re.sub(r'\s+', ' ', cleaned_prompt)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned_prompt = re.sub(r'\.\s*\.', '.', cleaned_prompt)  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
        cleaned_prompt = cleaned_prompt.strip()
        
        return cleaned_prompt

    def _enhance_environmental_context(self, prompt_lower: str) -> list:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç environmental –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ —Å–µ–ª—Ñ–∏"""
        
        environmental_details = []
        
        # üèñÔ∏è –ü–õ–Ø–ñ–ù–´–ï –õ–û–ö–ê–¶–ò–ò
        if any(word in prompt_lower for word in ['beach', '–ø–ª—è–∂', 'maldives', '–º–∞–ª—å–¥–∏–≤—ã', 'ocean', 'sea']):
            environmental_details.extend([
                "expansive beach setting with visible horizon line",
                "tropical paradise atmosphere with palm trees in background", 
                "crystal clear water and white sand texture details",
                "natural beach lighting with sun reflections on water",
                "wide coastal landscape composition"
            ])
        
        # üèôÔ∏è –ì–û–†–û–î–°–ö–ò–ï –õ–û–ö–ê–¶–ò–ò  
        elif any(word in prompt_lower for word in ['city', '–≥–æ—Ä–æ–¥', 'street', '—É–ª–∏—Ü–∞', 'urban']):
            environmental_details.extend([
                "urban landscape with architectural elements in background",
                "city street context with buildings visible",
                "metropolitan environment showing scale and depth",
                "street photography composition with environmental storytelling"
            ])
        
        # üè¢ –û–§–ò–°–ù–´–ï –õ–û–ö–ê–¶–ò–ò
        elif any(word in prompt_lower for word in ['office', '–æ—Ñ–∏—Å', 'business', '–¥–µ–ª–æ–≤–æ–π']):
            environmental_details.extend([
                "professional business environment with modern interior",
                "office space context with furniture and design elements visible",
                "corporate setting atmosphere with proper lighting"
            ])
        
        # üå≥ –ü–†–ò–†–û–î–ù–´–ï –õ–û–ö–ê–¶–ò–ò
        elif any(word in prompt_lower for word in ['park', '–ø–∞—Ä–∫', 'nature', '–ø—Ä–∏—Ä–æ–¥–∞', 'forest', '–ª–µ—Å']):
            environmental_details.extend([
                "natural outdoor setting with lush greenery in background",
                "park or garden environment with trees and landscape visible",
                "organic natural lighting and atmospheric depth"
            ])
        
        # üåç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï ENVIRONMENTAL –î–ï–¢–ê–õ–ò (–¥–ª—è –ª—é–±–æ–π –ª–æ–∫–∞—Ü–∏–∏)
        if environmental_details:  # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            environmental_details.extend([
                "environmental storytelling through background composition",
                "contextual framing showing subject's relationship to surroundings",
                "atmospheric depth with foreground, midground, and background elements"
            ])
        
        return environmental_details

    def _needs_translation(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        return bool(re.search(r'[–∞-—è—ë]', text.lower()))
    
    def _translate_to_english(self, text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ñ–æ–Ω—ã –∏ –ª–æ–∫–∞—Ü–∏–∏"""
        
        # üåç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í –¥–ª—è —Ñ–æ–Ω–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π
        translations = {
            # === –ë–ê–ó–û–í–´–ï –§–†–ê–ó–´ ===
            '–º–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç': 'my portrait',
            '–ø–æ—Ä—Ç—Ä–µ—Ç': 'portrait',
            '—Ñ–æ—Ç–æ': 'photo',
            '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': 'image',
            '–∫–∞—Ä—Ç–∏–Ω–∫–∞': 'picture',
            '–º—É–∂—á–∏–Ω–∞': 'man',
            '–∂–µ–Ω—â–∏–Ω–∞': 'woman',
            '–¥–µ–≤—É—à–∫–∞': 'woman',
            '–ø–∞—Ä–µ–Ω—å': 'man',
            
            # === –û–î–ï–ñ–î–ê –ò –°–¢–ò–õ–¨ ===
            '–≤ –∫–æ—Å—Ç—é–º–µ': 'in suit',
            '–∫–æ—Å—Ç—é–º': 'suit',
            '–¥–µ–ª–æ–≤–æ–π –∫–æ—Å—Ç—é–º': 'business suit',
            '—Å—Ç—Ä–æ–≥–∏–π –∫–æ—Å—Ç—é–º': 'formal suit',
            '–º–æ–¥–Ω—ã–π –∫–æ—Å—Ç—é–º': 'stylish suit',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'modern clothes',
            '—Å—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'stylish clothes',
            '–º–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'fashionable clothes',
            '–¥–µ–ª–æ–≤–∞—è –æ–¥–µ–∂–¥–∞': 'business attire',
            '—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'formal attire',
            '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'casual clothes',
            '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'elegant attire',
            
            # === –¢–ò–ü–´ –§–û–¢–û ===
            '–¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç': 'business portrait',
            '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç': 'professional portrait',
            '–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç': 'full body',
            '–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç': 'full body',
            '–ø–æ –ø–æ—è—Å': 'half body',
            '–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω': 'close-up',
            
            # === –§–û–ù–´ –ò –õ–û–ö–ê–¶–ò–ò (–ö–ê–ö –í –ü–†–ò–ú–ï–†–ï) ===
            '–Ω–∞ —Ñ–æ–Ω–µ': 'in front of',
            '—Ñ–æ–Ω': 'background',
            '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω': 'background',
            
            # –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –ó–î–ê–ù–ò–Ø
            '–±—É—Ä–¥–∂ —Ö–∞–ª–∏—Ñ–∞': 'Burj Khalifa',
            '–±—É—Ä–∂ —Ö–∞–ª–∏—Ñ–∞': 'Burj Khalifa', 
            '–Ω–µ–±–æ—Å–∫—Ä–µ–±': 'skyscraper',
            '–≤—ã—Å–æ—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'high-rise building',
            '–±–∞—à–Ω—è': 'tower',
            '–∑–¥–∞–Ω–∏–µ': 'building',
            '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'architecture',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'modern building',
            '—Å—Ç–µ–∫–ª—è–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'glass building',
            '–æ—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'office building',
            '–±–∏–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä': 'business center',
            '—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä': 'shopping center',
            
            # –ì–û–†–û–î–ê –ò –°–¢–†–ê–ù–´
            '–¥—É–±–∞–π': 'Dubai',
            '–¥—É–±–∞–∏': 'Dubai',
            '–º–æ—Å–∫–≤–∞': 'Moscow',
            '–Ω—å—é-–π–æ—Ä–∫': 'New York',
            '–ª–æ–Ω–¥–æ–Ω': 'London',
            '–ø–∞—Ä–∏–∂': 'Paris',
            '—Ç–æ–∫–∏–æ': 'Tokyo',
            '—à–∞–Ω—Ö–∞–π': 'Shanghai',
            '—Å–∏–Ω–≥–∞–ø—É—Ä': 'Singapore',
            '–≥–æ–Ω–∫–æ–Ω–≥': 'Hong Kong',
            
            # –û–§–ò–°–´ –ò –†–ê–ë–û–ß–ò–ï –ú–ï–°–¢–ê
            '–æ—Ñ–∏—Å': 'office',
            '–∫–∞–±–∏–Ω–µ—Ç': 'office',
            '—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ': 'workplace',
            '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è': 'meeting room',
            '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª': 'conference room',
            '–ø—Ä–∏–µ–º–Ω–∞—è': 'reception',
            '–∫–æ–≤–æ—Ä–∫–∏–Ω–≥': 'coworking space',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å': 'modern office',
            '—Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π –æ—Ñ–∏—Å': 'glass office',
            
            # –£–õ–ò–¶–´ –ò –ì–û–†–û–î–°–ö–ê–Ø –°–†–ï–î–ê
            '—É–ª–∏—Ü–∞': 'street',
            '–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞': 'city street',
            '—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞': 'city center',
            '–¥–µ–ª–æ–≤–æ–π —Ä–∞–π–æ–Ω': 'business district',
            '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–∞–π–æ–Ω': 'financial district',
            '–ø–ª–æ—â–∞–¥—å': 'square',
            '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': 'embankment',
            '–ø–∞—Ä–∫': 'park',
            '—Å–∫–≤–µ—Ä': 'square park',
            
            # –ò–ù–¢–ï–†–¨–ï–†–´
            '–∏–Ω—Ç–µ—Ä—å–µ—Ä': 'interior',
            '–ø–æ–º–µ—â–µ–Ω–∏–µ': 'room',
            '–∑–∞–ª': 'hall',
            '—Ö–æ–ª–ª': 'lobby',
            '–≤–µ—Å—Ç–∏–±—é–ª—å': 'lobby',
            '–ª–æ–±–±–∏': 'lobby',
            '—Å—Ç—É–¥–∏—è': 'studio',
            '–ª–æ—Ñ—Ç': 'loft',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä': 'modern interior',
            '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä': 'minimalist interior',
            
            # –û–°–í–ï–©–ï–ù–ò–ï –ò –í–†–ï–ú–Ø
            '–¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è': 'daytime',
            '–¥–µ–Ω—å': 'daytime',
            '—É—Ç—Ä–æ': 'morning',
            '–≤–µ—á–µ—Ä': 'evening',
            '–∑–∞–∫–∞—Ç': 'sunset',
            '—Ä–∞—Å—Å–≤–µ—Ç': 'sunrise',
            '–∑–æ–ª–æ—Ç–æ–π —á–∞—Å': 'golden hour',
            '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ': 'natural lighting',
            '–¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç': 'daylight',
            '—Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç': 'sunlight',
            '–º—è–≥–∫–∏–π —Å–≤–µ—Ç': 'soft lighting',
            '—è—Ä–∫–∏–π —Å–≤–µ—Ç': 'bright lighting',
            
            # –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ò –ö–ê–ß–ï–°–¢–í–ê
            '—É–≤–µ—Ä–µ–Ω–Ω—ã–π': 'confident',
            '—É—Å–ø–µ—à–Ω—ã–π': 'successful',
            '–¥–µ–ª–æ–≤–æ–π': 'business',
            '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π': 'professional',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π': 'modern',
            '—Å—Ç–∏–ª—å–Ω—ã–π': 'stylish',
            '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π': 'elegant',
            '—Ä–æ—Å–∫–æ—à–Ω—ã–π': 'luxury',
            '–ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π': 'prestigious',
            '–≤—ã—Å–æ–∫–∏–π –∫–ª–∞—Å—Å': 'high-end',
            
            # –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–ï–†–ú–ò–ù–´
            '—á–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å': 'sharp focus',
            '—Ä–µ–∑–∫–∏–π —Ñ–æ–∫—É—Å': 'sharp focus',
            '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ': 'realistic lighting',
            '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞': 'cinematic depth of field',
            '–≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è': 'high detail',
            '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è': 'detail',
            '–∫–∞—á–µ—Å—Ç–≤–æ': 'quality',
            '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ': 'resolution',
            
            # –≠–°–¢–ï–¢–ò–ö–ê –ò –°–¢–ò–õ–¨
            '–≥–æ—Ä–æ–¥—Å–∫–∞—è —Ä–æ—Å–∫–æ—à—å': 'urban luxury',
            '—Ä–æ—Å–∫–æ—à–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'luxury aesthetic',
            '–¥–µ–ª–æ–≤–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'business aesthetic',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'modern aesthetic',
            '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'minimalist aesthetic',
            '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'industrial aesthetic',
            
            # –ü–û–ó–´ –ò –î–ï–ô–°–¢–í–ò–Ø
            '—Å—Ç–æ—è—â–∏–π': 'standing',
            '—Å—Ç–æ—è': 'standing',
            '—Å–∏–¥—è—â–∏–π': 'sitting',
            '–∏–¥—É—â–∏–π': 'walking',
            '—Å–º–æ—Ç—Ä—è—â–∏–π': 'looking',
            '–ø–æ–∑–∏—Ä—É—é—â–∏–π': 'posing',
            '—Å —Ä—É–∫–∞–º–∏ –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö': 'with hands in pockets',
            '—Å–∫—Ä–µ—â–µ–Ω–Ω—ã–µ —Ä—É–∫–∏': 'crossed arms',
            '—É–≤–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∞': 'confident pose',
            '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞': 'natural pose',
        }
        
        # üîÑ –ü–û–®–ê–ì–û–í–´–ô –ü–ï–†–ï–í–û–î —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–≤
        result = text.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
        sorted_translations = sorted(translations.items(), key=lambda x: len(x[0]), reverse=True)
        
        for russian, english in sorted_translations:
            if russian in result:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                import re
                pattern = r'\b' + re.escape(russian) + r'\b'
                result = re.sub(pattern, english, result)
                logger.debug(f"[Translation] '{russian}' ‚Üí '{english}'")
        
        # ‚úÖ –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è –∏–º–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        proper_nouns = ['dubai', 'burj khalifa', 'moscow', 'new york', 'london', 'paris', 'tokyo']
        for noun in proper_nouns:
            if noun in result:
                capitalized = ' '.join(word.capitalize() for word in noun.split())
                result = result.replace(noun, capitalized)
        
        # üßπ –ß–ò–°–¢–ö–ê: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        result = ' '.join(result.split())
        
        logger.info(f"[Translation] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: '{text}' ‚Üí '{result}'")
        return result

    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç OpenAI)
        return True

    def get_negative_prompt(self, avatar_type: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π negative prompt –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Args:
            avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ ("portrait")
            
        Returns:
            str: Negative prompt –¥–ª—è FLUX Pro
        """
        # –ë–∞–∑–æ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤—ã –¥–ª—è –±–æ—Ä—å–±—ã —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
        base_negatives = [
            "blurry",
            "low quality",
            "worst quality", 
            "bad anatomy",
            "bad hands",
            "mutated fingers",
            "extra fingers",
            "missing fingers",
            "deformed",
            "disfigured",
            "watermark",
            "signature",
            "text",
            "logo"
        ]
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤—ã –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤
        if avatar_type == "portrait":
            portrait_negatives = [
                "plastic skin",
                "waxy skin", 
                "artificial skin texture",
                "over-smoothed skin",
                "fake eyes",
                "lifeless eyes",
                "artificial lighting",
                "cartoon",
                "anime",
                "drawing",
                "painting",
                "illustration",
                "3d render",
                "cgi"
            ]
            base_negatives.extend(portrait_negatives)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤—ã
        negative_prompt = ", ".join(base_negatives)
        
        logger.debug(f"[Negative Prompt] –°–æ–∑–¥–∞–Ω –¥–ª—è {avatar_type}: {len(negative_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        return negative_prompt