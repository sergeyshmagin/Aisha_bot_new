"""
–ö–ª–∏–µ–Ω—Ç FAL AI –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/services/avatar/fal_training_service.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import json
from typing import Dict, Any, Optional
from uuid import UUID

from app.core.config import settings
from app.core.logger import get_logger
from app.core.di import get_user_service, get_avatar_service
from app.services.cache_service import cache_service
from app.utils.avatar_utils import (
    format_finetune_comment,
    generate_trigger_word
)

logger = get_logger(__name__)


class FALClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FAL AI API"""
    
    def __init__(self):
        self.fal_client = None
        self._initialize_client()
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAL –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            import fal_client
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            api_key = settings.effective_fal_api_key
            if api_key:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è FAL –∫–ª–∏–µ–Ω—Ç–∞
                os.environ['FAL_KEY'] = api_key
                logger.info(f"FAL API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {api_key[:20]}...")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                self.fal_client = fal_client
            else:
                logger.warning("FAL_API_KEY/FAL_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except ImportError:
            logger.warning("fal_client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FAL –∫–ª–∏–µ–Ω—Ç–∞"""
        return self.fal_client is not None
    
    async def get_training_status(self, request_id: str, training_type: str = "portrait") -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            request_id: ID –æ–±—É—á–µ–Ω–∏—è FAL AI
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
            
        Returns:
            Optional[Dict[str, Any]]: –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞ (TTL 5 –º–∏–Ω—É—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤)
            cached_status = await cache_service.get_cached_fal_status(request_id)
            if cached_status:
                logger.debug(f"üéØ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∏–∑ –∫–µ—à–∞ –¥–ª—è {request_id}: {cached_status.get('status')}")
                return cached_status
            
            if not self.is_available():
                logger.warning("FAL –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if settings.AVATAR_TEST_MODE:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ —Å—Ç–∞—Ç—É—Å
                mock_status = {
                    "status": "completed",
                    "progress": 100,
                    "created_at": "2025-05-23T16:00:00Z",
                    "updated_at": "2025-05-23T16:30:00Z",
                    "completed_at": "2025-05-23T16:30:00Z",
                    "message": "Training completed successfully (test mode)",
                    "request_id": request_id
                }
                
                # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º –º–æ–∫ —Å—Ç–∞—Ç—É—Å
                await cache_service.cache_fal_status(request_id, mock_status, ttl=300)
                
                return mock_status
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –ø–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è
            if training_type == "portrait":
                endpoint = "fal-ai/flux-lora-portrait-trainer"
            else:  # style
                endpoint = "fal-ai/flux-pro-trainer"
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FAL AI: {request_id} (endpoint: {endpoint})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ FAL API
            try:
                result = await self.fal_client.status_async(endpoint, request_id)
                
                if result:
                    status_data = {
                        "status": result.get("status", "unknown"),
                        "progress": result.get("progress", 0),
                        "created_at": result.get("created_at"),
                        "updated_at": result.get("updated_at"),
                        "completed_at": result.get("completed_at"),
                        "message": result.get("message", ""),
                        "request_id": request_id,
                        "endpoint": endpoint
                    }
                    
                    # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å (TTL –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
                    if status_data["status"] in ["completed", "failed", "cancelled"]:
                        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å
                        await cache_service.cache_fal_status(request_id, status_data, ttl=3600)
                    else:
                        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
                        await cache_service.cache_fal_status(request_id, status_data, ttl=120)
                    
                    logger.info(f"üìã –°—Ç–∞—Ç—É—Å FAL AI {request_id}: {status_data['status']} ({status_data.get('progress', 0)}%)")
                    return status_data
                else:
                    logger.warning(f"üîç –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç FAL API –¥–ª—è {request_id}")
                    return None
                    
            except Exception as api_error:
                logger.error(f"üîç –û—à–∏–±–∫–∞ API FAL –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ {request_id}: {api_error}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º error —Å—Ç–∞—Ç—É—Å
                error_status = {
                    "status": "error",
                    "message": str(api_error),
                    "request_id": request_id,
                    "endpoint": endpoint
                }
                
                # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è (1 –º–∏–Ω—É—Ç–∞)
                await cache_service.cache_fal_status(request_id, error_status, ttl=60)
                
                return error_status
            
        except Exception as e:
            logger.exception(f"üîç –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ FAL AI {request_id}: {e}")
            return None
    
    async def submit_training(
        self,
        user_id: UUID,
        avatar_id: UUID,
        data_url: str,
        training_config: Dict[str, Any]
    ) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ FAL AI
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            data_url: URL –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            training_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            Optional[str]: request_id –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.is_available():
                logger.warning("FAL –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if settings.AVATAR_TEST_MODE:
                mock_request_id = f"test_request_{avatar_id}_{user_id}"
                logger.info(f"üß™ [FAL TEST MODE] –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—É—á–µ–Ω–∏—è: {mock_request_id}")
                
                # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                initial_status = {
                    "status": "queued",
                    "progress": 0,
                    "message": "Training queued (test mode)",
                    "request_id": mock_request_id,
                    "created_at": "2025-05-23T16:00:00Z"
                }
                await cache_service.cache_fal_status(mock_request_id, initial_status, ttl=300)
                
                return mock_request_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            training_type = training_config.get("training_type", "portrait")
            
            logger.info(
                f"üöÄ [FAL AI] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: "
                f"user_id={user_id}, training_type={training_type}"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
            if training_type == "portrait":
                # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ flux-lora-portrait-trainer
                arguments = {
                    "images_data_url": data_url,
                    "learning_rate": training_config.get("learning_rate", settings.FAL_PORTRAIT_LEARNING_RATE),
                    "steps": training_config.get("steps", settings.FAL_PORTRAIT_STEPS),
                    "multiresolution_training": training_config.get("multiresolution_training", settings.FAL_PORTRAIT_MULTIRESOLUTION),
                    "subject_crop": training_config.get("subject_crop", settings.FAL_PORTRAIT_SUBJECT_CROP),
                    "create_masks": training_config.get("create_masks", settings.FAL_PORTRAIT_CREATE_MASKS)
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º trigger_phrase –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if training_config.get("trigger_phrase"):
                    arguments["trigger_phrase"] = training_config["trigger_phrase"]
                
                endpoint = "fal-ai/flux-lora-portrait-trainer"
                
            else:  # style
                # –°—Ç–∏–ª–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ flux-pro-trainer
                arguments = {
                    "data_url": data_url,
                    "mode": training_config.get("mode", "style"),
                    "finetune_comment": format_finetune_comment(user_id, avatar_id),
                    "iterations": training_config.get("iterations", 1000),
                    "priority": training_config.get("priority", "quality"),
                    "captioning": training_config.get("captioning", "fast"),
                    "trigger_word": training_config.get("trigger_word") or generate_trigger_word(),
                    "lora_rank": training_config.get("lora_rank", 16),
                    "finetune_type": training_config.get("finetune_type", "lora"),
                }
                
                endpoint = "fal-ai/flux-pro-trainer"
            
            # –î–æ–±–∞–≤–ª—è–µ–º webhook URL –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            webhook_url = training_config.get("webhook_url") or settings.FAL_WEBHOOK_URL
            
            logger.info(f"üöÄ [FAL AI] –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {endpoint}: {arguments}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ (–ù–ï –ñ–î–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢!)
            handler = await self.fal_client.submit_async(
                endpoint,
                arguments=arguments,
                webhook_url=webhook_url
            )
            
            request_id = handler.request_id
            
            logger.info(f"‚úÖ [FAL AI] –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, request_id: {request_id}")
            
            # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            initial_status = {
                "status": "queued",
                "progress": 0,
                "message": "Training submitted successfully",
                "request_id": request_id,
                "endpoint": endpoint,
                "training_type": training_type,
                "submitted_at": "2025-05-23T16:00:00Z"
            }
            await cache_service.cache_fal_status(request_id, initial_status, ttl=300)
            
            return request_id
            
        except Exception as e:
            logger.exception(f"üöÄ [FAL AI] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: {e}")
            return None
    
    async def get_training_result(self, request_id: str, training_type: str = "portrait") -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –æ—Ç FAL AI —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            Optional[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.is_available():
                logger.warning("FAL –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if settings.AVATAR_TEST_MODE:
                mock_result = {
                    "status": "completed",
                    "diffusers_lora_file": "https://example.com/test_lora.safetensors",
                    "config_file": "https://example.com/test_config.json",
                    "message": "Training completed successfully (test mode)",
                    "request_id": request_id
                }
                
                # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º –º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await cache_service.cache_fal_status(request_id, mock_result, ttl=3600)
                
                return mock_result
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint
            if training_type == "portrait":
                endpoint = "fal-ai/flux-lora-portrait-trainer"
            else:  # style
                endpoint = "fal-ai/flux-pro-trainer"
            
            logger.info(f"üì• [FAL AI] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {request_id} —Å {endpoint}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ FAL API
            result = await self.fal_client.result_async(endpoint, request_id)
            
            if result:
                # ‚úÖ –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —á–∞—Å)
                await cache_service.cache_fal_status(request_id, result, ttl=3600)
                
                logger.info(f"üì• [FAL AI] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è {request_id}")
                return result 
            else:
                logger.warning(f"üì• [FAL AI] –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {request_id}")
                return None
            
        except Exception as e:
            logger.exception(f"üì• [FAL AI] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {request_id}: {e}")
            return None 