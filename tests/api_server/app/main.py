"""
–ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI
SSL-–≥–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
import uvicorn

from .core.config import settings, SSL_CERT_FULL_PATH, SSL_KEY_FULL_PATH
from .core.logger import setup_logging, get_api_logger
from .routers import fal_webhook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
setup_logging()
logger = get_api_logger()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Aisha Bot FAL Webhook API",
    description="API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI —Å SSL –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    version="1.0.0",
    docs_url="/docs" if settings.API_DEBUG else None,
    redoc_url="/redoc" if settings.API_DEBUG else None,
    openapi_url="/openapi.json" if settings.API_DEBUG else None
)

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["aibots.kz", "*.aibots.kz", "localhost", "127.0.0.1"]
)

# CORS middleware (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://aibots.kz"] if not settings.API_DEBUG else ["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(fal_webhook.router)

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ FAL Webhook API —Å–µ—Ä–≤–µ—Ä–∞")
    logger.info(f"üì° SSL –≤–∫–ª—é—á–µ–Ω: {settings.SSL_ENABLED}")
    logger.info(f"üîí –ü–æ—Ä—Ç: {settings.API_PORT}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω SSL
    if settings.SSL_ENABLED:
        if SSL_CERT_FULL_PATH.exists() and SSL_KEY_FULL_PATH.exists():
            logger.info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            logger.warning(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {SSL_CERT_FULL_PATH}")
            logger.warning(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {SSL_KEY_FULL_PATH}")

@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ FAL Webhook API —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Aisha Bot FAL Webhook API",
        "version": "1.0.0",
        "ssl_enabled": settings.SSL_ENABLED,
        "status": "running"
    }

def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å SSL –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    ssl_config = {}
    
    if settings.SSL_ENABLED:
        if SSL_CERT_FULL_PATH.exists() and SSL_KEY_FULL_PATH.exists():
            ssl_config = {
                "ssl_certfile": str(SSL_CERT_FULL_PATH),
                "ssl_keyfile": str(SSL_KEY_FULL_PATH),
            }
            logger.info("üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            logger.error("‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ –±–µ–∑ SSL")
            settings.SSL_ENABLED = False
    
    uvicorn.run(
        app,
        host=settings.API_HOST,
        port=settings.API_PORT,
        reload=settings.API_RELOAD,
        log_level=settings.LOG_LEVEL.lower(),
        **ssl_config
    )

if __name__ == "__main__":
    run_server() 