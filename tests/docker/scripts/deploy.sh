#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Aisha Bot v2 (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEPLOY_DIR="/opt/aisha-v2"
BACKUP_DIR="/opt/backups/aisha-v2"
SERVICE_NAME="aisha-bot"
COMPOSE_FILE="${COMPOSE_FILE:-docker-compose.prod.yml}"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

check_external_services() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if ! ./docker/scripts/health-check.sh; then
        log_error "–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è."
        exit 1
    fi
    
    log_success "–í—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
}

backup_current() {
    if [ -d "$DEPLOY_DIR" ]; then
        log "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
        
        mkdir -p "$BACKUP_DIR"
        
        local backup_name="aisha-v2-$(date +%Y%m%d-%H%M%S).tar.gz"
        
        if tar -czf "$BACKUP_DIR/$backup_name" -C "$DEPLOY_DIR" .; then
            log_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_name"
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
            cd "$BACKUP_DIR"
            ls -t aisha-v2-*.tar.gz | tail -n +6 | xargs -r rm
            log "üßπ –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –æ—á–∏—â–µ–Ω—ã"
        else
            log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
        fi
    fi
}

validate_environment() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    local env_file=".env.docker.prod"
    if [ "$ENVIRONMENT" = "development" ]; then
        env_file=".env.docker.dev"
        COMPOSE_FILE="docker-compose.yml"
    fi
    
    if [ ! -f "$DEPLOY_DIR/$env_file" ]; then
        log_error "–§–∞–π–ª $env_file –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $DEPLOY_DIR"
        exit 1
    fi
    
    if [ ! -f "$DEPLOY_DIR/$COMPOSE_FILE" ]; then
        log_error "–§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $DEPLOY_DIR"
        exit 1
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
}

deploy_application() {
    log "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
    
    cd "$DEPLOY_DIR"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if docker-compose -f "$COMPOSE_FILE" ps -q 2>/dev/null | grep -q .; then
        log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose -f "$COMPOSE_FILE" down
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    log "üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -f
    
    # –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    log "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    if ! docker-compose -f "$COMPOSE_FILE" build --no-cache; then
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
    if ! docker-compose -f "$COMPOSE_FILE" up -d; then
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        exit 1
    fi
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (60 —Å–µ–∫—É–Ω–¥)..."
    sleep 60
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local failed_containers=$(docker-compose -f "$COMPOSE_FILE" ps --filter "status=exited" --format "table {{.Name}}")
    
    if [ -n "$failed_containers" ] && [ "$failed_containers" != "NAME" ]; then
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å:"
        echo "$failed_containers"
        log "üìã –õ–æ–≥–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        docker-compose -f "$COMPOSE_FILE" logs --tail=50
        exit 1
    fi
    
    log_success "–í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
}

run_health_checks() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
    
    local health_ok=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    for i in {1..10}; do
        if curl -f -s "http://localhost:8443/health" >/dev/null 2>&1; then
            log_success "API —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
            break
        else
            if [ $i -eq 10 ]; then
                log_error "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫"
                health_ok=false
            else
                log "üîÑ –ü–æ–ø—ã—Ç–∫–∞ $i/10: API —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º..."
                sleep 5
            fi
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx (—Ç–æ–ª—å–∫–æ –≤ production)
    if [ "$COMPOSE_FILE" = "docker-compose.prod.yml" ]; then
        if curl -f -s "http://localhost/health" >/dev/null 2>&1; then
            log_success "Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_error "Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            health_ok=false
        fi
    fi
    
    if [ "$health_ok" = false ]; then
        log_error "–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ—à–ª–∏"
        log "üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:"
        docker-compose -f "$COMPOSE_FILE" logs --tail=50
        exit 1
    fi
    
    log_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ—à–ª–∏"
}

setup_systemd() {
    if [ "$COMPOSE_FILE" = "docker-compose.prod.yml" ]; then
        log "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞..."
        
        sudo tee /etc/systemd/system/aisha-bot.service > /dev/null <<EOF
[Unit]
Description=Aisha Bot v2 Production
Documentation=https://github.com/your-org/aisha-bot-v2
Requires=docker.service
After=docker.service network-online.target
Wants=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes
User=root
WorkingDirectory=$DEPLOY_DIR
Environment=COMPOSE_PROJECT_NAME=aisha-v2-prod
ExecStartPre=/usr/bin/docker-compose -f $COMPOSE_FILE down
ExecStart=/usr/bin/docker-compose -f $COMPOSE_FILE up -d
ExecStop=/usr/bin/docker-compose -f $COMPOSE_FILE down
ExecReload=/usr/bin/docker-compose -f $COMPOSE_FILE restart
TimeoutStartSec=300
TimeoutStopSec=60
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

        sudo systemctl daemon-reload
        sudo systemctl enable aisha-bot
        
        log_success "Systemd —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≤–∫–ª—é—á–µ–Ω"
    else
        log "‚è≠Ô∏è Systemd —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è production"
    fi
}

show_status() {
    log "üìä –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    echo ""
    echo "üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f "$COMPOSE_FILE" ps
    echo ""
    echo "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
    echo ""
    echo "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
    echo "  - API: http://localhost:8443/health"
    if [ "$COMPOSE_FILE" = "docker-compose.prod.yml" ]; then
        echo "  - Nginx: http://localhost/health"
    fi
    echo ""
    echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  - –õ–æ–≥–∏: docker-compose -f $COMPOSE_FILE logs -f"
    if [ "$COMPOSE_FILE" = "docker-compose.prod.yml" ]; then
        echo "  - –°—Ç–∞—Ç—É—Å: sudo systemctl status aisha-bot"
        echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: sudo systemctl restart aisha-bot"
    fi
    echo "  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: ./docker/scripts/health-check.sh"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    log "üèÅ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Aisha Bot v2 –Ω–∞ $(hostname)..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if [ "$EUID" -eq 0 ]; then
        log_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker >/dev/null 2>&1; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose >/dev/null 2>&1; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    sudo mkdir -p "$DEPLOY_DIR"
    sudo chown $USER:$USER "$DEPLOY_DIR"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã
    check_external_services
    backup_current
    validate_environment
    deploy_application
    run_health_checks
    setup_systemd
    show_status
    
    log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "health")
        check_external_services
        run_health_checks
        ;;
    "status")
        show_status
        ;;
    "dev")
        export ENVIRONMENT="development"
        export COMPOSE_FILE="docker-compose.yml"
        main "$@"
        ;;
    *)
        main "$@"
        ;;
esac 