"""–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –º–µ–Ω—é."""

import pytest
from unittest.mock import patch, AsyncMock
from frontend_bot.services.state_utils import set_state, get_state, clear_state
from frontend_bot.keyboards.main_menu_keyboard import main_menu_keyboard
from frontend_bot.keyboards.reply import photo_menu_keyboard, ai_photographer_keyboard, my_avatars_keyboard
from frontend_bot.handlers.start import handle_start
from frontend_bot.services.shared_menu import send_main_menu

@pytest.fixture
async def clean_state():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
    await clear_state()
    yield
    await clear_state()

@pytest.fixture
def mock_bot():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ –±–æ—Ç–∞."""
    with patch('frontend_bot.bot.bot') as mock:
        yield mock

@pytest.fixture
def create_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    def _create_message(user_id: int, text: str):
        message = AsyncMock()
        message.from_user.id = user_id
        message.chat.id = user_id
        message.text = text
        return message
    return _create_message

@pytest.mark.asyncio
async def test_start_to_main_menu(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ /start –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è main_menu
    """
    # Arrange
    user_id = 123456789
    message = create_message(user_id, "/start")

    # Act
    await handle_start(message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in args[1]
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ" in str(keyboard)
    state = await get_state(user_id)
    assert state == "main_menu"

@pytest.mark.asyncio
async def test_main_menu_to_ai_photographer(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –º–µ–Ω—é –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ —á–µ—Ä–µ–∑ '–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ'.
    """
    user_id = 123456789
    await set_state(user_id, "main_menu")
    # –®–∞–≥ 1: –Ω–∞–∂–∏–º–∞–µ–º 'üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ'
    message = create_message(user_id, "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ")
    await send_main_menu(mock_bot, message)
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" in args[1]
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ" in str(keyboard)
    state = await get_state(user_id)
    assert state == "photo_menu"
    mock_bot.reset_mock()
    # –®–∞–≥ 2: –Ω–∞–∂–∏–º–∞–µ–º 'üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ'
    message = create_message(user_id, "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ")
    await send_main_menu(mock_bot, message)
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ" in args[1]
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert "üñº –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã" in str(keyboard)
    state = await get_state(user_id)
    assert state == "ai_photographer"

@pytest.mark.asyncio
async def test_ai_photographer_to_my_avatars(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –≤ –º–µ–Ω—é –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è my_avatars
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "ai_photographer")
    message = create_message(user_id, "üëÅ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã")

    # Act
    await send_main_menu(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä" in str(keyboard)
    state = await get_state(user_id)
    assert state == "my_avatars"

@pytest.mark.asyncio
async def test_my_avatars_to_create_avatar(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–≤–∞—Ç–∞—Ä–∞.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è avatar_photo_upload
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "my_avatars")
    message = create_message(user_id, "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä")

    # Act
    # await handle_create_avatar(message)  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    pass

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é" in args[1]
    state = await get_state(user_id)
    assert state == "avatar_photo_upload"

@pytest.mark.asyncio
async def test_back_to_previous_menu(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ –ù–∞–∑–∞–¥.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –í–æ–∑–≤—Ä–∞—Ç –∏–∑ my_avatars –≤ ai_photographer
    - –í–æ–∑–≤—Ä–∞—Ç –∏–∑ ai_photographer –≤ main_menu
    """
    # Arrange
    user_id = 123456789
    
    # –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ my_avatars –≤ ai_photographer
    await set_state(user_id, "my_avatars")
    message = create_message(user_id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    
    # Act & Assert –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    await send_main_menu(mock_bot, message)
    state = await get_state(user_id)
    assert state == "ai_photographer"
    
    # –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ ai_photographer –≤ main_menu
    message = create_message(user_id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    
    # Act & Assert –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    await send_main_menu(mock_bot, message)
    state = await get_state(user_id)
    assert state == "main_menu"

@pytest.mark.asyncio
async def test_invalid_state_transition(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "invalid_state")
    message = create_message(user_id, "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ")

    # Act
    await send_main_menu(mock_bot, message)

    # Assert
    mock_bot.send_message.assert_called_once_with(
        user_id,
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=main_menu_keyboard()
    )
    state = await get_state(user_id)
    assert state == "main_menu" 