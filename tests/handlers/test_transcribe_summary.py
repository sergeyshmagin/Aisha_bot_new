"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–æ–∫ –∏ –ø–æ–ª–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
"""

from unittest.mock import AsyncMock, Mock, patch
from frontend_bot.handlers import transcribe_protocol
from frontend_bot.services import user_transcripts_store


@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
async def test_full_official_transcript_success(
    mock_gpt,
    mock_send_document,
    mock_send_chat_action,
    mock_send_message,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∫–∞–∫ .txt-—Ñ–∞–π–ª–∞
    —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º, —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ caption.
    """
    await user_transcripts_store.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "Test transcript content")
    mock_gpt.return_value = "–ü–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∞"
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
        },
    )()
    await transcribe_protocol.send_full_official_transcript(message)
    args, kwargs = mock_send_document.call_args
    filename, fileobj = args[1]
    assert filename.startswith("full_transcript_") and filename.endswith(".txt"), (
        f"‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {filename}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."
    )
    fileobj.seek(0)
    content = fileobj.read().decode()
    assert content, (
        "‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    )
    assert kwargs["caption"].startswith("üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"), (
        f"‚ùå Caption –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {kwargs['caption']}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ caption –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞."
    )


@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.file_utils.async_exists",
    new_callable=AsyncMock,
)
async def test_short_summary_success(
    mock_async_exists,
    mock_send_document,
    mock_send_message,
    mock_send_chat_action,
    mock_gpt,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏ –∫–∞–∫ .txt-—Ñ–∞–π–ª–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º,
    —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ caption.
    """
    await user_transcripts_store.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "Test transcript content")
    mock_async_exists.return_value = True
    mock_gpt.return_value = "–°–≤–æ–¥–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞"
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        },
    )()
    await transcribe_protocol.send_short_summary(message)
    assert mock_send_document.called, (
        "‚ùå send_document –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä send_short_summary –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞."
    )
    args, kwargs = mock_send_document.call_args
    filename, fileobj = args[1]
    assert filename.startswith("summary_") and filename.endswith(".txt"), (
        f"‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {filename}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."
    )
    fileobj.seek(0)
    content = fileobj.read().decode()
    assert content, (
        "‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    )
    assert kwargs["caption"].startswith("üìù –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É"), (
        f"‚ùå Caption –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {kwargs['caption']}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ caption –¥–ª—è summary."
    )


@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.file_utils.async_exists",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
async def test_short_summary_empty_transcript(
    mock_send_document: AsyncMock,
    mock_send_chat_action: AsyncMock,
    mock_send_message: AsyncMock,
    mock_async_exists: AsyncMock,
    mock_gpt,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç–æ–π (—Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–æ –ø—É—Å—Ç–æ–π)
    –¥–ª—è —Å–≤–æ–¥–∫–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è user-friendly —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    mock_aiofiles_open.set_content(fake_txt_file, "")
    await user_transcripts_store.set(fake_user_id, fake_txt_file)
    mock_async_exists.return_value = True
    mock_gpt.return_value = ""
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        },
    )()
    await transcribe_protocol.send_short_summary(message)
    mock_send_message.assert_called()
    args, kwargs = mock_send_message.call_args
    assert (
        "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫" in args[1].lower()
        or "gpt –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π" in args[1].lower()
    ), "‚ùå –ü—Ä–∏ –ø—É—Å—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."


import pytest
@pytest.mark.asyncio
async def test_audio_transcript_persistence(fake_user_id, fake_txt_file):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ set/get user_transcripts_store –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É.
    """
    from frontend_bot.services import user_transcripts_store
    await user_transcripts_store.set(fake_user_id, fake_txt_file)
    result = await user_transcripts_store.get(fake_user_id)
    assert result == fake_txt_file, f"‚ùå user_transcripts_store.get –≤–µ—Ä–Ω—É–ª {result}, –æ–∂–∏–¥–∞–ª–æ—Å—å {fake_txt_file}"
