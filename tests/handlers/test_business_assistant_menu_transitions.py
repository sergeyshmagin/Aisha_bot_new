"""–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""

import pytest
from unittest.mock import patch, AsyncMock
from frontend_bot.services.state_manager import (
    get_state,
    clear_all_states,
    set_state,
)
from frontend_bot.keyboards.main_menu import main_menu_keyboard
from frontend_bot.keyboards.business_assistant import business_assistant_keyboard
from frontend_bot.handlers.general import handle_main_menu
from frontend_bot.handlers.business_assistant import (
    handle_business_assistant_menu,
    handle_business_assistant_history,
)


@pytest.fixture
async def clean_state():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
    await clear_all_states()
    yield
    await clear_all_states()


@pytest.fixture
def mock_bot():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ –±–æ—Ç–∞."""
    with patch('frontend_bot.bot.bot') as mock:
        yield mock


@pytest.fixture
def create_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    def _create_message(user_id: int, text: str):
        message = AsyncMock()
        message.from_user.id = user_id
        message.chat.id = user_id
        message.text = text
        return message
    return _create_message


@pytest.mark.asyncio
async def test_main_menu_to_business_assistant(
    clean_state,
    mock_bot,
    create_message
):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è business_assistant
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "main_menu")
    message = create_message(user_id, "üí¨ –ë–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")

    # Act
    await handle_main_menu(message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" in args[1]
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert "üí≠ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥" in str(keyboard)
    state = await get_state(user_id)
    assert state == "business_assistant"


@pytest.mark.asyncio
async def test_business_assistant_to_history(
    clean_state,
    mock_bot,
    create_message
):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è business_assistant_history
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "business_assistant")
    message = create_message(user_id, "üìã –ò—Å—Ç–æ—Ä–∏—è")

    # Act
    await handle_business_assistant_history(message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤" in args[1]
    state = await get_state(user_id)
    assert state == "business_assistant_history"


@pytest.mark.asyncio
async def test_business_assistant_to_new_dialog(
    clean_state,
    mock_bot,
    create_message
):
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è business_assistant_dialog
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "business_assistant")
    message = create_message(user_id, "üí≠ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")

    # Act
    await handle_business_assistant_menu(message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    assert "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É" in args[1]
    state = await get_state(user_id)
    assert state == "business_assistant_dialog"


@pytest.mark.asyncio
async def test_back_from_business_assistant(
    clean_state,
    mock_bot,
    create_message
):
    """
    –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "business_assistant")
    message = create_message(user_id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    # Act
    await handle_main_menu(message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert isinstance(keyboard, main_menu_keyboard().__class__)
    state = await get_state(user_id)
    assert state == "main_menu"


@pytest.mark.asyncio
async def test_back_from_history(clean_state, mock_bot, create_message):
    """
    –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    # Arrange
    user_id = 123456789
    await set_state(user_id, "business_assistant_history")
    message = create_message(user_id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    # Act
    await handle_main_menu(message)

    # Assert
    mock_bot.send_message.assert_called_once()
    args = mock_bot.send_message.call_args[0]
    assert args[0] == user_id
    keyboard = mock_bot.send_message.call_args[1]['reply_markup']
    assert isinstance(keyboard, business_assistant_keyboard().__class__)
    state = await get_state(user_id)
    assert state == "business_assistant" 