from unittest.mock import AsyncMock, patch, MagicMock


class AsyncContextManagerMock(MagicMock):
    """–ú–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async def __aenter__(self):
        return self.aenter

    async def __aexit__(self, *args):
        pass

from frontend_bot.handlers import transcribe_protocol
from frontend_bot.services import transcript_cache


@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
async def test_mom_success(
    mock_gpt,
    mock_send_document,
    mock_send_chat_action,
    mock_send_message,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É MoM –∫–∞–∫ .txt-—Ñ–∞–π–ª–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º,
    —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ caption.
    """
    await transcript_cache.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "Test transcript content")
    mock_gpt.return_value = "MoM –¥–ª—è —Ç–µ—Å—Ç–∞"
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM",
        },
    )()
    await transcribe_protocol.send_mom(message)
    assert mock_send_document.called, (
        "‚ùå send_document –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä send_mom –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞."
    )
    args, kwargs = mock_send_document.call_args
    filename, fileobj = args[1]
    assert filename.startswith("mom_") and filename.endswith(".txt"), (
        f"‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {filename}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."
    )
    fileobj.seek(0)
    content = fileobj.read().decode()
    assert content, (
        "‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
    )
    assert kwargs["caption"].startswith("üìù MoM (Minutes of Meeting)"), (
        f"‚ùå Caption –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {kwargs['caption']}. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ caption –¥–ª—è MoM."
    )


@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.file_utils.async_exists",
    new_callable=AsyncMock,
)
async def test_send_mom_no_file(
    mock_async_exists: AsyncMock,
    mock_send_message: AsyncMock,
    mock_send_chat_action: AsyncMock,
    mock_send_document: AsyncMock,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ—Ç, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
    —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    await transcript_cache.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "")
    mock_async_exists.return_value = False
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM",
        },
    )()
    await transcribe_protocol.send_mom(message)
    mock_send_message.assert_called()


@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.file_utils.async_exists",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
async def test_send_mom_gpt_error(
    mock_gpt: AsyncMock,
    mock_async_exists: AsyncMock,
    mock_send_message: AsyncMock,
    mock_send_chat_action: AsyncMock,
    mock_send_document: AsyncMock,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ GPT –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    await transcript_cache.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "Test transcript content")
    mock_async_exists.return_value = True
    mock_gpt.side_effect = Exception("GPT error")

    class AsyncFile:
        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            pass

        async def read(self):
            return "Test transcript content"

    mock_aiofiles_open.return_value = AsyncFile()
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM",
        },
    )()
    await transcribe_protocol.send_mom(message)
    mock_send_message.assert_called()


@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.file_utils.async_exists",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
async def test_send_mom_empty_transcript(
    mock_gpt: AsyncMock,
    mock_async_exists: AsyncMock,
    mock_send_message: AsyncMock,
    mock_send_chat_action: AsyncMock,
    mock_send_document: AsyncMock,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç–æ–π (—Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–æ –ø—É—Å—Ç–æ–π) –¥–ª—è MoM.
    –û–∂–∏–¥–∞–µ—Ç—Å—è user-friendly —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    await transcript_cache.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "")
    mock_async_exists.return_value = True

    class AsyncFile:
        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            pass

        async def read(self):
            return ""

    mock_aiofiles_open.return_value = AsyncFile()
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM",
        },
    )()
    await transcribe_protocol.send_mom(message)
    mock_send_message.assert_called()


@patch(
    "frontend_bot.handlers.general.bot.send_document",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_chat_action",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.general.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.file_utils.async_exists",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.services.gpt_assistant.format_transcript_with_gpt",
    new_callable=AsyncMock,
)
async def test_send_mom_empty_gpt(
    mock_gpt: AsyncMock,
    mock_async_exists: AsyncMock,
    mock_send_message: AsyncMock,
    mock_send_chat_action: AsyncMock,
    mock_send_document: AsyncMock,
    fake_user_id: int,
    fake_txt_file: str,
    mock_aiofiles_open,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ GPT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è MoM.
    –û–∂–∏–¥–∞–µ—Ç—Å—è user-friendly —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    await transcript_cache.set(fake_user_id, fake_txt_file)
    mock_aiofiles_open.set_content(fake_txt_file, "Test transcript content")
    mock_async_exists.return_value = True

    class AsyncFile:
        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            pass

        async def read(self):
            return "Test transcript content"

    mock_aiofiles_open.return_value = AsyncFile()
    mock_gpt.return_value = ""
    
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM",
        },
    )()
    await transcribe_protocol.send_mom(message)
    mock_send_message.assert_called()
