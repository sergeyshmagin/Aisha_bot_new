from unittest.mock import AsyncMock, patch
import frontend_bot.handlers.transcribe_history as transcribe_history
from frontend_bot.services import user_transcripts_store


@patch("frontend_bot.handlers.transcribe_history.history_keyboard")
@patch(
    "frontend_bot.handlers.transcribe_history.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.transcribe_history.async_remove",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.transcribe_history.async_exists",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.transcribe_history.service_remove_last_history_entry",
    new_callable=AsyncMock,
)
async def test_delete_my_file_success(
    mock_remove_history: AsyncMock,
    mock_async_exists: AsyncMock,
    mock_async_remove: AsyncMock,
    mock_send_message: AsyncMock,
    mock_keyboard,
    fake_user_id: int,
    fake_txt_file: str,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: —Ñ–∞–π–ª –µ—Å—Ç—å, –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤—ã–∑—ã–≤–∞—é—Ç—Å—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    await user_transcripts_store.set(fake_user_id, fake_txt_file)
    mock_async_exists.return_value = True
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–π —Ñ–∞–π–ª",
        },
    )()
    await transcribe_history.delete_my_file(message)
    mock_async_remove.assert_awaited_once_with(fake_txt_file)
    mock_remove_history.assert_awaited_once_with(
        str(fake_user_id)
    )
    mock_send_message.assert_awaited()
    args, kwargs = mock_send_message.call_args
    assert (
        "–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω." in args[1]
    ), "‚ùå –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    if hasattr(user_transcripts_store, 'all'):
        all_store = await user_transcripts_store.all()
        assert fake_user_id not in all_store


@patch("frontend_bot.handlers.transcribe_history.history_keyboard")
@patch(
    "frontend_bot.handlers.transcribe_history.bot.send_message",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.transcribe_history.async_remove",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.transcribe_history.async_exists",
    new_callable=AsyncMock,
)
@patch(
    "frontend_bot.handlers.transcribe_history.service_remove_last_history_entry",
    new_callable=AsyncMock,
)
async def test_delete_my_file_no_file(
    mock_remove_history: AsyncMock,
    mock_async_exists: AsyncMock,
    mock_async_remove: AsyncMock,
    mock_send_message: AsyncMock,
    mock_keyboard,
    fake_user_id: int,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.
    """
    # user_transcripts –ø—É—Å—Ç–æ–π
    mock_async_exists.return_value = False
    message = type(
        "Msg",
        (),
        {
            "from_user": type("U", (), {"id": fake_user_id})(),
            "chat": type("C", (), {"id": 1})(),
            "text": "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–π —Ñ–∞–π–ª",
        },
    )()
    await transcribe_history.delete_my_file(message)
    mock_send_message.assert_awaited()
    args, kwargs = mock_send_message.call_args
    assert (
        "–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è." in args[1]
    ), "‚ùå –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    if hasattr(user_transcripts_store, 'all'):
        all_store = await user_transcripts_store.all()
        assert fake_user_id not in all_store
