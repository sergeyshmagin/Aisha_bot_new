#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
from uuid import UUID
from typing import Optional

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from app.core.database import get_session
from app.database.models import User, UserBalance
from app.core.logger import get_logger
from app.core.config import settings
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = get_logger(__name__)


async def find_user_by_telegram_id(session: AsyncSession, telegram_id: str) -> Optional[User]:
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    stmt = select(User).where(User.telegram_id == telegram_id)
    result = await session.execute(stmt)
    return result.scalar_one_or_none()


async def find_user_by_username(session: AsyncSession, username: str) -> Optional[User]:
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.replace('@', '').strip()
    stmt = select(User).where(User.username == clean_username)
    result = await session.execute(stmt)
    return result.scalar_one_or_none()


async def get_user_balance(session: AsyncSession, user_id: UUID) -> Optional[UserBalance]:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stmt = select(UserBalance).where(UserBalance.user_id == user_id)
    result = await session.execute(stmt)
    return result.scalar_one_or_none()


async def create_user_balance(session: AsyncSession, user_id: UUID, initial_amount: float = 0.0) -> UserBalance:
    """–°–æ–∑–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    balance = UserBalance(user_id=user_id, coins=initial_amount)
    session.add(balance)
    await session.commit()
    await session.refresh(balance)
    return balance


async def add_balance(session: AsyncSession, user_id: UUID, amount: float) -> UserBalance:
    """–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    balance = await get_user_balance(session, user_id)
    
    if balance is None:
        # –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        balance = await create_user_balance(session, user_id, amount)
    else:
        # –ü–æ–ø–æ–ª–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å
        old_amount = balance.coins
        balance.coins += amount
        await session.commit()
        await session.refresh(balance)
        logger.info(f"–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {old_amount} + {amount} = {balance.coins}")
    
    return balance


async def send_balance_notification(telegram_id: str, added_amount: float, current_balance: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞"""
    try:
        bot = Bot(token=settings.TELEGRAM_TOKEN)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üí∞ **–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**\n\n"
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
        )
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ú® –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                    callback_data=f"balance_details_{added_amount}_{current_balance}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üßë‚Äçüé® –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
                    callback_data="create_avatar"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(
            chat_id=telegram_id,
            text=message,
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_notification=False,  # –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            disable_web_page_preview=True
        )
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")


async def send_simple_balance_notification(telegram_id: str, added_amount: float, current_balance: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∫ –≤ —Å–ø—Ä–∞–≤–∫–µ)"""
    try:
        bot = Bot(token=settings.TELEGRAM_TOKEN)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ —Å–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ (–∫—Ä–∞—Ç–∫–æ–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ)
        message = (
            f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {added_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
            f"‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä—ã!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        await bot.send_message(
            chat_id=telegram_id,
            text=f"üîî **–£–í–ï–î–û–ú–õ–ï–ù–ò–ï**\n\n{message}",
            parse_mode="Markdown",
            disable_notification=False
        )
        
        logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")


async def show_user_info(user: User, balance: Optional[UserBalance]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    print(f"\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
    print(f"   ID: {user.id}")
    print(f"   Telegram ID: {user.telegram_id}")
    print(f"   –ò–º—è: {user.first_name} {user.last_name or ''}")
    print(f"   Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
    print(f"   –Ø–∑—ã–∫: {user.language_code}")
    print(f"   Premium: {'–î–∞' if user.is_premium else '–ù–µ—Ç'}")
    print(f"   –°–æ–∑–¥–∞–Ω: {user.created_at}")
    
    if balance:
        print(f"\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.coins} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω: {balance.updated_at}")
    else:
        print(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: –Ω–µ —Å–æ–∑–¥–∞–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí∞ –°–∫—Ä–∏–ø—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python add_balance.py <telegram_id_–∏–ª–∏_username> <—Å—É–º–º–∞> [—Ç–∏–ø_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è]")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python add_balance.py 123456789 150.0")
        print("  python add_balance.py @ivan_petrov 100 simple")
        print("  python add_balance.py ivan_petrov 50.5 buttons")
        print("")
        print("–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        print("  simple  - –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("  buttons - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        return
    
    user_identifier = sys.argv[1]
    try:
        amount = float(sys.argv[2])
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    notification_type = "simple"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 3:
        notification_type = sys.argv[3].lower()
        if notification_type not in ["simple", "buttons"]:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'simple' –∏–ª–∏ 'buttons'")
            return
    
    if amount <= 0:
        print("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return
    
    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_identifier}")
    print(f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤")
    print(f"üì± –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        async with get_session() as session:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ)
            if user_identifier.isdigit():
                user = await find_user_by_telegram_id(session, user_identifier)
                if user:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID: {user_identifier}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ username
            if user is None:
                user = await find_user_by_username(session, user_identifier)
                if user:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ username: {user_identifier}")
            
            if user is None:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_identifier}")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Telegram ID –∏–ª–∏ username")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = await get_user_balance(session, user.id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            await show_user_info(user, current_balance)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print(f"\n‚ùì –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤?")
            confirm = input("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").lower().strip()
            
            if confirm not in ['–¥–∞', 'yes', 'y']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            print(f"\nüí∞ –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å...")
            updated_balance = await add_balance(session, user.id, amount)
            
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!")
            print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {updated_balance.coins} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            print(f"   –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞: +{amount} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            print(f"\nüì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram ({notification_type})...")
            
            if notification_type == "buttons":
                await send_balance_notification(
                    telegram_id=user.telegram_id,
                    added_amount=amount,
                    current_balance=updated_balance.coins
                )
            else:  # simple
                await send_simple_balance_notification(
                    telegram_id=user.telegram_id,
                    added_amount=amount,
                    current_balance=updated_balance.coins
                )
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 