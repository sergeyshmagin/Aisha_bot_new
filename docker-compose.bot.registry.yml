version: '3.8'

# ============================================================================
# BOT КЛАСТЕР КОНФИГУРАЦИЯ с образами из Registry
# Сервер: 192.168.0.10 (aibots.kz)
# Registry: 192.168.0.4:5000
# Redis: 192.168.0.3 | PostgreSQL/MinIO: 192.168.0.4
# ============================================================================

networks:
  aisha_bot_cluster:
    external: true

volumes:
  bot_logs:
    driver: local
  shared_storage:
    driver: local

services:
  # ==================== PRIMARY BOT ====================
  aisha-bot-polling-1:
    image: 192.168.0.4:5000/aisha/bot:${IMAGE_VERSION:-latest}
    container_name: aisha-bot-polling-1
    restart: unless-stopped
    command: ["polling"]
    volumes:
      - bot_logs:/app/logs
      - shared_storage:/app/storage
    networks:
      aisha_bot_cluster:
        ipv4_address: 172.26.0.10
    environment:
      # Bot Configuration
      - BOT_MODE=polling
      - BOT_INSTANCE_ID=polling-1
      - INSTANCE_ID=polling-1
      - BOT_ROLE=primary
      - PYTHONPATH=/app
      
      # External Services
      - DATABASE_URL=postgresql+asyncpg://aisha_user:KbZZGJHX09KSH7r9ev4m@192.168.0.4:5432/aisha
      - POSTGRES_HOST=192.168.0.4
      - POSTGRES_PORT=5432
      - POSTGRES_USER=aisha_user
      - POSTGRES_PASSWORD=KbZZGJHX09KSH7r9ev4m
      - POSTGRES_DB=aisha
      - REDIS_HOST=192.168.0.3
      - REDIS_PORT=6379
      - REDIS_PASSWORD=wd7QuwAbG0wtyoOOw3Sm
      - REDIS_DB=0
      - REDIS_SSL=false
      
      # MinIO
      - MINIO_ENDPOINT=192.168.0.4:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=74rSbw9asQ1uMzcFeM5G
      - MINIO_SECURE=false
      
      # API Keys
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FAL_API_KEY=${FAL_API_KEY}
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-here}
      - PASSWORD_SALT=${PASSWORD_SALT:-your-password-salt-here}
      
      # Application Settings
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # Redis Sessions (aiogram)
      - AIOGRAM_SESSION_REDIS_HOST=192.168.0.3
      - AIOGRAM_SESSION_REDIS_PORT=6379
      - AIOGRAM_SESSION_REDIS_DB=0
      - AIOGRAM_SESSION_REDIS_PASSWORD=wd7QuwAbG0wtyoOOw3Sm
      - AIOGRAM_SESSION_TTL=3600
      
      # Coordination Redis
      - CLUSTER_COORDINATION_REDIS_DB=2
      
      # Performance
      - MAX_CONCURRENT_GENERATIONS=3
      - GALLERY_CACHE_SIZE=500
      
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import redis; r = redis.Redis(host='192.168.0.3', port=6379, password='wd7QuwAbG0wtyoOOw3Sm', db=2); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 384M
    labels:
      - "com.aisha.service=bot"
      - "com.aisha.instance=polling-primary"

  # ==================== STANDBY BOT ====================
  aisha-bot-polling-2:
    image: 192.168.0.4:5000/aisha/bot:${IMAGE_VERSION:-latest}
    container_name: aisha-bot-polling-2
    restart: unless-stopped
    command: ["polling_standby"]
    volumes:
      - bot_logs:/app/logs
      - shared_storage:/app/storage
    networks:
      aisha_bot_cluster:
        ipv4_address: 172.26.0.11
    environment:
      # Bot Configuration
      - BOT_MODE=polling_standby
      - BOT_INSTANCE_ID=polling-2
      - INSTANCE_ID=polling-2
      - BOT_ROLE=standby
      - PYTHONPATH=/app
      - STANDBY_CHECK_INTERVAL=60
      - FAILOVER_TIMEOUT=180
      
      # External Services (same as primary)
      - DATABASE_URL=postgresql+asyncpg://aisha_user:KbZZGJHX09KSH7r9ev4m@192.168.0.4:5432/aisha
      - POSTGRES_HOST=192.168.0.4
      - POSTGRES_PORT=5432
      - POSTGRES_USER=aisha_user
      - POSTGRES_PASSWORD=KbZZGJHX09KSH7r9ev4m
      - POSTGRES_DB=aisha
      - REDIS_HOST=192.168.0.3
      - REDIS_PORT=6379
      - REDIS_PASSWORD=wd7QuwAbG0wtyoOOw3Sm
      - REDIS_DB=0
      - REDIS_SSL=false
      
      # MinIO
      - MINIO_ENDPOINT=192.168.0.4:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=74rSbw9asQ1uMzcFeM5G
      - MINIO_SECURE=false
      
      # API Keys
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FAL_API_KEY=${FAL_API_KEY}
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-here}
      - PASSWORD_SALT=${PASSWORD_SALT:-your-password-salt-here}
      
      # Application Settings
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # Redis Sessions (aiogram)
      - AIOGRAM_SESSION_REDIS_HOST=192.168.0.3
      - AIOGRAM_SESSION_REDIS_PORT=6379
      - AIOGRAM_SESSION_REDIS_DB=0
      - AIOGRAM_SESSION_REDIS_PASSWORD=wd7QuwAbG0wtyoOOw3Sm
      - AIOGRAM_SESSION_TTL=3600
      
      # Coordination Redis
      - CLUSTER_COORDINATION_REDIS_DB=2
      
      # Performance (reduced for standby)
      - MAX_CONCURRENT_GENERATIONS=2
      - GALLERY_CACHE_SIZE=250
      
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import redis; r = redis.Redis(host='192.168.0.3', port=6379, password='wd7QuwAbG0wtyoOOw3Sm', db=2); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "com.aisha.service=bot"
      - "com.aisha.instance=polling-standby"

  # ==================== BACKGROUND WORKER ====================
  aisha-worker-1:
    image: 192.168.0.4:5000/aisha/bot:${IMAGE_VERSION:-latest}
    container_name: aisha-worker-1
    restart: unless-stopped
    command: ["worker"]
    volumes:
      - bot_logs:/app/logs
      - shared_storage:/app/storage
    networks:
      aisha_bot_cluster:
        ipv4_address: 172.26.0.20
    environment:
      # Worker Configuration
      - BOT_MODE=worker
      - BOT_INSTANCE_ID=worker-1
      - INSTANCE_ID=worker-1
      - BOT_ROLE=worker
      - PYTHONPATH=/app
      - WORKER_CONCURRENCY=5
      
      # External Services
      - DATABASE_URL=postgresql+asyncpg://aisha_user:KbZZGJHX09KSH7r9ev4m@192.168.0.4:5432/aisha
      - POSTGRES_HOST=192.168.0.4
      - POSTGRES_PORT=5432
      - POSTGRES_USER=aisha_user
      - POSTGRES_PASSWORD=KbZZGJHX09KSH7r9ev4m
      - POSTGRES_DB=aisha
      - REDIS_HOST=192.168.0.3
      - REDIS_PORT=6379
      - REDIS_PASSWORD=wd7QuwAbG0wtyoOOw3Sm
      - REDIS_DB=3
      - REDIS_SSL=false
      
      # MinIO
      - MINIO_ENDPOINT=192.168.0.4:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=74rSbw9asQ1uMzcFeM5G
      - MINIO_SECURE=false
      
      # API Keys (for background tasks)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FAL_API_KEY=${FAL_API_KEY}
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-here}
      - PASSWORD_SALT=${PASSWORD_SALT:-your-password-salt-here}
      
      # Application Settings
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # Worker-specific Redis DB
      - WORKER_REDIS_DB=3
      
      # Performance
      - MAX_CONCURRENT_GENERATIONS=2
      - TASK_TIMEOUT=300
      
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import redis; r = redis.Redis(host='192.168.0.3', port=6379, password='wd7QuwAbG0wtyoOOw3Sm', db=3); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "com.aisha.service=worker"
      - "com.aisha.instance=background-worker" 