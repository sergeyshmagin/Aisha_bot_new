"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π environs
"""
import os
from pathlib import Path
from typing import Optional, Union, List, Dict, Any

from pydantic_settings import BaseSettings
from pydantic import Field, validator
from environs import Env

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è environs –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
env = Env()
env.read_env()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç .env —Ñ–∞–π–ª

class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    DEBUG: bool = True
    ENV: str = "development"
    INSTANCE_ID: str = Field(default="aisha-bot", env="INSTANCE_ID")
    
    # Telegram
    TELEGRAM_TOKEN: str = Field(default="test_token", env="TELEGRAM_BOT_TOKEN")
    # BACKEND_URL: str = "http://localhost:8000"  # LEGACY - —É–¥–∞–ª–µ–Ω
    
    # OpenAI
    OPENAI_API_KEY: Optional[str] = Field(default="test_key")
    ASSISTANT_ID: Optional[str] = None
    
    # Fal AI
    FAL_API_KEY: str = Field("", env="FAL_API_KEY")
    FAL_KEY: str = Field("", env="FAL_KEY")  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    FAL_WEBHOOK_URL: str = Field("https://aibots.kz:8443/api/v1/avatar/status_update", env="FAL_WEBHOOK_URL")
    
    @property
    def effective_fal_api_key(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FAL API –∫–ª—é—á –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        return self.FAL_API_KEY or self.FAL_KEY or ""
    
    # FAL AI - Portrait Trainer Settings (–ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò)
    FAL_PORTRAIT_STEPS: int = Field(1000, env="FAL_PORTRAIT_STEPS")
    FAL_PORTRAIT_LEARNING_RATE: float = Field(0.0002, env="FAL_PORTRAIT_LEARNING_RATE")
    FAL_PORTRAIT_SUBJECT_CROP: bool = Field(True, env="FAL_PORTRAIT_SUBJECT_CROP")
    FAL_PORTRAIT_CREATE_MASKS: bool = Field(True, env="FAL_PORTRAIT_CREATE_MASKS")
    FAL_PORTRAIT_MULTIRESOLUTION: bool = Field(True, env="FAL_PORTRAIT_MULTIRESOLUTION")
    
    # FAL AI - Advanced Settings
    FAL_TRAINING_TIMEOUT: int = Field(1800, env="FAL_TRAINING_TIMEOUT")  # 30 –º–∏–Ω—É—Ç
    FAL_STATUS_CHECK_INTERVAL: int = Field(30, env="FAL_STATUS_CHECK_INTERVAL")  # —Å–µ–∫—É–Ω–¥
    FAL_MAX_RETRIES: int = Field(3, env="FAL_MAX_RETRIES")
    FAL_AUTO_MODEL_SELECTION: bool = Field(True, env="FAL_AUTO_MODEL_SELECTION")  # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    FAL_DEFAULT_QUALITY_PRESET: str = Field("fast", env="FAL_DEFAULT_QUALITY_PRESET")  # –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # FAL AI - –ü—Ä–µ—Å–µ—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ (–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ flux-lora-portrait-trainer)
    FAL_PRESET_FAST: dict = Field(default={
        "portrait": {
            "steps": 1000,
            "learning_rate": 0.0002,
            "multiresolution_training": True,
            "subject_crop": True,
            "create_masks": False
        },
        "general": {
            "iterations": 800,
            "learning_rate": 0.0002,
            "priority": "speed"
        }
    }, env="FAL_PRESET_FAST")
    
    FAL_PRESET_BALANCED: dict = Field(default={
        "portrait": {
            "steps": 2500,
            "learning_rate": 0.00009,
            "multiresolution_training": True,
            "subject_crop": True,
            "create_masks": True
        },
        "general": {
            "iterations": 1500,
            "learning_rate": 0.00009,
            "priority": "balanced"
        }
    }, env="FAL_PRESET_BALANCED")
    
    FAL_PRESET_QUALITY: dict = Field(default={
        "portrait": {
            "steps": 4000,
            "learning_rate": 0.00005,
            "multiresolution_training": True,
            "subject_crop": True,
            "create_masks": True
        },
        "general": {
            "iterations": 3000,
            "learning_rate": 0.00005,
            "priority": "quality"
        }
    }, env="FAL_PRESET_QUALITY")
    
    # üß™ FAL AI - Debug & Development Settings
    FAL_MOCK_TRAINING_DURATION: int = Field(30, env="FAL_MOCK_TRAINING_DURATION")  # —Å–µ–∫—É–Ω–¥
    FAL_ENABLE_WEBHOOK_SIMULATION: bool = Field(True, env="FAL_ENABLE_WEBHOOK_SIMULATION") 
    FAL_TEST_REQUEST_PREFIX: str = Field("test_", env="FAL_TEST_REQUEST_PREFIX")
    
    # –ü—É—Ç–∏
    BASE_DIR: Path = Path(__file__).parent.parent.parent
    AUDIO_STORAGE_PATH: Path = BASE_DIR / "storage" / "audio"
    FFMPEG_PATH: str = "C:\\dev\\distr\\ffmpeg\\bin\\ffmpeg.exe"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
    MAX_AUDIO_SIZE: int = 1024 * 1024 * 1024  # 1GB
    TELEGRAM_API_LIMIT: int = 20 * 1024 * 1024  # 20MB - –ª–∏–º–∏—Ç Telegram Bot API
    AUDIO_FORMATS: List[str] = ["mp3", "wav", "ogg", "m4a", "flac", "aac", "wma", "opus"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    DEFAULT_LANGUAGE: str = "ru"
    SUPPORTED_LANGUAGES: List[str] = ["ru", "en"]
    WHISPER_MODEL: str = "whisper-1"
    WHISPER_LANGUAGE: str = "ru"
    
    # ========== –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–ê–¢–ê–†–û–í ==========
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–≤–∞—Ç–∞—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    AVATAR_TEST_MODE: bool = Field(False, env="AVATAR_TEST_MODE")
    
    # –õ–∏–º–∏—Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    AVATAR_MIN_PHOTOS: int = Field(10, env="AVATAR_MIN_PHOTOS")
    AVATAR_MAX_PHOTOS: int = Field(20, env="AVATAR_MAX_PHOTOS")
    
    AVATAR_MAX_PHOTOS_PER_USER: int = Field(5, env="AVATAR_MAX_PHOTOS_PER_USER")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    PHOTO_MAX_SIZE: int = Field(20 * 1024 * 1024, env="PHOTO_MAX_SIZE")  # 20MB
    PHOTO_MIN_RESOLUTION: int = Field(512, env="PHOTO_MIN_RESOLUTION")
    PHOTO_MAX_RESOLUTION: int = Field(4096, env="PHOTO_MAX_RESOLUTION")
    PHOTO_ALLOWED_FORMATS: List[str] = Field(["jpg", "jpeg", "png", "webp"], env="PHOTO_ALLOWED_FORMATS")
    
    # UX –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    PHOTO_UPLOAD_TIMEOUT: int = Field(300, env="PHOTO_UPLOAD_TIMEOUT")  # 5 –º–∏–Ω—É—Ç
    GALLERY_PHOTOS_PER_PAGE: int = Field(6, env="GALLERY_PHOTOS_PER_PAGE")
    TRAINING_STATUS_UPDATE_INTERVAL: int = Field(30, env="TRAINING_STATUS_UPDATE_INTERVAL")  # —Å–µ–∫—É–Ω–¥
    AUTO_GENERATE_PREVIEW: bool = Field(True, env="AUTO_GENERATE_PREVIEW")
    AVATAR_CREATION_COOLDOWN: int = Field(86400, env="AVATAR_CREATION_COOLDOWN")  # 24 —á–∞—Å–∞
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    ENABLE_FACE_DETECTION: bool = Field(True, env="ENABLE_FACE_DETECTION")
    ENABLE_NSFW_DETECTION: bool = Field(True, env="ENABLE_NSFW_DETECTION")
    MIN_FACE_SIZE: int = Field(100, env="MIN_FACE_SIZE")  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–∏—Ü–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    QUALITY_THRESHOLD: float = Field(0.5, env="QUALITY_THRESHOLD")  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ (–≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö)
    AVATAR_CREATION_COST: float = Field(150.0, env="AVATAR_CREATION_COST")  # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
    IMAGE_GENERATION_COST: float = Field(5.0, env="IMAGE_GENERATION_COST")  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
    VIDEO_5S_GENERATION_COST: float = Field(20.0, env="VIDEO_5S_GENERATION_COST")  # –í–∏–¥–µ–æ 5 —Å–µ–∫
    VIDEO_10S_GENERATION_COST: float = Field(40.0, env="VIDEO_10S_GENERATION_COST")  # –í–∏–¥–µ–æ 10 —Å–µ–∫
    VIDEO_PRO_5S_GENERATION_COST: float = Field(30.0, env="VIDEO_PRO_5S_GENERATION_COST")  # –í–∏–¥–µ–æ PRO 5 —Å–µ–∫
    VIDEO_PRO_10S_GENERATION_COST: float = Field(60.0, env="VIDEO_PRO_10S_GENERATION_COST")  # –í–∏–¥–µ–æ PRO 10 —Å–µ–∫
    PORN_VIDEO_5S_GENERATION_COST: float = Field(30.0, env="PORN_VIDEO_5S_GENERATION_COST")  # –ü–∞—Ä–Ω–æ–µ –≤–∏–¥–µ–æ 5 —Å–µ–∫
    PORN_VIDEO_10S_GENERATION_COST: float = Field(60.0, env="PORN_VIDEO_10S_GENERATION_COST")  # –ü–∞—Ä–Ω–æ–µ –≤–∏–¥–µ–æ 10 —Å–µ–∫
    TRANSCRIPTION_COST_PER_MINUTE: float = Field(10.0, env="TRANSCRIPTION_COST_PER_MINUTE")  # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞ –º–∏–Ω—É—Ç—É
    
    # –ü–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    TOPUP_PACKAGES: dict = Field(default={
        "small": {"coins": 250, "price_rub": 490, "price_kzt": 2500, "popular": False},
        "medium": {"coins": 500, "price_rub": 870, "price_kzt": 4900, "popular": True},
        "large": {"coins": 1000, "price_rub": 1540, "price_kzt": 8800, "popular": False}
    }, env="TOPUP_PACKAGES")
    
    # –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    OFFER_URL: str = Field("https://telegra.ph/Dogovor-publichnoj-oferty-06-06-2", env="OFFER_URL")
    PRIVACY_URL: str = Field("https://telegra.ph/Politika-konfidencialnosti-i-obrabotki-personalnyh-dannyh-06-06-2", env="PRIVACY_URL")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    DELETE_PHOTOS_AFTER_TRAINING: bool = Field(True, env="DELETE_PHOTOS_AFTER_TRAINING")  # –£–¥–∞–ª—è—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
    KEEP_PREVIEW_PHOTO: bool = Field(True, env="KEEP_PREVIEW_PHOTO")  # –û—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –ø—Ä–µ–≤—å—é
    
    # ========== –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö –ê–í–ê–¢–ê–†–û–í ==========
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    STORAGE_CLEANUP_DAYS: int = 7
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = Field(default="DEBUG", env="LOG_LEVEL")  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ DEBUG
    LOG_FORMAT: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    LOG_FILE: Optional[str] = None
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    ENABLE_SQL_LOGGING: bool = Field(default=False, env="ENABLE_SQL_LOGGING")
    ENABLE_TELEGRAM_LOGGING: bool = Field(default=True, env="ENABLE_TELEGRAM_LOGGING")
    ENABLE_TRANSCRIPTION_LOGGING: bool = Field(default=True, env="ENABLE_TRANSCRIPTION_LOGGING")
    LOG_TO_FILE: bool = Field(default=True, env="LOG_TO_FILE")
    LOG_FILE_PATH: str = Field(default="/app/logs/aisha-bot.log", env="LOG_FILE_PATH")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    ENABLE_DETAILED_ERROR_LOGGING: bool = Field(default=True, env="ENABLE_DETAILED_ERROR_LOGGING")
    LOG_STACK_TRACES: bool = Field(default=True, env="LOG_STACK_TRACES")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫
    ENABLE_METRICS: bool = False
    METRICS_HOST: str = "localhost"
    METRICS_PORT: int = 9090
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
    ENABLE_TRACING: bool = False
    TRACING_HOST: str = "localhost"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
    REDIS_HOST: str = Field(default="192.168.0.3")
    REDIS_PORT: int = Field(default=6379)
    REDIS_DB: int = Field(default=0)
    REDIS_PASSWORD: str = Field(default="wd7QuwAbG0wtyoOOw3Sm")
    REDIS_SSL: bool = Field(default=False)
    REDIS_POOL_SIZE: int = Field(default=10)
    REDIS_POOL_TIMEOUT: int = Field(default=5)
    REDIS_MAX_RETRIES: int = Field(default=3)
    
    # PostgreSQL
    POSTGRES_HOST: Optional[str] = Field(default="192.168.0.4")
    POSTGRES_PORT: Optional[int] = Field(default=5432)
    POSTGRES_DB: Optional[str] = Field(default="aisha")
    POSTGRES_USER: Optional[str] = Field(default="aisha_user")
    POSTGRES_PASSWORD: Optional[str] = Field(default="KbZZGJHX09KSH7r9ev4m")
    DATABASE_URL: Optional[str] = None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î
    DB_ECHO: bool = Field(default=False)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    DB_POOL_SIZE: int = Field(default=5)  # –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    DB_MAX_OVERFLOW: int = Field(default=10)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞
    DB_POOL_TIMEOUT: int = Field(default=30)  # –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
    DB_POOL_RECYCLE: int = Field(default=3600)  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    @validator("DATABASE_URL", pre=True)
    def assemble_db_url(cls, v: Optional[str], values: Dict[str, Any]) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö PostgreSQL"""
        if isinstance(v, str) and v:
            return v
        return f"postgresql+asyncpg://{values.get('POSTGRES_USER')}:{values.get('POSTGRES_PASSWORD')}@{values.get('POSTGRES_HOST')}:{values.get('POSTGRES_PORT')}/{values.get('POSTGRES_DB')}"
    
    # MinIO
    MINIO_ENDPOINT: Optional[str] = Field(default="192.168.0.4:9000")
    MINIO_ACCESS_KEY: Optional[str] = Field(default="minioadmin")
    MINIO_SECRET_KEY: Optional[str] = Field(default="74rSbw9asQ1uMzcFeM5G")
    MINIO_BUCKET_NAME: Optional[str] = Field(default="aisha")
    MINIO_SECURE: bool = Field(default=False)  # üéØ –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º SSL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    MINIO_BUCKET_AVATARS: Optional[str] = Field(default="avatars")
    MINIO_BUCKET_PHOTOS: Optional[str] = Field(default="photos")
    MINIO_BUCKET_TEMP: Optional[str] = Field(default="temp")
    MINIO_PRESIGNED_EXPIRES: int = Field(default=3600)  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è presigned URL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    TEMP_DIR: Path = Path("/tmp") if os.name != 'nt' else Path(os.environ.get('TEMP', 'temp'))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    ENABLE_ALERTS: bool = False
    ALERT_EMAIL: Optional[str] = None
    ALERT_SLACK_WEBHOOK: Optional[str] = None
    
    # Backend - LEGACY —É–¥–∞–ª–µ–Ω
    # BACKEND_URL: Optional[str] = None
    
    # Python
    PYTHONPATH: Optional[str] = None
    
    # Redis
    REDIS_RETRY_ON_TIMEOUT: Union[bool, str] = True
    REDIS_RETRY_INTERVAL: Union[int, str] = 1
    
    # PostgreSQL
    POSTGRES_PASSWORD: Optional[str] = Field(default="KbZZGJHX09KSH7r9ev4m")
    
    # MinIO
    TRACING_PORT: int = 6831
    
    # MinIO buckets
    MINIO_BUCKETS: Dict[str, str] = {
        "avatars": "avatars",
        "transcripts": "transcripts",
        "documents": "documents",
        "temp": "temp",
        "test": "test-bucket"
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    TEMP_FILE_CLEANUP_INTERVAL: int = 3600  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    TEMP_FILE_MAX_AGE: int = 3600  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (1 —á–∞—Å)
    AUTO_CLEANUP_ENABLED: bool = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    
    class Config:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pydantic"""
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True
        extra = "ignore"  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()
