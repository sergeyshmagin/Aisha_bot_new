"""
–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É –≥–∞–ª–µ—Ä–µ–µ–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""
import html
from uuid import UUID
from typing import Optional

from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from app.shared.handlers.base_handler import BaseHandler
from app.core.logger import get_logger
from app.utils.datetime_utils import format_datetime_for_user

logger = get_logger(__name__)


class PromptDisplayService(BaseHandler):
    """–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    
    async def show_full_prompt(
        self, 
        callback: CallbackQuery, 
        return_callback: Optional[str] = None
    ):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Args:
            callback: Callback query —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "action:{generation_id}"
            return_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "my_gallery")
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data
            data_parts = callback.data.split(":")
            if len(data_parts) < 2:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return
                
            generation_id = UUID(data_parts[1])
            logger.info(f"[PromptDisplay] –ü–æ–∫–∞–∑ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è generation_id={generation_id}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self._get_generation_by_id(generation_id)
            if not generation:
                await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # –î–ï–¢–ê–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"[PromptDisplay] Generation user_id: {generation.user_id} (type: {type(generation.user_id)})")
            logger.info(f"[PromptDisplay] Current user.id: {user.id} (type: {type(user.id)})")
            logger.info(f"[PromptDisplay] User telegram_id: {user.telegram_id}")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            generation_user_id = str(generation.user_id)
            current_user_id = str(user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if generation_user_id != current_user_id:
                logger.warning(f"[PromptDisplay] Ownership mismatch: {generation_user_id} != {current_user_id}")
                await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                return
            else:
                logger.info(f"[PromptDisplay] Ownership verified: {generation_user_id} == {current_user_id}")

            logger.info(f"[PromptDisplay] Ownership verified for user {user.telegram_id}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            date_str = await format_datetime_for_user(generation.created_at, user.id)
            
            # –ü–†–ê–í–ò–õ–¨–ù–û —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –≤ –ø—Ä–æ–º–ø—Ç–µ
            escaped_prompt = html.escape(generation.final_prompt)
            
            text = f"""üìù <b>–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üÜî <b>ID:</b> {str(generation.id)[:8]}...
üìÖ <b>–î–∞—Ç–∞:</b> {date_str}

<b>–ü—Ä–æ–º–ø—Ç:</b>
<pre>{escaped_prompt}</pre>

üìê <b>–§–æ—Ä–º–∞—Ç:</b> {generation.aspect_ratio}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra"""

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", 
                    callback_data=return_callback or "my_gallery"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await self._send_formatted_prompt(callback, text, keyboard)
            
            logger.info(f"[PromptDisplay] –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {generation_id}")

        except Exception as e:
            logger.exception(f"[PromptDisplay] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def _send_formatted_prompt(
        self, 
        callback: CallbackQuery, 
        text: str, 
        keyboard: InlineKeyboardMarkup
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                await callback.message.edit_text(
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            
        except TelegramBadRequest as e:
            if "parse entities" in str(e):
                logger.warning(f"[PromptDisplay] HTML parsing error, fallback to plain text: {e}")
                
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                plain_text = text.replace("<b>", "").replace("</b>", "").replace("<pre>", "").replace("</pre>", "")
                
                try:
                    if callback.message.photo:
                        await callback.message.delete()
                        await callback.message.answer(
                            plain_text,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback.message.edit_text(
                            plain_text,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                except Exception as fallback_error:
                    logger.exception(f"[PromptDisplay] Critical error in fallback: {fallback_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
            else:
                logger.exception(f"[PromptDisplay] Other Telegram error: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
                
        except Exception as e:
            logger.exception(f"[PromptDisplay] General error sending prompt: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)

    async def _get_generation_by_id(self, generation_id: UUID):
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ ID —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        
        from app.core.database import get_session
        from app.database.models.generation import ImageGeneration
        from sqlalchemy import select
        from sqlalchemy.orm import selectinload
        
        async with get_session() as session:
            stmt = (
                select(ImageGeneration)
                .options(selectinload(ImageGeneration.avatar))
                .where(ImageGeneration.id == generation_id)
            )
            result = await session.execute(stmt)
            return result.scalar_one_or_none()


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
prompt_display_service = PromptDisplayService() 