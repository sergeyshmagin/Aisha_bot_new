"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import asyncio
import logging
import signal
import sys
import os

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from app.core.config import settings
from app.handlers import (
    main_router,
    debug_router,
    transcript_main_handler,
    transcript_processing_handler,
)
from app.handlers.avatar import router as avatar_router
from app.handlers.generation.main_handler import router as generation_router
from app.handlers.gallery import main_router as gallery_main_router, filter_router as gallery_filter_router
from app.handlers.profile.router import profile_router
from app.handlers.fallback import fallback_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
bot_instance = None
background_tasks = set()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
BOT_MODE = os.getenv("BOT_MODE", "polling")
SET_POLLING = os.getenv("SET_POLLING", "true").lower() == "true"
INSTANCE_ID = os.getenv("INSTANCE_ID", "unknown")


async def startup_tasks():
    """
    –ó–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–ø—É—Å–∫–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        from app.services.avatar.fal_training_service.startup_checker import startup_checker
        await startup_checker.check_and_restore_monitoring()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ–Ω–µ
        task = asyncio.create_task(startup_checker.schedule_periodic_checks())
        background_tasks.add(task)
        task.add_done_callback(background_tasks.discard)
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∑–∞–ø—É—Å–∫–∞: {e}")


async def shutdown_handler():
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        if background_tasks:
            logger.info(f"‚èπÔ∏è –û—Ç–º–µ–Ω—è–µ–º {len(background_tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
            for task in background_tasks:
                if not task.done():
                    task.cancel()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if background_tasks:
                await asyncio.gather(*background_tasks, return_exceptions=True)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if bot_instance and bot_instance.session:
            logger.info("üîê –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞...")
            await bot_instance.session.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            from app.core.di import _engine, _redis_client
            if _engine:
                logger.info("üóÑÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                await _engine.dispose()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if _redis_client:
                logger.info("üü• –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
                await _redis_client.aclose()
                
        except Exception as db_error:
            logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {db_error}")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        await asyncio.sleep(0.1)
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    raise KeyboardInterrupt()


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    global bot_instance
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –≠–∫–∑–µ–º–ø–ª—è—Ä: {INSTANCE_ID}")
    logger.info(f"üìã –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {BOT_MODE}")
    logger.info(f"üì° Polling —Ä–∞–∑—Ä–µ—à–µ–Ω: {SET_POLLING}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —è–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π timeout
    try:
        # –°–æ–∑–¥–∞–µ–º Bot —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º - aiogram 3.x —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏–µ–π
        bot_instance = Bot(token=settings.TELEGRAM_TOKEN)
        logger.info("‚úÖ Bot —Å–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bot: {e}")
        raise
    
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(main_router)
    dp.include_router(debug_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
    dp.include_router(avatar_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    dp.include_router(generation_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–∞–ª–µ—Ä–µ—é
    dp.include_router(gallery_main_router)
    dp.include_router(gallery_filter_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.include_router(profile_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    await transcript_main_handler.register_handlers()
    await transcript_processing_handler.register_handlers()
    
    dp.include_router(transcript_main_handler.router)
    dp.include_router(transcript_processing_handler.router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤
    from app.handlers.transcript_processing.paid_transcription_handler import router as paid_transcription_router
    from app.handlers.transcript_processing.promo_handler import router as promo_router
    dp.include_router(paid_transcription_router)
    dp.include_router(promo_router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fallback_router –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–ª—è –ª–æ–≤–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.include_router(fallback_router)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—Å–∫–∞
    # await startup_tasks()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    try:
        if BOT_MODE == "worker":
            logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ background worker...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ background worker –±–µ–∑ polling
            from app.workers.background_worker import BackgroundWorker
            worker = BackgroundWorker()
            await worker.start()
            
        elif BOT_MODE == "polling_standby":
            if SET_POLLING:
                logger.warning("‚ö†Ô∏è STANDBY –ë–û–¢ –ù–ï –î–û–õ–ñ–ï–ù –î–ï–õ–ê–¢–¨ POLLING!")
                logger.info("üí§ Standby –±–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è...")
                # Standby –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç –∏ –Ω–µ –¥–µ–ª–∞–µ—Ç polling
                await asyncio.sleep(float('inf'))
            else:
                logger.info("üí§ Standby –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...")
                await asyncio.sleep(float('inf'))
                
        elif BOT_MODE == "webhook":
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook...")
            # –í —Ä–µ–∂–∏–º–µ webhook –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("üåê Webhook —Ä–µ–∂–∏–º - polling –æ—Ç–∫–ª—é—á–µ–Ω")
            await asyncio.sleep(float('inf'))
            
        else:  # polling mode (default)
            if SET_POLLING:
                logger.info("üì° –ó–∞–ø—É—Å–∫ polling...")
                await dp.start_polling(bot_instance)
            else:
                logger.info("‚ùå Polling –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ SET_POLLING=false")
                logger.info("‚öôÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ worker —Ä–µ–∂–∏–º...")
                from app.workers.background_worker import BackgroundWorker
                worker = BackgroundWorker()
                await worker.start()
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await shutdown_handler()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        logger.info("–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ event loop
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π loop –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            loop = asyncio.get_event_loop()
            if not loop.is_closed():
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                pending = asyncio.all_tasks(loop)
                if pending:
                    logger.info(f"üßπ –û—Ç–º–µ–Ω—è–µ–º {len(pending)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á...")
                    for task in pending:
                        task.cancel()
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    try:
                        loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
                    except Exception:
                        pass
        except Exception as cleanup_error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            pass
        
        logger.info("üèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
