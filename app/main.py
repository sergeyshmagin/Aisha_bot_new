"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from app.core.config import settings
from app.handlers import (
    main_router,
    debug_router,
    transcript_main_handler,
    transcript_processing_handler,
)
from app.handlers.gallery import router as gallery_router  # LEGACY: –°—Ç–∞—Ä–∞—è –≥–∞–ª–µ—Ä–µ—è, –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ generation system
from app.handlers.avatar import router as avatar_router  # –ó–∞–º–µ–Ω—è–µ–º Legacy register_avatar_handlers
from app.handlers.generation.main_handler import router as generation_router  # –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
from app.handlers.fallback import fallback_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

logger = logging.getLogger(__name__)


async def startup_tasks():
    """
    –ó–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–ø—É—Å–∫–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        from app.services.avatar.fal_training_service.startup_checker import startup_checker
        await startup_checker.check_and_restore_monitoring()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(startup_checker.schedule_periodic_checks())
        
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∑–∞–ø—É—Å–∫–∞: {e}")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=settings.TELEGRAM_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(main_router)
    dp.include_router(debug_router)
    dp.include_router(gallery_router)  # LEGACY: –°—Ç–∞—Ä–∞—è –≥–∞–ª–µ—Ä–µ—è (–ø—É—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∑–∞–º–µ–Ω—è–µ—Ç Legacy register_avatar_handlers)
    dp.include_router(avatar_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    dp.include_router(generation_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    await transcript_main_handler.register_handlers()
    await transcript_processing_handler.register_handlers()
    
    dp.include_router(transcript_main_handler.router)
    dp.include_router(transcript_processing_handler.router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fallback_router –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–ª—è –ª–æ–≤–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.include_router(fallback_router)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—Å–∫–∞
    await startup_tasks()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        logger.info("–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
