"""
üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""
import logging
from typing import Dict, Any, Optional, List
from uuid import UUID

from app.core.logger import get_logger

from app.database.models import ImageGeneration, GenerationStatus
from .balance.balance_manager import BalanceManager
from .config.generation_config import GenerationConfig
from .storage.image_storage import ImageStorage
from .core.generation_manager import GenerationManager
from .core.generation_processor import GenerationProcessor
from .style_service import StyleService
from .prompt_processing_service import PromptProcessingService


logger = get_logger(__name__)

# –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from app.core.config import settings
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ constants.py
# GENERATION_COST = settings.IMAGE_GENERATION_COST  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ constants.py

class ImageGenerationService:
    """
    –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    """
    
    def __init__(self):
        self.balance_manager = BalanceManager()
        self.generation_manager = GenerationManager()
        self.generation_processor = GenerationProcessor()
        self.storage = ImageStorage()
        self.style_service = StyleService()
        self.prompt_processor = PromptProcessingService()
    
    async def generate_from_template(
        self,
        user_id: UUID,
        avatar_id: UUID,
        template_id: str,
        quality_preset: str = "balanced",
        aspect_ratio: str = "1:1",
        num_images: int = 1
    ) -> ImageGeneration:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            template_id: ID —à–∞–±–ª–æ–Ω–∞ —Å—Ç–∏–ª—è
            quality_preset: –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            aspect_ratio: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            num_images: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            ImageGeneration: –û–±—ä–µ–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        total_cost = self.balance_manager.calculate_cost(num_images)
        await self.balance_manager.check_and_charge_balance(user_id, total_cost)
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = await self.style_service.get_template_by_id(template_id)
        if not template:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await self.balance_manager.refund_balance(user_id, total_cost)
            raise ValueError(f"–®–∞–±–ª–æ–Ω {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä
        avatar = await self.generation_manager.get_avatar(avatar_id, user_id)
        if not avatar:
            await self.balance_manager.refund_balance(user_id, total_cost)
            raise ValueError(f"–ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not self.generation_manager.is_avatar_ready_for_generation(avatar):
            await self.balance_manager.refund_balance(user_id, total_cost)
            error_msg = self.generation_manager.get_avatar_status_message(avatar)
            raise ValueError(error_msg)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation = ImageGeneration(
            user_id=user_id,
            avatar_id=avatar_id,
            template_id=template_id,
            original_prompt=template.prompt,
            final_prompt=self.generation_manager.build_final_prompt(template.prompt, avatar),
            quality_preset=quality_preset,
            aspect_ratio=aspect_ratio,
            num_images=num_images,
            status=GenerationStatus.PENDING
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await self.generation_manager.save_generation(generation)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–∞
        await self.style_service.increment_template_popularity(template_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await self.generation_processor.start_generation_process(generation)
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É {generation.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return generation
    
    async def generate_custom(
        self,
        user_id: UUID,
        avatar_id: UUID,
        custom_prompt: str,
        quality_preset: str = "balanced",
        aspect_ratio: str = "1:1",
        num_images: int = 1
    ) -> ImageGeneration:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            custom_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            quality_preset: –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            aspect_ratio: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            num_images: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            ImageGeneration: –û–±—ä–µ–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        total_cost = self.balance_manager.calculate_cost(num_images)
        await self.balance_manager.check_and_charge_balance(user_id, total_cost)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ç–∞—Ä
        avatar = await self.generation_manager.get_avatar(avatar_id, user_id)
        if not avatar:
            await self.balance_manager.refund_balance(user_id, total_cost)
            raise ValueError(f"–ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not self.generation_manager.is_avatar_ready_for_generation(avatar):
            await self.balance_manager.refund_balance(user_id, total_cost)
            error_msg = self.generation_manager.get_avatar_status_message(avatar)
            raise ValueError(error_msg)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ GPT
        avatar_type = avatar.training_type.value if avatar.training_type else "portrait"
        prompt_result = await self.prompt_processor.process_prompt(custom_prompt, avatar_type)
        
        processed_prompt = prompt_result["processed"]
        negative_prompt = prompt_result["negative_prompt"]
        logger.info(f"–ü—Ä–æ–º–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: '{custom_prompt[:50]}...' ‚Üí '{processed_prompt[:50]}...'")
        
        if negative_prompt:
            logger.info(f"Negative prompt —Å–æ–∑–¥–∞–Ω: {len(negative_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.info("Negative prompt –≤—Å—Ç—Ä–æ–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç (FLUX Pro –º–æ–¥–µ–ª—å)")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation = ImageGeneration(
            user_id=user_id,
            avatar_id=avatar_id,
            template_id=None,
            original_prompt=custom_prompt,
            final_prompt=self.generation_manager.build_final_prompt(processed_prompt, avatar),
            quality_preset=quality_preset,
            aspect_ratio=aspect_ratio,
            num_images=num_images,
            status=GenerationStatus.PENDING
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await self.generation_manager.save_generation(generation)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await self.generation_processor.start_generation_process(generation)
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return generation
    
    # –ú–µ—Ç–æ–¥—ã –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –º–æ–¥—É–ª—è–º
    async def get_user_generations(self, user_id: UUID, limit: int = 20, offset: int = 0) -> List[ImageGeneration]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.generation_manager.get_user_generations(user_id, limit, offset)
    
    async def get_generation_by_id(self, generation_id: UUID) -> Optional[ImageGeneration]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ ID"""
        return await self.generation_manager.get_generation_by_id(generation_id)
    
    async def get_generations_by_ids(self, generation_ids: List[UUID]) -> List[ImageGeneration]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É ID"""
        return await self.generation_manager.get_generations_by_ids(generation_ids)
    
    async def delete_generation(self, generation_id: UUID) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        
        Args:
            generation_id: ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        generation = await self.generation_manager.get_generation_by_id(generation_id)
        if not generation:
            return False
        
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ MinIO –µ—Å–ª–∏ –µ—Å—Ç—å
        if generation.result_urls:
            await self.storage.delete_images_from_minio(generation.result_urls, generation_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        return await self.generation_manager.delete_generation(generation_id)
    
    async def toggle_favorite(self, generation_id: UUID, user_id: UUID) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return await self.generation_manager.toggle_favorite(generation_id, user_id) 