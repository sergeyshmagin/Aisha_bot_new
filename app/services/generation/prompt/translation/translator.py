"""
–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT API
"""
import re
import aiohttp
from typing import Optional

from app.core.config import settings
from app.core.logger import get_logger
from app.shared.utils.openai import get_openai_headers

logger = get_logger(__name__)


class PromptTranslator:
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.model = "gpt-4o"
    
    async def translate_with_gpt(self, russian_text: str) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ GPT API
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
        """
        if not settings.OPENAI_API_KEY:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
            return self.translate_to_english(russian_text)
        
        system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

üéØ –ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–≤–µ–¥–∏ —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤.

üìã –ü–†–ê–í–ò–õ–ê –ü–ï–†–ï–í–û–î–ê:
1. –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
2. –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç —Ç–æ—á–Ω–æ (–ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞ ‚Üí Burj Khalifa, –î—É–±–∞–π ‚Üí Dubai)
3. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
4. –£—Å–∏–ª–∏–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
5. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥

–ü–†–ò–ú–ï–†–´:
‚Ä¢ "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ –Ω–∞ —Ñ–æ–Ω–µ –ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞" ‚Üí "man in suit in front of Burj Khalifa"
‚Ä¢ "–¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ—Ñ–∏—Å–µ" ‚Üí "business portrait in office"
‚Ä¢ "–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ —É–ª–∏—Ü–µ" ‚Üí "full body on street"

–û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

        try:
            url = "https://api.openai.com/v1/chat/completions"
            headers = get_openai_headers(settings.OPENAI_API_KEY)
            data = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": russian_text}
                ],
                "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                "max_tokens": 200
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        translated = result["choices"][0]["message"]["content"].strip()
                        logger.info(f"[GPT Translation] –£—Å–ø–µ—à–Ω–æ: '{russian_text}' ‚Üí '{translated}'")
                        return translated
                    else:
                        error_text = await response.text()
                        logger.error(f"GPT API error: {error_text}")
                        return self.translate_to_english(russian_text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return self.translate_to_english(russian_text)
    
    def needs_translation(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        cyrillic_pattern = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)
        return bool(cyrillic_pattern.search(text))
    
    def translate_to_english(self, text: str) -> str:
        """
        –ü—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –∫–æ–≥–¥–∞ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        # –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_dict = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            "–º—É–∂—á–∏–Ω–∞": "man",
            "–∂–µ–Ω—â–∏–Ω–∞": "woman", 
            "–¥–µ–≤—É—à–∫–∞": "girl",
            "–ø–∞—Ä–µ–Ω—å": "guy",
            "—á–µ–ª–æ–≤–µ–∫": "person",
            
            # –û–¥–µ–∂–¥–∞
            "–∫–æ—Å—Ç—é–º": "suit",
            "–ø–ª–∞—Ç—å–µ": "dress",
            "—Ä—É–±–∞—à–∫–∞": "shirt",
            "—Ñ—É—Ç–±–æ–ª–∫–∞": "t-shirt",
            "–¥–∂–∏–Ω—Å—ã": "jeans",
            
            # –ú–µ—Å—Ç–∞
            "–æ—Ñ–∏—Å": "office",
            "—É–ª–∏—Ü–∞": "street",
            "–¥–æ–º": "house", 
            "–∫–æ–º–Ω–∞—Ç–∞": "room",
            "–ø–∞—Ä–∫": "park",
            "–∫–∞—Ñ–µ": "cafe",
            
            # –≠–º–æ—Ü–∏–∏ –∏ –ø–æ–∑—ã
            "—É–ª—ã–±–∞–µ—Ç—Å—è": "smiling",
            "—Å–µ—Ä—å–µ–∑–Ω—ã–π": "serious",
            "—Å—Ç–æ–∏—Ç": "standing",
            "—Å–∏–¥–∏—Ç": "sitting",
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            "–ø–æ—Ä—Ç—Ä–µ—Ç": "portrait",
            "–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç": "full body",
            "–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω": "close-up",
            "–ø—Ä–æ—Ñ–∏–ª—å": "profile",
            
            # –û—Å–≤–µ—â–µ–Ω–∏–µ
            "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–µ—Ç": "natural light",
            "—Å—Ç—É–¥–∏–π–Ω—ã–π —Å–≤–µ—Ç": "studio light",
            "–º—è–≥–∫–∏–π —Å–≤–µ—Ç": "soft light",
            
            # –¶–≤–µ—Ç–∞
            "—á–µ—Ä–Ω—ã–π": "black",
            "–±–µ–ª—ã–π": "white",
            "–∫—Ä–∞—Å–Ω—ã–π": "red",
            "—Å–∏–Ω–∏–π": "blue",
            "–∑–µ–ª–µ–Ω—ã–π": "green",
            "–∂–µ–ª—Ç—ã–π": "yellow",
            
            # –í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞ –∏ –ø–æ–≥–æ–¥–∞
            "–∑–∏–º–∞": "winter",
            "–ª–µ—Ç–æ": "summer",
            "–≤–µ—Å–Ω–∞": "spring",
            "–æ—Å–µ–Ω—å": "autumn",
            "—Å–æ–ª–Ω–µ—á–Ω–æ": "sunny",
            "–¥–æ–∂–¥—å": "rain"
        }
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ —Å–ª–æ–≤–∞–º
        words = text.split()
        translated_words = []
        
        for word in words:
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            clean_word = re.sub(r'[^\w]', '', word.lower())
            if clean_word in translation_dict:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                translated = translation_dict[clean_word]
                if word != word.lower():  # –ï—Å–ª–∏ –±—ã–ª–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
                    translated = translated.capitalize()
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                for char in word:
                    if not char.isalnum():
                        translated += char
                translated_words.append(translated)
            else:
                translated_words.append(word)
        
        result = " ".join(translated_words)
        logger.info(f"[Local Translation] '{text}' ‚Üí '{result}'")
        return result 