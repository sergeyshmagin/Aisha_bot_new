"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI Vision API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö —Ñ–æ—Ç–æ
"""
import aiohttp
import base64
from typing import Optional, Dict, Any
import io
from PIL import Image

from app.core.config import settings
from app.core.logger import get_logger
from app.shared.utils.openai import get_openai_headers
from .cinematic_prompt_service import CinematicPromptService

logger = get_logger(__name__)


class ImageAnalysisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.openai_api_key = settings.OPENAI_API_KEY
        self.model = "gpt-4o"  # GPT-4 —Å Vision
        self.max_image_size = 2048  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è API
        self.cinematic_service = CinematicPromptService()
    
    async def analyze_image_for_prompt(
        self, 
        image_data: bytes, 
        avatar_type: str = "portrait",
        user_prompt: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        
        Args:
            image_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ ("portrait")
            user_prompt: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            
        Returns:
            Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        """
        try:
            logger.info(f"[Image Analysis] –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(image_data)} –±–∞–π—Ç)")
            
            if not self.openai_api_key:
                logger.warning("[Image Analysis] –ù–µ—Ç API –∫–ª—é—á–∞ OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
                return await self._fallback_analysis(user_prompt, avatar_type)
            
            # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_image = await self._prepare_image(image_data)
            if not processed_image:
                return await self._fallback_analysis(user_prompt, avatar_type)
            
            # 2. –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            image_base64 = base64.b64encode(processed_image).decode('utf-8')
            
            # 3. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            system_prompt = self._create_cinematic_analysis_prompt(avatar_type, user_prompt)
            
            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT Vision
            analysis_result = await self._call_vision_api(system_prompt, image_base64, user_prompt)
            
            if not analysis_result or not analysis_result.get("prompt"):
                logger.warning("[Image Analysis] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Vision API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._fallback_analysis(user_prompt, avatar_type)
            
            # 5. –°–æ–∑–¥–∞–µ–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –±–∞–∑–µ –∞–Ω–∞–ª–∏–∑–∞
            base_description = analysis_result.get("analysis", "")
            vision_prompt = analysis_result.get("prompt", "")
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_prompt:
                integrated_prompt = f"{vision_prompt}, {user_prompt}"
            else:
                integrated_prompt = vision_prompt
            
            # 6. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
            cinematic_result = await self.cinematic_service.create_cinematic_prompt(
                user_prompt=integrated_prompt,
                avatar_type=avatar_type,
                style_preset="photorealistic"
            )
            
            logger.info(f"[Image Analysis] –°–æ–∑–¥–∞–Ω –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç: {len(cinematic_result['processed'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return {
                "analysis": base_description,
                "prompt": cinematic_result["processed"],
                "original_vision_prompt": vision_prompt,
                "cinematic_enhancement": cinematic_result.get("enhancement_applied", False),
                "user_prompt_integrated": bool(user_prompt),
                "style": "cinematic_photorealistic"
            }
                
        except Exception as e:
            logger.exception(f"[Image Analysis] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return await self._fallback_analysis(user_prompt, avatar_type)
    
    def _create_cinematic_analysis_prompt(self, avatar_type: str, user_prompt: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        user_integration = ""
        if user_prompt:
            user_integration = f"""
üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ó–ê–ü–†–û–°–ê:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "{user_prompt}"

–í–ê–ñ–ù–û: –û–±—ä–µ–¥–∏–Ω–∏ –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ–æ—Ç–æ —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
- –°–û–•–†–ê–ù–Ø–ô: —Ç–∏–ø –∫–∞–¥—Ä–∞, –ø–æ–∑—É, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å —Ñ–æ—Ç–æ
- –ò–ù–¢–ï–ì–†–ò–†–£–ô: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ—Å—Ç—é–º, —Å—Ü–µ–Ω–∞, –ø–µ—Ä—Å–æ–Ω–∞–∂, —Å—Ç–∏–ª—å)"""
        
        return f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 8K –∫–∞—á–µ—Å—Ç–≤–∞.

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∏–ª–µ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π.{user_integration}

üé¨ –°–¢–ò–õ–¨ –ü–†–û–ú–ü–¢–ê (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö):
–î–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã:
1. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**: "high-quality, cinematic, ultra-realistic", "8K resolution", "professional camera"
2. **–¢–∏–ø –∫–∞–¥—Ä–∞**: "close-up portrait"/"full-body portrait"/"medium portrait" 
3. **–û—Å–≤–µ—â–µ–Ω–∏–µ**: "warm directional side lighting during golden hour" / "professional studio lighting"
4. **–ö–æ–º–ø–æ–∑–∏—Ü–∏—é**: "expertly framed with subject positioned centrally"
5. **–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∞**: –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –æ–¥–µ–∂–¥–∞, —Å—Ç–∏–ª—å, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
6. **–ü–æ–∑—É –∏ —Ä–∞–∫—É—Ä—Å**: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ–ª–∞, –≤–∑–≥–ª—è–¥–∞, –∂–µ—Å—Ç–æ–≤
7. **–û–∫—Ä—É–∂–µ–Ω–∏–µ**: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞, –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
8. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**: "shot with 85mm lens", "depth of field", "razor-sharp focus"
9. **–¶–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É**: "rich warm tones, deep golds, luxurious ambers"
10. **–ö–∞—á–µ—Å—Ç–≤–æ**: "natural skin texture", "well-defined eyes", "authentic detail"

üìê –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –ö–ê–î–†–ê (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û):
- –í–∏–¥–Ω—ã –ª–∏ –Ω–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫–∞? ‚Üí FULL-BODY PORTRAIT
- –í–∏–¥–Ω–æ —Ç—É–ª–æ–≤–∏—â–µ –¥–æ –ø–æ—è—Å–∞? ‚Üí HALF-BODY PORTRAIT  
- –¢–æ–ª—å–∫–æ –≥–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏? ‚Üí CLOSE-UP PORTRAIT

üîç –ê–ù–ê–õ–ò–ó –ü–û –ë–õ–û–ö–ê–ú:

**–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –ò –ö–ê–î–†:**
- –ö–∞–∫–æ–π —Ç–æ—á–Ω–æ —Ç–∏–ø –∫–∞–¥—Ä–∞ (–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç/–ø–æ –ø–æ—è—Å/–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω)?
- –ö–∞–∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω —Å—É–±—ä–µ–∫—Ç –≤ –∫–∞–¥—Ä–µ?
- –£–≥–ª—ã —Å—ä–µ–º–∫–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞

**–û–°–í–ï–©–ï–ù–ò–ï:**
- –¢–∏–ø –æ—Å–≤–µ—â–µ–Ω–∏—è (—Å—Ç—É–¥–∏–π–Ω–æ–µ/–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ/–∑–æ–ª–æ—Ç–æ–π —á–∞—Å/–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

**–°–£–ë–™–ï–ö–¢:**
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
- –û–¥–µ–∂–¥–∞ –∏ —Å—Ç–∏–ª—å (—Ü–≤–µ—Ç–∞, —Ñ–∞–∫—Ç—É—Ä—ã, –¥–µ—Ç–∞–ª–∏)
- –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –∏ —ç–º–æ—Ü–∏–∏

**–ü–û–ó–ê –ò –Ø–ó–´–ö –¢–ï–õ–ê:**
- –¢–æ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–∞
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞
- –ñ–µ—Å—Ç—ã –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫

**–û–ö–†–£–ñ–ï–ù–ò–ï:**
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ª–æ–∫–∞—Ü–∏—è
- –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞/—ç–∫—Å—Ç–µ—Ä—å–µ—Ä–∞

**–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò:**
- –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏
- –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞
- –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê JSON:
```json
{{
  "analysis": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
  "prompt": "–ì–æ—Ç–æ–≤—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤"
}}
```

–ü–†–ò–ú–ï–† –°–¢–ò–õ–Ø –ü–†–û–ú–ü–¢–ê:
"A high-quality, cinematic, ultra-realistic close-up portrait photograph, captured by professional medium-format digital camera, in style of super-detailed 8K resolution imagery, featuring warm directional side lighting during golden hour. The composition is expertly framed with subject positioned centrally, featuring a confident man with contemporary styling, positioned with natural elegance and authentic body language, gazing directly at camera with engaging intensity. Set in sophisticated modern environment with clean architectural lines, captured by professional medium-format digital camera, shot with 85mm portrait lens at f/2.8 for optimal sharpness, The depth of field is exceptional ensuring razor-sharp focus on subject, professional bokeh with smooth background transition. The color palette emphasizes rich warm tones and deep golds creating sophisticated atmospheric mood, well-defined eyes with natural catchlight and authentic iris detail, natural skin texture with fine detail and visible pores, sharp focus with optimal detail retention, high-end editorial photography style with cinematic quality."

–°–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç –¢–û–ß–ù–û –≤ —Ç–∞–∫–æ–º —Å—Ç–∏–ª–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π!"""
    
    async def _prepare_image(self, image_data: bytes) -> Optional[bytes]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if max(image.size) > self.max_image_size:
                ratio = self.max_image_size / max(image.size)
                new_size = tuple(int(dim * ratio) for dim in image.size)
                image = image.resize(new_size, Image.Resampling.LANCZOS)
                logger.info(f"[Image Analysis] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ {new_size}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            output = io.BytesIO()
            image.save(output, format='JPEG', quality=85)
            return output.getvalue()
            
        except Exception as e:
            logger.error(f"[Image Analysis] –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    async def _call_vision_api(self, system_prompt: str, image_base64: str, user_prompt: str = None) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç OpenAI Vision API"""
        try:
            url = "https://api.openai.com/v1/chat/completions"
            headers = get_openai_headers(self.openai_api_key)
            
            user_message_text = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
            if user_prompt:
                user_message_text = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç, –ò–ù–¢–ï–ì–†–ò–†–£–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å.

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ó–ê–ü–†–û–°: "{user_prompt}"

–û–±—ä–µ–¥–∏–Ω–∏ –¢–û–ß–ù–£–Æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ–æ—Ç–æ —Å –°–û–î–ï–†–ñ–ê–ù–ò–ï–ú –∑–∞–ø—Ä–æ—Å–∞. –û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""
            
            data = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": user_message_text},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                "temperature": 0.1,
                "max_tokens": 1000
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data, timeout=30) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result["choices"][0]["message"]["content"]
                        
                        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                        try:
                            import json
                            parsed_result = json.loads(content)
                            return parsed_result
                        except json.JSONDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ markdown –±–ª–æ–∫–∞
                            logger.warning("[Vision API] –û—Ç–≤–µ—Ç –Ω–µ –≤ JSON, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ markdown")
                            
                            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ markdown –±–ª–æ–∫–∞ ```json...```
                            import re
                            json_match = re.search(r'```json\s*\n(.*?)\n```', content, re.DOTALL)
                            if json_match:
                                try:
                                    json_content = json_match.group(1)
                                    parsed_result = json.loads(json_content)
                                    logger.info(f"[Vision API] JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ markdown –±–ª–æ–∫–∞")
                                    return parsed_result
                                except json.JSONDecodeError:
                                    logger.warning("[Vision API] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ markdown")
                            
                            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
                            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "prompt": "..."
                            prompt_match = re.search(r'"prompt":\s*"([^"]+)"', content)
                            if prompt_match:
                                extracted_prompt = prompt_match.group(1)
                                return {
                                    "analysis": "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω",
                                    "prompt": extracted_prompt
                                }
                            
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
                            return {
                                "analysis": "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω", 
                                "prompt": content.strip()
                            }
                    else:
                        error_text = await response.text()
                        logger.error(f"[Vision API] –û—à–∏–±–∫–∞ {response.status}: {error_text}")
                        return {}
                        
        except Exception as e:
            logger.error(f"[Vision API] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API: {e}")
            return {}
    
    async def _fallback_analysis(self, user_prompt: Optional[str], avatar_type: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ GPT Vision"""
        logger.info("[Image Analysis] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –∞–Ω–∞–ª–∏–∑–∞")
        
        if user_prompt:
            # –°–æ–∑–¥–∞–µ–º –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            cinematic_result = await self.cinematic_service.create_cinematic_prompt(
                user_prompt=user_prompt,
                avatar_type=avatar_type,
                style_preset="photorealistic"
            )
            
            return {
                "analysis": f"–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: {user_prompt}",
                "prompt": cinematic_result["processed"],
                "cinematic_enhancement": True,
                "style": "cinematic_fallback"
            }
        else:
            # –ë–∞–∑–æ–≤—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            base_prompt = "professional portrait"
            cinematic_result = await self.cinematic_service.create_cinematic_prompt(
                user_prompt=base_prompt,
                avatar_type=avatar_type,
                style_preset="photorealistic"
            )
            
            return {
                "analysis": "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ä–µ—Ç–∞",
                "prompt": cinematic_result["processed"],
                "cinematic_enhancement": True,
                "style": "cinematic_default"
            } 

    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω (–µ—Å—Ç—å OpenAI API –∫–ª—é—á), False –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ fallback —Ä–µ–∂–∏–º–µ
        """
        # –°–µ—Ä–≤–∏—Å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ä–µ–∂–∏–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
        is_vision_available = bool(self.openai_api_key)
        
        if is_vision_available:
            logger.debug("[Image Analysis] –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å GPT-4 Vision API")
        else:
            logger.debug("[Image Analysis] –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ fallback —Ä–µ–∂–∏–º–µ (–±–µ–∑ Vision API)")
        
        return True  # –°–µ—Ä–≤–∏—Å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (fallback –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è API –∫–ª—é—á–∞) 