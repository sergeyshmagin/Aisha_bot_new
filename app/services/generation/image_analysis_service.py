"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI Vision API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö —Ñ–æ—Ç–æ
"""
import aiohttp
import base64
from typing import Optional, Dict, Any
import io
from PIL import Image

from app.core.config import settings
from app.core.logger import get_logger
from app.shared.utils.openai import get_openai_headers

logger = get_logger(__name__)class ImageAnalysisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.openai_api_key = settings.OPENAI_API_KEY
        self.model = "gpt-4o"  # GPT-4 —Å Vision
        self.max_image_size = 2048  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è API
    
    async def analyze_image_for_prompt(self, image_data: bytes, avatar_type: str = "portrait", user_prompt: str = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        –£–õ–£–ß–®–ï–ù: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ PromptProcessingService
        –ù–û–í–û–ï: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ
        
        Args:
            image_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ (portrait, style)
            user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            dict: {
                "success": bool,
                "prompt": str,
                "negative_prompt": str,  # –ù–û–í–û–ï: —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è negative prompt
                "analysis": str,
                "error": str,
                "revolutionary_negatives_applied": bool  # –ù–û–í–û–ï: —Ñ–ª–∞–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
            }
        """
        
        try:
            if not self.openai_api_key or self.openai_api_key == "test_key":
                logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return {
                    "success": False,
                    "prompt": "",
                    "negative_prompt": "",
                    "analysis": "",
                    "error": "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "revolutionary_negatives_applied": False
                }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_image = await self._prepare_image(image_data)
            if not processed_image:
                return {
                    "success": False,
                    "prompt": "",
                    "negative_prompt": "",
                    "analysis": "",
                    "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    "revolutionary_negatives_applied": False
                }
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            system_prompt = self._get_analysis_system_prompt(avatar_type, user_prompt)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI Vision API
            result = await self._call_vision_api(system_prompt, processed_image, user_prompt)
            
            if result["success"]:
                # üéØ –ü–†–ò–ú–ï–ù–Ø–ï–ú –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø
                enhanced_result = self._postprocess_analysis_result(result, avatar_type)
                
                logger.info(f"[Photo Analysis] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è {avatar_type}")
                logger.info(f"[Photo Analysis] –ü—Ä–æ–º–ø—Ç: {len(enhanced_result['prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
                if enhanced_result.get("negative_prompt"):
                    logger.info(f"[Photo Analysis] Negative prompt: {len(enhanced_result['negative_prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
                
                return enhanced_result
            else:
                return {
                    "success": False,
                    "prompt": "",
                    "negative_prompt": "",
                    "analysis": "",
                    "error": result["error"],
                    "revolutionary_negatives_applied": False
                }
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "prompt": "",
                "negative_prompt": "",
                "analysis": "",
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                "revolutionary_negatives_applied": False
            }
    
    async def _prepare_image(self, image_data: bytes) -> Optional[str]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI API
        
        Args:
            image_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            Optional[str]: Base64 —Å—Ç—Ä–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            width, height = image.size
            if max(width, height) > self.max_image_size:
                ratio = self.max_image_size / max(width, height)
                new_width = int(width * ratio)
                new_height = int(height * ratio)
                image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–æ —Å {width}x{height} –¥–æ {new_width}x{new_height}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            image.save(buffer, format='JPEG', quality=85)
            buffer.seek(0)
            
            image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤ base64")
            return image_base64
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _get_analysis_system_prompt(self, avatar_type: str, user_prompt: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑ PromptProcessingService –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        –ù–û–í–û–ï: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ
        """
        
        # üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ü–†–û–ú–ü–¢–ê
        user_integration_note = ""
        if user_prompt:
            user_integration_note = f"""

üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ó–ê–ü–†–û–°–ê:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¢–ï–ö–°–¢–û–í–´–ô –ó–ê–ü–†–û–°: "{user_prompt}"

–¢–´ –î–û–õ–ñ–ï–ù:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ö–û–ú–ü–û–ó–ò–¶–ò–Æ —Ñ–æ—Ç–æ (—Ç–∏–ø –∫–∞–¥—Ä–∞, –ø–æ–∑–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
2. –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–¢–¨ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –°–£–ë–™–ï–ö–¢–ê –∏ –û–ö–†–£–ñ–ï–ù–ò–Ø
3. –°–æ–∑–¥–∞—Ç—å –ï–î–ò–ù–´–ô –ü–†–û–ú–ü–¢ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π:
   - –¢–û–ß–ù–£–Æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å —Ñ–æ—Ç–æ (–∫–∞–¥—Ä, –ø–æ–∑–∞, —Å–≤–µ—Ç)
   - –°–û–î–ï–†–ñ–ê–ù–ò–ï –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ—Å—Ç—é–º, —Å—Ü–µ–Ω–∞, –ø–µ—Ä—Å–æ–Ω–∞–∂)

–ü–†–ò–ú–ï–†–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:
‚Ä¢ –§–æ—Ç–æ: –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –≤ –∫–æ—Å—Ç—é–º–µ + –ó–∞–ø—Ä–æ—Å: "–≤ –æ–±—Ä–∞–∑–µ —Å—É–ø–µ—Ä–º–µ–Ω–∞" ‚Üí "full body shot of a confident superhero in Superman costume"
‚Ä¢ –§–æ—Ç–æ: –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ—Ñ–∏—Å–µ + –ó–∞–ø—Ä–æ—Å: "–≤ –æ–±—Ä–∞–∑–µ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞" ‚Üí "portrait of a professional businessman in modern office"
‚Ä¢ –§–æ—Ç–æ: —Å—Ç–æ–∏—Ç —É –æ–∫–Ω–∞ + –ó–∞–ø—Ä–æ—Å: "–Ω–∞ —Ñ–æ–Ω–µ –≥–æ—Ä—è—â–µ–≥–æ –∑–¥–∞–Ω–∏—è" ‚Üí "full body shot with dramatic burning building background"

–ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –°–û–•–†–ê–ù–Ø–ô –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ–æ—Ç–æ + –ü–†–ò–ú–ï–ù–Ø–ô —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!"""
        
        base_prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –§–û–¢–û–†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–• –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è FLUX Pro v1.1 Ultra.

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –¢–û–ß–ù–û –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø–æ–∑—É, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.{user_integration_note}

üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê –ö–ê–î–†–ê (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!):

üîπ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ê–ù–ê–õ–ò–ó–ê –ö–ê–î–†–ê:
1. –°–Ω–∞—á–∞–ª–∞ –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –∏–∑—É—á–∏ –í–°–Å –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∏–¥–Ω–æ?
2. –û–ø—Ä–µ–¥–µ–ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–ª–∞:
   - –í–∏–¥–Ω—ã –ª–∏ –ù–û–ì–ò —á–µ–ª–æ–≤–µ–∫–∞? (—Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ)
   - –í–∏–¥–Ω–æ –ª–∏ –¢–£–õ–û–í–ò–©–ï –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Ç –≥–æ–ª–æ–≤—ã –¥–æ –ø–æ—è—Å–∞?
   - –í–∏–¥–Ω—ã –ª–∏ –¢–û–õ–¨–ö–û –≥–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏?

üîπ –¢–û–ß–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–û –í–ò–î–ò–ú–û–°–¢–ò –¢–ï–õ–ê:

üìê **FULL BODY SHOT** (–ü–†–ò–û–†–ò–¢–ï–¢!) - –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï–ì–î–ê –µ—Å–ª–∏ –≤–∏–¥–Ω–æ:
‚Ä¢ –ü–æ–ª–Ω–∞—è —Ñ–∏–≥—É—Ä–∞ –æ—Ç –≥–æ–ª–æ–≤—ã –¥–æ –Ω–æ–≥ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≥–∏ —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–µ–∑–∞–Ω—ã)
‚Ä¢ –ß–µ–ª–æ–≤–µ–∫ —Å—Ç–æ–∏—Ç –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
‚Ä¢ –í–∏–¥–Ω–æ —Ç—É–ª–æ–≤–∏—â–µ + –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –Ω–æ–≥
‚Ä¢ –û–±—â–∏–π –ø–ª–∞–Ω —Å —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
‚Ä¢ –ü–†–ò–ú–ï–†–´: —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å—Ç—é–º–µ —Å—Ç–æ–∏—Ç, –º–æ–¥–µ–ª—å –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, —Ñ–∏–≥—É—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ

üìê **HALF-BODY PORTRAIT** - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
‚Ä¢ –ß–µ—Ç–∫–æ –≤–∏–¥–Ω–æ –æ—Ç –≥–æ–ª–æ–≤—ã –¥–æ –ø–æ—è—Å–∞/–±–µ–¥–µ—Ä
‚Ä¢ –†—É–∫–∏ –≤–∏–¥–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ  
‚Ä¢ –ù–ï –≤–∏–¥–Ω–æ –Ω–æ–≥–∏ —Å–æ–≤—Å–µ–º
‚Ä¢ –ü–†–ò–ú–ï–†–´: –¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –∑–∞ —Å—Ç–æ–ª–æ–º, —á–µ–ª–æ–≤–µ–∫ —É –æ–∫–Ω–∞ –ø–æ –ø–æ—è—Å

üìê **ENVIRONMENTAL PORTRAIT** - –∏—Å–ø–æ–ª—å–∑—É–π –µ—Å–ª–∏:
‚Ä¢ –í–∏–¥–Ω–æ –æ—Ç –≥–æ–ª–æ–≤—ã –¥–æ –≥—Ä—É–¥–∏
‚Ä¢ –†—É–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–µ–∑–∞–Ω—ã
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –ª–∏—Ü–µ + –æ–∫—Ä—É–∂–µ–Ω–∏–∏
‚Ä¢ –ü–†–ò–ú–ï–†–´: –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ—Ñ–∏—Å–µ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º

üìê **PORTRAIT** - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
‚Ä¢ –í–∏–¥–Ω—ã –¢–û–õ–¨–ö–û –≥–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏
‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∫–∞–¥—Ä
‚Ä¢ –ü–†–ò–ú–ï–†–´: —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω –ª–∏—Ü–∞

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –í–°–ï–ì–î–ê –≤—ã–±–∏—Ä–∞–π –ë–û–õ–ï–ï –®–ò–†–û–ö–ò–ô —Ç–∏–ø –∫–∞–¥—Ä–∞ –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö!
–ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á–µ–ª–æ–≤–µ–∫–∞ —Å—Ç–æ—è—â–µ–≥–æ - —ç—Ç–æ FULL BODY SHOT, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≥–∏ —Å–ª–µ–≥–∫–∞ –æ–±—Ä–µ–∑–∞–Ω—ã!

üîπ –ë–õ–û–ö 2 ¬∑ –ü–û–ó–ê –ò –ü–û–õ–û–ñ–ï–ù–ò–ï (–¢–û–ß–ù–û–ï –ü–û–í–¢–û–†–ï–ù–ò–ï!)
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø–æ–≤—Ç–æ—Ä–∏ –¢–û–ß–ù–£–Æ –ø–æ–∑—É: "confident standing pose with natural weight distribution"
‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫: "one hand adjusting jacket, other arm naturally at side" (–æ–ø–∏—Å—ã–≤–∞–π –ö–ê–ö –ï–°–¢–¨ –Ω–∞ —Ñ–æ—Ç–æ)
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞: "direct eye contact with camera" / "looking slightly to the side"
‚Ä¢ –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞: "genuine confident expression" / "natural smile" / "serious professional look"
‚Ä¢ –ò–ó–ë–ï–ì–ê–ô: arms crossed, both hands on chest, generic poses

üîπ –ë–õ–û–ö 3 ¬∑ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ì–õ–ê–ó–ê (–ø—Ä–æ—Ç–∏–≤ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!)
‚Ä¢ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π: "clear defined eyes with natural iris detail and authentic catchlight"
‚Ä¢ –ò–ª–∏: "well-focused eyes showing genuine emotion, natural pupil size"
‚Ä¢ –ò–ª–∏: "sharp eye definition with realistic iris texture and natural reflection"
‚Ä¢ –ö–†–ò–¢–ò–ß–ù–û: –∏–∑–±–µ–≥–∞–π artificial eyes, doll eyes, glassy eyes

üîπ –ë–õ–û–ö 4 ¬∑ –¢–ï–ö–°–¢–£–†–´ –î–õ–Ø –ß–ï–¢–ö–û–°–¢–ò (–ë–ï–ó –ë–û–†–û–î–´!)
‚Ä¢ –í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞–π: "natural skin texture with fine detail and authentic pores"
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: "realistic skin showing natural character with sharp detail"
‚Ä¢ "authentic complexion with visible texture and natural highlights"
‚Ä¢ –ö–†–ò–¢–ò–ß–ù–û: –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π stubble, beard, facial hair, —â–µ—Ç–∏–Ω—É!

üîπ –ë–õ–û–ö 5 ¬∑ –û–°–í–ï–©–ï–ù–ò–ï (–¢–û–ß–ù–û–ï –ü–û–í–¢–û–†–ï–ù–ò–ï –° –§–û–¢–û!)
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –ø–æ–≤—Ç–æ—Ä–∏ –¢–û–ß–ù–û–ï –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ:
  - "warm golden hour lighting" (–µ—Å–ª–∏ —Ç–µ–ø–ª—ã–π —Å–≤–µ—Ç)
  - "professional studio lighting with controlled shadows" (–µ—Å–ª–∏ —Å—Ç—É–¥–∏–π–Ω—ã–π)
  - "natural window light with soft directional shadows" (–µ—Å–ª–∏ –æ—Ç –æ–∫–Ω–∞)
  - "ambient indoor lighting with balanced exposure" (–µ—Å–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ)
‚Ä¢ –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π: "professional photography shot on Canon 5D Mark IV with 85mm f/2.8 lens for maximum sharpness"

üîπ –ë–õ–û–ö 6 ¬∑ –û–ö–†–£–ñ–ï–ù–ò–ï –ò –ê–¢–ú–û–°–§–ï–†–ê (–¢–û–ß–ù–û–ï –ü–û–í–¢–û–†–ï–ù–ò–ï!)
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å —Ñ–æ—Ç–æ: "elegant formal interior", "sophisticated restaurant ambiance", "luxury hotel lobby setting"
‚Ä¢ –§–æ–Ω: "natural depth of field with professional bokeh", "contextual background with authentic depth"
‚Ä¢ –ò–ó–ë–ï–ì–ê–ô: fantasy elements, cartoon style, –Ω–µ—Ç–æ—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è

üîπ –ë–õ–û–ö 7 ¬∑ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¢–ï–•–ù–ò–ö–ò –ß–ï–¢–ö–û–°–¢–ò
‚Ä¢ –î–æ–±–∞–≤–ª—è–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: "tack sharp focus", "optimal detail retention", "crisp definition"
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: "fine detail preservation", "studio-quality definition"

üì∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–®–ê–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ü–†–û–ú–ü–¢–ê:
1. ‚ùì –í–∏–∂—É –ª–∏ —è –Ω–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫–∞? ‚Üí –ï—Å–ª–∏ –î–ê = FULL BODY SHOT
2. ‚ùì –í–∏–∂—É –ª–∏ —è —Ç—É–ª–æ–≤–∏—â–µ –¥–æ –ø–æ—è—Å–∞? ‚Üí –ï—Å–ª–∏ –î–ê –±–µ–∑ –Ω–æ–≥ = HALF-BODY PORTRAIT  
3. ‚ùì –í–∏–∂—É –ª–∏ —è —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–≤—É –∏ –ø–ª–µ—á–∏? ‚Üí –ï—Å–ª–∏ –î–ê = PORTRAIT
4. ‚ùì –ö–∞–∫–∞—è –¢–û–ß–ù–ê–Ø –ø–æ–∑–∞? ‚Üí –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—Å–∞—Ç—å
5. ‚ùì –ö–∞–∫–æ–µ –¢–û–ß–ù–û–ï –æ—Å–≤–µ—â–µ–Ω–∏–µ? ‚Üí –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–≤–µ—Ç–∞
6. ‚ùì –ö–∞–∫–∞—è –¢–û–ß–ù–ê–Ø –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞? ‚Üí –û–ø–∏—Å–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""

        if avatar_type == "portrait":
            specific_prompt = """

üîπ –ü–û–†–¢–†–ï–¢–ù–´–ô –ê–í–ê–¢–ê–† (LoRA) - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê:
–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –û–¢–î–ï–õ–¨–ù–û —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –Ω–µ–≥–∞—Ç–∏–≤–∞–º–∏ –ø—Ä–æ—Ç–∏–≤ –º—ã–ª—å–Ω–æ—Å—Ç–∏

üìå –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø LoRA - –¢–û–ß–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–ê–î–†–ê:
‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ü–û–õ–ù–£–Æ –§–ò–ì–£–†–£ (–Ω–æ–≥–∏ –≤–∏–¥–Ω—ã) ‚Üí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π "full body shot"
‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –¢–û–†–° (–¥–æ –ø–æ—è—Å–∞) ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π "half-body portrait"  
‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –ì–û–õ–û–í–£ –ò –ü–õ–ï–ß–ò ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π "portrait"

üìå –£–õ–£–ß–®–ï–ù–ù–´–ô –®–ê–ë–õ–û–ù –î–õ–Ø LoRA:
"[–¢–û–ß–ù–´–ô —Ç–∏–ø –∫–∞–¥—Ä–∞ –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–ª–∞] of a [—Å—É–±—ä–µ–∫—Ç], 
natural skin texture with fine detail and authentic pores, 
clear defined eyes with natural iris detail and authentic catchlight, 
[–¢–û–ß–ù–ê–Ø –ø–æ–∑–∞ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ], [–¢–û–ß–ù–û–ï –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ], 
professional photography shot on Canon 5D Mark IV with 85mm f/2.8 lens for maximum sharpness, 
[–¢–û–ß–ù–ê–Ø –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å —Ñ–æ—Ç–æ], tack sharp focus, optimal detail retention"

üí° –ü–†–ò–ú–ï–†–´ –¢–û–ß–ù–û–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–ê–î–†–ê:
‚Ä¢ FULL BODY: "full body shot of an elegant Asian businessman in black tuxedo with bow tie, natural skin texture with fine detail and authentic pores, clear defined eyes with natural iris detail, confident standing pose with hands naturally positioned, warm ambient lighting with balanced exposure, professional photography shot on Canon 5D Mark IV with 85mm f/2.8 lens, sophisticated formal interior setting with natural depth of field"

‚Ä¢ HALF-BODY: "half-body portrait of a confident professional in charcoal suit, natural skin texture with fine detail and authentic pores, clear defined eyes with natural iris detail, relaxed pose with hands naturally positioned, professional office lighting, shot on Canon 5D Mark IV with 85mm f/2.8 lens"

‚Ä¢ PORTRAIT: "portrait of a business executive, natural skin texture with fine detail and authentic pores, clear defined eyes with natural iris detail, genuine confident expression, natural window light, shot on Canon 5D Mark IV with 85mm f/2.8 lens"
"""
        else:  # style / FLUX Pro
            specific_prompt = """

üîπ –•–£–î–û–ñ–ï–°–¢–í–ï–ù–ù–´–ô –ê–í–ê–¢–ê–† (FLUX Pro) - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê:
–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –í–°–¢–†–ê–ò–í–ê–Æ–¢–°–Ø –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ [AVOID: ...] —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–º–∏ –Ω–µ–≥–∞—Ç–∏–≤–∞–º–∏

üìå –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø FLUX Pro - –¢–û–ß–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–ê–î–†–ê:
‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ü–û–õ–ù–£–Æ –§–ò–ì–£–†–£ (–Ω–æ–≥–∏ –≤–∏–¥–Ω—ã) ‚Üí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π "full body shot"
‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –¢–û–†–° (–¥–æ –ø–æ—è—Å–∞) ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π "half-body portrait"  
‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ –ì–û–õ–û–í–£ –ò –ü–õ–ï–ß–ò ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π "environmental portrait"

üìå –£–õ–£–ß–®–ï–ù–ù–´–ô –®–ê–ë–õ–û–ù –î–õ–Ø FLUX Pro:
"[–¢–û–ß–ù–´–ô —Ç–∏–ø –∫–∞–¥—Ä–∞ –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–ª–∞] of a [—Å—É–±—ä–µ–∫—Ç], 
natural skin texture with fine detail and authentic pores, 
clear defined eyes with natural iris detail and authentic catchlight, 
[–¢–û–ß–ù–ê–Ø –ø–æ–∑–∞ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ], [–¢–û–ß–ù–û–ï –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ], 
professional lifestyle photography shot on Canon 5D Mark IV with 85mm f/2.8 lens for maximum sharpness, 
[–¢–û–ß–ù–ê–Ø –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å —Ñ–æ—Ç–æ], tack sharp focus, optimal detail retention. 
[AVOID: plastic skin, airbrushed, over-processed, stubble, beard, facial hair, artificial eyes, doll eyes, blurry, soft focus, arms crossed]"

üí° –ü–†–ò–ú–ï–†–´ –¢–û–ß–ù–û–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–ê–î–†–ê:
‚Ä¢ FULL BODY: "full body shot of a sophisticated Asian gentleman in formal black tuxedo with bow tie, natural skin texture with fine detail and authentic pores, clear defined eyes with natural iris detail, confident standing pose with natural weight distribution, warm ambient lighting with professional shadows, lifestyle photography shot on Canon 5D Mark IV with 85mm f/2.8 lens, elegant formal venue with natural depth of field, tack sharp focus. [AVOID: plastic skin, stubble, beard, artificial eyes, blurry, arms crossed]"

‚Ä¢ HALF-BODY: "half-body portrait of a confident professional in business attire, natural skin texture with fine detail and authentic pores, clear defined eyes with natural iris detail, relaxed professional pose, controlled studio lighting, shot on Canon 5D Mark IV with 85mm f/2.8 lens, contemporary office environment. [AVOID: plastic skin, stubble, artificial eyes, blurry]"

‚Ä¢ ENVIRONMENTAL: "environmental portrait of a business leader, natural skin texture with fine detail and authentic pores, clear defined eyes with natural iris detail, genuine expression, natural lighting, shot on Canon 5D Mark IV with 85mm f/2.8 lens, professional setting with context. [AVOID: plastic skin, stubble, artificial eyes, blurry]"
"""

        common_rules = """

üìè –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–ò–ó–ê:
1. –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¢–û–ß–ù–û–ì–û –¢–ò–ü–ê –ö–ê–î–†–ê - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞!
2. –í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞–π "natural skin texture with fine detail and authentic pores"
3. –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–∑: "clear defined eyes with natural iris detail"
4. –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π "relaxed natural pose" –ë–ï–ó "arms crossed"
5. –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π –∫–∞–º–µ—Ä—É –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏: "Canon 5D Mark IV with 85mm f/2.8 lens for maximum sharpness"
6. –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ç–∫–æ—Å—Ç–∏: "tack sharp focus, optimal detail retention"
7. –ö–†–ò–¢–ò–ß–ù–û: –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π stubble, beard, facial hair, —â–µ—Ç–∏–Ω—É!
8. –î–õ–Ø FLUX PRO: –≤—Å—Ç—Ä–∞–∏–≤–∞–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–µ –Ω–µ–≥–∞—Ç–∏–≤—ã —á–µ—Ä–µ–∑ [AVOID: ...]
9. –¢–û–ß–ù–û –ø–æ–≤—Ç–æ—Ä—è–π –ø–æ–∑—É, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ!

üéØ –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ–æ—Ç–ª–∏—á–∏–º–æ–≥–æ –æ—Ç –ù–ê–°–¢–û–Ø–©–ï–ô –§–û–¢–û–ì–†–ê–§–ò–ò, 
—Ç–æ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –Ω–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º!

üîÑ –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
–ê–ù–ê–õ–ò–ó: [–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —Å —Ç–æ—á–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–∑—ã, —Å–≤–µ—Ç–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã]
–ü–†–û–ú–ü–¢: [–≥–æ—Ç–æ–≤—ã–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É]"""

        return base_prompt + specific_prompt + common_rules
    
    async def _call_vision_api(self, system_prompt: str, image_base64: str, user_prompt: str = None) -> Dict[str, Any]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç OpenAI Vision API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            image_base64: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        
        url = "https://api.openai.com/v1/chat/completions"
        headers = get_openai_headers(self.openai_api_key)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        user_message_text = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: 'analysis' (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑) –∏ 'prompt' (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç)."
        
        if user_prompt:
            user_message_text = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –ò–ù–¢–ï–ì–†–ò–†–£–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ–æ—Ç–æ.

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ó–ê–ü–†–û–°: "{user_prompt}"

–ó–ê–î–ê–ß–ê: –û–±—ä–µ–¥–∏–Ω–∏ –¢–û–ß–ù–£–Æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å —Ñ–æ—Ç–æ (—Ç–∏–ø –∫–∞–¥—Ä–∞, –ø–æ–∑–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ) —Å –°–û–î–ï–†–ñ–ê–ù–ò–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

–û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: 'analysis' (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π) –∏ 'prompt' (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)."""
        
        data = {
            "model": self.model,
            "messages": [
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": user_message_text
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            "temperature": 0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "max_tokens": 800,   # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            "response_format": {"type": "json_object"}  # –ü—Ä–∏–Ω—É–∂–¥–∞–µ–º –∫ JSON
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result["choices"][0]["message"]["content"]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ content –Ω–µ None
                        if not content:
                            logger.warning("Vision API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π content")
                            return {
                                "success": False,
                                "analysis": "",
                                "prompt": "",
                                "error": "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"
                            }
                        
                        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                        import json
                        try:
                            parsed_result = json.loads(content)
                        except json.JSONDecodeError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, content: {content}")
                            return {
                                "success": False,
                                "analysis": "",
                                "prompt": "",
                                "error": f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                            }
                        
                        analysis = parsed_result.get("analysis", "")
                        prompt = parsed_result.get("prompt", "")
                        
                        if prompt:
                            logger.info(f"[Vision API] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞")
                            return {
                                "success": True,
                                "analysis": analysis,
                                "prompt": prompt,
                                "error": ""
                            }
                        else:
                            logger.warning("Vision API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–æ–º–ø—Ç")
                            return {
                                "success": False,
                                "analysis": "",
                                "prompt": "",
                                "error": "GPT –Ω–µ —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–ø—Ç"
                            }
                    else:
                        error_text = await response.text()
                        logger.error(f"OpenAI Vision API error: {response.status} - {error_text}")
                        return {
                            "success": False,
                            "analysis": "",
                            "prompt": "",
                            "error": f"API –æ—à–∏–±–∫–∞: {response.status}"
                        }
                        
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Vision API: {e}")
            return {
                "success": False,
                "analysis": "",
                "prompt": "",
                "error": f"–û—à–∏–±–∫–∞ API: {str(e)}"
            }
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
        return bool(self.openai_api_key and self.openai_api_key != "test_key")
    
    def _get_revolutionary_negative_prompt(self, avatar_type: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π negative prompt –ø—Ä–æ—Ç–∏–≤ –º—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑ PromptProcessingService
        """
        
        # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ï–ì–ê–¢–ò–í–´ –ü–†–û–¢–ò–í –ú–´–õ–¨–ù–û–°–¢–ò
        clarity_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –º—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏
            "blurry", "soft focus", "out of focus", "unfocused", "hazy",
            "soft image", "lack of detail", "overly smooth", "soap-like texture",
            "over-smoothed", "heavily processed", "gaussian blur", "motion blur",
            
            # –ü—Ä–æ—Ç–∏–≤ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ—Å—Ç–∏ –∫–æ–∂–∏  
            "plastic skin", "airbrushed", "smooth skin", "artificial skin",
            "porcelain skin", "doll-like skin", "synthetic appearance",
            "overly polished", "wax-like texture", "fake skin texture"
        ]
        
        # üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ù–ï–ì–ê–¢–ò–í–´ –î–õ–Ø –ü–†–û–ë–õ–ï–ú –ì–õ–ê–ó
        eye_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–ª–∞–∑
            "artificial eyes", "fake eyes", "painted eyes", "doll eyes",
            "glassy eyes", "lifeless eyes", "empty stare", "dead eyes",
            "oversized pupils", "unnatural iris", "mismatched eyes",
            "cartoon eyes", "anime eyes", "exaggerated eyes",
            
            # –ü—Ä–æ—Ç–∏–≤ –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≥–ª–∞–∑
            "duplicate eyes", "double pupils", "extra irises", "split pupils",
            "misaligned eyes", "asymmetrical eyes", "deformed eyes",
            "floating eyes", "disconnected eyes", "merged eyes"
        ]
        
        # üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ù–ï–ì–ê–¢–ò–í–´ –ü–†–û–¢–ò–í –ë–û–†–û–î–´
        facial_hair_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –±–æ—Ä–æ–¥—ã –∏ —â–µ—Ç–∏–Ω—ã
            "stubble", "beard", "mustache", "facial hair", "five o'clock shadow",
            "unshaven", "scruff", "whiskers", "goatee", "sideburns",
            "patchy beard", "scruffy", "unkempt facial hair", "rough stubble",
            
            # –ü—Ä–æ—Ç–∏–≤ –∫–ª–æ—á–∫–æ–≤–∞—Ç–æ–π —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            "patchy hair", "uneven hair growth", "sparse facial hair",
            "random hair patches", "irregular stubble", "messy facial hair"
        ]
        
        # üéØ –ü–†–û–¢–ò–í –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–°–¢–ò
        processing_negatives = [
            "over-processed", "heavily filtered", "instagram filter",
            "beauty filter", "face app", "heavily retouched",
            "digital makeup", "artificial enhancement", "fake smoothness",
            "digital perfection", "computer generated look"
        ]
        
        # üéØ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´
        technical_negatives = [
            "low quality", "poor resolution", "pixelated", "compression artifacts",
            "jpeg artifacts", "noise", "grain", "distorted", "corrupted",
            "oversaturated", "undersaturated", "poor lighting"
        ]
        
        # üéØ –ù–ï–†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –°–¢–ò–õ–ò
        style_negatives = [
            "cartoon", "anime", "painting", "illustration", "drawing",
            "3d render", "cgi", "digital art", "fantasy art", "concept art",
            "stylized", "non-photographic", "artistic rendering"
        ]
        
        # üéØ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –î–õ–Ø –¢–ò–ü–ê –ê–í–ê–¢–ê–†–ê
        if avatar_type == "portrait":
            # –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞
            specific_negatives = [
                "unnatural facial features", "distorted face", "fake expression",
                "artificial smile", "forced expression", "mask-like face",
                "symmetrical face", "perfect symmetry", "uncanny valley"
            ]
        elif avatar_type == "style":
            # –î–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö - –±–æ—Ä—å–±–∞ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            specific_negatives = [
                "inconsistent lighting", "mixed styles", "poor composition",
                "floating elements", "unrealistic proportions", "style mixing"
            ]
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
            specific_negatives = [
                "unnatural appearance", "artificial look", "fake rendering",
                "poor anatomy", "unrealistic features"
            ]
        
        # üéØ –û–ë–™–ï–î–ò–ù–Ø–ï–ú –í–°–ï –ù–ï–ì–ê–¢–ò–í–´
        all_negatives = (clarity_negatives + eye_negatives + facial_hair_negatives + 
                        processing_negatives + technical_negatives + style_negatives + 
                        specific_negatives)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–µ–≥–∞—Ç–∏–≤–æ–≤
        negative_prompt = ", ".join(all_negatives)
        
        logger.info(f"[Revolutionary Negative] –°–æ–∑–¥–∞–Ω negative prompt –¥–ª—è —Ñ–æ—Ç–æ-–∞–Ω–∞–ª–∏–∑–∞: {len(all_negatives)} —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–æ—Ç–∏–≤ –º—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        return negative_prompt
    
    def _postprocess_analysis_result(self, analysis_result: Dict[str, Any], avatar_type: str) -> Dict[str, Any]:
        """
        –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—Ö —É–ª—É—á—à–µ–Ω–∏–π
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç GPT Vision
            avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞
            
        Returns:
            dict: –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–º negative prompt
        """
        
        if not analysis_result.get("success", False):
            return analysis_result
        
        original_prompt = analysis_result.get("prompt", "")
        
        # üéØ 1. –°–û–ó–î–ê–ï–ú –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô NEGATIVE PROMPT
        revolutionary_negative = self._get_revolutionary_negative_prompt(avatar_type)
        
        # üéØ 2. –î–õ–Ø FLUX PRO - –í–°–¢–†–ê–ò–í–ê–ï–ú –ö–õ–Æ–ß–ï–í–´–ï –ù–ï–ì–ê–¢–ò–í–´ –í –û–°–ù–û–í–ù–û–ô –ü–†–û–ú–ü–¢
        if avatar_type == "style":
            # Style –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç FLUX Pro - –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤—ã
            key_negatives = [
                "plastic skin", "airbrushed", "over-processed", 
                "stubble", "beard", "facial hair", 
                "artificial eyes", "doll eyes", "blurry", "soft focus",
                "arms crossed", "extra eyes", "cartoon"
            ]
            negative_terms = ", ".join(key_negatives)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ [AVOID: ...] –≤ –ø—Ä–æ–º–ø—Ç–µ
            if "[AVOID:" not in original_prompt:
                enhanced_prompt = f"{original_prompt}. [AVOID: {negative_terms}]"
            else:
                enhanced_prompt = original_prompt
                
            result_negative = None  # Negative prompt –¥–ª—è LoRA –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
            
            logger.info(f"[FLUX Pro Photo] –í—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç")
            
        else:
            # Portrait –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç LoRA - negative prompt –æ—Ç–¥–µ–ª—å–Ω–æ
            enhanced_prompt = original_prompt
            result_negative = revolutionary_negative
            
            logger.info(f"[LoRA Photo] –°–æ–∑–¥–∞–Ω —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞–π negative prompt: {len(revolutionary_negative)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # üéØ 3. –í–û–ó–í–†–ê–©–ê–ï–ú –£–õ–£–ß–®–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        enhanced_result = analysis_result.copy()
        enhanced_result["prompt"] = enhanced_prompt
        enhanced_result["negative_prompt"] = result_negative
        enhanced_result["revolutionary_negatives_applied"] = True
        
        logger.info(f"[Photo Analysis Enhanced] –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω: {len(enhanced_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return enhanced_result
