"""
–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""
import aiohttp
from typing import Optional, Dict, Any
import time
import random
import re
import json

from app.core.config import settings
from app.core.logger import get_logger
from app.shared.utils.openai import get_openai_headers

logger = get_logger(__name__)


class PromptProcessingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self):
        self.openai_api_key = settings.OPENAI_API_KEY
        self.model = "gpt-4o"
    
    async def process_prompt(self, user_prompt: str, avatar_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è FLUX Pro v1.1 Ultra
        –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —à–ø–∞—Ä–≥–∞–ª–∫–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π negative prompt
        
        Args:
            user_prompt: –ü—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_type: –¢–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ (portrait, style, etc.)
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å processed prompt –∏ negative prompt
        """
        start_time = time.time()
        
        try:
            logger.info(f"[Prompt Processing] –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞: '{user_prompt[:50]}...'")
            
            # üéØ 1. –ü–ï–†–ï–í–û–î–ò–ú –ß–ï–†–ï–ó GPT API –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self._needs_translation(user_prompt):
                translated_prompt = await self._translate_with_gpt(user_prompt)
                logger.info(f"[GPT Translation] '{user_prompt}' ‚Üí '{translated_prompt}'")
            else:
                translated_prompt = user_prompt
            
            # üéØ 2. –°–û–ó–î–ê–ï–ú –î–ï–¢–ê–õ–¨–ù–´–ô –§–û–¢–û–†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –ü–†–û–ú–ü–¢ 
            processed_prompt = await self.create_enhanced_detailed_prompt(translated_prompt, avatar_type)
            
            # üéØ 3. –°–û–ó–î–ê–ï–ú –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô NEGATIVE PROMPT
            negative_prompt = self.get_negative_prompt(avatar_type)
            
            # üéØ 4. –î–õ–Ø FLUX PRO - –í–°–¢–†–ê–ò–í–ê–ï–ú –ù–ï–ì–ê–¢–ò–í–´ –í –û–°–ù–û–í–ù–û–ô –ü–†–û–ú–ü–¢
            # LEGACY: Style –∞–≤–∞—Ç–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            # if avatar_type == "style":
            #     # Style –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç FLUX Pro - –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤—ã
            #     key_negatives = [
            #         "plastic skin", "airbrushed", "over-processed", 
            #         "extra fingers", "deformed hands", "multiple faces",
            #         "cartoon", "cgi", "ultra-detailed", "8k"
            #     ]
            #     negative_terms = ", ".join(key_negatives)
            #     final_prompt = f"{processed_prompt}. [AVOID: {negative_terms}]"
            #     result_negative = None
            #     
            #     logger.info(f"[FLUX Pro] –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç")
            #     
            # else:
            
            # –¢–µ–ø–µ—Ä—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç LoRA (–ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ) - negative prompt –æ—Ç–¥–µ–ª—å–Ω–æ
            final_prompt = processed_prompt
            result_negative = negative_prompt
            
            logger.info(f"[LoRA] Negative prompt —Å–æ–∑–¥–∞–Ω: {len(negative_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            processing_time = time.time() - start_time
            
            # ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢
            result = {
                "original": user_prompt,
                "processed": final_prompt,
                "negative_prompt": result_negative,
                "translation_needed": self._needs_translation(user_prompt),
                "processing_time": processing_time
            }
            
            logger.info(f"[Prompt Processing] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {processing_time:.2f}—Å")
            logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {len(final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return result
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            return {
                "original": user_prompt,
                "processed": user_prompt,
                "negative_prompt": self.get_negative_prompt(avatar_type),
                "translation_needed": False,
                "processing_time": time.time() - start_time
            }

    async def _translate_with_gpt(self, russian_text: str) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ GPT API
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
        """
        if not settings.OPENAI_API_KEY:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
            return self._translate_to_english(russian_text)
        
        system_prompt = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

üéØ –ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–≤–µ–¥–∏ —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤.

üìã –ü–†–ê–í–ò–õ–ê –ü–ï–†–ï–í–û–î–ê:
1. –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
2. –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç —Ç–æ—á–Ω–æ (–ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞ ‚Üí Burj Khalifa, –î—É–±–∞–π ‚Üí Dubai)
3. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
4. –£—Å–∏–ª–∏–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
5. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥

–ü–†–ò–ú–ï–†–´:
‚Ä¢ "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ –Ω–∞ —Ñ–æ–Ω–µ –ë—É—Ä–¥–∂ –•–∞–ª–∏—Ñ–∞" ‚Üí "man in suit in front of Burj Khalifa"
‚Ä¢ "–¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –æ—Ñ–∏—Å–µ" ‚Üí "business portrait in office"
‚Ä¢ "–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞ —É–ª–∏—Ü–µ" ‚Üí "full body on street"

–û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

        try:
            url = "https://api.openai.com/v1/chat/completions"
            headers = get_openai_headers(settings.OPENAI_API_KEY)
            data = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": russian_text}
                ],
                "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                "max_tokens": 200
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        translated = result["choices"][0]["message"]["content"].strip()
                        logger.info(f"[GPT Translation] –£—Å–ø–µ—à–Ω–æ: '{russian_text}' ‚Üí '{translated}'")
                        return translated
                    else:
                        error_text = await response.text()
                        logger.error(f"GPT API error: {error_text}")
                        return self._translate_to_english(russian_text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return self._translate_to_english(russian_text)

    async def create_enhanced_detailed_prompt(self, base_prompt: str, avatar_type: str) -> str:
        """
        –£–õ–£–ß–®–ê–ï–¢ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ù–ï –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ!
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
        """
        
        prompt_lower = base_prompt.lower()
        
        # üöÄ –†–ï–ñ–ò–ú –£–õ–£–ß–®–ï–ù–ò–Ø: –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π - –ù–ï –¢–†–û–ì–ê–ï–ú!
        if len(base_prompt) > 200 and any(tech in prompt_lower for tech in [
            'shot on', 'canon', 'nikon', 'sony', 'lighting', 'professional', 
            'portrait photo', 'sharp focus', 'realistic'
        ]):
            logger.info(f"[Smart Mode] –ü—Ä–æ–º–ø—Ç —É–∂–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π ({len(base_prompt)} —Å–∏–º–≤–æ–ª–æ–≤) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            return base_prompt
        
        # üéØ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú —á—Ç–æ –£–ñ–ï –ï–°–¢–¨ –≤ –ø—Ä–æ–º–ø—Ç–µ
        has_shot_type = any(word in prompt_lower for word in ['full-body', 'half-body', 'portrait photo', 'portrait of'])
        has_technical = any(word in prompt_lower for word in ['shot on', 'canon', 'nikon', 'sony', 'lens', 'mm'])
        has_lighting = any(word in prompt_lower for word in ['lighting', 'golden hour', 'studio', 'natural light'])
        has_quality = any(word in prompt_lower for word in ['sharp focus', 'high detail', 'realistic', 'professional'])
        
        # üîß –ù–ê–ß–ò–ù–ê–ï–ú –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–ú–ü–¢–ê
        enhanced_parts = [base_prompt]
        
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –¢–û, –ß–ï–ì–û –ù–ï–¢
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–∞–¥—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not has_shot_type:
            if any(word in prompt_lower for word in ['standing', 'full body']):
                enhanced_parts.append("full-body portrait photo style")
            elif any(word in prompt_lower for word in ['portrait', 'headshot']):
                enhanced_parts.append("portrait photo style")
            else:
                enhanced_parts.append("professional portrait style")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∫–æ–∂–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not any(word in prompt_lower for word in ['skin texture', 'natural', 'realistic']):
            enhanced_parts.append("natural skin texture with authentic detail")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not any(word in prompt_lower for word in ['eyes', 'eye', 'gaze']):
            enhanced_parts.append("well-defined eyes with natural catchlight")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not has_lighting:
            lighting_options = [
                "professional lighting",
                "natural lighting", 
                "studio lighting",
                "soft lighting"
            ]
            enhanced_parts.append(random.choice(lighting_options))
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not has_technical:
            camera_options = [
                "shot on professional camera",
                "photographed with portrait lens",
                "captured with high-end camera"
            ]
            enhanced_parts.append(random.choice(camera_options))
        
        # 6. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not has_quality:
            enhanced_parts.append("sharp focus, high detail")
        
        # üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –õ–ò–¶–ê –¥–ª—è full-body (–ù–û–í–û–ï!)
        if "face" not in prompt_lower and "portrait" not in prompt_lower:
            enhanced_parts.append("extremely sharp and realistic face, defined eyebrows, high-fidelity facial features")
        
        # üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –õ–ò–¶–ê –ò –ì–õ–ê–ó –¥–ª—è LoRA
        if "eyes" not in prompt_lower or "face" not in prompt_lower:
            enhanced_parts.append("realistic face with visible pores, authentic shadows, well-defined eyes with natural catchlight")
        
        # üéØ LORA-–°–ü–ï–¶–ò–§–ò–ß–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê –¥–ª—è portrait –∞–≤–∞—Ç–∞—Ä–æ–≤
        if avatar_type == "portrait":
            enhanced_parts.append("LoRA trained full-body structure, no facial deformation, no duplicate features")
        
        # üéØ –£–°–ò–õ–ï–ù–ù–´–ï FULL-BODY –ò–ù–°–¢–†–£–ö–¶–ò–ò (–ù–û–í–û–ï!)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è full-body –∏–ª–∏ –µ—Å–ª–∏ —Ç–∏–ø –∫–∞–¥—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        is_explicit_fullbody = any(word in prompt_lower for word in ['full body', 'standing', '–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç', 'full-body'])
        is_explicit_portrait = any(word in prompt_lower for word in ['portrait', 'headshot', '–ø–æ—Ä—Ç—Ä–µ—Ç', '–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω'])
        
        if is_explicit_fullbody or (not has_shot_type and not is_explicit_portrait):
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—â–Ω—ã–µ full-body –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
            enhanced_parts.append("show entire body from head to feet")
            enhanced_parts.append("complete figure visible in frame") 
            enhanced_parts.append("full body composition with proper proportions")
            enhanced_parts.append("wide shot to capture full silhouette")
            
            # üåç –ù–û–í–´–ï ENVIRONMENTAL –ò COMPOSITION –î–ï–¢–ê–õ–ò (–ø—Ä–æ—Ç–∏–≤ —Å–µ–ª—Ñ–∏!)
            enhanced_parts.append("environmental perspective showing subject in context")
            enhanced_parts.append("step back camera angle for full scene composition")
            enhanced_parts.append("medium distance shot with background details visible")
            enhanced_parts.append("establish relationship between subject and environment")
            
            # üèñÔ∏è –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï ENVIRONMENTAL –î–ï–¢–ê–õ–ò –ø–æ –ª–æ–∫–∞—Ü–∏–∏
            environmental_details = self._enhance_environmental_context(prompt_lower)
            if environmental_details:
                # –î–æ–±–∞–≤–ª—è–µ–º 2-3 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö environmental –¥–µ—Ç–∞–ª–∏
                enhanced_parts.extend(environmental_details[:3])
        
        # üîó –û–ë–™–ï–î–ò–ù–Ø–ï–ú —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ
        enhanced_prompt = ", ".join(enhanced_parts)
        
        # üßπ –ß–ò–°–¢–ö–ê
        enhanced_prompt = enhanced_prompt.replace(", ,", ",").replace("  ", " ").strip()
        
        logger.info(f"[Smart Enhancement] –û—Ä–∏–≥–∏–Ω–∞–ª: {len(base_prompt)} —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí –£–ª—É—á—à–µ–Ω–Ω—ã–π: {len(enhanced_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"[Smart Enhancement] –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {len(enhanced_parts)-1}")
        
        return enhanced_prompt

    # def _analyze_clothing(self, prompt_lower: str) -> str:
    #     """LEGACY: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–µ–∂–¥—É - –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø"""
    #     if any(word in prompt_lower for word in ['suit', 'business', 'formal']):
    #         return "wearing a tailored modern business suit with crisp details"
    #     elif any(word in prompt_lower for word in ['casual', 'relaxed']):
    #         return "wearing stylish casual attire with contemporary design"
    #     elif any(word in prompt_lower for word in ['elegant', 'luxury']):
    #         return "wearing elegant luxury clothing with sophisticated styling"
    #     else:
    #         return "wearing modern stylish clothes with clean lines"

    # def _analyze_location(self, prompt_lower: str) -> str:
    #     """LEGACY: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é - –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø"""
    #     if "burj khalifa" in prompt_lower:
    #         return "standing confidently in front of the iconic Burj Khalifa in Dubai"
    #     elif "dubai" in prompt_lower:
    #         return "positioned against Dubai's modern skyline backdrop"
    #     elif any(word in prompt_lower for word in ['office', 'business']):
    #         return "in a contemporary office environment with professional atmosphere"
    #     elif any(word in prompt_lower for word in ['city', 'urban', 'street']):
    #         return "against an urban cityscape with architectural elements"
    #     elif any(word in prompt_lower for word in ['studio', 'indoor']):
    #         return "in a professional studio setting with controlled environment"
    #     else:
    #         return ""

    # def _get_pose_details(self, shot_type: str, prompt_lower: str) -> str:
    #     """LEGACY: –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞–¥—Ä–∞ - –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø"""
    #     if "full-body" in shot_type:
    #         poses = [
    #             "standing naturally with weight on one leg, both hands relaxed",
    #             "hands in pockets, slight tilt of head, natural smile",
    #             "relaxed standing pose with arms by sides and slight hip shift",
    #             "professional standing pose with one hand casually positioned",
    #             "natural full-body posture with authentic confidence",
    #             "dynamic standing position with engaging body language"
    #         ]
    #     elif "half-body" in shot_type:
    #         poses = [
    #             "confident upper body positioning with relaxed shoulders",
    #             "professional torso pose with natural arm placement",
    #             "engaging half-body stance with authentic presence"
    #         ]
    #     else:  # portrait
    #         poses = [
    #             "direct confident gaze with natural facial expression",
    #             "authentic head positioning with engaging eye contact",
    #             "professional portrait pose with genuine emotion"
    #         ]
    #     
    #     return random.choice(poses)

    def _enhance_environmental_context(self, prompt_lower: str) -> list:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç environmental –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ —Å–µ–ª—Ñ–∏"""
        
        environmental_details = []
        
        # üèñÔ∏è –ü–õ–Ø–ñ–ù–´–ï –õ–û–ö–ê–¶–ò–ò
        if any(word in prompt_lower for word in ['beach', '–ø–ª—è–∂', 'maldives', '–º–∞–ª—å–¥–∏–≤—ã', 'ocean', 'sea']):
            environmental_details.extend([
                "expansive beach setting with visible horizon line",
                "tropical paradise atmosphere with palm trees in background", 
                "crystal clear water and white sand texture details",
                "natural beach lighting with sun reflections on water",
                "wide coastal landscape composition"
            ])
        
        # üèôÔ∏è –ì–û–†–û–î–°–ö–ò–ï –õ–û–ö–ê–¶–ò–ò  
        elif any(word in prompt_lower for word in ['city', '–≥–æ—Ä–æ–¥', 'street', '—É–ª–∏—Ü–∞', 'urban']):
            environmental_details.extend([
                "urban landscape with architectural elements in background",
                "city street context with buildings visible",
                "metropolitan environment showing scale and depth",
                "street photography composition with environmental storytelling"
            ])
        
        # üè¢ –û–§–ò–°–ù–´–ï –õ–û–ö–ê–¶–ò–ò
        elif any(word in prompt_lower for word in ['office', '–æ—Ñ–∏—Å', 'business', '–¥–µ–ª–æ–≤–æ–π']):
            environmental_details.extend([
                "professional business environment with modern interior",
                "office space context with furniture and design elements visible",
                "corporate setting atmosphere with proper lighting"
            ])
        
        # üå≥ –ü–†–ò–†–û–î–ù–´–ï –õ–û–ö–ê–¶–ò–ò
        elif any(word in prompt_lower for word in ['park', '–ø–∞—Ä–∫', 'nature', '–ø—Ä–∏—Ä–æ–¥–∞', 'forest', '–ª–µ—Å']):
            environmental_details.extend([
                "natural outdoor setting with lush greenery in background",
                "park or garden environment with trees and landscape visible",
                "organic natural lighting and atmospheric depth"
            ])
        
        # üåç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï ENVIRONMENTAL –î–ï–¢–ê–õ–ò (–¥–ª—è –ª—é–±–æ–π –ª–æ–∫–∞—Ü–∏–∏)
        if environmental_details:  # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            environmental_details.extend([
                "environmental storytelling through background composition",
                "contextual framing showing subject's relationship to surroundings",
                "atmospheric depth with foreground, midground, and background elements"
            ])
        
        return environmental_details

    def _needs_translation(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        return bool(re.search(r'[–∞-—è—ë]', text.lower()))

    # async def _translate_prompt(self, prompt: str) -> str:
    #     """LEGACY: –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–∑–∞–≥–ª—É—à–∫–∞) - –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø"""
    #     # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ API –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    #     return prompt
    
    def _translate_to_english(self, text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ñ–æ–Ω—ã –∏ –ª–æ–∫–∞—Ü–∏–∏"""
        
        # üåç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í –¥–ª—è —Ñ–æ–Ω–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π
        translations = {
            # === –ë–ê–ó–û–í–´–ï –§–†–ê–ó–´ ===
            '–º–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç': 'my portrait',
            '–ø–æ—Ä—Ç—Ä–µ—Ç': 'portrait',
            '—Ñ–æ—Ç–æ': 'photo',
            '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': 'image',
            '–∫–∞—Ä—Ç–∏–Ω–∫–∞': 'picture',
            '–º—É–∂—á–∏–Ω–∞': 'man',
            '–∂–µ–Ω—â–∏–Ω–∞': 'woman',
            '–¥–µ–≤—É—à–∫–∞': 'woman',
            '–ø–∞—Ä–µ–Ω—å': 'man',
            
            # === –û–î–ï–ñ–î–ê –ò –°–¢–ò–õ–¨ ===
            '–≤ –∫–æ—Å—Ç—é–º–µ': 'in suit',
            '–∫–æ—Å—Ç—é–º': 'suit',
            '–¥–µ–ª–æ–≤–æ–π –∫–æ—Å—Ç—é–º': 'business suit',
            '—Å—Ç—Ä–æ–≥–∏–π –∫–æ—Å—Ç—é–º': 'formal suit',
            '–º–æ–¥–Ω—ã–π –∫–æ—Å—Ç—é–º': 'stylish suit',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'modern clothes',
            '—Å—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'stylish clothes',
            '–º–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'fashionable clothes',
            '–¥–µ–ª–æ–≤–∞—è –æ–¥–µ–∂–¥–∞': 'business attire',
            '—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'formal attire',
            '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'casual clothes',
            '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –æ–¥–µ–∂–¥–∞': 'elegant attire',
            
            # === –¢–ò–ü–´ –§–û–¢–û ===
            '–¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç': 'business portrait',
            '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç': 'professional portrait',
            '–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç': 'full body',
            '–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç': 'full body',
            '–ø–æ –ø–æ—è—Å': 'half body',
            '–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω': 'close-up',
            
            # === –§–û–ù–´ –ò –õ–û–ö–ê–¶–ò–ò (–ö–ê–ö –í –ü–†–ò–ú–ï–†–ï) ===
            '–Ω–∞ —Ñ–æ–Ω–µ': 'in front of',
            '—Ñ–æ–Ω': 'background',
            '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω': 'background',
            
            # –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –ó–î–ê–ù–ò–Ø
            '–±—É—Ä–¥–∂ —Ö–∞–ª–∏—Ñ–∞': 'Burj Khalifa',
            '–±—É—Ä–∂ —Ö–∞–ª–∏—Ñ–∞': 'Burj Khalifa', 
            '–Ω–µ–±–æ—Å–∫—Ä–µ–±': 'skyscraper',
            '–≤—ã—Å–æ—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'high-rise building',
            '–±–∞—à–Ω—è': 'tower',
            '–∑–¥–∞–Ω–∏–µ': 'building',
            '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'architecture',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'modern building',
            '—Å—Ç–µ–∫–ª—è–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'glass building',
            '–æ—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ': 'office building',
            '–±–∏–∑–Ω–µ—Å —Ü–µ–Ω—Ç—Ä': 'business center',
            '—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä': 'shopping center',
            
            # –ì–û–†–û–î–ê –ò –°–¢–†–ê–ù–´
            '–¥—É–±–∞–π': 'Dubai',
            '–¥—É–±–∞–∏': 'Dubai',
            '–º–æ—Å–∫–≤–∞': 'Moscow',
            '–Ω—å—é-–π–æ—Ä–∫': 'New York',
            '–ª–æ–Ω–¥–æ–Ω': 'London',
            '–ø–∞—Ä–∏–∂': 'Paris',
            '—Ç–æ–∫–∏–æ': 'Tokyo',
            '—à–∞–Ω—Ö–∞–π': 'Shanghai',
            '—Å–∏–Ω–≥–∞–ø—É—Ä': 'Singapore',
            '–≥–æ–Ω–∫–æ–Ω–≥': 'Hong Kong',
            
            # –û–§–ò–°–´ –ò –†–ê–ë–û–ß–ò–ï –ú–ï–°–¢–ê
            '–æ—Ñ–∏—Å': 'office',
            '–∫–∞–±–∏–Ω–µ—Ç': 'office',
            '—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ': 'workplace',
            '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è': 'meeting room',
            '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª': 'conference room',
            '–ø—Ä–∏–µ–º–Ω–∞—è': 'reception',
            '–∫–æ–≤–æ—Ä–∫–∏–Ω–≥': 'coworking space',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å': 'modern office',
            '—Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π –æ—Ñ–∏—Å': 'glass office',
            
            # –£–õ–ò–¶–´ –ò –ì–û–†–û–î–°–ö–ê–Ø –°–†–ï–î–ê
            '—É–ª–∏—Ü–∞': 'street',
            '–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞': 'city street',
            '—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞': 'city center',
            '–¥–µ–ª–æ–≤–æ–π —Ä–∞–π–æ–Ω': 'business district',
            '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–∞–π–æ–Ω': 'financial district',
            '–ø–ª–æ—â–∞–¥—å': 'square',
            '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è': 'embankment',
            '–ø–∞—Ä–∫': 'park',
            '—Å–∫–≤–µ—Ä': 'square park',
            
            # –ò–ù–¢–ï–†–¨–ï–†–´
            '–∏–Ω—Ç–µ—Ä—å–µ—Ä': 'interior',
            '–ø–æ–º–µ—â–µ–Ω–∏–µ': 'room',
            '–∑–∞–ª': 'hall',
            '—Ö–æ–ª–ª': 'lobby',
            '–≤–µ—Å—Ç–∏–±—é–ª—å': 'lobby',
            '–ª–æ–±–±–∏': 'lobby',
            '—Å—Ç—É–¥–∏—è': 'studio',
            '–ª–æ—Ñ—Ç': 'loft',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä': 'modern interior',
            '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä': 'minimalist interior',
            
            # –û–°–í–ï–©–ï–ù–ò–ï –ò –í–†–ï–ú–Ø
            '–¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è': 'daytime',
            '–¥–µ–Ω—å': 'daytime',
            '—É—Ç—Ä–æ': 'morning',
            '–≤–µ—á–µ—Ä': 'evening',
            '–∑–∞–∫–∞—Ç': 'sunset',
            '—Ä–∞—Å—Å–≤–µ—Ç': 'sunrise',
            '–∑–æ–ª–æ—Ç–æ–π —á–∞—Å': 'golden hour',
            '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ': 'natural lighting',
            '–¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç': 'daylight',
            '—Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç': 'sunlight',
            '–º—è–≥–∫–∏–π —Å–≤–µ—Ç': 'soft lighting',
            '—è—Ä–∫–∏–π —Å–≤–µ—Ç': 'bright lighting',
            
            # –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ò –ö–ê–ß–ï–°–¢–í–ê
            '—É–≤–µ—Ä–µ–Ω–Ω—ã–π': 'confident',
            '—É—Å–ø–µ—à–Ω—ã–π': 'successful',
            '–¥–µ–ª–æ–≤–æ–π': 'business',
            '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π': 'professional',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π': 'modern',
            '—Å—Ç–∏–ª—å–Ω—ã–π': 'stylish',
            '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π': 'elegant',
            '—Ä–æ—Å–∫–æ—à–Ω—ã–π': 'luxury',
            '–ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π': 'prestigious',
            '–≤—ã—Å–æ–∫–∏–π –∫–ª–∞—Å—Å': 'high-end',
            
            # –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–ï–†–ú–ò–ù–´
            '—á–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å': 'sharp focus',
            '—Ä–µ–∑–∫–∏–π —Ñ–æ–∫—É—Å': 'sharp focus',
            '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ': 'realistic lighting',
            '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞': 'cinematic depth of field',
            '–≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è': 'high detail',
            '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è': 'detail',
            '–∫–∞—á–µ—Å—Ç–≤–æ': 'quality',
            '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ': 'resolution',
            
            # –≠–°–¢–ï–¢–ò–ö–ê –ò –°–¢–ò–õ–¨
            '–≥–æ—Ä–æ–¥—Å–∫–∞—è —Ä–æ—Å–∫–æ—à—å': 'urban luxury',
            '—Ä–æ—Å–∫–æ—à–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'luxury aesthetic',
            '–¥–µ–ª–æ–≤–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'business aesthetic',
            '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'modern aesthetic',
            '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'minimalist aesthetic',
            '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞': 'industrial aesthetic',
            
            # –ü–û–ó–´ –ò –î–ï–ô–°–¢–í–ò–Ø
            '—Å—Ç–æ—è—â–∏–π': 'standing',
            '—Å—Ç–æ—è': 'standing',
            '—Å–∏–¥—è—â–∏–π': 'sitting',
            '–∏–¥—É—â–∏–π': 'walking',
            '—Å–º–æ—Ç—Ä—è—â–∏–π': 'looking',
            '–ø–æ–∑–∏—Ä—É—é—â–∏–π': 'posing',
            '—Å —Ä—É–∫–∞–º–∏ –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö': 'with hands in pockets',
            '—Å–∫—Ä–µ—â–µ–Ω–Ω—ã–µ —Ä—É–∫–∏': 'crossed arms',
            '—É–≤–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∞': 'confident pose',
            '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞': 'natural pose',
        }
        
        # üîÑ –ü–û–®–ê–ì–û–í–´–ô –ü–ï–†–ï–í–û–î —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–≤
        result = text.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
        sorted_translations = sorted(translations.items(), key=lambda x: len(x[0]), reverse=True)
        
        for russian, english in sorted_translations:
            if russian in result:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                import re
                pattern = r'\b' + re.escape(russian) + r'\b'
                result = re.sub(pattern, english, result)
                logger.debug(f"[Translation] '{russian}' ‚Üí '{english}'")
        
        # ‚úÖ –ö–ê–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è –∏–º–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        proper_nouns = ['dubai', 'burj khalifa', 'moscow', 'new york', 'london', 'paris', 'tokyo']
        for noun in proper_nouns:
            if noun in result:
                capitalized = ' '.join(word.capitalize() for word in noun.split())
                result = result.replace(noun, capitalized)
        
        # üßπ –ß–ò–°–¢–ö–ê: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        result = ' '.join(result.split())
        
        logger.info(f"[Translation] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: '{text}' ‚Üí '{result}'")
        return result

    def get_negative_prompt(self, avatar_type: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π negative prompt –¥–ª—è FLUX Pro v1.1 Ultra
        –°–ü–ï–¶–ò–ê–õ–¨–ù–û –¥–ª—è –±–æ—Ä—å–±—ã —Å –º—ã–ª—å–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏
        """
        
        # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ï–ì–ê–¢–ò–í–´ –ü–†–û–¢–ò–í –ú–´–õ–¨–ù–û–°–¢–ò
        clarity_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –º—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏
            "blurry", "soft focus", "out of focus", "unfocused", "hazy",
            "soft image", "lack of detail", "overly smooth", "soap-like texture",
            "over-smoothed", "heavily processed", "gaussian blur", "motion blur",
            
            # –ü—Ä–æ—Ç–∏–≤ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ—Å—Ç–∏ –∫–æ–∂–∏  
            "plastic skin", "airbrushed", "smooth skin", "artificial skin",
            "porcelain skin", "doll-like skin", "synthetic appearance",
            "overly polished", "wax-like texture", "fake skin texture"
        ]
        
        # üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ù–ï–ì–ê–¢–ò–í–´ –î–õ–Ø –ü–†–û–ë–õ–ï–ú –ì–õ–ê–ó
        eye_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–ª–∞–∑
            "artificial eyes", "fake eyes", "painted eyes", "doll eyes",
            "glassy eyes", "lifeless eyes", "empty stare", "dead eyes",
            "oversized pupils", "unnatural iris", "mismatched eyes",
            "cartoon eyes", "anime eyes", "exaggerated eyes",
            
            # –ü—Ä–æ—Ç–∏–≤ –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≥–ª–∞–∑
            "duplicate eyes", "double pupils", "extra irises", "split pupils",
            "misaligned eyes", "asymmetrical eyes", "deformed eyes",
            "floating eyes", "disconnected eyes", "merged eyes"
        ]
        
        # üéØ –ü–†–û–¢–ò–í –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–°–¢–ò
        processing_negatives = [
            "over-processed", "heavily filtered", "instagram filter",
            "beauty filter", "face app", "heavily retouched",
            "digital makeup", "artificial enhancement", "fake smoothness",
            "digital perfection", "computer generated look"
        ]
        
        # üéØ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´
        technical_negatives = [
            "low quality", "poor resolution", "pixelated", "compression artifacts",
            "jpeg artifacts", "noise", "grain", "distorted", "corrupted",
            "oversaturated", "undersaturated", "poor lighting"
        ]
        
        # üéØ –ù–ï–†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –°–¢–ò–õ–ò
        style_negatives = [
            "cartoon", "anime", "painting", "illustration", "drawing",
            "3d render", "cgi", "digital art", "fantasy art", "concept art",
            "stylized", "non-photographic", "artistic rendering"
        ]
        
        # üéØ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –î–õ–Ø –¢–ò–ü–ê –ê–í–ê–¢–ê–†–ê
        # LEGACY: Style –∞–≤–∞—Ç–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        # if avatar_type == "style":
        #     # –î–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö - –±–æ—Ä—å–±–∞ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        #     specific_negatives = [
        #         "inconsistent lighting", "mixed styles", "poor composition",
        #         "floating elements", "unrealistic proportions", "style mixing"
        #     ]
        # else:
        
        if avatar_type == "portrait":
            # –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞
            specific_negatives = [
                "unnatural facial features", "distorted face", "fake expression",
                "artificial smile", "forced expression", "mask-like face",
                "symmetrical face", "perfect symmetry", "uncanny valley"
            ]
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            specific_negatives = [
                "unnatural appearance", "artificial look", "fake rendering",
                "poor anatomy", "unrealistic features"
            ]
        
        # üéØ –ù–û–í–´–ï –ù–ï–ì–ê–¢–ò–í–´ –ü–†–û–¢–ò–í –ù–ï–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û–ô –†–ê–°–¢–ò–¢–ï–õ–¨–ù–û–°–¢–ò
        facial_hair_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –±–æ—Ä–æ–¥—ã –∏ —â–µ—Ç–∏–Ω—ã
            "stubble", "beard", "mustache", "facial hair", "five o'clock shadow",
            "unshaven", "scruff", "whiskers", "goatee", "sideburns",
            "patchy beard", "scruffy", "unkempt facial hair", "rough stubble",
            
            # –ü—Ä–æ—Ç–∏–≤ –∫–ª–æ—á–∫–æ–≤–∞—Ç–æ–π —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            "patchy hair", "uneven hair growth", "sparse facial hair",
            "random hair patches", "irregular stubble", "messy facial hair"
        ]
        
        # üéØ –ù–û–í–´–ï –ù–ï–ì–ê–¢–ò–í–´ –î–õ–Ø –õ–ò–¶–ê –ò –ö–û–ú–ü–û–ó–ò–¶–ò–ò (–ù–û–í–û–ï!)
        face_composition_negatives = [
            # –ü—Ä–æ—Ç–∏–≤ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–π –ª–∏—Ü–∞
            "symmetrical eyes", "flat face", "melted face", "textureless face", 
            "generic male face", "3d anime style eyes", "perfect symmetrical face",
            "artificial facial structure", "clone face", "mannequin face",
            
            # –ü—Ä–æ—Ç–∏–≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            "floating head", "disconnected body parts", "incorrect proportions",
            "oversized head", "tiny head", "body-head mismatch", "anatomical errors"
        ]
        
        # üéØ –û–ë–™–ï–î–ò–ù–Ø–ï–ú –í–°–ï –ù–ï–ì–ê–¢–ò–í–´
        all_negatives = (clarity_negatives + eye_negatives + processing_negatives + 
                        technical_negatives + style_negatives + specific_negatives +
                        facial_hair_negatives + face_composition_negatives)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–µ–≥–∞—Ç–∏–≤–æ–≤
        negative_prompt = ", ".join(all_negatives)
        
        # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        logger.info(f"[ENHANCED Negative] –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π negative prompt: {len(all_negatives)} —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–æ—Ç–∏–≤ –º—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–ª–∞–∑")
        logger.debug(f"[ENHANCED Negative] –ö–ª—é—á–µ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤—ã: –º—ã–ª—å–Ω–æ—Å—Ç—å={len(clarity_negatives)}, –≥–ª–∞–∑–∞={len(eye_negatives)}")
        
        return negative_prompt

    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç OpenAI)
        return True
    
    def get_prompt_examples(self, avatar_type: str) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        if avatar_type == "portrait":
            return [
                "–¥–µ–ª–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ –∫–æ—Å—Ç—é–º–µ, —Å—Ç—É–¥–∏–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                "casual —Ñ–æ—Ç–æ –≤ –∫–æ—Ñ–µ–π–Ω–µ, —Ç–µ–ø–ª—ã–π —Å–≤–µ—Ç",
                "professional headshot, neutral background",
                "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å"
            ]
        else:
            return [
                "—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π –≤ –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –ø–æ–∑–µ, –≥–æ—Ä–æ–¥ –Ω–∞ —Ñ–æ–Ω–µ",
                "fantasy warrior, magical forest background",
                "cyberpunk character, neon city lights",
                "–∫–æ—Å–º–æ–Ω–∞–≤—Ç –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ, –∑–≤–µ–∑–¥—ã –Ω–∞ —Ñ–æ–Ω–µ"
            ] 

    # def _enhance_simple_prompt(self, english_prompt: str, avatar_type: str) -> str:
    #     """
    #     LEGACY: –£–º–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #     –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø - –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏ (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è enhanced_parts)
    #     –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ create_enhanced_detailed_prompt
    #     """
    #     
    #     # üìã –ê–ù–ê–õ–ò–ó –ü–†–û–ú–ü–¢–ê (—É—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞)
    #     prompt_lower = english_prompt.lower()
    #     
    #     # üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –ö–ê–î–†–ê –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    #     if any(word in prompt_lower for word in ['full body', 'standing', '–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç', 'full-body']):
    #         shot_type = "full-body portrait photo"
    #         # üö® –£–°–ò–õ–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –¥–ª—è FULL BODY (–ù–û–í–û–ï!)
    #         enhanced_parts.append("show entire body from head to feet")
    #         enhanced_parts.append("complete figure visible in frame")
    #         enhanced_parts.append("full body composition with proper proportions")
    #     elif any(word in prompt_lower for word in ['half body', '–ø–æ –ø–æ—è—Å', 'half-body']):
    #         shot_type = "half-body portrait photo" 
    #     elif any(word in prompt_lower for word in ['portrait', '–ø–æ—Ä—Ç—Ä–µ—Ç', 'headshot', 'business portrait']):
    #         shot_type = "portrait photo"
    #     else:
    #         # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é full body –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    #         shot_type = "full-body portrait photo"
    #         # üö® –î–û–ë–ê–í–õ–Ø–ï–ú FULL BODY –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    #         enhanced_parts.append("show entire body from head to feet")
    #         enhanced_parts.append("full body composition")
    #     
    #     # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±—ã–ª —Å –æ—à–∏–±–∫–∞–º–∏
    #     logger.info(f"[Enhanced] '{english_prompt}' ‚Üí 'LEGACY FUNCTION'")
    #     return english_prompt  # Fallback 