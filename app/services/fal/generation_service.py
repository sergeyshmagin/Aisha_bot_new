"""
–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FAL AI
"""
import asyncio
import os
from typing import Dict, List, Optional, Any
from uuid import UUID

import fal_client

from ...core.config import settings
from ...core.logger import get_logger
from ...database.models import Avatar, AvatarTrainingType

logger = get_logger(__name__)


class FALGenerationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ FAL AI.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã (LoRA —Ñ–∞–π–ª—ã)
    - –°—Ç–∏–ª–µ–≤—ã–µ –∞–≤–∞—Ç–∞—Ä—ã (finetune_id)
    - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    """

    def __init__(self):
        self.api_key = settings.effective_fal_api_key
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.test_mode = settings.AVATAR_TEST_MODE
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FAL –∫–ª–∏–µ–Ω—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FAL_KEY
        if self.api_key and not self.test_mode:
            try:
                # FAL –∫–ª–∏–µ–Ω—Ç –∏—â–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FAL_KEY
                os.environ['FAL_KEY'] = self.api_key
                logger.info(f"üöÄ FAL_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {self.api_key[:20]}...")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FAL –∫–ª–∏–µ–Ω—Ç–∞: {e}, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
                self.test_mode = True
        else:
            if self.test_mode:
                logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–º—É–ª—è—Ü–∏—è")
            else:
                logger.warning("FAL_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                self.test_mode = True

    async def generate_avatar_image(
        self,
        avatar: Avatar,
        prompt: str,
        generation_config: Optional[Dict[str, Any]] = None
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—É—á–µ–Ω–Ω—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º
        –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
        - Style –∞–≤–∞—Ç–∞—Ä—ã ‚Üí finetune_id ‚Üí FLUX1.1 [pro] ultra Fine-tuned
        - Portrait –∞–≤–∞—Ç–∞—Ä—ã ‚Üí LoRA —Ñ–∞–π–ª ‚Üí flux-lora
        
        Args:
            avatar: –ú–æ–¥–µ–ª—å –∞–≤–∞—Ç–∞—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_config: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            Optional[str]: URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Raises:
            ValueError: –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if self.test_mode:
                logger.info(f"[FAL TEST MODE] –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                return await self._simulate_generation(avatar, prompt)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤–∞—Ç–∞—Ä –æ–±—É—á–µ–Ω
            if not self._is_avatar_trained(avatar):
                raise ValueError(f"–ê–≤–∞—Ç–∞—Ä {avatar.id} –Ω–µ –æ–±—É—á–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # ‚úÖ –°–¢–†–û–ì–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –ê–í–ê–¢–ê–†–û–í
            
            if avatar.training_type == AvatarTrainingType.PORTRAIT:
                # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç LoRA —Ñ–∞–π–ª—ã + flux-lora API
                logger.info(f"üë§ Portrait –∞–≤–∞—Ç–∞—Ä: –∏—Å–ø–æ–ª—å–∑—É–µ–º flux-lora –¥–ª—è {avatar.id}")
                return await self._generate_with_lora_legacy(avatar, prompt, generation_config)
            elif avatar.training_type == AvatarTrainingType.STYLE:
                # STYLE –∞–≤–∞—Ç–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (LEGACY)
                logger.error(f"üö´ STYLE –∞–≤–∞—Ç–∞—Ä {avatar.id} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                raise ValueError(f"STYLE –∞–≤–∞—Ç–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä.")
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞: {avatar.training_type}")
                
        except Exception as e:
            logger.exception(f"[FAL AI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
            raise

    async def _generate_with_lora_legacy(
        self,
        avatar: Avatar,
        prompt: str,
        config: Optional[Dict[str, Any]] = None
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å LoRA —Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑ flux-lora endpoint
        –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å LoRA —Ñ–∞–π–ª–∞–º–∏
        
        Args:
            avatar: –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä —Å LoRA —Ñ–∞–π–ª–æ–º
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            config: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Optional[str]: URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        if avatar.training_type != AvatarTrainingType.PORTRAIT:
            raise ValueError(f"LoRA API –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤. –ê–≤–∞—Ç–∞—Ä {avatar.id} –∏–º–µ–µ—Ç —Ç–∏–ø {avatar.training_type}")
        
        if not avatar.diffusers_lora_file_url:
            raise ValueError(f"–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä {avatar.id} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å LoRA —Ñ–∞–π–ª")
        
        if avatar.finetune_id:
            logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä {avatar.id} —Å–æ–¥–µ—Ä–∂–∏—Ç finetune_id, –Ω–æ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ LoRA —Ñ–∞–π–ª")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä (–¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º trigger_phrase)
        trigger = avatar.trigger_phrase or avatar.trigger_word
        logger.info(f"[FAL AI] üë§ Portrait –∞–≤–∞—Ç–∞—Ä: lora_url={avatar.diffusers_lora_file_url}, trigger='{trigger}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
        full_prompt = self._build_prompt_with_trigger(prompt, trigger)
        logger.info(f"[FAL AI] üë§ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º: '{full_prompt}'")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è LoRA - –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI
        generation_args = {
            "prompt": full_prompt,
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º loras –º–∞—Å—Å–∏–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI
            "loras": [
                {
                    "path": avatar.diffusers_lora_file_url,
                    "scale": config.get("lora_scale", 1.15) if config else 1.15  # üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï: 1.15 –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                }
            ],
            "num_images": config.get("num_images", 1) if config else 1,
            "num_inference_steps": config.get("num_inference_steps", 28) if config else 28,
            "guidance_scale": config.get("guidance_scale", 3.5) if config else 3.5,
            "enable_safety_checker": config.get("enable_safety_checker", True) if config else True,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º image_size –∏–ª–∏ aspect_ratio –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if config and config.get("aspect_ratio"):
            # –î–ª—è FAL AI flux-lora –∏—Å–ø–æ–ª—å–∑—É–µ–º image_size –≤–º–µ—Å—Ç–æ aspect_ratio
            aspect_ratio = config.get("aspect_ratio")
            if aspect_ratio == "9:16":
                generation_args["image_size"] = "portrait_4_3"  # –ë–ª–∏–∂–∞–π—à–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif aspect_ratio == "16:9":
                generation_args["image_size"] = "landscape_4_3"  # –ë–ª–∏–∂–∞–π—à–∏–π –∞–ª—å–±–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif aspect_ratio == "1:1":
                generation_args["image_size"] = "square_hd"
            else:
                generation_args["image_size"] = "square_hd"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –≤ Playground
            logger.info(f"[FAL AI] üñºÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ aspect_ratio {aspect_ratio} –≤ image_size: {generation_args['image_size']}")
        else:
            generation_args["image_size"] = config.get("image_size", "square_hd") if config else "square_hd"  # üéØ Default –∫–∞–∫ –≤ Playground
        
        # –î–æ–±–∞–≤–ª—è–µ–º negative_prompt –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è LoRA
        if config and config.get("negative_prompt"):
            generation_args["negative_prompt"] = config.get("negative_prompt")
            logger.info(f"[FAL AI] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω negative prompt –¥–ª—è LoRA: {len(config['negative_prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"[FAL AI] LoRA negative prompt: {config['negative_prompt'][:200]}...")
        else:
            if avatar.training_type == AvatarTrainingType.PORTRAIT:
                logger.warning(f"[FAL AI] ‚ö†Ô∏è Negative prompt –ù–ï –ü–ï–†–ï–î–ê–ù –¥–ª—è LoRA –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            else:
                logger.info(f"[FAL AI] ‚ÑπÔ∏è Negative prompt –≤—Å—Ç—Ä–æ–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è FLUX Pro –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º seed –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if config and config.get("seed"):
            generation_args["seed"] = config.get("seed")
        
        logger.info(f"[FAL AI] üöÄ FLUX LoRA –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
        logger.info(f"[FAL AI] üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã LoRA: scale={generation_args['loras'][0]['scale']}, steps={generation_args['num_inference_steps']}, guidance={generation_args['guidance_scale']}")
        logger.info(f"[FAL AI] üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {generation_args['image_size']}")
        logger.debug(f"[FAL AI] LoRA args: {generation_args}")
        
        try:
            result = fal_client.subscribe(
                "fal-ai/flux-lora",
                arguments=generation_args,
                with_logs=True
            )
            
            logger.info(f"[FAL AI] ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LoRA –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.debug(f"[FAL AI] LoRA result: {result}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if isinstance(result, dict) and "images" in result:
                images = result["images"]
                if images and len(images) > 0:
                    image_url = images[0]["url"] if isinstance(images[0], dict) else images[0]
                    logger.info(f"[FAL AI] LoRA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ: {image_url}")
                    return image_url
                else:
                    logger.error(f"[FAL AI] LoRA —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result}")
                    return None
            else:
                logger.error(f"[FAL AI] LoRA –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
                return None
            
        except Exception as e:
            logger.error(f"[FAL AI] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LoRA: {e}")
            raise

    async def _simulate_generation(
        self,
        avatar: Avatar,
        prompt: str
    ) -> str:
        """
        –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä
            prompt: –ü—Ä–æ–º–ø—Ç
            
        Returns:
            str: –¢–µ—Å—Ç–æ–≤—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await asyncio.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        test_url = (
            f"https://picsum.photos/1024/1024?random={avatar.id}&"
            f"type={avatar.training_type.value}&prompt={hash(prompt) % 1000}"
        )
        
        logger.info(f"üß™ [FAL TEST MODE] –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {test_url}")
        return test_url

    def _is_avatar_trained(self, avatar: Avatar) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–≤–∞—Ç–∞—Ä –æ–±—É—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
        - Style –∞–≤–∞—Ç–∞—Ä—ã –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å finetune_id
        - Portrait –∞–≤–∞—Ç–∞—Ä—ã –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å diffusers_lora_file_url
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        from ...database.models import AvatarStatus
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if avatar.status != "completed":
            logger.warning(f"–ê–≤–∞—Ç–∞—Ä {avatar.id} –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°—Ç–∞—Ç—É—Å: {avatar.status}")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
        has_lora = bool(avatar.diffusers_lora_file_url)
        has_finetune = bool(avatar.finetune_id)
        
        logger.info(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: "
                   f"training_type={avatar.training_type}, "
                   f"has_lora={has_lora}, has_finetune={has_finetune}")
        
        # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        if avatar.training_type == AvatarTrainingType.PORTRAIT:
            if has_lora and not has_finetune:
                logger.info(f"‚úÖ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä {avatar.id} –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏–º–µ–µ—Ç LoRA —Ñ–∞–π–ª)")
                return True
            else:
                if has_finetune and not has_lora:
                    logger.error(
                        f"‚ùå –û–®–ò–ë–ö–ê –î–ê–ù–ù–´–•: –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä {avatar.id} –∏–º–µ–µ—Ç finetune_id –≤–º–µ—Å—Ç–æ LoRA —Ñ–∞–π–ª–∞! "
                        f"–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LoRA —Ñ–∞–π–ª—ã."
                    )
                elif not has_lora:
                    logger.error(f"‚ùå –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä {avatar.id} –Ω–µ –∏–º–µ–µ—Ç LoRA —Ñ–∞–π–ª–∞")
                else:
                    logger.error(f"‚ùå –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä {avatar.id} –∏–º–µ–µ—Ç –∏ LoRA –∏ finetune - –∫–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö")
                return False
        elif avatar.training_type == AvatarTrainingType.STYLE:
            # STYLE –∞–≤–∞—Ç–∞—Ä—ã - LEGACY, –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
            logger.error(f"‚ùå STYLE –∞–≤–∞—Ç–∞—Ä {avatar.id} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (LEGACY). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã.")
            return False
        else:
            # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            logger.error(f"‚ùå –ê–≤–∞—Ç–∞—Ä {avatar.id} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è: {avatar.training_type}")
            return False

    def _build_prompt_with_trigger(
        self,
        prompt: str,
        trigger: Optional[str]
    ) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—é —Ñ—Ä–∞–∑—É/—Å–ª–æ–≤–æ –∫ –ø—Ä–æ–º–ø—Ç—É
        
        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            trigger: –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —Å–ª–æ–≤–æ
            
        Returns:
            str: –ü—Ä–æ–º–ø—Ç —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
        """
        if not trigger:
            return prompt
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –µ—â–µ –Ω–µ –≤ –ø—Ä–æ–º–ø—Ç–µ
        if trigger.lower() in prompt.lower():
            return prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞
        return f"{trigger} {prompt}"

    async def generate_multiple_images(
        self,
        avatar: Avatar,
        prompts: List[str],
        generation_config: Optional[Dict[str, Any]] = None
    ) -> List[Optional[str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            prompts: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
            generation_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            List[Optional[str]]: –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        results = []
        
        for i, prompt in enumerate(prompts):
            try:
                logger.info(f"[FAL AI] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{len(prompts)} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                
                image_url = await self.generate_avatar_image(
                    avatar=avatar,
                    prompt=prompt,
                    generation_config=generation_config
                )
                
                results.append(image_url)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                if i < len(prompts) - 1:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.exception(f"[FAL AI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {i+1}: {e}")
                results.append(None)
        
        logger.info(
            f"[FAL AI] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: "
            f"{len([r for r in results if r])}/{len(prompts)} —É—Å–ø–µ—à–Ω–æ"
        )
        
        return results

    def get_generation_config_presets(self) -> Dict[str, Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è FLUX1.1 [pro] ultra Fine-tuned
        
        Returns:
            Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
        """
        return {
            "fast": {
                "finetune_strength": 0.8,
                "aspect_ratio": "1:1",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "balanced": {
                "finetune_strength": 1.0,
                "aspect_ratio": "1:1",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "quality": {
                "finetune_strength": 1.2,
                "aspect_ratio": "1:1",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 3,
                "raw": False,
            },
            "ultra": {
                "finetune_strength": 1.3,
                "aspect_ratio": "1:1",
                "output_format": "jpeg", 
                "enable_safety_checker": True,
                "safety_tolerance": 3,
                "raw": False,
            },
            "portrait": {
                "finetune_strength": 1.1,
                "aspect_ratio": "3:4",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "landscape": {
                "finetune_strength": 1.0,
                "aspect_ratio": "4:3",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "wide": {
                "finetune_strength": 1.0,
                "aspect_ratio": "16:9",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "square_hd": {
                "finetune_strength": 1.1,
                "aspect_ratio": "1:1",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "artistic": {
                "finetune_strength": 1.4,
                "aspect_ratio": "1:1",
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 4,
                "raw": True,
            },
            "photorealistic": {
                "finetune_strength": 1.0,
                "aspect_ratio": "1:1", 
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 2,
                "raw": False,
            },
            "photorealistic_max": {
                "finetune_strength": 1.0,
                "aspect_ratio": "1:1", 
                "output_format": "jpeg",
                "enable_safety_checker": True,
                "safety_tolerance": 1,
                "raw": False,
                "num_images": 1,
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º —Å finetune_strength=1.0"
            }
        }

    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if self.test_mode:
            return True
            
        return bool(self.api_key)

    def get_config_summary(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            Dict[str, Any]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        """
        return {
            "test_mode": self.test_mode,
            "api_key_set": bool(self.api_key),
            "available": self.is_available(),
            "supported_types": ["portrait"],
            "primary_model": "fal-ai/flux-pro/v1.1-ultra-finetuned",
            "supported_models": [
                "fal-ai/flux-pro/v1.1-ultra-finetuned",  # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            ],
            "presets": list(self.get_generation_config_presets().keys()),
            "features": {
                "ultra_quality": True,
                "lora_support": True,
                "finetune_support": True,
                "safety_checker": True,
                "multiple_formats": True,
                "custom_aspect_ratios": True,
                "2k_resolution": True,
                "10x_faster": True,
                "commercial_use": True
            },
            "aspect_ratios": [
                "21:9", "16:9", "4:3", "3:2", "1:1", 
                "2:3", "3:4", "9:16", "9:21"
            ],
            "max_resolution": "2048x2048",
            "performance": "10x faster than previous versions"
        } 