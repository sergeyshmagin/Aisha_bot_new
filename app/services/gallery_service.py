"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–∞–ª–µ—Ä–µ–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç N+1 –ø—Ä–æ–±–ª–µ–º—É –∏ —Å–Ω–∏–∂–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ <500ms
"""
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from uuid import UUID

from sqlalchemy import and_, or_, select
from sqlalchemy.orm import selectinload
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import ImageGeneration
from app.database.repositories import ImageGenerationRepository
from app.services.cache_service import cache_service
from app.core.logger import get_logger

logger = get_logger(__name__)


class GalleryService:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–∞–ª–µ—Ä–µ–∏ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –ö–ª—é—á–µ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
    1. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–µ —Ç–æ–ª—å–∫–æ ID)
    2. Batch-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è N+1 –ø—Ä–æ–±–ª–µ–º—ã  
    3. Eagerly loading —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
    4. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    5. –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    """
    
    def __init__(self):
        self.session: Optional[AsyncSession] = None
        self.image_repo: Optional[ImageGenerationRepository] = None
    
    async def set_session(self, session: AsyncSession):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î"""
        self.session = session
        self.image_repo = ImageGenerationRepository(session)
    
    async def get_user_images_optimized(
        self, 
        user_id: UUID, 
        filters: Optional[Dict] = None,
        page: int = 1,
        per_page: int = 20,
        force_refresh: bool = False
    ) -> Tuple[List[Dict], int, bool]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        
        Returns:
            Tuple[images_data, total_count, has_more]
        """
        if not self.session:
            raise RuntimeError("Session not set. Call set_session() first.")
        
        # ‚úÖ 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_key = self._generate_filters_key(filters or {})
        cache_key = f"gallery_optimized:{user_id}:{filters_key}:p{page}"
        
        # ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
        if not force_refresh:
            cached_data = await cache_service.get(cache_key)
            if cached_data:
                logger.debug(f"‚úÖ Cache HIT –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
                return (
                    cached_data["images"], 
                    cached_data["total_count"], 
                    cached_data["has_more"]
                )
        
        logger.debug(f"üîÑ Cache MISS –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î")
        
        # ‚úÖ 3. –°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN'–∞–º–∏
        query = (
            select(ImageGeneration)
            .options(selectinload(ImageGeneration.avatar))  # Eager loading –∞–≤–∞—Ç–∞—Ä–æ–≤
            .where(ImageGeneration.user_id == user_id)
            .where(ImageGeneration.status == "COMPLETED")
        )
        
        # ‚úÖ 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        query = self._apply_filters_to_query(query, filters or {})
        
        # ‚úÖ 5. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        query = query.order_by(ImageGeneration.created_at.desc())
        
        # ‚úÖ 6. –í—ã–ø–æ–ª–Ω—è–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = select(ImageGeneration.id).where(
            and_(
                ImageGeneration.user_id == user_id,
                ImageGeneration.status == "COMPLETED",
                *self._build_filter_conditions(filters or {})
            )
        )
        
        total_count = len(await self.session.execute(count_query).all())
        
        # ‚úÖ 7. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        offset = (page - 1) * per_page
        query = query.offset(offset).limit(per_page + 1)  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ has_more
        
        # ‚úÖ 8. –í—ã–ø–æ–ª–Ω—è–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        result = await self.session.execute(query)
        images = result.scalars().all()
        
        # ‚úÖ 9. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        has_more = len(images) > per_page
        if has_more:
            images = images[:per_page]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        # ‚úÖ 10. –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∞
        images_data = [self._serialize_image_for_cache(img) for img in images]
        
        # ‚úÖ 11. –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç
        cache_data = {
            "images": images_data,
            "total_count": total_count,
            "has_more": has_more,
            "cached_at": datetime.utcnow().isoformat()
        }
        await cache_service.set(cache_key, cache_data, ttl=1800)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å")
        
        return images_data, total_count, has_more
    
    def _apply_filters_to_query(self, query, filters: Dict):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–∞–ø—Ä–æ—Å—É"""
        conditions = self._build_filter_conditions(filters)
        for condition in conditions:
            query = query.where(condition)
        return query
    
    def _build_filter_conditions(self, filters: Dict) -> List:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        conditions = []
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if "time_filter" in filters:
            time_filter = filters["time_filter"]
            now = datetime.utcnow()
            
            if time_filter == "today":
                start_of_day = now.replace(hour=0, minute=0, second=0, microsecond=0)
                conditions.append(ImageGeneration.created_at >= start_of_day)
            elif time_filter == "week":
                week_ago = now - timedelta(days=7)
                conditions.append(ImageGeneration.created_at >= week_ago)
            elif time_filter == "month":
                month_ago = now - timedelta(days=30)
                conditions.append(ImageGeneration.created_at >= month_ago)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É
        if "size_filters" in filters and filters["size_filters"]:
            size_conditions = []
            for size in filters["size_filters"]:
                if size == "1:1":
                    size_conditions.append(ImageGeneration.aspect_ratio == "1:1")
                elif size == "4:3":
                    size_conditions.append(ImageGeneration.aspect_ratio == "4:3")
                elif size == "3:4":
                    size_conditions.append(ImageGeneration.aspect_ratio == "3:4")
            
            if size_conditions:
                conditions.append(or_(*size_conditions))
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if "status_filters" in filters and filters["status_filters"]:
            status_conditions = []
            for status in filters["status_filters"]:
                if status == "favorites":
                    status_conditions.append(ImageGeneration.is_favorite == True)
                elif status == "recent":
                    recent_time = datetime.utcnow() - timedelta(hours=24)
                    status_conditions.append(ImageGeneration.created_at >= recent_time)
            
            if status_conditions:
                conditions.append(or_(*status_conditions))
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤–∞—Ç–∞—Ä–∞–º
        if "avatar_filters" in filters and filters["avatar_filters"]:
            avatar_ids = [UUID(aid) for aid in filters["avatar_filters"]]
            conditions.append(ImageGeneration.avatar_id.in_(avatar_ids))
        
        return conditions
    
    def _generate_filters_key(self, filters: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        if not filters:
            return "no_filters"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_filters = {k: sorted(v) if isinstance(v, list) else v 
                         for k, v in sorted(filters.items())}
        
        return json.dumps(sorted_filters, sort_keys=True, default=str)
    
    def _serialize_image_for_cache(self, image: ImageGeneration) -> Dict:
        """–°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–µ—à–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        return {
            "id": str(image.id),
            "original_prompt": image.original_prompt,
            "final_prompt": image.final_prompt,
            "aspect_ratio": image.aspect_ratio,
            "quality_preset": image.quality_preset,
            "result_urls": image.result_urls,
            "is_favorite": image.is_favorite,
            "created_at": image.created_at.isoformat() if image.created_at else None,
            "completed_at": image.completed_at.isoformat() if image.completed_at else None,
            "prompt_metadata": image.prompt_metadata,
            "avatar": {
                "id": str(image.avatar.id),
                "name": image.avatar.name,
                "gender": image.avatar.gender,
                "trigger_word": image.avatar.trigger_word
            } if image.avatar else None
        }
    
    async def get_single_image_optimized(self, image_id: UUID, user_id: UUID) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        """
        if not self.session:
            raise RuntimeError("Session not set. Call set_session() first.")
        
        cache_key = f"single_image:{image_id}"
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_image = await cache_service.get(cache_key)
        if cached_image:
            logger.debug(f"‚úÖ Cache HIT –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_id}")
            return cached_image
        
        # ‚úÖ –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å JOIN'–æ–º
        query = (
            select(ImageGeneration)
            .options(selectinload(ImageGeneration.avatar))
            .where(and_(
                ImageGeneration.id == image_id,
                ImageGeneration.user_id == user_id
            ))
        )
        
        result = await self.session.execute(query)
        image = result.scalar_one_or_none()
        
        if not image:
            return None
        
        # ‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏ –∫–µ—à–∏—Ä—É–µ–º
        image_data = self._serialize_image_for_cache(image)
        await cache_service.set(cache_key, image_data, ttl=3600)
        
        return image_data
    
    async def invalidate_user_gallery_cache(self, user_id: UUID):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            redis = await cache_service._get_redis()
            if redis:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                pattern = f"gallery_optimized:{user_id}:*"
                keys = await redis.keys(pattern)
                if keys:
                    await redis.delete(*keys)
                    logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫–µ—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(keys)} –∫–ª—é—á–µ–π")
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ memory fallback
            keys_to_remove = [k for k in cache_service.memory_fallback.keys() 
                             if k.startswith(f"gallery_optimized:{user_id}:")]
            for key in keys_to_remove:
                cache_service.memory_fallback.pop(key, None)
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏: {e}")
    
    async def preload_gallery_cache(self, user_id: UUID, filters: Optional[Dict] = None):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–µ—à
            for page in range(1, 4):
                await self.get_user_images_optimized(
                    user_id=user_id,
                    filters=filters,
                    page=page,
                    per_page=20,
                    force_refresh=False
                )
            logger.info(f"üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω –∫–µ—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏: {e}")
    
    async def get_cache_stats(self, user_id: UUID) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            redis = await cache_service._get_redis()
            if redis:
                pattern = f"gallery_optimized:{user_id}:*"
                keys = await redis.keys(pattern)
                return {
                    "cached_pages": len(keys),
                    "redis_available": True,
                    "sample_keys": keys[:5] if keys else []
                }
            else:
                memory_keys = [k for k in cache_service.memory_fallback.keys() 
                              if k.startswith(f"gallery_optimized:{user_id}:")]
                return {
                    "cached_pages": len(memory_keys),
                    "redis_available": False,
                    "sample_keys": memory_keys[:5]
                }
        except Exception as e:
            return {"error": str(e), "redis_available": False}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
gallery_service = GalleryService() 