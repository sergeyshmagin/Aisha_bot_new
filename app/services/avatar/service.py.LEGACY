"""
Сервис для работы с аватарами
LEGACY: Заменен на app.services.avatar_db.AvatarService
TODO: Удалить после полного перехода на новый сервис
"""
# import asyncio
# from pathlib import Path
# from typing import List, Optional, Union

# import aiofiles
# from aiogram.types import PhotoSize
# from pydantic import BaseModel

# from app.core.config import settings
# from app.core.logger import get_logger
# from app.services.storage import StorageService
# from app.services.base import BaseService

# logger = get_logger(__name__)

# class AvatarResult(BaseModel):
#     """Результат обработки аватара"""
#     file_id: str
#     width: int
#     height: int
#     file_size: int
#     file_path: Optional[str] = None
#     style: Optional[str] = None

# class AvatarService(BaseService):
#     """
#     LEGACY: Сервис для работы с аватарами - ЗАМЕНЕН НА app.services.avatar_db.AvatarService
#     - Сохранение в MinIO
#     - Применение стилей
#     - Генерация новых аватаров
#     """

#     def __init__(self):
#         super().__init__()
#         self.temp_dir = Path(settings.TEMP_DIR) / "avatars"
#         self.temp_dir.mkdir(parents=True, exist_ok=True)

#     async def process_avatar(
#         self,
#         photo: Union[PhotoSize, List[PhotoSize]],
#         user_id: int,
#         style: Optional[str] = None
#     ) -> AvatarResult:
#         """
#         LEGACY: Обрабатывает аватар - ИСПОЛЬЗУЙТЕ app.services.avatar_db.AvatarService
#         """
#         raise NotImplementedError("LEGACY: Используйте app.services.avatar_db.AvatarService")

#     async def generate_avatar(
#         self,
#         user_id: int,
#         style: str,
#         prompt: Optional[str] = None
#     ) -> AvatarResult:
#         """
#         LEGACY: Генерирует новый аватар - ИСПОЛЬЗУЙТЕ app.services.avatar_db.AvatarService
#         """
#         raise NotImplementedError("LEGACY: Используйте app.services.avatar_db.AvatarService")

#     async def get_user_avatars(
#         self,
#         user_id: int,
#         limit: int = 10
#     ) -> List[AvatarResult]:
#         """
#         LEGACY: Получает список аватаров пользователя - ИСПОЛЬЗУЙТЕ app.services.avatar_db.AvatarService
#         """
#         raise NotImplementedError("LEGACY: Используйте app.services.avatar_db.AvatarService")

# Остальные методы закомментированы как LEGACY
# ... existing code ... 