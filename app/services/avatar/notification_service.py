"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
"""
from typing import Optional
from uuid import UUID

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.config import settings
from app.core.logger import get_logger
from app.database.models import Avatar, User
from app.services.user import UserService

logger = get_logger(__name__)


class AvatarNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.user_service = UserService(session)
    
    async def send_completion_notification(self, avatar: Avatar) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä, –æ–±—É—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_user_by_id(avatar.user_id)
            
            if not user or not user.telegram_id:
                logger.warning(f"[NOTIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                return False
            
            logger.info(f"[NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            bot = Bot(token=settings.TELEGRAM_TOKEN)
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                training_type = avatar.training_type.value if avatar.training_type else "style"
                
                if training_type == "portrait":
                    emoji = "üé≠"
                    type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
                else:
                    emoji = "üé®"
                    type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
                
                message = (
                    f"üéâ **–í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!**\n\n"
                    f"{emoji} **{avatar.name}** ({type_name} —Å—Ç–∏–ª—å)\n"
                    f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ‚Üí –ê–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
                        callback_data="avatar_gallery"
                    )],
                    [InlineKeyboardButton(
                        text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        callback_data=f"avatar_generate:{avatar.id}"
                    )]
                ])
                
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                
                logger.info(f"[NOTIFICATION] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                return True
                
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.exception(f"[NOTIFICATION] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
            return False
    
    async def send_completion_notification_by_id(self, avatar_id: UUID) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è –ø–æ ID –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            from sqlalchemy import select
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ë–î
            query = select(Avatar).where(Avatar.id == avatar_id)
            result = await self.session.execute(query)
            avatar = result.scalar_one_or_none()
            
            if not avatar:
                logger.warning(f"[NOTIFICATION] –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            return await self.send_completion_notification(avatar)
            
        except Exception as e:
            logger.exception(f"[NOTIFICATION] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            return False 