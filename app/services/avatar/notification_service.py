"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
"""
from typing import Optional
from uuid import UUID
from datetime import datetime, timedelta
import redis.asyncio as redis

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.config import settings
from app.core.logger import get_logger
from app.core.resources import RedisConfig
from app.database.models import Avatar, User
from app.services.user import UserService

logger = get_logger(__name__)class AvatarNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    _min_notification_interval = 30
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.user_service = UserService(session)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –¥–ª—è –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._redis_config = {
            "host": settings.REDIS_HOST,
            "port": settings.REDIS_PORT,
            "db": settings.REDIS_DB,
            "password": settings.REDIS_PASSWORD,
            "ssl": settings.REDIS_SSL,
            "socket_timeout": 5.0,
            "socket_connect_timeout": 5.0,
            "decode_responses": True,
            "encoding": "utf-8"
        }
    
    async def send_completion_notification(self, avatar: Avatar) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä, –æ–±—É—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
            if await self._is_notification_recently_sent(avatar.id):
                logger.info(f"[NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—à–∏–±–∫—É
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_user_by_id(avatar.user_id)
            
            if not user or not user.telegram_id:
                logger.warning(f"[NOTIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                return False
            
            logger.info(f"[NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            bot = Bot(token=settings.TELEGRAM_TOKEN)
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                training_type = avatar.training_type.value if avatar.training_type else "style"
                
                if training_type == "portrait":
                    emoji = "üé≠"
                    type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
                else:
                    emoji = "üé®"
                    type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
                
                message = (
                    f"üéâ **–í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!**\n\n"
                    f"{emoji} **{avatar.name}** ({type_name} —Å—Ç–∏–ª—å)\n"
                    f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ‚Üí –ê–≤–∞—Ç–∞—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
                        callback_data="avatar_gallery"
                    )],
                    [InlineKeyboardButton(
                        text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        callback_data=f"avatar_generate:{avatar.id}"
                    )]
                ])
                
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Redis –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self._mark_notification_sent(avatar.id)
                
                logger.info(f"[NOTIFICATION] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                return True
                
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.exception(f"[NOTIFICATION] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
            return False
    
    async def _is_notification_recently_sent(self, avatar_id: UUID) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ Redis
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ
        """
        redis_client = None
        try:
            redis_client = redis.Redis(**self._redis_config)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è Redis
            cache_key = f"{RedisConfig.KEY_PREFIXES['avatar_cache']}notification:{avatar_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ Redis
            exists = await redis_client.exists(cache_key)
            
            if exists:
                logger.debug(f"[NOTIFICATION] –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ Redis –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                return True
            
            return False
            
        except Exception as e:
            logger.warning(f"[NOTIFICATION] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis –∫—ç—à–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return False
            
        finally:
            if redis_client:
                await redis_client.close()
    
    async def _mark_notification_sent(self, avatar_id: UUID) -> None:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –≤ Redis, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
        """
        redis_client = None
        try:
            redis_client = redis.Redis(**self._redis_config)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è Redis
            cache_key = f"{RedisConfig.KEY_PREFIXES['avatar_cache']}notification:{avatar_id}"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Redis —Å TTL —Ä–∞–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –∑–∞—â–∏—Ç—ã
            await redis_client.setex(
                cache_key,
                self._min_notification_interval,
                datetime.utcnow().isoformat()
            )
            
            logger.debug(f"[NOTIFICATION] –ó–∞–ø–∏—Å–∞–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –≤ Redis –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} (TTL: {self._min_notification_interval}s)")
            
        except Exception as e:
            logger.warning(f"[NOTIFICATION] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis –∫—ç—à –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Redis –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            
        finally:
            if redis_client:
                await redis_client.close()
    
    async def send_completion_notification_by_id(self, avatar_id: UUID) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è –ø–æ ID –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            from sqlalchemy import select
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ë–î
            query = select(Avatar).where(Avatar.id == avatar_id)
            result = await self.session.execute(query)
            avatar = result.scalar_one_or_none()
            
            if not avatar:
                logger.warning(f"[NOTIFICATION] –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            return await self.send_completion_notification(avatar)
            
        except Exception as e:
            logger.exception(f"[NOTIFICATION] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            return False
