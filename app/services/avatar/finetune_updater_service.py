"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è finetune_id –∞–≤–∞—Ç–∞—Ä–æ–≤
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è status_checker, webhook –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
"""
import re
import logging
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime, timezone
from uuid import UUID

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update

from ...core.logger import get_logger
from ...database.models import Avatar, AvatarStatus, AvatarTrainingType

logger = get_logger(__name__)


class FinetuneUpdaterService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è finetune_id –∞–≤–∞—Ç–∞—Ä–æ–≤
    
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è:
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö finetune_id
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    - –ú–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ FAL AI
    """
    
    def __init__(self, session: AsyncSession):
        self.session = session
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UUID —Ñ–æ—Ä–º–∞—Ç–∞
        self.uuid_pattern = re.compile(
            r'^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$', 
            re.IGNORECASE
        )

    async def update_finetune_id_by_name(
        self, 
        avatar_name: str, 
        new_finetune_id: str,
        reason: str = "Manual update",
        updated_by: str = "finetune_updater_service"
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç finetune_id –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            avatar_name: –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞
            new_finetune_id: –ù–æ–≤—ã–π finetune_id
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updated_by: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ finetune_id –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ '{avatar_name}'")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π finetune_id
        if not self._is_valid_uuid(new_finetune_id):
            logger.error(f"‚ùå –ù–æ–≤—ã–π finetune_id '{new_finetune_id}' –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID")
            return False
        
        # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä
        query = select(Avatar).where(Avatar.name == avatar_name)
        result = await self.session.execute(query)
        avatar = result.scalar_one_or_none()
        
        if not avatar:
            logger.error(f"‚ùå –ê–≤–∞—Ç–∞—Ä '{avatar_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞
        if avatar.training_type != AvatarTrainingType.STYLE:
            logger.error(f"‚ùå –ê–≤–∞—Ç–∞—Ä '{avatar_name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Style —Ç–∏–ø–æ–º: {avatar.training_type}")
            return False
        
        old_finetune_id = avatar.finetune_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ finetune_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_finetune_id == new_finetune_id:
            logger.info(f"‚ÑπÔ∏è finetune_id –∞–≤–∞—Ç–∞—Ä–∞ '{avatar_name}' —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            return True
        
        logger.info(f"üîÑ –°—Ç–∞—Ä—ã–π finetune_id: {old_finetune_id}")
        logger.info(f"üîÑ –ù–æ–≤—ã–π finetune_id: {new_finetune_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = await self._perform_update(
            avatar=avatar,
            new_finetune_id=new_finetune_id,
            reason=reason,
            updated_by=updated_by
        )
        
        if success:
            logger.info(f"‚úÖ finetune_id –∞–≤–∞—Ç–∞—Ä–∞ '{avatar_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        return success

    async def update_finetune_id_by_id(
        self, 
        avatar_id: UUID, 
        new_finetune_id: str,
        reason: str = "Manual update",
        updated_by: str = "finetune_updater_service"
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç finetune_id –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ ID
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            new_finetune_id: –ù–æ–≤—ã–π finetune_id
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updated_by: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ finetune_id –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π finetune_id
        if not self._is_valid_uuid(new_finetune_id):
            logger.error(f"‚ùå –ù–æ–≤—ã–π finetune_id '{new_finetune_id}' –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        avatar = await self.session.get(Avatar, avatar_id)
        
        if not avatar:
            logger.error(f"‚ùå –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞
        if avatar.training_type != AvatarTrainingType.STYLE:
            logger.error(f"‚ùå –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Style —Ç–∏–ø–æ–º: {avatar.training_type}")
            return False
        
        old_finetune_id = avatar.finetune_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ finetune_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_finetune_id == new_finetune_id:
            logger.info(f"‚ÑπÔ∏è finetune_id –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            return True
        
        logger.info(f"üîÑ –°—Ç–∞—Ä—ã–π finetune_id: {old_finetune_id}")
        logger.info(f"üîÑ –ù–æ–≤—ã–π finetune_id: {new_finetune_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = await self._perform_update(
            avatar=avatar,
            new_finetune_id=new_finetune_id,
            reason=reason,
            updated_by=updated_by
        )
        
        if success:
            logger.info(f"‚úÖ finetune_id –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        return success

    async def bulk_update_invalid_finetune_ids(
        self, 
        finetune_id_mapping: Dict[str, str],
        reason: str = "Bulk update of invalid finetune_ids",
        updated_by: str = "bulk_finetune_updater"
    ) -> Dict[str, Any]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö finetune_id
        
        Args:
            finetune_id_mapping: –°–ª–æ–≤–∞—Ä—å {—Å—Ç–∞—Ä—ã–π_finetune_id: –Ω–æ–≤—ã–π_finetune_id}
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updated_by: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(finetune_id_mapping)} finetune_id")
        
        results = {
            "total_requested": len(finetune_id_mapping),
            "updated": 0,
            "errors": [],
            "skipped": []
        }
        
        for old_finetune_id, new_finetune_id in finetune_id_mapping.items():
            try:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π finetune_id
                if not self._is_valid_uuid(new_finetune_id):
                    error_msg = f"–ù–æ–≤—ã–π finetune_id '{new_finetune_id}' –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID"
                    logger.error(f"‚ùå {error_msg}")
                    results["errors"].append({"old_id": old_finetune_id, "error": error_msg})
                    continue
                
                # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ —Å—Ç–∞—Ä–æ–º—É finetune_id
                query = select(Avatar).where(Avatar.finetune_id == old_finetune_id)
                result = await self.session.execute(query)
                avatar = result.scalar_one_or_none()
                
                if not avatar:
                    skip_msg = f"–ê–≤–∞—Ç–∞—Ä —Å finetune_id '{old_finetune_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    logger.warning(f"‚ö†Ô∏è {skip_msg}")
                    results["skipped"].append({"old_id": old_finetune_id, "reason": skip_msg})
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.training_type != AvatarTrainingType.STYLE:
                    skip_msg = f"–ê–≤–∞—Ç–∞—Ä {avatar.name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Style —Ç–∏–ø–æ–º"
                    logger.warning(f"‚ö†Ô∏è {skip_msg}")
                    results["skipped"].append({"old_id": old_finetune_id, "reason": skip_msg})
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                success = await self._perform_update(
                    avatar=avatar,
                    new_finetune_id=new_finetune_id,
                    reason=f"{reason} (bulk operation)",
                    updated_by=updated_by
                )
                
                if success:
                    results["updated"] += 1
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞–≤–∞—Ç–∞—Ä {avatar.name}: {old_finetune_id} -> {new_finetune_id}")
                else:
                    results["errors"].append({
                        "old_id": old_finetune_id, 
                        "error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                    })
                
            except Exception as e:
                error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {old_finetune_id}: {str(e)}"
                logger.error(f"‚ùå {error_msg}")
                results["errors"].append({"old_id": old_finetune_id, "error": error_msg})
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        logger.info(f"   –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {results['total_requested']}")
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}")
        logger.info(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(results['skipped'])}")
        logger.info(f"   –û—à–∏–±–æ–∫: {len(results['errors'])}")
        
        return results

    async def find_avatars_with_invalid_finetune_ids(self) -> List[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id (–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID)
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ finetune_id
        """
        logger.info("üîç –ü–æ–∏—Å–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Style –∞–≤–∞—Ç–∞—Ä—ã —Å finetune_id
        query = select(Avatar).where(
            Avatar.training_type == AvatarTrainingType.STYLE,
            Avatar.finetune_id.isnot(None)
        )
        result = await self.session.execute(query)
        avatars = result.scalars().all()
        
        invalid_avatars = []
        
        for avatar in avatars:
            if not self._is_valid_uuid(avatar.finetune_id):
                invalid_avatars.append({
                    "id": str(avatar.id),
                    "name": avatar.name,
                    "finetune_id": avatar.finetune_id,
                    "status": avatar.status.value,
                    "created_at": avatar.created_at.isoformat() if avatar.created_at else None
                })
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(invalid_avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id")
        
        return invalid_avatars

    async def _perform_update(
        self, 
        avatar: Avatar, 
        new_finetune_id: str,
        reason: str,
        updated_by: str
    ) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ finetune_id –∞–≤–∞—Ç–∞—Ä–∞ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_finetune_id: –ù–æ–≤—ã–π finetune_id
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updated_by: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            old_finetune_id = avatar.finetune_id
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–±–ª—é–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            update_data = {
                "finetune_id": new_finetune_id,
                "updated_at": datetime.now(timezone.utc)
            }
            
            # –î–ª—è Style –∞–≤–∞—Ç–∞—Ä–æ–≤ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º LoRA –¥–∞–Ω–Ω—ã–µ
            if avatar.training_type == AvatarTrainingType.STYLE:
                update_data.update({
                    "diffusers_lora_file_url": None,
                    "config_file_url": None
                })
                
                # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º trigger_word
                if not avatar.trigger_word:
                    update_data["trigger_word"] = "TOK"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ avatar_data
            avatar_data = avatar.avatar_data or {}
            avatar_data["finetune_update_history"] = avatar_data.get("finetune_update_history", [])
            avatar_data["finetune_update_history"].append({
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "old_finetune_id": old_finetune_id,
                "new_finetune_id": new_finetune_id,
                "reason": reason,
                "updated_by": updated_by,
                "cleared_lora": bool(avatar.diffusers_lora_file_url),
                "added_trigger_word": not bool(avatar.trigger_word)
            })
            update_data["avatar_data"] = avatar_data
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            stmt = update(Avatar).where(Avatar.id == avatar.id).values(**update_data)
            await self.session.execute(stmt)
            await self.session.commit()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
            await self.session.rollback()
            return False

    def _is_valid_uuid(self, value: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
        
        Args:
            value: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è UUID
        """
        if not isinstance(value, str):
            return False
        
        return bool(self.uuid_pattern.match(value))

    async def get_update_history(self, avatar_id: UUID) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π finetune_id –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            
        Returns:
            List[Dict[str, Any]]: –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        avatar = await self.session.get(Avatar, avatar_id)
        
        if not avatar or not avatar.avatar_data:
            return []
        
        return avatar.avatar_data.get("finetune_update_history", []) 