"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ - —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞
"""
from typing import Dict, Any, Optional, Tuple
from uuid import UUID
import logging
import re
from datetime import datetime

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import update

from ...core.logger import get_logger
from ...database.models import Avatar, AvatarTrainingType, AvatarStatus

logger = get_logger(__name__)


class AvatarTrainingDataValidator:
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
    
    –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
    - Style –∞–≤–∞—Ç–∞—Ä—ã: –¢–û–õ–¨–ö–û finetune_id, diffusers_lora_file_url = NULL
    - Portrait –∞–≤–∞—Ç–∞—Ä—ã: –¢–û–õ–¨–ö–û diffusers_lora_file_url, finetune_id = NULL
    """

    def __init__(self, session: AsyncSession):
        self.session = session

    async def validate_and_fix_training_completion(
        self,
        avatar: Avatar,
        webhook_result: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º —Ç–∏–ø–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            webhook_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç FAL AI webhook
            
        Returns:
            Dict[str, Any]: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        """
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id} ({avatar.training_type})")
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        update_data = {
            "status": AvatarStatus.COMPLETED,
            "training_progress": 100,
            "training_completed_at": self._parse_completed_at(webhook_result.get("completed_at")),
            "fal_response_data": webhook_result
        }
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º trigger
        if not avatar.trigger_phrase and not avatar.trigger_word:
            if avatar.training_type == AvatarTrainingType.STYLE:
                update_data["trigger_word"] = "TOK"
                logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω trigger_word 'TOK' –¥–ª—è style –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            else:
                update_data["trigger_phrase"] = "TOK"
                logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω trigger_phrase 'TOK' –¥–ª—è portrait –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")

        # –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ü–û –¢–ò–ü–ê–ú –ê–í–ê–¢–ê–†–û–í
        if avatar.training_type == AvatarTrainingType.STYLE:
            # Style –∞–≤–∞—Ç–∞—Ä—ã: –¢–û–õ–¨–ö–û finetune_id
            finetune_id = self._extract_finetune_id(webhook_result)
            
            if finetune_id:
                update_data.update({
                    "finetune_id": finetune_id,
                    "diffusers_lora_file_url": None,  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º
                    "config_file_url": None
                })
                logger.info(f"‚úÖ Style –∞–≤–∞—Ç–∞—Ä {avatar.id}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω finetune_id='{finetune_id}', LoRA –æ—á–∏—â–µ–Ω")
            else:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - Style –∞–≤–∞—Ç–∞—Ä –±–µ–∑ finetune_id
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Style –∞–≤–∞—Ç–∞—Ä {avatar.id} –Ω–µ –ø–æ–ª—É—á–∏–ª finetune_id!")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback finetune_id
                fallback_id = f"fallback-style-{avatar.name.lower()}-{avatar.id.hex[:8]}"
                update_data.update({
                    "finetune_id": fallback_id,
                    "diffusers_lora_file_url": None,
                    "config_file_url": None
                })
                logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback finetune_id: {fallback_id}")
                
        elif avatar.training_type == AvatarTrainingType.PORTRAIT:
            # Portrait –∞–≤–∞—Ç–∞—Ä—ã: –¢–û–õ–¨–ö–û LoRA —Ñ–∞–π–ª—ã
            lora_url = self._extract_lora_url(webhook_result)
            config_url = self._extract_config_url(webhook_result)
            
            if lora_url:
                update_data.update({
                    "diffusers_lora_file_url": lora_url,
                    "config_file_url": config_url,
                    "finetune_id": None  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º
                })
                logger.info(f"‚úÖ Portrait –∞–≤–∞—Ç–∞—Ä {avatar.id}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω LoRA='{lora_url}', finetune_id –æ—á–∏—â–µ–Ω")
            else:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - Portrait –∞–≤–∞—Ç–∞—Ä –±–µ–∑ LoRA
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Portrait –∞–≤–∞—Ç–∞—Ä {avatar.id} –Ω–µ –ø–æ–ª—É—á–∏–ª LoRA —Ñ–∞–π–ª!")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback LoRA
                fallback_lora = f"https://fallback-lora.com/{avatar.name.lower()}-{avatar.id.hex[:8]}.safetensors"
                fallback_config = f"https://fallback-lora.com/{avatar.name.lower()}-{avatar.id.hex[:8]}-config.json"
                update_data.update({
                    "diffusers_lora_file_url": fallback_lora,
                    "config_file_url": fallback_config,
                    "finetune_id": None
                })
                logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback LoRA: {fallback_lora}")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞: {avatar.training_type}")
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≤–∞—Ç–∞—Ä–∞: {avatar.training_type}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self._validate_final_data(avatar.training_type, update_data)
        
        return update_data

    def _extract_finetune_id(self, webhook_result: Dict[str, Any]) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç finetune_id –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ webhook —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞
        finetune_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID (–Ω–∞–ø—Ä–∏–º–µ—Ä: f1e4776e-3e9a-4a2c-b96d-af5333ef7203)
        """
        # UUID pattern (–¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Å –¥–µ—Ñ–∏—Å–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑)
        uuid_pattern = re.compile(r'^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$', re.IGNORECASE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        potential_ids = []
        
        # 1. –ü—Ä—è–º–æ–π finetune_id –≤ –∫–æ—Ä–Ω–µ
        if webhook_result.get("finetune_id"):
            potential_ids.append(("root.finetune_id", webhook_result["finetune_id"]))
        
        # 2. finetune_id –≤ result
        result = webhook_result.get("result", {})
        if result.get("finetune_id"):
            potential_ids.append(("result.finetune_id", result["finetune_id"]))
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è result –Ω–∞ UUID —Ñ–æ—Ä–º–∞—Ç
        if isinstance(result, dict):
            for key, value in result.items():
                if isinstance(value, str) and uuid_pattern.match(value):
                    potential_ids.append((f"result.{key}", value))
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –ø–æ–ª—è –Ω–∞ UUID —Ñ–æ—Ä–º–∞—Ç
        for key, value in webhook_result.items():
            if key != "result" and isinstance(value, str) and uuid_pattern.match(value):
                potential_ids.append((f"root.{key}", value))
        
        # 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ fallback (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ UUID)
        for field in ["model_id", "id", "fine_tune_id", "finetune", "model"]:
            value = webhook_result.get(field) or result.get(field)
            if value and isinstance(value, str) and uuid_pattern.match(value):
                potential_ids.append((f"fallback.{field}", value))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ potential_ids
        if potential_ids:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ finetune_id:")
            for source, value in potential_ids:
                logger.info(f"   {source}: {value}")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π UUID
            selected_id = potential_ids[0][1]
            selected_source = potential_ids[0][0]
            
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω finetune_id: {selected_id} (–∏—Å—Ç–æ—á–Ω–∏–∫: {selected_source})")
            return selected_id
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π finetune_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID")
            logger.debug(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è webhook: {list(webhook_result.keys())}")
            if result:
                logger.debug(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è result: {list(result.keys())}")
            return None

    def _extract_lora_url(self, webhook_result: Dict[str, Any]) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL LoRA —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ webhook"""
        result = webhook_result.get("result", webhook_result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        lora_url = None
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 1: direct URL
        if "diffusers_lora_file_url" in result:
            lora_url = result["diffusers_lora_file_url"]
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 2: –æ–±—ä–µ–∫—Ç —Å URL
        elif "diffusers_lora_file" in result:
            diffusers_file = result["diffusers_lora_file"]
            if isinstance(diffusers_file, dict):
                lora_url = diffusers_file.get("url")
            else:
                lora_url = diffusers_file
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 3: –≤ files –º–∞—Å—Å–∏–≤–µ
        elif "files" in result:
            files = result["files"]
            for file_info in files:
                if file_info.get("type") == "lora" or "lora" in file_info.get("filename", "").lower():
                    lora_url = file_info.get("url")
                    break
        
        logger.debug(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω LoRA URL: {lora_url}")
        return lora_url

    def _extract_config_url(self, webhook_result: Dict[str, Any]) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ webhook"""
        result = webhook_result.get("result", webhook_result)
        
        config_url = None
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 1: direct URL
        if "config_file_url" in result:
            config_url = result["config_file_url"]
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 2: –æ–±—ä–µ–∫—Ç —Å URL
        elif "config_file" in result:
            config_file = result["config_file"]
            if isinstance(config_file, dict):
                config_url = config_file.get("url")
            else:
                config_url = config_file
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 3: –≤ files –º–∞—Å—Å–∏–≤–µ
        elif "files" in result:
            files = result["files"]
            for file_info in files:
                if file_info.get("type") == "config" or "config" in file_info.get("filename", "").lower():
                    config_url = file_info.get("url")
                    break
        
        logger.debug(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω Config URL: {config_url}")
        return config_url

    def _validate_final_data(self, training_type: AvatarTrainingType, update_data: Dict[str, Any]) -> None:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        # LEGACY: Style –∞–≤–∞—Ç–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        # if training_type == AvatarTrainingType.STYLE:
        #     if not update_data.get("finetune_id"):
        #         raise ValueError("Style –∞–≤–∞—Ç–∞—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å finetune_id")
        #     if update_data.get("diffusers_lora_file_url"):
        #         raise ValueError("Style –∞–≤–∞—Ç–∞—Ä –ù–ï –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å LoRA —Ñ–∞–π–ª—ã")
        # 
        # elif training_type == AvatarTrainingType.PORTRAIT:
        
        if training_type == AvatarTrainingType.PORTRAIT:
            if not update_data.get("diffusers_lora_file_url"):
                raise ValueError("Portrait –∞–≤–∞—Ç–∞—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å LoRA —Ñ–∞–π–ª")
            if update_data.get("finetune_id"):
                raise ValueError("Portrait –∞–≤–∞—Ç–∞—Ä –ù–ï –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å finetune_id")
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
        
        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {training_type.value} –∞–≤–∞—Ç–∞—Ä–∞")

    def _parse_completed_at(self, completed_at_str: Optional[str]) -> datetime:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É completed_at –≤ datetime –æ–±—ä–µ–∫—Ç
        
        Args:
            completed_at_str: –°—Ç—Ä–æ–∫–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ None
            
        Returns:
            datetime: –û–±—ä–µ–∫—Ç datetime
        """
        if not completed_at_str:
            return datetime.utcnow()
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å ISO —Ñ–æ—Ä–º–∞—Ç
            from datetime import datetime as dt
            # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if '.' in completed_at_str:
                completed_at_str = completed_at_str.split('.')[0]
            
            # –£–±–∏—Ä–∞–µ–º Z –µ—Å–ª–∏ –µ—Å—Ç—å
            if completed_at_str.endswith('Z'):
                completed_at_str = completed_at_str[:-1]
            
            # –ü–∞—Ä—Å–∏–º
            return dt.fromisoformat(completed_at_str)
            
        except (ValueError, TypeError) as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å completed_at '{completed_at_str}': {e}")
            return datetime.utcnow()

    async def validate_avatar_before_training(self, avatar: Avatar) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Tuple[bool, str]: (–≥–æ—Ç–æ–≤_–∫_–æ–±—É—á–µ–Ω–∏—é, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        if avatar.status != AvatarStatus.PENDING:
            return False, f"–ê–≤–∞—Ç–∞—Ä –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING: {avatar.status}"
        
        if not avatar.training_type:
            return False, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è"
        
        if avatar.training_type not in [AvatarTrainingType.PORTRAIT]:  # LEGACY: —É–±—Ä–∞–Ω AvatarTrainingType.STYLE
            return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è: {avatar.training_type}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï–¢ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
        has_lora = bool(avatar.diffusers_lora_file_url)
        has_finetune = bool(avatar.finetune_id)
        
        if has_lora and has_finetune:
            logger.warning(f"‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä {avatar.id} –∏–º–µ–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ - –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º")
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._clear_training_data(avatar.id)
        
        return True, "–ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é"

    async def _clear_training_data(self, avatar_id: UUID) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"""
        stmt = (
            update(Avatar)
            .where(Avatar.id == avatar_id)
            .values(
                finetune_id=None,
                diffusers_lora_file_url=None,
                config_file_url=None,
                fal_response_data=None
            )
        )
        
        await self.session.execute(stmt)
        await self.session.commit()
        logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")

    def get_training_config_for_type(
        self,
        training_type: AvatarTrainingType,
        user_preferences: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            user_preferences: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
        Returns:
            Dict[str, Any]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        """
        base_config = {
            "training_type": training_type.value,
            "quality": user_preferences.get("quality", "balanced") if user_preferences else "balanced"
        }
        
        # LEGACY: Style –∞–≤–∞—Ç–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        # if training_type == AvatarTrainingType.STYLE:
        #     # Style –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç trigger_word
        #     base_config.update({
        #         "trigger_type": "word",
        #         "api_endpoint": "flux-pro-trainer",
        #         "expected_result": "finetune_id"
        #     })
        # else:
        
        if training_type == AvatarTrainingType.PORTRAIT:
            # Portrait –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç trigger_phrase  
            base_config.update({
                "trigger_type": "phrase", 
                "api_endpoint": "flux-lora-portrait-trainer",
                "expected_result": "diffusers_lora_file"
            })
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
        
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {training_type}: {base_config}")
        return base_config 