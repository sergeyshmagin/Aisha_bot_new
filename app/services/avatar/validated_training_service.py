"""
–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
"""
from datetime import datetime
from typing import Dict, Any, Optional, Tuple
from uuid import UUID
import asyncio

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update

from ...core.config import settings
from ...core.logger import get_logger
from ...database.models import Avatar, AvatarStatus, AvatarTrainingType
from .training_data_validator import AvatarTrainingDataValidator
from .fal_training_service.main_service import FALTrainingService

logger = get_logger(__name__)class ValidatedTrainingService:
    """
    –°–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –í–∞–ª–∏–¥–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏—è
    - –û—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É –∞–≤–∞—Ç–∞—Ä–∞
    - –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
    """

    def __init__(self, session: AsyncSession):
        self.session = session
        self.data_validator = AvatarTrainingDataValidator(session)
        self.fal_service = FALTrainingService()

    async def start_validated_training(
        self,
        avatar_id: UUID,
        user_preferences: Optional[Dict[str, Any]] = None
    ) -> Tuple[bool, str, Optional[str]]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            user_preferences: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
        Returns:
            Tuple[bool, str, Optional[str]]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, request_id)
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar = await self._get_avatar(avatar_id)
            if not avatar:
                return False, f"–ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", None

            # 2. –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ï–†–ï–î –û–ë–£–ß–ï–ù–ò–ï–ú
            is_ready, validation_message = await self.data_validator.validate_avatar_before_training(avatar)
            if not is_ready:
                logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {validation_message}")
                return False, f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {validation_message}", None

            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {validation_message}")

            # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∏–ø–∞ –∞–≤–∞—Ç–∞—Ä–∞
            training_config = self.data_validator.get_training_config_for_type(
                avatar.training_type,
                user_preferences
            )

            # 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            training_data_url = await self._prepare_training_data(avatar_id)
            if not training_data_url:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", None

            # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ü–ï–†–ï–î –æ–±—É—á–µ–Ω–∏–µ–º
            await self._set_correct_triggers(avatar)

            # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—É—á–µ–Ω–∏–µ"
            await self._update_avatar_status(avatar_id, AvatarStatus.TRAINING, 0)

            # 7. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FAL —Å–µ—Ä–≤–∏—Å
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ {avatar.training_type.value} –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
            request_id = await self.fal_service.start_avatar_training(
                avatar_id=avatar_id,
                training_type=training_config["training_type"],
                training_data_url=training_data_url,
                user_preferences=user_preferences
            )

            if not request_id:
                await self._update_avatar_status(avatar_id, AvatarStatus.ERROR, error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
                return False, "FAL AI –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", None

            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id –≤ –ë–î
            await self._save_training_request(avatar_id, request_id, training_config)

            # üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ status_checker
            try:
                from app.services.avatar.fal_training_service.status_checker import status_checker
                training_type = training_config.get("training_type", "portrait")
                await status_checker.start_status_monitoring(avatar_id, request_id, training_type)
                logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ status_checker –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, request_id: {request_id}")
            except Exception as monitor_error:
                logger.warning(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {monitor_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

            logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: request_id={request_id}")
            return True, f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", request_id

        except Exception as e:
            logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            
            try:
                await self._update_avatar_status(avatar_id, AvatarStatus.ERROR, error_message=str(e))
            except Exception as rollback_error:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: {rollback_error}")
            
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {str(e)}", None

    async def _get_avatar(self, avatar_id: UUID) -> Optional[Avatar]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ ID"""
        query = select(Avatar).where(Avatar.id == avatar_id)
        result = await self.session.execute(query)
        return result.scalar_one_or_none()

    async def _prepare_training_data(self, avatar_id: UUID) -> Optional[str]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç URL —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –õ–æ–≥–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞
            # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ MinIO –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # 4. –í–æ–∑–≤—Ä–∞—Ç URL –∞—Ä—Ö–∏–≤–∞
            
            mock_data_url = f"https://training-data.example.com/avatars/{avatar_id}/photos.zip"
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {mock_data_url}")
            
            return mock_data_url
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            return None

    async def _set_correct_triggers(self, avatar: Avatar) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Ç–∏–ø–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
        update_data = {}
        
        if avatar.training_type == AvatarTrainingType.STYLE:
            # Style –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç trigger_word
            if not avatar.trigger_word:
                trigger_word = f"TOK_{avatar.id.hex[:8]}"
                update_data["trigger_word"] = trigger_word
                logger.info(f"üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω trigger_word –¥–ª—è style –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: '{trigger_word}'")
        else:
            # Portrait –∞–≤–∞—Ç–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç trigger_phrase
            if not avatar.trigger_phrase:
                trigger_phrase = f"TOK_{avatar.id.hex[:8]}"
                update_data["trigger_phrase"] = trigger_phrase
                logger.info(f"üë§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω trigger_phrase –¥–ª—è portrait –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: '{trigger_phrase}'")

        if update_data:
            stmt = update(Avatar).where(Avatar.id == avatar.id).values(**update_data)
            await self.session.execute(stmt)
            await self.session.commit()

    async def _update_avatar_status(
        self,
        avatar_id: UUID,
        status: AvatarStatus,
        progress: Optional[int] = None,
        error_message: Optional[str] = None
    ) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞"""
        update_data = {
            "status": status,
            "updated_at": datetime.utcnow()
        }
        
        if progress is not None:
            update_data["training_progress"] = progress
        
        if error_message:
            update_data["error_message"] = error_message
            
        if status == AvatarStatus.TRAINING:
            update_data["training_started_at"] = datetime.utcnow()

        stmt = update(Avatar).where(Avatar.id == avatar_id).values(**update_data)
        await self.session.execute(stmt)
        await self.session.commit()
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status.value}")

    async def _save_training_request(
        self,
        avatar_id: UUID,
        request_id: str,
        training_config: Dict[str, Any]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"""
        update_data = {
            "fal_request_id": request_id,
            "training_config": training_config,
            "training_started_at": datetime.utcnow()
        }
        
        stmt = update(Avatar).where(Avatar.id == avatar_id).values(**update_data)
        await self.session.execute(stmt)
        await self.session.commit()
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω request_id {request_id} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")

    async def validate_and_fix_existing_avatar(self, avatar_id: UUID) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Dict[str, Any]: –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        """
        try:
            avatar = await self._get_avatar(avatar_id)
            if not avatar:
                return {"error": f"–ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            report = {
                "avatar_id": str(avatar_id),
                "name": avatar.name,
                "training_type": avatar.training_type.value if avatar.training_type else None,
                "status": avatar.status.value if avatar.status else None,
                "issues_found": [],
                "fixes_applied": []
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if avatar.status != AvatarStatus.COMPLETED:
                report["issues_found"].append(f"–°—Ç–∞—Ç—É—Å –Ω–µ COMPLETED: {avatar.status}")
                return report

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if avatar.training_type == AvatarTrainingType.STYLE:
                # Style –∞–≤–∞—Ç–∞—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å finetune_id –∏ –ù–ï –∏–º–µ—Ç—å LoRA
                if not avatar.finetune_id:
                    report["issues_found"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç finetune_id –¥–ª—è style –∞–≤–∞—Ç–∞—Ä–∞")
                    
                if avatar.diffusers_lora_file_url:
                    report["issues_found"].append("Style –∞–≤–∞—Ç–∞—Ä –∏–º–µ–µ—Ç LoRA —Ñ–∞–π–ª (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ finetune_id)")
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
                    await self.session.execute(
                        update(Avatar)
                        .where(Avatar.id == avatar_id)
                        .values(diffusers_lora_file_url=None, config_file_url=None)
                    )
                    await self.session.commit()
                    report["fixes_applied"].append("–£–¥–∞–ª–µ–Ω LoRA —Ñ–∞–π–ª –∏–∑ style –∞–≤–∞—Ç–∞—Ä–∞")

            elif avatar.training_type == AvatarTrainingType.PORTRAIT:
                # Portrait –∞–≤–∞—Ç–∞—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å LoRA –∏ –ù–ï –∏–º–µ—Ç—å finetune_id
                if not avatar.diffusers_lora_file_url:
                    report["issues_found"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç LoRA —Ñ–∞–π–ª –¥–ª—è portrait –∞–≤–∞—Ç–∞—Ä–∞")
                    
                if avatar.finetune_id:
                    report["issues_found"].append("Portrait –∞–≤–∞—Ç–∞—Ä –∏–º–µ–µ—Ç finetune_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ LoRA —Ñ–∞–π–ª)")
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
                    await self.session.execute(
                        update(Avatar)
                        .where(Avatar.id == avatar_id)
                        .values(finetune_id=None)
                    )
                    await self.session.commit()
                    report["fixes_applied"].append("–£–¥–∞–ª–µ–Ω finetune_id –∏–∑ portrait –∞–≤–∞—Ç–∞—Ä–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            if avatar.training_type == AvatarTrainingType.STYLE and not avatar.trigger_word:
                report["issues_found"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trigger_word –¥–ª—è style –∞–≤–∞—Ç–∞—Ä–∞")
                
            if avatar.training_type == AvatarTrainingType.PORTRAIT and not avatar.trigger_phrase:
                report["issues_found"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trigger_phrase –¥–ª—è portrait –∞–≤–∞—Ç–∞—Ä–∞")

            report["is_valid"] = len(report["issues_found"]) == 0
            return report

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            return {"error": str(e)}

    def get_validation_rules(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        return {
            "style_avatars": {
                "required_fields": ["finetune_id", "trigger_word"],
                "forbidden_fields": ["diffusers_lora_file_url"],
                "api_endpoint": "fal-ai/flux-pro/v1.1-ultra-finetuned"
            },
            "portrait_avatars": {
                "required_fields": ["diffusers_lora_file_url", "trigger_phrase"],
                "forbidden_fields": ["finetune_id"],
                "api_endpoint": "fal-ai/flux-lora"
            },
            "common_rules": [
                "–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–≤–∞—Ç–∞—Ä",
                "–¢—Ä–∏–≥–≥–µ—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
                "–°—Ç–∞—Ç—É—Å COMPLETED –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤",
                "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"
            ]
        }
