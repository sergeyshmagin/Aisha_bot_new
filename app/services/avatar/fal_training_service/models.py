"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è FAL Training Service
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/services/avatar/fal_training_service.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from typing import Dict, Any, Optional
from uuid import UUID
from dataclasses import dataclass

from app.core.config import settings@dataclass
class TrainingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    avatar_id: UUID
    training_type: str  # "portrait" –∏–ª–∏ "style"
    training_data_url: str
    user_preferences: Optional[Dict] = None
    
    def get_quality_preset(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.user_preferences:
            return "balanced"
        return self.user_preferences.get("quality", "balanced")@dataclass
class TrainingRequest:
    """–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"""
    request_id: str
    avatar_id: UUID
    training_type: str
    config: Dict[str, Any]
    webhook_url: Optional[str] = Noneclass FALConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ FAL AI"""
    
    @staticmethod
    def get_quality_preset(quality: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        presets = {
            "fast": settings.FAL_PRESET_FAST,
            "balanced": settings.FAL_PRESET_BALANCED,
            "quality": settings.FAL_PRESET_QUALITY
        }
        return presets.get(quality, settings.FAL_PRESET_BALANCED)
    
    @staticmethod
    def get_training_type_info(training_type: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—É—á–µ–Ω–∏—è"""
        
        info = {
            "portrait": {
                "name": "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
                "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª—é–¥–µ–π",
                "speed": "‚≠ê‚≠ê‚≠ê‚≠ê (3-15 –º–∏–Ω—É—Ç)",
                "quality_portraits": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
                "best_for": ["–°–µ–ª—Ñ–∏", "–ü–æ—Ä—Ç—Ä–µ—Ç—ã", "–§–æ—Ç–æ –ª—é–¥–µ–π"],
                "technology": "Flux LoRA Portrait Trainer"
            },
            "style": {
                "name": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", 
                "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "speed": "‚≠ê‚≠ê‚≠ê (5-30 –º–∏–Ω—É—Ç)",
                "quality_portraits": "‚≠ê‚≠ê‚≠ê‚≠ê",
                "best_for": ["–°—Ç–∏–ª–∏", "–û–±—ä–µ–∫—Ç—ã", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"],
                "technology": "Flux Pro Trainer"
            }
        }
        
        return info.get(training_type, info["portrait"])
    
    @staticmethod
    def get_config_summary(test_mode: bool, webhook_url: str, fal_client_available: bool) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "test_mode": test_mode,
            "webhook_url": webhook_url,
            "fal_client_available": fal_client_available,
            "api_key_configured": bool(settings.FAL_API_KEY),
            "supported_training_types": ["portrait", "style"],
            "quality_presets": ["fast", "balanced", "quality"]
        }class WebhookURLBuilder:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å URL –¥–ª—è webhook"""
    
    @staticmethod
    def build_webhook_url(base_webhook_url: str, training_type: str) -> Optional[str]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç URL webhook —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API —Å–µ—Ä–≤–µ—Ä —Å SSL
        """
        from app.core.logger import get_logger
        logger = get_logger(__name__)
        
        logger.info(f"üîó –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï WEBHOOK URL:")
        logger.info(f"   Training type: {training_type}")
        logger.info(f"   Base webhook URL: {base_webhook_url}")
        
        if not base_webhook_url:
            logger.warning(f"   ‚ùå Base webhook URL –ø—É—Å—Ç–æ–π!")
            return None
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint API —Å–µ—Ä–≤–µ—Ä–∞
        base_url = "https://aibots.kz:8443/api/v1/avatar/status_update"
        logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º base_url: {base_url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        separator = "&" if "?" in base_url else "?"
        final_url = f"{base_url}{separator}training_type={training_type}"
        
        logger.info(f"   Separator: '{separator}'")
        logger.info(f"   ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π webhook URL: {final_url}")
        
        return final_url
