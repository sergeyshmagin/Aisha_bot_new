"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ FAL AI
–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ webhook –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç
"""
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from uuid import UUID

from app.core.logger import get_logger
from app.core.config import settings
from app.database.models import Avatar, AvatarStatus
from app.core.database import get_session

logger = get_logger(__name__)


class FALStatusChecker:
    """–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ FAL AI"""
    
    def __init__(self):
        self.fal_api_key = settings.FAL_API_KEY or settings.FAL_KEY
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.max_check_duration = 3600  # –ú–∞–∫—Å–∏–º—É–º 1 —á–∞—Å –ø—Ä–æ–≤–µ—Ä–æ–∫
        
    async def start_status_monitoring(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
        """
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, request_id: {request_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._monitor_training_status(avatar_id, request_id, training_type))
    
    async def _monitor_training_status(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
        """
        start_time = datetime.utcnow()
        max_end_time = start_time + timedelta(seconds=self.max_check_duration)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:  # style
            endpoint = "fal-ai/flux-pro-trainer"
        
        status_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}/status"
        
        # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)
        logger.info(f"üîç –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}...")
        await asyncio.sleep(90)
        
        consecutive_not_training_checks = 0
        max_consecutive_checks = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        
        while datetime.utcnow() < max_end_time:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ FAL AI
                status_data = await self._check_fal_status(status_url)
                
                if status_data:
                    fal_status = status_data.get("status")
                    logger.debug(f"üîç FAL AI —Å—Ç–∞—Ç—É—Å –¥–ª—è {avatar_id}: {fal_status}")
                    
                    # –ï—Å–ª–∏ FAL AI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if fal_status in ["IN_QUEUE", "IN_PROGRESS"]:
                        consecutive_not_training_checks = 0
                        await self._process_status_update(avatar_id, request_id, training_type, status_data)
                        
                    elif fal_status == "COMPLETED":
                        logger.info(f"üîç –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                        await self._process_status_update(avatar_id, request_id, training_type, status_data)
                        return
                        
                    elif fal_status in ["FAILED", "CANCELLED"]:
                        logger.warning(f"üîç –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {fal_status}")
                        await self._process_status_update(avatar_id, request_id, training_type, status_data)
                        return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ FAL AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                if not status_data:
                    async with get_session() as session:
                        avatar = await session.get(Avatar, avatar_id)
                        if not avatar:
                            logger.warning(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                            return
                            
                        if avatar.status != AvatarStatus.TRAINING:
                            consecutive_not_training_checks += 1
                            logger.info(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ TRAINING ({consecutive_not_training_checks}/{max_consecutive_checks})")
                            
                            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥
                            if consecutive_not_training_checks >= max_consecutive_checks:
                                logger.info(f"üîç –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} (—Å—Ç–∞—Ç—É—Å: {avatar.status.value})")
                                return
                        else:
                            consecutive_not_training_checks = 0
                
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"üîç –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
                await asyncio.sleep(self.check_interval)
        
        logger.warning(f"üîç –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
    
    async def _check_fal_status(self, status_url: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI
        
        Args:
            status_url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        headers = {
            "Authorization": f"Key {self.fal_api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(status_url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.debug(f"üîç –°—Ç–∞—Ç—É—Å FAL AI: {data}")
                        return data
                    else:
                        logger.warning(f"üîç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ FAL AI: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ FAL AI: {e}")
            return None
    
    async def _process_status_update(self, avatar_id: UUID, request_id: str, training_type: str, status_data: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç FAL AI
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            status_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç FAL AI
        """
        fal_status = status_data.get("status")
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ FAL AI –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            "IN_QUEUE": AvatarStatus.TRAINING,
            "IN_PROGRESS": AvatarStatus.TRAINING,
            "COMPLETED": AvatarStatus.COMPLETED,
            "FAILED": AvatarStatus.ERROR,
            "CANCELLED": AvatarStatus.CANCELLED,
        }
        
        new_status = status_mapping.get(fal_status, AvatarStatus.TRAINING)
        
        logger.info(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {fal_status} -> {new_status.value}")
        
        # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if fal_status == "COMPLETED":
            await self._handle_training_completion(avatar_id, request_id, training_type, status_data)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
            await self._update_avatar_status(avatar_id, new_status)
    
    async def _handle_training_completion(self, avatar_id: UUID, request_id: str, training_type: str, status_data: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            status_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç FAL AI
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_data = await self._get_training_result(request_id, training_type)
            
            if result_data:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º webhook –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                webhook_data = {
                    "request_id": request_id,
                    "status": "completed",
                    "result": result_data.get("response", {})
                }
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Å–µ—Å—Å–∏–µ–π
                async with get_session() as session:
                    from app.services.avatar.training_service.webhook_handler import WebhookHandler
                    webhook_handler = WebhookHandler(session)
                    
                    success = await webhook_handler.handle_webhook(webhook_data)
                    
                    if success:
                        logger.info(f"üîç –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ status checker")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try:
                            from app.services.avatar.notification_service import AvatarNotificationService
                            notification_service = AvatarNotificationService(session)
                            notification_sent = await notification_service.send_completion_notification_by_id(avatar_id)
                            
                            if notification_sent:
                                logger.info(f"üîç ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                            else:
                                logger.warning(f"üîç ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                                
                        except Exception as notification_error:
                            logger.error(f"üîç ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {notification_error}")
                        
                    else:
                        logger.error(f"üîç –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                        await self._update_avatar_status(avatar_id, AvatarStatus.ERROR)
            else:
                logger.error(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                await self._update_avatar_status(avatar_id, AvatarStatus.ERROR)
                
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            await self._update_avatar_status(avatar_id, AvatarStatus.ERROR)
    
    async def _get_training_result(self, request_id: str, training_type: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –æ—Ç FAL AI
        
        Args:
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint
        if training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:  # style
            endpoint = "fal-ai/flux-pro-trainer"
        
        result_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}"
        
        headers = {
            "Authorization": f"Key {self.fal_api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(result_url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è: {data}")
                        return data
                    else:
                        logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return None
    
    async def _update_avatar_status(self, avatar_id: UUID, status: AvatarStatus) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ë–î
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        try:
            async with get_session() as session:
                avatar = await session.get(Avatar, avatar_id)
                if avatar:
                    avatar.status = status
                    if status == AvatarStatus.COMPLETED:
                        avatar.training_completed_at = datetime.utcnow()
                        avatar.training_progress = 100
                    
                    await session.commit()
                    logger.info(f"üîç –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status.value}")
                    
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
status_checker = FALStatusChecker() 