"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ FAL AI
–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ webhook –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç
"""
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from uuid import UUID

from app.core.logger import get_logger
from app.core.config import settings
from app.database.models import Avatar, AvatarStatus, AvatarTrainingType
from app.core.database import get_session

logger = get_logger(__name__)


class FALStatusChecker:
    """–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ FAL AI"""
    
    def __init__(self):
        self.fal_api_key = settings.FAL_API_KEY or settings.FAL_KEY
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.max_check_duration = 3600  # –ú–∞–∫—Å–∏–º—É–º 1 —á–∞—Å –ø—Ä–æ–≤–µ—Ä–æ–∫
        
    async def start_status_monitoring(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
        """
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, request_id: {request_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._monitor_training_status(avatar_id, request_id, training_type))
    
    async def update_finetune_id_if_needed(
        self, 
        avatar_id: UUID, 
        new_finetune_id: str,
        reason: str = "Updated via status_checker"
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç finetune_id –∞–≤–∞—Ç–∞—Ä–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            new_finetune_id: –ù–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π finetune_id
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            async with get_session() as session:
                from app.services.avatar.finetune_updater_service import FinetuneUpdaterService
                
                updater = FinetuneUpdaterService(session)
                
                success = await updater.update_finetune_id_by_id(
                    avatar_id=avatar_id,
                    new_finetune_id=new_finetune_id,
                    reason=reason,
                    updated_by="fal_status_checker"
                )
                
                if success:
                    logger.info(f"üîÑ ‚úÖ finetune_id –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ status_checker")
                else:
                    logger.error(f"üîÑ ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å finetune_id –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                
                return success
                
        except Exception as e:
            logger.error(f"üîÑ ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è finetune_id –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            return False
    
    async def check_and_fix_invalid_finetune_ids(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id...")
        
        try:
            async with get_session() as session:
                from app.services.avatar.finetune_updater_service import FinetuneUpdaterService
                
                updater = FinetuneUpdaterService(session)
                
                # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id
                invalid_avatars = await updater.find_avatars_with_invalid_finetune_ids()
                
                result = {
                    "found_invalid": len(invalid_avatars),
                    "fixed": 0,
                    "errors": [],
                    "details": []
                }
                
                if not invalid_avatars:
                    logger.info("üîç ‚úÖ –í—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ finetune_id")
                    return result
                
                logger.warning(f"üîç ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(invalid_avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ finetune_id")
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º finetune_id
                for avatar_info in invalid_avatars:
                    avatar_name = avatar_info["name"]
                    invalid_finetune_id = avatar_info["finetune_id"]
                    
                    logger.warning(f"üîç ‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä {avatar_name} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π finetune_id: {invalid_finetune_id}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    result["details"].append({
                        "avatar_name": avatar_name,
                        "avatar_id": avatar_info["id"],
                        "invalid_finetune_id": invalid_finetune_id,
                        "status": avatar_info["status"],
                        "action": "requires_manual_update"
                    })
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö ID
                
                logger.info(f"üîç üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {result['found_invalid']}")
                logger.info(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {result['fixed']}")
                logger.info(f"   –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {len(result['details'])}")
                
                return result
                
        except Exception as e:
            logger.error(f"üîç ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö finetune_id: {e}")
            return {"error": str(e)}
    
    async def _monitor_training_status(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
        """
        start_time = datetime.utcnow()
        max_end_time = start_time + timedelta(seconds=self.max_check_duration)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:  # style
            endpoint = "fal-ai/flux-pro-trainer"
        
        status_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}/status"
        
        # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)
        logger.info(f"üîç –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}...")
        await asyncio.sleep(90)
        
        consecutive_not_training_checks = 0
        max_consecutive_checks = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ä—è–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        
        while datetime.utcnow() < max_end_time:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ FAL AI
                status_data = await self._check_fal_status(status_url)
                
                if status_data:
                    fal_status = status_data.get("status")
                    logger.debug(f"üîç FAL AI —Å—Ç–∞—Ç—É—Å –¥–ª—è {avatar_id}: {fal_status}")
                    
                    # –ï—Å–ª–∏ FAL AI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if fal_status in ["IN_QUEUE", "IN_PROGRESS"]:
                        consecutive_not_training_checks = 0
                        await self._process_status_update(avatar_id, request_id, training_type, status_data)
                        
                    elif fal_status == "COMPLETED":
                        logger.info(f"üîç –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                        await self._process_status_update(avatar_id, request_id, training_type, status_data)
                        return
                        
                    elif fal_status in ["FAILED", "CANCELLED"]:
                        logger.warning(f"üîç –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {fal_status}")
                        await self._process_status_update(avatar_id, request_id, training_type, status_data)
                        return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ FAL AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                if not status_data:
                    async with get_session() as session:
                        avatar = await session.get(Avatar, avatar_id)
                        if not avatar:
                            logger.warning(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                            return
                            
                        if avatar.status != AvatarStatus.TRAINING:
                            consecutive_not_training_checks += 1
                            logger.info(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ TRAINING ({consecutive_not_training_checks}/{max_consecutive_checks})")
                            
                            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥
                            if consecutive_not_training_checks >= max_consecutive_checks:
                                logger.info(f"üîç –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} (—Å—Ç–∞—Ç—É—Å: {avatar.status.value})")
                                return
                        else:
                            consecutive_not_training_checks = 0
                
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"üîç –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
                await asyncio.sleep(self.check_interval)
        
        logger.warning(f"üîç –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
    
    async def _check_fal_status(self, status_url: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI
        
        Args:
            status_url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        headers = {
            "Authorization": f"Key {self.fal_api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(status_url, headers=headers) as response:
                    # 200 - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω, 202 - –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    if response.status in [200, 202]:
                        try:
                            data = await response.json()
                            logger.debug(f"üîç –°—Ç–∞—Ç—É—Å FAL AI (HTTP {response.status}): {data}")
                            return data
                        except Exception as json_error:
                            # –ï—Å–ª–∏ 202 –±–µ–∑ JSON - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–∞–ø—Ä–æ—Å –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                            if response.status == 202:
                                logger.debug(f"üîç FAL AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å (HTTP 202)")
                                return {"status": "IN_PROGRESS", "message": "Request is being processed"}
                            else:
                                logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç FAL AI: {json_error}")
                                return None
                    else:
                        logger.warning(f"üîç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ FAL AI: HTTP {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ FAL AI: {e}")
            return None
    
    async def _process_status_update(self, avatar_id: UUID, request_id: str, training_type: str, status_data: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç FAL AI
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            status_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç FAL AI
        """
        fal_status = status_data.get("status")
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ FAL AI –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            "IN_QUEUE": AvatarStatus.TRAINING,
            "IN_PROGRESS": AvatarStatus.TRAINING,
            "COMPLETED": AvatarStatus.COMPLETED,
            "FAILED": AvatarStatus.ERROR,
            "CANCELLED": AvatarStatus.CANCELLED,
        }
        
        new_status = status_mapping.get(fal_status, AvatarStatus.TRAINING)
        
        logger.info(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {fal_status} -> {new_status.value}")
        
        # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if fal_status == "COMPLETED":
            await self._handle_training_completion(avatar_id, request_id, training_type, status_data)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
            await self._update_avatar_status(avatar_id, new_status)
    
    async def _handle_training_completion(self, avatar_id: UUID, request_id: str, training_type: str, status_data: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            status_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç FAL AI
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_data = await self._get_training_result(request_id, training_type)
            
            if result_data:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                logger.debug(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {list(result_data.keys())}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                async with get_session() as session:
                    from app.services.avatar.training_data_validator import AvatarTrainingDataValidator
                    from app.database.models import Avatar
                    from sqlalchemy import select
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                    query = select(Avatar).where(Avatar.id == avatar_id)
                    result = await session.execute(query)
                    avatar = result.scalar_one_or_none()
                    
                    if not avatar:
                        logger.error(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        return
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
                    data_validator = AvatarTrainingDataValidator(session)
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
                    webhook_result = {
                        "request_id": request_id,
                        "status": "completed",
                        "result": result_data,
                        "completed_at": datetime.utcnow().isoformat()
                    }
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    logger.info(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name} ({avatar.training_type})")
                    
                    try:
                        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞
                        update_data = await data_validator.validate_and_fix_training_completion(
                            avatar=avatar,
                            webhook_result=webhook_result
                        )
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        from sqlalchemy import update as sql_update
                        stmt = sql_update(Avatar).where(Avatar.id == avatar_id).values(**update_data)
                        await session.execute(stmt)
                        await session.commit()
                        
                        logger.info(f"üîç ‚úÖ –ê–≤–∞—Ç–∞—Ä {avatar_id} –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try:
                            from app.services.avatar.notification_service import AvatarNotificationService
                            notification_service = AvatarNotificationService(session)
                            notification_sent = await notification_service.send_completion_notification_by_id(avatar_id)
                            
                            if notification_sent:
                                logger.info(f"üîç ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} (—á–µ—Ä–µ–∑ status_checker)")
                            else:
                                logger.warning(f"üîç ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                                
                        except Exception as notification_error:
                            logger.error(f"üîç ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")
                            
                    except Exception as validation_error:
                        logger.error(f"üîç ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {validation_error}")
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                        await self._set_completed_with_fallback(avatar_id, request_id, training_type)
                        
            else:
                logger.error(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                await self._set_completed_with_fallback(avatar_id, request_id, training_type)
                
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            try:
                await self._set_completed_with_fallback(avatar_id, request_id, training_type)
            except Exception as fallback_error:
                logger.error(f"üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ fallback –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {fallback_error}")
                await self._update_avatar_status(avatar_id, AvatarStatus.ERROR)
    
    async def _set_completed_with_fallback(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Å fallback –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞  
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
        """
        try:
            async with get_session() as session:
                from sqlalchemy import select, update
                
                query = select(Avatar).where(Avatar.id == avatar_id)
                result = await session.execute(query)
                avatar = result.scalar_one_or_none()
                
                if not avatar:
                    logger.error(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ fallback")
                    return
                
                avatar_name = avatar.name.lower()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è fallback –¥–∞–Ω–Ω—ã—Ö
                update_data = {
                    "status": AvatarStatus.COMPLETED,
                    "training_progress": 100,
                    "training_completed_at": datetime.utcnow(),
                    "updated_at": datetime.utcnow()
                }
                
                # –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê: —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–≤
                if avatar.training_type == AvatarTrainingType.STYLE:
                    # Style –∞–≤–∞—Ç–∞—Ä—ã –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å finetune_id –∏ –ù–ï –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å LoRA
                    fallback_finetune_id = f"fallback-style-{avatar_name}-{avatar_id.hex[:8]}"
                    
                    update_data.update({
                        "finetune_id": fallback_finetune_id,
                        "trigger_word": avatar.trigger_word or "TOK",
                        "diffusers_lora_file_url": None,  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –¥–ª—è Style
                        "config_file_url": None
                    })
                    
                    logger.warning(f"üîç ‚ö†Ô∏è Style –∞–≤–∞—Ç–∞—Ä {avatar_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å fallback finetune_id: {fallback_finetune_id}")
                    
                else:  # Portrait
                    # Portrait –∞–≤–∞—Ç–∞—Ä—ã –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å LoRA –∏ –ù–ï –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å finetune_id
                    fallback_lora_url = f"https://emergency-fallback.com/lora/{avatar_name}.safetensors"
                    fallback_config_url = f"https://emergency-fallback.com/config/{avatar_name}_config.json"
                    
                    update_data.update({
                        "diffusers_lora_file_url": fallback_lora_url,
                        "config_file_url": fallback_config_url,
                        "trigger_phrase": avatar.trigger_phrase or "TOK",
                        "finetune_id": None  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –¥–ª—è Portrait
                    })
                    
                    logger.warning(f"üîç ‚ö†Ô∏è Portrait –∞–≤–∞—Ç–∞—Ä {avatar_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å fallback LoRA: {fallback_lora_url}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ fallback –≤ avatar_data
                avatar_data = avatar.avatar_data or {}
                avatar_data["fallback_history"] = avatar_data.get("fallback_history", [])
                avatar_data["fallback_history"].append({
                    "timestamp": datetime.utcnow().isoformat(),
                    "reason": "Status checker fallback - no valid training result",
                    "request_id": request_id,
                    "training_type": training_type,
                    "source": "status_checker"
                })
                update_data["avatar_data"] = avatar_data
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                stmt = update(Avatar).where(Avatar.id == avatar_id).values(**update_data)
                await session.execute(stmt)
                await session.commit()
                
                logger.info(f"üîç ‚úÖ Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ fallback –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            raise
    
    async def _get_training_result(self, request_id: str, training_type: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –æ—Ç FAL AI
        
        Args:
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint
        if training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:  # style
            endpoint = "fal-ai/flux-pro-trainer"
        
        result_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}"
        
        headers = {
            "Authorization": f"Key {self.fal_api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(result_url, headers=headers) as response:
                    # 200 - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, 202 - –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    if response.status in [200, 202]:
                        try:
                            data = await response.json()
                            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è (HTTP {response.status}): {data}")
                            return data
                        except Exception as json_error:
                            # –ï—Å–ª–∏ 202 –±–µ–∑ JSON - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–∞–ø—Ä–æ—Å –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                            if response.status == 202:
                                logger.debug(f"üîç FAL AI –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (HTTP 202)")
                                return None  # –†–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤
                            else:
                                logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç FAL AI: {json_error}")
                                return None
                    else:
                        logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: HTTP {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return None
    
    async def _update_avatar_status(self, avatar_id: UUID, status: AvatarStatus) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ë–î
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        try:
            async with get_session() as session:
                avatar = await session.get(Avatar, avatar_id)
                if avatar:
                    avatar.status = status
                    if status == AvatarStatus.COMPLETED:
                        avatar.training_completed_at = datetime.utcnow()
                        avatar.training_progress = 100
                    
                    await session.commit()
                    logger.info(f"üîç –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status.value}")
                    
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
status_checker = FALStatusChecker() 