"""
–ö–ª–∏–µ–Ω—Ç FAL AI –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/services/avatar/fal_training_service.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import json
from typing import Dict, Any, Optional
from uuid import UUID

from app.core.config import settings
from app.core.logger import get_logger
from app.core.di import get_user_service, get_avatar_service
from app.utils.avatar_utils import (
    format_finetune_comment,
    generate_trigger_word
)

logger = get_logger(__name__)


class FALClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FAL AI API"""
    
    def __init__(self):
        self.fal_client = None
        self._initialize_client()
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAL –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            import fal_client
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            api_key = settings.effective_fal_api_key
            if api_key:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è FAL –∫–ª–∏–µ–Ω—Ç–∞
                os.environ['FAL_KEY'] = api_key
                logger.info(f"FAL API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {api_key[:20]}...")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                self.fal_client = fal_client
            else:
                logger.warning("FAL_API_KEY/FAL_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except ImportError:
            logger.warning("fal_client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FAL –∫–ª–∏–µ–Ω—Ç–∞"""
        return self.fal_client is not None
    
    async def train_portrait_model(
        self,
        images_data_url: str,
        trigger_phrase: str,
        steps: int,
        learning_rate: float,
        webhook_url: Optional[str] = None
    ) -> str:
        """
        –û–±—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Flux LoRA Portrait Trainer
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI
        """
        if not self.fal_client:
            raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        config = {
            "images_data_url": images_data_url,
            "trigger_phrase": trigger_phrase,
            "steps": steps,
            "learning_rate": learning_rate,
            "multiresolution_training": settings.FAL_PORTRAIT_MULTIRESOLUTION,
            "subject_crop": settings.FAL_PORTRAIT_SUBJECT_CROP,
            "create_masks": settings.FAL_PORTRAIT_CREATE_MASKS,
        }
        
        logger.info(f"üé≠ –ó–∞–ø—É—Å–∫ flux-lora-portrait-trainer: trigger={trigger_phrase}")
        logger.info(f"üé≠ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: steps={steps}, lr={learning_rate}")
        logger.info(f"üé≠ Webhook URL: {webhook_url}")
        logger.info(f"üé≠ –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {json.dumps(config, indent=2)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º submit_async —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI
        try:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ webhook
            logger.info(f"üîó –û–¢–õ–ê–î–ö–ê WEBHOOK (–ü–û–†–¢–†–ï–¢):")
            logger.info(f"   Webhook URL –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {webhook_url}")
            logger.info(f"   –¢–∏–ø webhook_url: {type(webhook_url)}")
            logger.info(f"   Webhook –ø—É—Å—Ç–æ–π?: {not webhook_url}")
            
            if webhook_url:
                logger.info(f"   ‚úÖ Webhook –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ FAL AI")
            else:
                logger.warning(f"   ‚ö†Ô∏è Webhook –ù–ï –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω (–ø—É—Å—Ç–æ–π)")
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI...")
            logger.info(f"   Endpoint: fal-ai/flux-lora-portrait-trainer")
            logger.info(f"   Arguments: {json.dumps(config, indent=2)}")
            logger.info(f"   Webhook URL: {webhook_url}")
            
            handler = await self.fal_client.submit_async(
                "fal-ai/flux-lora-portrait-trainer",
                arguments=config,
                webhook_url=webhook_url
            )
            
            request_id = handler.request_id
            logger.info(f"üé≠ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ FAL AI: {request_id}")
            logger.info(f"üîó Webhook –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: {webhook_url}")
            
            return request_id
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI: {e}")
            logger.error(f"üîó Webhook URL –ø—Ä–∏ –æ—à–∏–±–∫–µ: {webhook_url}")
            raise
    
    async def train_general_model(
        self,
        images_data_url: str,
        trigger_word: str,
        iterations: int,
        learning_rate: float,
        priority: str = "quality",
        webhook_url: Optional[str] = None,
        avatar_id: Optional[UUID] = None
    ) -> Dict[str, Any]:
        """
        –û–±—É—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Flux Pro Trainer
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI
        """
        if not self.fal_client:
            raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        finetune_comment = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä"
        if avatar_id:
            try:
                async with get_avatar_service() as avatar_service:
                    avatar = await avatar_service.get_avatar(avatar_id)
                    if avatar:
                        async with get_user_service() as user_service:
                            user = await user_service.get_user_by_id(avatar.user_id)
                            if user:
                                finetune_comment = format_finetune_comment(
                                    avatar_name=avatar.name,
                                    telegram_username=user.username or f"user_{user.id}"
                                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è flux-pro-trainer —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        config = {
            "data_url": images_data_url,  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            "mode": settings.FAL_PRO_MODE,
            "finetune_comment": finetune_comment,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            "iterations": iterations,
            "learning_rate": learning_rate,
            "priority": priority,
            "captioning": settings.FAL_PRO_CAPTIONING,
            "trigger_word": trigger_word,
            "lora_rank": settings.FAL_PRO_LORA_RANK,
            "finetune_type": settings.FAL_PRO_FINETUNE_TYPE,
        }
        
        logger.info(f"üé® –ó–∞–ø—É—Å–∫ flux-pro-trainer: {finetune_comment}, trigger: {trigger_word}")
        logger.info(f"üé® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: iterations={iterations}, lr={learning_rate}, priority={priority}")
        logger.info(f"üé® Webhook URL: {webhook_url}")
        logger.info(f"üé® –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {json.dumps(config, indent=2)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º submit_async —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI
        try:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ webhook
            logger.info(f"üîó –û–¢–õ–ê–î–ö–ê WEBHOOK:")
            logger.info(f"   Webhook URL –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {webhook_url}")
            logger.info(f"   –¢–∏–ø webhook_url: {type(webhook_url)}")
            logger.info(f"   Webhook –ø—É—Å—Ç–æ–π?: {not webhook_url}")
            
            if webhook_url:
                logger.info(f"   ‚úÖ Webhook –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ FAL AI")
            else:
                logger.warning(f"   ‚ö†Ô∏è Webhook –ù–ï –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω (–ø—É—Å—Ç–æ–π)")
            
            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI...")
            logger.info(f"   Endpoint: fal-ai/flux-pro-trainer")
            logger.info(f"   Arguments: {json.dumps(config, indent=2)}")
            logger.info(f"   Webhook URL: {webhook_url}")
            
            handler = await self.fal_client.submit_async(
                "fal-ai/flux-pro-trainer",
                arguments=config,
                webhook_url=webhook_url
            )
            
            request_id = handler.request_id
            logger.info(f"üé® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ FAL AI: {request_id}")
            logger.info(f"üîó Webhook –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: {webhook_url}")
            
            return {
                "finetune_id": request_id,
                "request_id": request_id
            }
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ FAL AI: {e}")
            logger.error(f"üîó Webhook URL –ø—Ä–∏ –æ—à–∏–±–∫–µ: {webhook_url}")
            raise
    
    async def check_training_status(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI"""
        if not self.fal_client:
            raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ FAL API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:
            endpoint = "fal-ai/flux-pro-trainer"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º status_async —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        status = await self.fal_client.status_async(endpoint, request_id, with_logs=True)
        
        logger.info(f"üîç –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è {request_id}: {status}")
        return status
    
    async def get_training_result(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI"""
        if not self.fal_client:
            raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ FAL API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if training_type == "portrait":
            endpoint = "fal-ai/flux-lora-portrait-trainer"
        else:
            endpoint = "fal-ai/flux-pro-trainer"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º result_async —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        result = await self.fal_client.result_async(endpoint, request_id)
        
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è {request_id}: {result}")
        return result 