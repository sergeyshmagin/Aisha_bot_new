"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å FAL Training Service - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/services/avatar/fal_training_service.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from typing import Dict, Any, Optional
from uuid import UUID

from app.core.config import settings
from app.core.logger import get_logger
from app.utils.avatar_utils import generate_trigger_word

from .models import TrainingConfig, FALConfigManager, WebhookURLBuilder
from .fal_client import FALClient
from .test_simulator import TestModeSimulator

logger = get_logger(__name__)class FALTrainingService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ FAL AI —Å –∞–≤—Ç–æ–≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è (Flux LoRA Portrait Trainer) 
    - –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è (Flux Pro Trainer)
    - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç
    - Webhook simulation –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UX
    """
    
    def __init__(self):
        self.test_mode = settings.AVATAR_TEST_MODE
        self.webhook_url = settings.FAL_WEBHOOK_URL
        self.logger = logger
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.fal_client = FALClient()
        self.test_simulator = TestModeSimulator(self.webhook_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FAL –∫–ª–∏–µ–Ω—Ç–∞
        if not self.test_mode and not self.fal_client.is_available():
            logger.warning("FAL –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
            self.test_mode = True
    
    async def start_avatar_training(
        self, 
        avatar_id: UUID,
        training_type: str,  # "portrait" –∏–ª–∏ "style"
        training_data_url: str,
        user_preferences: Optional[Dict] = None
    ) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
            training_data_url: URL –∫ –∞—Ä—Ö–∏–≤—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            user_preferences: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (speed/balanced/quality)
            
        Returns:
            request_id –∏–ª–∏ finetune_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        try:
            # üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∏–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if self.test_mode:
                logger.info(f"üß™ –¢–ï–°–¢ –†–ï–ñ–ò–ú: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, —Ç–∏–ø: {training_type}")
                return await self.test_simulator.simulate_training(avatar_id, training_type)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
            config = TrainingConfig(
                avatar_id=avatar_id,
                training_type=training_type,
                training_data_url=training_data_url,
                user_preferences=user_preferences
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_preset = config.get_quality_preset()
            settings_preset = FALConfigManager.get_quality_preset(quality_preset)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {training_type}:")
            logger.info(f"   Quality preset: {quality_preset}")
            logger.info(f"   Settings preset: {settings_preset}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
            trigger = f"TOK_{avatar_id.hex[:8]}"
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook —Å —Ç–∏–ø–æ–º –æ–±—É—á–µ–Ω–∏—è
            webhook_url = WebhookURLBuilder.build_webhook_url(self.webhook_url, training_type)
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
            if training_type == "portrait":
                # –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ portrait
                portrait_settings = settings_preset["portrait"]
                result = await self.fal_client.train_portrait_model(
                    images_data_url=training_data_url,
                    trigger_phrase=trigger,
                    steps=portrait_settings["steps"],
                    learning_rate=portrait_settings["learning_rate"],
                    webhook_url=webhook_url
                )
                request_id = result
            else:  # style
                # –î–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ general
                general_settings = settings_preset["general"]
                result = await self.fal_client.train_general_model(
                    images_data_url=training_data_url,
                    trigger_word=trigger,
                    iterations=general_settings["iterations"],
                    learning_rate=general_settings["learning_rate"],
                    priority=general_settings["priority"],
                    webhook_url=webhook_url,
                    avatar_id=avatar_id
                )
                request_id = result["request_id"]
            
            # üîç –ó–ê–ü–£–°–ö–ê–ï–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–¢–ê–¢–£–°–ê –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
            from .status_checker import status_checker
            await status_checker.start_status_monitoring(avatar_id, request_id, training_type)
            
            logger.info(f"üé® {training_type.title()} –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {result}")
            logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è request_id: {request_id}")
            
            return request_id
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            raise
    
    async def check_training_status(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI"""
        try:
            # üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode:
                return await self.test_simulator.simulate_status_check(request_id, training_type)
            
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ FAL AI
            return await self.fal_client.check_training_status(request_id, training_type)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {request_id}: {e}")
            raise
    
    async def get_training_result(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FAL AI"""
        try:
            # üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode:
                return self.test_simulator.simulate_training_result(request_id, training_type)
            
            # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ FAL AI
            return await self.fal_client.get_training_result(request_id, training_type)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {request_id}: {e}")
            raise
    
    def get_training_type_info(self, training_type: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—É—á–µ–Ω–∏—è"""
        return FALConfigManager.get_training_type_info(training_type)
    
    def is_test_mode(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return self.test_mode
    
    def get_config_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return FALConfigManager.get_config_summary(
            test_mode=self.test_mode,
            webhook_url=self.webhook_url,
            fal_client_available=self.fal_client.is_available()
        )
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def _get_quality_preset(self, quality: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return FALConfigManager.get_quality_preset(quality)
    
    def _get_webhook_url(self, training_type: str) -> Optional[str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç URL webhook —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return WebhookURLBuilder.build_webhook_url(self.webhook_url, training_type)
    
    async def _simulate_training(self, avatar_id: UUID, training_type: str) -> str:
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.test_simulator.simulate_training(avatar_id, training_type)
    
    async def _simulate_status_check(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.test_simulator.simulate_status_check(request_id, training_type)
    
    async def _train_portrait_model(
        self,
        images_data_url: str,
        trigger_phrase: str,
        steps: int,
        learning_rate: float,
        webhook_url: Optional[str] = None
    ) -> str:
        """–û–±—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.fal_client.train_portrait_model(
            images_data_url, trigger_phrase, steps, learning_rate, webhook_url
        )
    
    async def _train_general_model(
        self,
        images_data_url: str,
        trigger_word: str,
        iterations: int,
        learning_rate: float,
        priority: str = "quality",
        webhook_url: Optional[str] = None,
        avatar_id: Optional[UUID] = None
    ) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if self.test_mode:
            return self.test_simulator.simulate_general_training_result(avatar_id, "style")
        
        return await self.fal_client.train_general_model(
            images_data_url, trigger_word, iterations, learning_rate, 
            priority, webhook_url, avatar_id
        )
