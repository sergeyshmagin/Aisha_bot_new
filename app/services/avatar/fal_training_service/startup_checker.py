"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
from datetime import datetime, timedelta
from typing import List
from uuid import UUID

from app.core.logger import get_logger
from app.database.models import Avatar, AvatarStatus
from app.core.database import get_session
from .status_checker import status_checker

logger = get_logger(__name__)


class StartupChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.max_training_age_hours = 24  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    async def check_and_restore_monitoring(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤–∞—Ç–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ TRAINING –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        """
        # –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not hasattr(self, '_startup_completed'):
            logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self._startup_completed = True
        
        try:
            stuck_avatars = await self._find_stuck_avatars()
            
            if not stuck_avatars:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ DEBUG —É—Ä–æ–≤–Ω–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                logger.debug("‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(stuck_avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ TRAINING")
            
            for avatar in stuck_avatars:
                await self._restore_avatar_monitoring(avatar)
                
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {len(stuck_avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
    
    async def _find_stuck_avatars(self) -> List[Avatar]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ TRAINING, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∑–∞–≤–∏—Å–Ω—É—Ç—å
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        cutoff_time = datetime.utcnow() - timedelta(hours=self.max_training_age_hours)
        
        async with get_session() as session:
            # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ TRAINING —Å request_id
            from sqlalchemy import select
            
            stmt = select(Avatar).where(
                Avatar.status == AvatarStatus.TRAINING,
                Avatar.fal_request_id.isnot(None),
                Avatar.training_started_at > cutoff_time  # –ù–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
            )
            
            result = await session.execute(stmt)
            avatars = result.scalars().all()
            
            return list(avatars)
    
    async def _restore_avatar_monitoring(self, avatar: Avatar) -> None:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        try:
            if not avatar.fal_request_id:
                logger.warning(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar.id} –Ω–µ –∏–º–µ–µ—Ç fal_request_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è
            training_type = avatar.training_type.value if avatar.training_type else "style"
            
            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name} (ID: {avatar.id})")
            logger.info(f"   Request ID: {avatar.fal_request_id}")
            logger.info(f"   Training Type: {training_type}")
            logger.info(f"   –ù–∞—á–∞—Ç–æ: {avatar.training_started_at}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —É–∂–µ –∞–≤–∞—Ç–∞—Ä –≤ FAL AI
            completed_avatar = await self._check_if_training_completed(avatar, training_type)
            
            if completed_avatar:
                logger.info(f"üîç ‚úÖ –ê–≤–∞—Ç–∞—Ä {avatar.name} —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ FAL AI, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                return  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ _check_if_training_completed
            
            # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await status_checker.start_status_monitoring(
                avatar.id,
                avatar.fal_request_id,
                training_type
            )
            
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
    
    async def _check_if_training_completed(self, avatar: Avatar, training_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ –≤ FAL AI
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        try:
            from app.core.config import settings
            import aiohttp
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
            fal_api_key = settings.effective_fal_api_key
            if not fal_api_key:
                logger.warning(f"üîç FAL API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint
            if training_type == "portrait":
                endpoint = "fal-ai/flux-lora-portrait-trainer"
            else:  # style
                endpoint = "fal-ai/flux-pro-trainer"
            
            status_url = f"https://queue.fal.run/{endpoint}/requests/{avatar.fal_request_id}/status"
            
            headers = {
                "Authorization": f"Key {fal_api_key}",
                "Content-Type": "application/json"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ FAL AI
            async with aiohttp.ClientSession() as session:
                async with session.get(status_url, headers=headers) as response:
                    # 200 - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω, 202 - –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    if response.status in [200, 202]:
                        try:
                            status_data = await response.json()
                            fal_status = status_data.get("status")
                            
                            if fal_status == "COMPLETED":
                                logger.info(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar.name} –∑–∞–≤–µ—Ä—à—ë–Ω –≤ FAL AI, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ status_checker
                                await status_checker._handle_training_completion(
                                    avatar.id, 
                                    avatar.fal_request_id, 
                                    training_type, 
                                    status_data
                                )
                                
                                return True
                            else:
                                logger.info(f"üîç –ê–≤–∞—Ç–∞—Ä {avatar.name} –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {fal_status}")
                                return False
                        except Exception as json_error:
                            # –ï—Å–ª–∏ 202 –±–µ–∑ JSON - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–∞–ø—Ä–æ—Å –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                            if response.status == 202:
                                logger.debug(f"üîç FAL AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.name} (HTTP 202)")
                                return False  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                            else:
                                logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç FAL AI –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {json_error}")
                                return False
                    else:
                        logger.warning(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ FAL AI –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: HTTP {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
            return False
    
    async def schedule_periodic_checks(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        """
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)...")
        
        while True:
            try:
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
                logger.debug("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤...")
                await self.check_and_restore_monitoring()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º 1 –º–∏–Ω—É—Ç—É


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
startup_checker = StartupChecker() 