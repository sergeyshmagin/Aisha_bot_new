"""
FAL AI Training Service - –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –∞–≤—Ç–æ–≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø–ª–∞–Ω–∞ avatar_implementation_plan.md
"""
import asyncio
import aiohttp
import json
import uuid
from typing import Dict, Any, Optional
from uuid import UUID

from app.core.config import settings
from app.core.logger import get_logger
from app.core.di import get_user_service, get_avatar_service
from app.utils.avatar_utils import (
    format_finetune_comment,
    generate_trigger_word,
    format_training_duration
)

logger = get_logger(__name__)

class FALTrainingService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ FAL AI —Å –∞–≤—Ç–æ–≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è (Flux LoRA Portrait Trainer) 
    - –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è (Flux Pro Trainer)
    - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç
    - Webhook simulation –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UX
    """
    
    def __init__(self):
        self.test_mode = settings.AVATAR_TEST_MODE
        self.webhook_url = settings.FAL_WEBHOOK_URL
        self.logger = logger
        
        # –ò–º–ø–æ—Ä—Ç—ã FAL –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –Ω–µ-—Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
        self.fal_client = None
        if not self.test_mode:
            try:
                import fal_client
                import os
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
                api_key = settings.effective_fal_api_key
                if api_key:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è FAL –∫–ª–∏–µ–Ω—Ç–∞
                    os.environ['FAL_KEY'] = api_key
                    logger.info(f"FAL API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {api_key[:20]}...")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                    self.fal_client = fal_client
                else:
                    logger.warning("FAL_API_KEY/FAL_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
                    self.test_mode = True
            except ImportError:
                logger.warning("fal_client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
                self.test_mode = True
    
    async def start_avatar_training(
        self, 
        avatar_id: UUID,
        training_type: str,  # "portrait" –∏–ª–∏ "style"
        training_data_url: str,
        user_preferences: Optional[Dict] = None
    ) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
            training_data_url: URL –∫ –∞—Ä—Ö–∏–≤—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            user_preferences: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (speed/balanced/quality)
            
        Returns:
            request_id –∏–ª–∏ finetune_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        try:
            # üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∏–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if self.test_mode:
                logger.info(f"üß™ –¢–ï–°–¢ –†–ï–ñ–ò–ú: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, —Ç–∏–ø: {training_type}")
                return await self._simulate_training(avatar_id, training_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_preset = user_preferences.get("quality", "balanced") if user_preferences else "balanced"
            settings_preset = self._get_quality_preset(quality_preset)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
            trigger = f"TOK_{avatar_id.hex[:8]}"
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook —Å —Ç–∏–ø–æ–º –æ–±—É—á–µ–Ω–∏—è
            webhook_url = self._get_webhook_url(training_type)
            
            if training_type == "portrait":
                # üé≠ –ü–û–†–¢–†–ï–¢–ù–´–ô –°–¢–ò–õ–¨ ‚Üí Flux LoRA Portrait Trainer API
                preset = settings_preset["portrait"]
                
                result = await self._train_portrait_model(
                    images_data_url=training_data_url,
                    trigger_phrase=trigger,
                    steps=preset["steps"],
                    learning_rate=preset["learning_rate"],
                    webhook_url=webhook_url
                )
                
                logger.info(f"üé≠ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {result}")
                return result
                
            else:
                # üé® –•–£–î–û–ñ–ï–°–¢–í–ï–ù–ù–´–ô –°–¢–ò–õ–¨ ‚Üí Flux Pro Trainer API
                preset = settings_preset["general"]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π trigger_word
                trigger = generate_trigger_word(str(avatar_id))
                
                result = await self._train_general_model(
                    images_data_url=training_data_url,
                    trigger_word=trigger,
                    iterations=preset["iterations"],
                    learning_rate=preset["learning_rate"],
                    priority=preset.get("priority", "quality"),
                    webhook_url=webhook_url,
                    avatar_id=avatar_id
                )
                
                logger.info(f"üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {result}")
                return result.get("finetune_id") or result.get("request_id")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            raise
    
    async def _simulate_training(self, avatar_id: UUID, training_type: str) -> str:
        """
        üß™ –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        mock_request_id = f"test_{avatar_id.hex[:8]}_{uuid.uuid4().hex[:8]}"
        
        logger.info(f"üß™ –¢–ï–°–¢ –†–ï–ñ–ò–ú: –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è {training_type} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
        logger.info(f"üß™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π request_id: {mock_request_id}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        
        # –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å webhook —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if self.webhook_url and hasattr(settings, 'FAL_ENABLE_WEBHOOK_SIMULATION') and settings.FAL_ENABLE_WEBHOOK_SIMULATION:
            asyncio.create_task(self._simulate_webhook_callback(
                mock_request_id, 
                avatar_id, 
                training_type
            ))
        
        return mock_request_id
    
    async def _simulate_webhook_callback(
        self, 
        request_id: str, 
        avatar_id: UUID, 
        training_type: str
    ):
        """
        üß™ –ò–º–∏—Ç–∞—Ü–∏—è webhook callback –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        duration = getattr(settings, 'FAL_MOCK_TRAINING_DURATION', 30)
        
        logger.info(f"üß™ –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è {training_type}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {duration} —Å–µ–∫—É–Ω–¥")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º" –æ–±—É—á–µ–Ω–∏—è
        await asyncio.sleep(duration)
        
        webhook_data = {
            "request_id": request_id,
            "avatar_id": str(avatar_id),
            "training_type": training_type,
            "status": "completed",
            "result": {
                "test_mode": True,
                "mock_model_url": f"https://test.example.com/models/{request_id}.safetensors",
                "diffusers_lora_file": {
                    "url": f"https://test.example.com/models/{request_id}.safetensors",
                    "file_name": f"test_model_{training_type}.safetensors"
                }
            }
        }
        
        try:
            webhook_url = self._get_webhook_url(training_type)
            async with aiohttp.ClientSession() as session:
                async with session.post(webhook_url, json=webhook_data) as response:
                    logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status}")
        except Exception as e:
            logger.warning(f"üß™ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: {e}")
    
    async def _train_portrait_model(
        self,
        images_data_url: str,
        trigger_phrase: str,
        steps: int,
        learning_rate: float,
        webhook_url: Optional[str] = None
    ) -> str:
        """
        –û–±—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Flux LoRA Portrait Trainer
        """
        if not self.fal_client:
            raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        config = {
            "images_data_url": images_data_url,
            "trigger_phrase": trigger_phrase,
            "steps": steps,
            "learning_rate": learning_rate,
            "multiresolution_training": settings.FAL_PORTRAIT_MULTIRESOLUTION,
            "subject_crop": settings.FAL_PORTRAIT_SUBJECT_CROP,
            "create_masks": settings.FAL_PORTRAIT_CREATE_MASKS,
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å webhook
        result = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: self.fal_client.submit(
                "fal-ai/flux-lora-portrait-trainer",
                arguments=config,
                webhook_url=webhook_url
            )
        )
        
        return result.request_id
    
    async def _train_general_model(
        self,
        images_data_url: str,
        trigger_word: str,
        iterations: int,
        learning_rate: float,
        priority: str = "quality",
        webhook_url: Optional[str] = None,
        avatar_id: Optional[UUID] = None
    ) -> Dict[str, Any]:
        """
        –û–±—É—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Flux Pro Trainer
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º FAL –∫–ª–∏–µ–Ω—Ç
        if not self.test_mode and not self.fal_client:
            raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        finetune_comment = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä"
        if avatar_id:
            try:
                async with get_avatar_service() as avatar_service:
                    avatar = await avatar_service.get_avatar(avatar_id)
                    if avatar:
                        async with get_user_service() as user_service:
                            user = await user_service.get_user_by_id(avatar.user_id)
                            if user:
                                finetune_comment = format_finetune_comment(
                                    avatar_name=avatar.name,
                                    telegram_username=user.username or f"user_{user.id}"
                                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è flux-pro-trainer —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        config = {
            "data_url": images_data_url,
            "mode": settings.FAL_PRO_MODE,
            "iterations": iterations,
            "learning_rate": learning_rate,
            "priority": priority,
            "finetune_type": settings.FAL_PRO_FINETUNE_TYPE,
            "lora_rank": settings.FAL_PRO_LORA_RANK,
            "captioning": settings.FAL_PRO_CAPTIONING,
            "trigger_word": trigger_word,
            "finetune_comment": finetune_comment,
        }
        
        if webhook_url:
            config["webhook_url"] = webhook_url
        
        logger.info(f"üé® –ó–∞–ø—É—Å–∫ flux-pro-trainer: {finetune_comment}, trigger: {trigger_word}")
        logger.info(f"üé® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: iterations={iterations}, lr={learning_rate}, priority={priority}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if self.test_mode:
            mock_request_id = f"test_{avatar_id.hex[:8] if avatar_id else 'unknown'}_{uuid.uuid4().hex[:8]}"
            logger.info(f"üß™ –¢–ï–°–¢ –†–ï–ñ–ò–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ request_id: {mock_request_id}")
            return {
                "finetune_id": mock_request_id,
                "request_id": mock_request_id
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        result = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: self.fal_client.submit(
                "fal-ai/flux-pro-trainer",
                arguments=config
            )
        )
        
        return {
            "finetune_id": result.request_id,
            "request_id": result.request_id
        }
    
    def _get_webhook_url(self, training_type: str) -> Optional[str]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç URL webhook —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API —Å–µ—Ä–≤–µ—Ä —Å SSL
        """
        if not self.webhook_url:
            return None
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint API —Å–µ—Ä–≤–µ—Ä–∞
        base_url = "https://aibots.kz:8443/api/v1/avatar/status_update"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        separator = "&" if "?" in base_url else "?"
        return f"{base_url}{separator}training_type={training_type}"
    
    async def check_training_status(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode:
                return await self._simulate_status_check(request_id, training_type)
            
            if not self.fal_client:
                raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ FAL API
            if training_type == "portrait":
                endpoint = "fal-ai/flux-lora-portrait-trainer"
            else:
                endpoint = "fal-ai/flux-pro-trainer"
            
            status = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.fal_client.status(endpoint, request_id, with_logs=True)
            )
            
            return status
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {request_id}: {e}")
            raise
    
    async def _simulate_status_check(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """üß™ –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å "–Ω–æ–≤—ã–π" - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –µ—Å–ª–∏ "—Å—Ç–∞—Ä—ã–π" - –∑–∞–≤–µ—Ä—à–µ–Ω
        import time
        current_time = time.time()
        
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö request_id –≤—ã—á–∏—Å–ª—è–µ–º "–≤–æ–∑—Ä–∞—Å—Ç"
        if request_id.startswith("test_"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –ø—Å–µ–≤–¥–æ-timestamp
            mock_duration = getattr(settings, 'FAL_MOCK_TRAINING_DURATION', 30)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            elapsed = min(mock_duration, 25)  # –ú–∞–∫—Å–∏–º—É–º 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ
            progress = min(100, int((elapsed / mock_duration) * 100))
            
            if progress < 100:
                return {
                    "status": "in_progress",
                    "progress": progress,
                    "logs": [f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ {training_type} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... {progress}%"],
                    "request_id": request_id
                }
            else:
                return {
                    "status": "completed",
                    "progress": 100,
                    "logs": [f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ {training_type} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"],
                    "request_id": request_id
                }
        
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö request_id
        return {
            "status": "unknown",
            "progress": 0,
            "logs": [f"üß™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π request_id: {request_id}"],
            "request_id": request_id
        }
    
    async def get_training_result(self, request_id: str, training_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode:
                return {
                    "test_mode": True,
                    "request_id": request_id,
                    "training_type": training_type,
                    "mock_model_url": f"https://test.example.com/models/{request_id}.safetensors",
                    "diffusers_lora_file": {
                        "url": f"https://test.example.com/models/{request_id}.safetensors",
                        "file_name": f"test_model_{training_type}.safetensors"
                    }
                }
            
            if not self.fal_client:
                raise RuntimeError("FAL client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ FAL API
            if training_type == "portrait":
                endpoint = "fal-ai/flux-lora-portrait-trainer"
            else:
                endpoint = "fal-ai/flux-pro-trainer"
            
            result = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.fal_client.result(endpoint, request_id)
            )
            
            return result
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {request_id}: {e}")
            raise
    
    def _get_quality_preset(self, quality: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        presets = {
            "fast": settings.FAL_PRESET_FAST,
            "balanced": settings.FAL_PRESET_BALANCED,
            "quality": settings.FAL_PRESET_QUALITY
        }
        return presets.get(quality, settings.FAL_PRESET_BALANCED)
    
    def get_training_type_info(self, training_type: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—É—á–µ–Ω–∏—è"""
        
        info = {
            "portrait": {
                "name": "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
                "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª—é–¥–µ–π",
                "speed": "‚≠ê‚≠ê‚≠ê‚≠ê (3-15 –º–∏–Ω—É—Ç)",
                "quality_portraits": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
                "best_for": ["–°–µ–ª—Ñ–∏", "–ü–æ—Ä—Ç—Ä–µ—Ç—ã", "–§–æ—Ç–æ –ª—é–¥–µ–π"],
                "technology": "Flux LoRA Portrait Trainer"
            },
            "style": {
                "name": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", 
                "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "speed": "‚≠ê‚≠ê‚≠ê (5-30 –º–∏–Ω—É—Ç)",
                "quality_portraits": "‚≠ê‚≠ê‚≠ê‚≠ê",
                "best_for": ["–°—Ç–∏–ª–∏", "–û–±—ä–µ–∫—Ç—ã", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"],
                "technology": "Flux Pro Trainer"
            }
        }
        
        return info.get(training_type, info["portrait"])
    
    def is_test_mode(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return self.test_mode
    
    def get_config_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "test_mode": self.test_mode,
            "webhook_url": self.webhook_url,
            "fal_client_available": self.fal_client is not None,
            "api_key_configured": bool(settings.FAL_API_KEY),
            "supported_training_types": ["portrait", "style"],
            "quality_presets": ["fast", "balanced", "quality"]
        } 