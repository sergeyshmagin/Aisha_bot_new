"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–æ–≤
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/services/avatar/training_service.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from datetime import datetime
from typing import Dict, List, Optional, Any
from uuid import UUID
import logging
import asyncio

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update

from app.core.config import settings
from app.database.models import Avatar, AvatarStatus, AvatarPhoto
from app.services.fal.client import FalAIClient
from app.services.storage import StorageService
from .avatar_validator import AvatarValidator
from app.core.database import get_session

logger = logging.getLogger(__name__)class TrainingManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Ç–º–µ–Ω–æ–π –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.fal_client = FalAIClient()
        self.validator = AvatarValidator(session)
    
    async def start_training(
        self, 
        avatar_id: UUID, 
        custom_config: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            custom_config: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
            
        Raises:
            ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            RuntimeError: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é
            avatar = await self.validator.get_avatar_for_training(avatar_id)
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
            photo_urls = await self.validator.get_avatar_photo_urls(avatar_id)
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ "–æ–±—É—á–∞–µ—Ç—Å—è"
            await self._update_avatar_status(
                avatar_id,
                AvatarStatus.TRAINING,
                progress=0,
                training_started_at=datetime.utcnow()
            )
            
            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ FAL AI
            logger.info(f"[TRAINING] –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
            finetune_id = await self.fal_client.train_avatar(
                user_id=avatar.user_id,
                avatar_id=avatar_id,
                name=avatar.name,
                gender=avatar.gender.value,
                photo_urls=photo_urls,
                training_config=custom_config
            )
            
            if not finetune_id:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await self._update_avatar_status(
                    avatar_id,
                    AvatarStatus.ERROR,
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ FAL AI"
                )
                raise RuntimeError("FAL AI –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self._save_training_info(avatar_id, finetune_id, custom_config)
            
            # üîç –ó–ê–ü–£–°–ö–ê–ï–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–¢–ê–¢–£–°–ê –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
            try:
                from app.services.avatar.fal_training_service.status_checker import status_checker
                await status_checker.start_status_monitoring(avatar_id, finetune_id, training_type)
                logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, request_id: {finetune_id}")
            except Exception as e:
                logger.warning(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            
            # üîÑ –ó–ê–ü–£–°–ö–ê–ï–ú –û–¢–õ–û–ñ–ï–ù–ù–£–Æ –ü–†–û–í–ï–†–ö–£ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è)
            try:
                asyncio.create_task(self._delayed_completion_check(avatar_id, finetune_id, training_type))
                logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            except Exception as e:
                logger.warning(f"üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            
            logger.info(
                f"[TRAINING] –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: "
                f"request_id={finetune_id}"
            )
            
            return True
            
        except Exception as e:
            logger.exception(f"[TRAINING] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            try:
                await self._update_avatar_status(
                    avatar_id,
                    AvatarStatus.ERROR,
                    error_message=str(e)
                )
            except Exception as rollback_error:
                logger.exception(f"[TRAINING] –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: {rollback_error}")
            
            raise
    
    async def cancel_training(self, avatar_id: UUID) -> bool:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤–∞—Ç–∞—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
            query = select(Avatar).where(Avatar.id == avatar_id)
            result = await self.session.execute(query)
            avatar = result.scalar_one_or_none()
            
            if not avatar:
                raise ValueError(f"–ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if avatar.status not in [AvatarStatus.TRAINING, AvatarStatus.READY_FOR_TRAINING]:
                raise ValueError(f"–ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: {avatar.status})")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –æ–±—É—á–µ–Ω–∏—è –≤ FAL AI
            # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ FAL AI –Ω–µ—Ç API –¥–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–æ –º—ã –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
            await self._update_avatar_status(
                avatar_id,
                AvatarStatus.CANCELLED,
                progress=avatar.training_progress,
                error_message="–û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            )
            
            logger.info(f"[TRAINING] –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.exception(f"[TRAINING] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±—É—á–µ–Ω–∏—è {avatar_id}: {e}")
            raise
    
    async def cleanup_training_photos(self, avatar_id: UUID) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É - –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
            if not getattr(settings, 'DELETE_PHOTOS_AFTER_TRAINING', True):
                logger.info(f"[CLEANUP] –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
            query = (
                select(AvatarPhoto)
                .where(AvatarPhoto.avatar_id == avatar_id)
                .order_by(AvatarPhoto.upload_order)
            )
            result = await self.session.execute(query)
            photos = result.scalars().all()
            
            if not photos:
                logger.info(f"[CLEANUP] –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ MinIO
            storage = StorageService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É - –æ—Å—Ç–∞–≤–ª—è—Ç—å –ª–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –ø—Ä–µ–≤—å—é
            keep_preview = getattr(settings, 'KEEP_PREVIEW_PHOTO', True)
            
            deleted_count = 0
            for i, photo in enumerate(photos):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é
                if i == 0 and keep_preview:
                    logger.debug(f"[CLEANUP] –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ {photo.id} –∫–∞–∫ –ø—Ä–µ–≤—å—é")
                    continue
                
                try:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
                    await storage.delete_file("avatars", photo.minio_key)
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                    await self.session.delete(photo)
                    deleted_count += 1
                    
                    logger.debug(f"[CLEANUP] –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ {photo.id} (–∫–ª—é—á: {photo.minio_key})")
                    
                except Exception as e:
                    logger.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ {photo.id}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            await self.session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—á–∏—Å—Ç–∫–∏
            total_photos = len(photos)
            kept_count = total_photos - deleted_count
            
            if keep_preview and total_photos > 0:
                logger.info(
                    f"[CLEANUP] –£–¥–∞–ª–µ–Ω–æ {deleted_count}/{total_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π "
                    f"–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} "
                    f"(–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {kept_count} –¥–ª—è –ø—Ä–µ–≤—å—é)"
                )
            else:
                logger.info(
                    f"[CLEANUP] –£–¥–∞–ª–µ–Ω–æ {deleted_count}/{total_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π "
                    f"–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}"
                )
            
        except Exception as e:
            await self.session.rollback()
            logger.exception(f"[CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    
    async def _update_avatar_status(
        self,
        avatar_id: UUID,
        status: AvatarStatus,
        progress: Optional[int] = None,
        training_started_at: Optional[datetime] = None,
        training_completed_at: Optional[datetime] = None,
        error_message: Optional[str] = None
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è (0-100)
            training_started_at: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
            training_completed_at: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        update_data = {
            "status": status,
            "updated_at": datetime.utcnow()
        }
        
        if progress is not None:
            update_data["training_progress"] = max(0, min(100, progress))
        
        if training_started_at:
            update_data["training_started_at"] = training_started_at
        
        if training_completed_at:
            update_data["training_completed_at"] = training_completed_at
        
        if error_message:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ avatar_data
            query = select(Avatar.avatar_data).where(Avatar.id == avatar_id)
            result = await self.session.execute(query)
            current_data = result.scalar() or {}
            current_data["error_message"] = error_message
            current_data["error_timestamp"] = datetime.utcnow().isoformat()
            update_data["avatar_data"] = current_data
        
        stmt = (
            update(Avatar)
            .where(Avatar.id == avatar_id)
            .values(**update_data)
        )
        
        await self.session.execute(stmt)
        await self.session.commit()
    
    async def _save_training_info(
        self,
        avatar_id: UUID,
        request_id: str,
        training_config: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: Request ID –æ—Ç FAL AI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            training_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        """
        update_data = {
            "fal_request_id": request_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ request_id
            "updated_at": datetime.utcnow()
        }
        
        if training_config:
            update_data["training_config"] = training_config
        
        stmt = (
            update(Avatar)
            .where(Avatar.id == avatar_id)
            .values(**update_data)
        )
        
        await self.session.execute(stmt)
        await self.session.commit()
    
    async def _delayed_completion_check(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
        """
        try:
            # –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
            async with get_session() as session:
                avatar = await session.get(Avatar, avatar_id)
                if not avatar:
                    logger.warning(f"üîÑ –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")
                    return
                
                # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –≤—Å—ë –µ—â—ë –≤ –æ–±—É—á–µ–Ω–∏–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º FAL AI
                if avatar.status == AvatarStatus.TRAINING:
                    logger.info(f"üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤–∞—Ç–∞—Ä {avatar_id} –≤—Å—ë –µ—â—ë –≤ –æ–±—É—á–µ–Ω–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º FAL AI")
                    
                    from app.core.config import settings
                    import aiohttp
                    
                    fal_api_key = settings.effective_fal_api_key
                    if not fal_api_key:
                        logger.warning(f"üîÑ FAL API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å fallback
                        await self._force_complete_avatar_with_fallback(avatar_id, request_id, training_type)
                        return
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint
                    if training_type == "portrait":
                        endpoint = "fal-ai/flux-lora-portrait-trainer"
                    else:
                        endpoint = "fal-ai/flux-pro-trainer"
                    
                    status_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}/status"
                    headers = {
                        "Authorization": f"Key {fal_api_key}",
                        "Content-Type": "application/json"
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    async with aiohttp.ClientSession() as http_session:
                        async with http_session.get(status_url, headers=headers) as response:
                            if response.status in [200, 202]:
                                try:
                                    status_data = await response.json()
                                    fal_status = status_data.get("status")
                                    
                                    if fal_status == "COMPLETED":
                                        logger.info(f"üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤–∞—Ç–∞—Ä {avatar_id} –∑–∞–≤–µ—Ä—à—ë–Ω –≤ FAL AI!")
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                                        result_url = f"https://queue.fal.run/{endpoint}/requests/{request_id}"
                                        async with http_session.get(result_url, headers=headers) as result_response:
                                            if result_response.status == 200:
                                                result_data = await result_response.json()
                                                
                                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ status_checker
                                                from app.services.avatar.fal_training_service.status_checker import status_checker
                                                await status_checker._handle_training_completion(
                                                    avatar_id, request_id, training_type, status_data
                                                )
                                                
                                                logger.info(f"üîÑ ‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤–∞—Ç–∞—Ä {avatar_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
                                            else:
                                                logger.warning(f"üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è {avatar_id}")
                                                await self._force_complete_avatar_with_fallback(avatar_id, request_id, training_type)
                                    
                                    elif fal_status in ["IN_QUEUE", "IN_PROGRESS"]:
                                        logger.info(f"üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤–∞—Ç–∞—Ä {avatar_id} –≤—Å—ë –µ—â—ë –æ–±—É—á–∞–µ—Ç—Å—è ({fal_status})")
                                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                                        
                                    else:
                                        logger.warning(f"üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {fal_status} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                                        await self._force_complete_avatar_with_fallback(avatar_id, request_id, training_type)
                                        
                                except Exception as json_error:
                                    logger.warning(f"üîÑ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ FAL AI –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ {avatar_id}: {json_error}")
                                    await self._force_complete_avatar_with_fallback(avatar_id, request_id, training_type)
                            else:
                                logger.warning(f"üîÑ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ FAL AI –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ {avatar_id}: HTTP {response.status}")
                                await self._force_complete_avatar_with_fallback(avatar_id, request_id, training_type)
                
                elif avatar.status == AvatarStatus.COMPLETED:
                    logger.info(f"üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤–∞—Ç–∞—Ä {avatar_id} —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    if not avatar.trigger_phrase or not avatar.diffusers_lora_file_url:
                        logger.warning(f"üîÑ –ê–≤–∞—Ç–∞—Ä {avatar_id} –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–ø–æ–ª–Ω—è–µ–º")
                        await self._ensure_avatar_data_completeness(avatar_id)
                else:
                    logger.info(f"üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤–∞—Ç–∞—Ä {avatar_id} –≤ —Å—Ç–∞—Ç—É—Å–µ {avatar.status.value}")
                
        except Exception as e:
            logger.error(f"üîÑ –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
    
    async def _force_complete_avatar_with_fallback(self, avatar_id: UUID, request_id: str, training_type: str) -> None:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä —Å fallback –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            request_id: ID –∑–∞–ø—Ä–æ—Å–∞
            training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è
        """
        try:
            async with get_session() as session:
                avatar = await session.get(Avatar, avatar_id)
                if not avatar:
                    logger.error(f"üîÑ –ê–≤–∞—Ç–∞—Ä {avatar_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                    return
                
                avatar_name = avatar.name.lower()
                fallback_lora_url = f"https://training-manager-fallback.com/lora/{avatar_name}.safetensors"
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                avatar.status = AvatarStatus.COMPLETED
                avatar.training_progress = 100
                avatar.training_completed_at = datetime.utcnow()
                avatar.trigger_phrase = avatar.trigger_phrase or "TOK"
                avatar.diffusers_lora_file_url = avatar.diffusers_lora_file_url or fallback_lora_url
                avatar.config_file_url = avatar.config_file_url or f"https://training-manager-fallback.com/config/{avatar_name}_config.json"
                
                await session.commit()
                
                logger.warning(f"üîÑ ‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä {avatar_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω —Å fallback –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ training manager")
                
        except Exception as e:
            logger.error(f"üîÑ –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
    
    async def _ensure_avatar_data_completeness(self, avatar_id: UUID) -> None:
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
        """
        try:
            async with get_session() as session:
                avatar = await session.get(Avatar, avatar_id)
                if not avatar:
                    return
                
                changed = False
                avatar_name = avatar.name.lower()
                
                if not avatar.trigger_phrase:
                    avatar.trigger_phrase = "TOK"
                    changed = True
                    logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω trigger_phrase –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                
                if not avatar.diffusers_lora_file_url:
                    avatar.diffusers_lora_file_url = f"https://completeness-check-fallback.com/lora/{avatar_name}.safetensors"
                    changed = True
                    logger.warning(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback LoRA URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                
                if not avatar.config_file_url:
                    avatar.config_file_url = f"https://completeness-check-fallback.com/config/{avatar_name}_config.json"
                    changed = True
                    logger.warning(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback config URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                
                if changed:
                    await session.commit()
                    logger.info(f"üîÑ ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –¥–æ–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã")
                
        except Exception as e:
            logger.error(f"üîÑ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
