"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç FAL AI —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/services/avatar/training_service.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from datetime import datetime
from typing import Dict, Any, Optional
from uuid import UUID
import logging

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import update, select

from app.database.models import Avatar, AvatarStatus, AvatarTrainingType
from .models import WebhookData
from .progress_tracker import ProgressTracker
from ..training_data_validator import AvatarTrainingDataValidator

logger = logging.getLogger(__name__)class WebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç FAL AI"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
        self.progress_tracker = ProgressTracker(session)
        self.data_validator = AvatarTrainingDataValidator(session)
    
    async def handle_webhook(self, webhook_data: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç FAL AI —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç FAL AI
            
        Returns:
            bool: True –µ—Å–ª–∏ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook
            webhook = WebhookData.from_dict(webhook_data)
            
            if not webhook.request_id:
                logger.warning("[WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook –±–µ–∑ request_id")
                return False
            
            logger.info(
                f"[WEBHOOK] –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: "
                f"request_id={webhook.request_id}, status={webhook.status}, progress={webhook.progress}"
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä –ø–æ request_id
            avatar = await self.progress_tracker.find_avatar_by_request_id(webhook.request_id)
            
            if not avatar:
                logger.warning(f"[WEBHOOK] –ê–≤–∞—Ç–∞—Ä —Å request_id {webhook.request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if webhook.status == "completed":
                await self._process_training_completion_with_validation(avatar, webhook)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await self._process_training_status_update(avatar.id, webhook)
            
            return True
            
        except Exception as e:
            logger.exception(f"[WEBHOOK] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return False
    
    async def _process_training_completion_with_validation(self, avatar: Avatar, webhook: WebhookData) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô –î–ê–ù–ù–´–•
        
        Args:
            avatar: –ê–≤–∞—Ç–∞—Ä
            webhook: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç FAL AI
        """
        try:
            logger.info(f"üîç [WEBHOOK] –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ê–õ–ò–î–ê–¢–û–† –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            update_data = await self.data_validator.validate_and_fix_training_completion(
                avatar=avatar,
                webhook_result=webhook.result or {}
            )
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ webhook
            update_data.update({
                "training_completed_at": datetime.utcnow(),
                "fal_response_data": webhook.result
            })
            
            logger.info(f"‚úÖ [WEBHOOK] –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {list(update_data.keys())}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –ë–î
            stmt = (
                update(Avatar)
                .where(Avatar.id == avatar.id)
                .values(**update_data)
            )
            
            await self.session.execute(stmt)
            await self.session.commit()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
            await self._cleanup_training_photos(avatar.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                from app.services.avatar.notification_service import AvatarNotificationService
                notification_service = AvatarNotificationService(self.session)
                notification_sent = await notification_service.send_completion_notification(avatar)
                
                if notification_sent:
                    logger.info(f"[WEBHOOK] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id} (—á–µ—Ä–µ–∑ webhook_handler)")
                else:
                    logger.warning(f"[WEBHOOK] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id} (—á–µ—Ä–µ–∑ webhook_handler)")
                    
            except Exception as notification_error:
                logger.error(f"[WEBHOOK] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id} (—á–µ—Ä–µ–∑ webhook_handler): {notification_error}")
            
            logger.info(f"[WEBHOOK] ‚úÖ –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö!")
            
        except Exception as e:
            logger.exception(f"[WEBHOOK] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è {avatar.id}: {e}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –æ—à–∏–±–∫–µ
            await self._update_avatar_status(
                avatar.id,
                AvatarStatus.ERROR,
                error_message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}"
            )
    
    async def _process_training_status_update(self, avatar_id: UUID, webhook: WebhookData) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è –æ—Ç FAL AI
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            webhook: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç FAL AI
        """
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ FAL AI –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        status_mapping = {
            "queued": AvatarStatus.TRAINING,
            "in_progress": AvatarStatus.TRAINING,
            "failed": AvatarStatus.ERROR,
            "cancelled": AvatarStatus.CANCELLED,
        }
        
        new_status = status_mapping.get(webhook.status, AvatarStatus.TRAINING)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        update_params = {
            "progress": webhook.progress,
        }
        
        if new_status == AvatarStatus.ERROR:
            update_params["error_message"] = webhook.message or "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ FAL AI"
        
        await self._update_avatar_status(avatar_id, new_status, **update_params)
        
        logger.info(
            f"[WEBHOOK] –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: "
            f"{webhook.status} -> {new_status.value} (progress: {webhook.progress}%)"
        )
    
    async def _cleanup_training_photos(self, avatar_id: UUID) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
        """
        try:
            from app.core.config import settings
            from app.database.models import AvatarPhoto
            from app.services.storage import StorageService
            from sqlalchemy import select
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É - –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
            if not getattr(settings, 'DELETE_PHOTOS_AFTER_TRAINING', True):
                logger.info(f"[CLEANUP] –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
            query = (
                select(AvatarPhoto)
                .where(AvatarPhoto.avatar_id == avatar_id)
                .order_by(AvatarPhoto.upload_order)
            )
            result = await self.session.execute(query)
            photos = result.scalars().all()
            
            if not photos:
                logger.info(f"[CLEANUP] –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ MinIO
            storage = StorageService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É - –æ—Å—Ç–∞–≤–ª—è—Ç—å –ª–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –ø—Ä–µ–≤—å—é
            keep_preview = getattr(settings, 'KEEP_PREVIEW_PHOTO', True)
            
            deleted_count = 0
            for i, photo in enumerate(photos):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é
                if i == 0 and keep_preview:
                    logger.debug(f"[CLEANUP] –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ {photo.id} –∫–∞–∫ –ø—Ä–µ–≤—å—é")
                    continue
                
                try:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
                    await storage.delete_file("avatars", photo.minio_key)
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                    await self.session.delete(photo)
                    deleted_count += 1
                    
                    logger.debug(f"[CLEANUP] –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ {photo.id} (–∫–ª—é—á: {photo.minio_key})")
                    
                except Exception as e:
                    logger.warning(f"[CLEANUP] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ {photo.id}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            await self.session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—á–∏—Å—Ç–∫–∏
            total_photos = len(photos)
            kept_count = total_photos - deleted_count
            
            if keep_preview and total_photos > 0:
                logger.info(
                    f"[CLEANUP] –£–¥–∞–ª–µ–Ω–æ {deleted_count}/{total_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π "
                    f"–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} "
                    f"(–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {kept_count} –¥–ª—è –ø—Ä–µ–≤—å—é)"
                )
            else:
                logger.info(
                    f"[CLEANUP] –£–¥–∞–ª–µ–Ω–æ {deleted_count}/{total_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π "
                    f"–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}"
                )
            
        except Exception as e:
            await self.session.rollback()
            logger.exception(f"[CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    
    async def _update_avatar_status(
        self,
        avatar_id: UUID,
        status: AvatarStatus,
        progress: int = None,
        error_message: str = None
    ) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
        
        Args:
            avatar_id: ID –∞–≤–∞—Ç–∞—Ä–∞
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è (0-100)
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        update_data = {
            "status": status,
            "updated_at": datetime.utcnow()
        }
        
        if progress is not None:
            update_data["training_progress"] = max(0, min(100, progress))
        
        if error_message:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞
            query = select(Avatar.avatar_data).where(Avatar.id == avatar_id)
            result = await self.session.execute(query)
            current_data = result.scalar() or {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            current_data["error_message"] = error_message
            current_data["error_timestamp"] = datetime.utcnow().isoformat()
            update_data["avatar_data"] = current_data
        
        stmt = (
            update(Avatar)
            .where(Avatar.id == avatar_id)
            .values(**update_data)
        )
        
        await self.session.execute(stmt)
        await self.session.commit()
