"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ (–ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è)
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FAL AI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è
–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from uuid import UUID
import asyncio

from app.handlers.state import AvatarStates
from app.core.di import get_user_service, get_avatar_service
from app.core.database import get_session
from app.services.avatar.training_service import AvatarTrainingService
from app.services.avatar.fal_training_service import FALTrainingService
from app.database.models import AvatarStatus
from app.core.logger import get_logger
from app.core.config import settings

logger = get_logger(__name__)
router = Router()

class TrainingHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    async def start_training(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º avatar_id –∏–∑ callback_data
            if callback.data.startswith("start_training_"):
                avatar_id_str = callback.data.split("_", 2)[2]
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                data = await state.get_data()
                avatar_id_str = data.get("avatar_id")
            
            if not avatar_id_str:
                await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            user_id = None
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(callback.from_user.id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                 
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
                user_id = user.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
                is_test_mode = settings.AVATAR_TEST_MODE
                
                if not is_test_mode:
                    # –í –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ - —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
                    user_balance = await user_service.get_user_balance(user.id)
                    avatar_cost = settings.AVATAR_CREATION_COST  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    
                    if user_balance < avatar_cost:
                        await callback.message.edit_text(
                            text=f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {avatar_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}",
                            parse_mode="Markdown"
                        )
                        return
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
                    new_balance = await user_service.remove_coins(user.id, avatar_cost)
                    if new_balance is None:
                        await callback.message.edit_text(
                            text=f"‚ùå **–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            parse_mode="Markdown"
                        )
                        return
                    
                    logger.info(f"üí∞ –ü–†–û–î–ê–ö–®–ù: –°–ø–∏—Å–∞–Ω–æ {avatar_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞
            status_text = "üß™ **–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ...**" if is_test_mode else "üöÄ **–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...**"
            await callback.message.edit_text(
                text=f"{status_text}\n\n–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                parse_mode="Markdown"
            )
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
                async with get_avatar_service() as avatar_service:
                    avatar = await avatar_service.get_avatar(avatar_id)
                    if not avatar:
                        raise RuntimeError("–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –∏–∑ –∞–≤–∞—Ç–∞—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if hasattr(avatar, 'training_type') and avatar.training_type:
                    if hasattr(avatar.training_type, 'value'):
                        training_type = avatar.training_type.value
                    else:
                        training_type = str(avatar.training_type)
                    logger.info(f"üéØ –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ë–î: {training_type}")
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∫–∞–∫ fallback
                    state_data = await state.get_data()
                    training_type = state_data.get('training_type', 'portrait')
                    logger.warning(f"‚ö†Ô∏è –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {training_type} (–∞–≤–∞—Ç–∞—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç training_type)")
                
                logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} —Å —Ç–∏–ø–æ–º: {training_type}")
                
                # –°–æ–∑–¥–∞–µ–º FAL —Å–µ—Ä–≤–∏—Å –æ–±—É—á–µ–Ω–∏—è
                fal_service = FALTrainingService()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
                async with get_avatar_service() as avatar_service:
                    photos, total_count = await avatar_service.get_avatar_photos(avatar_id)
                    if not photos or len(photos) < settings.AVATAR_MIN_PHOTOS:
                        raise RuntimeError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(photos) if photos else 0}/{settings.AVATAR_MIN_PHOTOS}")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    photo_urls = []
                    for photo in photos:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º minio_key –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
                        photo_urls.append(photo.minio_key)
                    
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(photo_urls)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —á–µ—Ä–µ–∑ FAL –∫–ª–∏–µ–Ω—Ç
                from app.services.fal.client import FalAIClient
                fal_client = FalAIClient()
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
                training_data_url = await fal_client._download_and_create_archive(photo_urls, avatar_id)
                if not training_data_url:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞")
                
                logger.info(f"–°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {training_data_url}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FAL AI
                request_id = await fal_service.start_avatar_training(
                    avatar_id=avatar_id,
                    training_type=training_type,
                    training_data_url=training_data_url,
                    user_preferences={"quality": settings.FAL_DEFAULT_QUALITY_PRESET}
                )
                
                if request_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –ë–î —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å
                    async with get_session() as session:
                        training_service = AvatarTrainingService(session)
                        await training_service._save_training_info(avatar_id, request_id)
                        await training_service._update_avatar_status(
                            avatar_id, 
                            AvatarStatus.TRAINING,
                            progress=0
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.set_state(AvatarStates.training_in_progress)
                    await state.update_data(
                        avatar_id=str(avatar_id),
                        finetune_id=request_id,
                        training_type=training_type
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
                    await self._show_training_progress(callback, avatar_id, request_id)
                    
                    logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: request_id={request_id}")
                else:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
                
            except Exception as training_error:
                error_msg = str(training_error)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                if "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π" in error_msg.lower():
                    await callback.message.edit_text(
                        text="‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π**\n\n–î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
                        parse_mode="Markdown"
                    )
                elif "—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" in error_msg.lower() or "test" in error_msg.lower():
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    await callback.message.edit_text(
                        text="‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!**\n\n–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞...",
                        parse_mode="Markdown"
                    )
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö)
                    logger.info(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
                    await self._simulate_training_progress(callback, avatar_id)
                else:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                    safe_error_msg = str(error_msg).replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]")
                    await callback.message.edit_text(
                        text=f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è**\n\n`{safe_error_msg}`",
                        parse_mode="Markdown"
                    )
                
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}: {training_error}")
                
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _show_training_progress(self, callback: CallbackQuery, avatar_id: UUID, finetune_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = avatar.training_progress if avatar.training_progress else 0
            status_text = self._get_status_text(avatar.status)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –æ–±—É—á–µ–Ω–∏—è
            if progress == 0:
                stage_text = "üöÄ **–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è**\n\n–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ..."
                time_text = "‚è±Ô∏è **–í—Ä–µ–º—è:** ~15-30 –º–∏–Ω—É—Ç"
            elif progress < 25:
                stage_text = "üîÑ **–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è**\n\n–ú–æ–¥–µ–ª—å –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏..."
                time_text = f"‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** ~{30 - int(progress * 0.3)} –º–∏–Ω—É—Ç"
            elif progress < 75:
                stage_text = "üéØ **–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ**\n\n–ú–æ–¥–µ–ª—å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å..."
                time_text = f"‚è±Ô∏è **–û—Å—Ç–∞–ª–æ—Å—å:** ~{20 - int(progress * 0.2)} –º–∏–Ω—É—Ç"
            elif progress < 100:
                stage_text = "üî• **–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è**\n\n–î–æ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞..."
                time_text = "‚è±Ô∏è **–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!**"
            else:
                stage_text = "‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**"
                time_text = "üéâ **–ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**"
            
            text = f"""
ü§ñ **–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞**

üé≠ **–ê–≤–∞—Ç–∞—Ä:** {avatar.name}
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress}%
‚ö° **–°—Ç–∞—Ç—É—Å:** {status_text}

{stage_text}

{time_text}

üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è!
"""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º—ã—Å–ª (–ø—Ä–æ–≥—Ä–µ—Å—Å > 0)
            buttons = []
            if progress > 0 and progress < 100:
                buttons.append([
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                        callback_data=f"refresh_training_{avatar_id}"
                    )
                ])
            
            buttons.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ö –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤",
                    callback_data="avatar_menu"
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            try:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error):
                    await callback.answer("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç—É–∞–ª–µ–Ω")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", show_alert=True)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", show_alert=True)
    
    async def _simulate_training_progress(self, callback: CallbackQuery, avatar_id: UUID):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
        try:
            progress_steps = [10, 25, 45, 65, 85, 95, 100]
            
            logger.info(f"üß™ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö: –ó–∞–ø—É—Å–∫ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
            for progress in progress_steps:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
                async with get_avatar_service() as avatar_service:
                    await avatar_service.update_avatar_progress(avatar_id, progress)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ–±—ã—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
                text = f"""
ü§ñ **–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞**

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress}%
‚ö° **–°—Ç–∞—Ç—É—Å:** {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if progress == 100 else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ...'}

{'‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**' if progress == 100 else '‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...'}
"""
                
                if progress == 100:
                    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                callback_data=f"generate_image_{avatar_id}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üìÅ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
                                callback_data="avatar_gallery"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data="avatar_menu"
                            )
                        ]
                    ])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                    async with get_avatar_service() as avatar_service:
                        await avatar_service.update_avatar_status(avatar_id, AvatarStatus.COMPLETED)
                        
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º—ã—Å–ª (–ø—Ä–æ–≥—Ä–µ—Å—Å > 0)
                    buttons = []
                    if progress > 0:
                        buttons.append([
                            InlineKeyboardButton(
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                                callback_data=f"refresh_training_{avatar_id}"
                            )
                        ])
                    
                    buttons.append([
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ö –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤",
                            callback_data="avatar_menu"
                        )
                    ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                
                try:
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except Exception as edit_error:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "message is not modified" –≤ –∏–º–∏—Ç–∞—Ü–∏–∏
                    if "message is not modified" not in str(edit_error):
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {edit_error}")
                
                if progress < 100:
                    await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                
            logger.info(f"üß™ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö: –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def _get_status_text(self, status: AvatarStatus) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            AvatarStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
            AvatarStatus.PHOTOS_UPLOADING: "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ",
            AvatarStatus.READY_FOR_TRAINING: "–ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é",
            AvatarStatus.TRAINING: "–û–±—É—á–∞–µ—Ç—Å—è...",
            AvatarStatus.COMPLETED: "–ì–æ—Ç–æ–≤",
            AvatarStatus.ERROR: "–û—à–∏–±–∫–∞",
            AvatarStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω"
        }
        return status_map.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    async def refresh_training_progress(self, callback: CallbackQuery, state: FSMContext):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            avatar_id_str = callback.data.split("_", 2)[2]
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–º–µ—Ç–æ–¥ —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—à–∏–±–∫–∏)
            await self._show_training_progress(callback, avatar_id, avatar.finetune_id or "training")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
    
    async def cancel_training(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            avatar_id_str = callback.data.split("_", 2)[2]
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            text = """
‚ö†Ô∏è **–û—Ç–º–µ–Ω–∞ –æ–±—É—á–µ–Ω–∏—è**

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞?

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=f"confirm_cancel_training_{avatar_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                        callback_data=f"refresh_training_{avatar_id}"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
training_handler = TrainingHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data.startswith("start_training_"))
async def start_training(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    await training_handler.start_training(callback, state)

@router.callback_query(F.data.startswith("refresh_training_"))
async def refresh_training_progress(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    await training_handler.refresh_training_progress(callback, state)

@router.callback_query(F.data.startswith("cancel_training_"))
async def cancel_training(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
    await training_handler.cancel_training(callback, state)

@router.callback_query(F.data.startswith("confirm_cancel_training_"))
async def confirm_cancel_training(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ–±—É—á–µ–Ω–∏—è"""
    try:
        avatar_id_str = callback.data.split("_", 3)[3]
        avatar_id = UUID(avatar_id_str)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        async with get_avatar_service() as avatar_service:
            await avatar_service.update_avatar_status(avatar_id, AvatarStatus.CANCELLED)
        
        await callback.message.edit_text(
            text="‚ùå **–û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown"
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["training_handler", "router"] 