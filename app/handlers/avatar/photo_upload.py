"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ archive/aisha_v1 —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
"""
import asyncio
from aiogram import Router, F, Bot
from aiogram.types import (
    CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, FSInputFile, BufferedInputFile
)
from aiogram.fsm.context import FSMContext
from uuid import UUID
import io
from typing import Dict, List, Optional, Any
import time

from app.handlers.state import AvatarStates
from app.core.di import get_user_service, get_avatar_service
from app.services.avatar.photo_service import PhotoUploadService
from app.services.avatar.redis_service import AvatarRedisService
from app.database.models import AvatarGender, AvatarType, AvatarTrainingType, AvatarPhoto
from app.core.logger import get_logger
from app.keyboards.photo_upload import (
    get_photo_upload_keyboard,
    get_photo_gallery_navigation_keyboard,
    get_training_start_keyboard,
    get_photo_tips_keyboard
)
from app.keyboards.main import get_main_menu

logger = get_logger(__name__)
router = Router()

# –ö—ç—à –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
user_upload_locks = {}
user_gallery_cache = {}
user_progress_messages = {}  # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

class PhotoUploadHandler:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ archive/aisha_v1
    
    –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    ‚úÖ –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Redis
    ‚úÖ –ì–∞–ª–µ—Ä–µ—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π 
    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    ‚úÖ Batch –∑–∞–≥—Ä—É–∑–∫–∞ (media groups)
    ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π UX —Å —Å–æ–≤–µ—Ç–∞–º–∏
    ‚úÖ –ü–æ–∫–∞–∑ —Ñ–æ—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–Ω—è—Ç–Ω–æ"
    ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä–∞—Ñ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    """
    
    def __init__(self):
        self.min_photos = 10
        self.max_photos = 20
        self.redis_service = AvatarRedisService()
        
    async def start_photo_upload(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_id = callback.from_user.id
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if user_id in user_progress_messages:
                del user_progress_messages[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_name = data.get("avatar_name", "–ê–≤–∞—Ç–∞—Ä")
            avatar_gender = data.get("gender", "unknown")
            training_type = data.get("training_type", "portrait")
            avatar_id = data.get("avatar_id")
            
            if not avatar_id:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞—Ñ—Ç
            existing_photos_count = await self._check_existing_draft(user_id, UUID(avatar_id))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await state.set_state(AvatarStates.uploading_photos)
            
            if existing_photos_count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
                await self._show_draft_continuation(callback, state, avatar_name, existing_photos_count, UUID(avatar_id))
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                intro_text = self._get_upload_intro_text(avatar_name, training_type, avatar_gender)
                await callback.message.edit_text(
                    text=intro_text,
                    parse_mode="Markdown"
                )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    async def _check_existing_draft(self, user_id: int, avatar_id: UUID) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞—Ñ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
        try:
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
                return total
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä–∞—Ñ—Ç–∞: {e}")
            return 0
    
    async def _show_draft_continuation(self, callback: CallbackQuery, state: FSMContext, avatar_name: str, existing_count: int, avatar_id: UUID):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä–∞—Ñ—Ç–∞"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å FSMContext
        gender_text = "üë® –ú—É–∂—Å–∫–æ–π"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        type_text = "üé® –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        text = f"""
üîÑ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞**

üé≠ **–ò–º—è:** {avatar_name}
üì∏ **–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {existing_count}/{self.max_photos} —Ñ–æ—Ç–æ
üë§ **–ü–æ–ª:** {gender_text}
üé® **–¢–∏–ø:** {type_text}

‚úÖ **–û—Ç–ª–∏—á–Ω–æ!** –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.

üì§ **–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:**
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ  
‚Ä¢ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚â•{self.min_photos} —Ñ–æ—Ç–æ)

üí° **–°–æ–≤–µ—Ç:** –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {self.max_photos} —Ñ–æ—Ç–æ

üì∏ **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**
"""
        
        keyboard = get_photo_upload_keyboard(existing_count, self.min_photos, self.max_photos)
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def handle_photo_upload(self, message: Message, state: FSMContext, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ archive/aisha_v1/frontend_bot/handlers/avatar/photo_upload.py
        """
        try:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            
            if not avatar_id_str:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_id)
                if not user:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–Ω–∞—á–∞–ª–∞
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
                if total >= self.max_photos:
                    await message.answer(
                        f"üì∏ **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!**\n\n"
                        f"–ú–∞–∫—Å–∏–º—É–º: {self.max_photos} —Ñ–æ—Ç–æ\n"
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total}\n\n"
                        f"–ú–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.",
                        parse_mode="Markdown"
                    )
                    return
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∑–∞–≥—Ä—É–∑–æ–∫
            if user_id not in user_upload_locks:
                user_upload_locks[user_id] = asyncio.Lock()
            
            async with user_upload_locks[user_id]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                loading_msg = await message.answer("üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
                    photo = message.photo[-1]
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
                    file_info = await bot.get_file(photo.file_id)
                    file_data = await bot.download_file(file_info.file_path)
                    
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    photo_bytes = file_data.read()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ PhotoUploadService —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                    async with get_avatar_service() as avatar_service:
                        session = avatar_service.session
                        
                        photo_service = PhotoUploadService(session)
                        uploaded_photo = await photo_service.upload_photo(
                            avatar_id=avatar_id,
                            user_id=user.id,
                            photo_data=photo_bytes,
                            filename=f"telegram_photo_{photo.file_id}.jpg"
                        )
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    await loading_msg.delete()
                    
                    # ‚úÖ –£–î–ê–õ–Ø–ï–ú –ò–°–•–û–î–ù–û–ï –§–û–¢–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    await self._delete_original_photo(bot, message)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
                    async with get_avatar_service() as avatar_service:
                        photos, photos_count = await avatar_service.get_avatar_photos(avatar_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                    await self._update_gallery_if_open(user_id, avatar_id, photos)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    await self._show_upload_progress(message, photos_count, avatar_id)
                    
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ {uploaded_photo.id} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, –≤—Å–µ–≥–æ: {photos_count}")
                    
                except Exception as upload_error:
                    await loading_msg.delete()
                    # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –§–û–¢–û –° –û–®–ò–ë–ö–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò
                    await self._handle_upload_error_with_photo(bot, message, upload_error, photo_bytes)
                    
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _delete_original_photo(self, bot: Bot, message: Message):
        """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞"""
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.message_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ: {e}")
    
    async def _handle_upload_error_with_photo(self, bot: Bot, message: Message, error: Exception, photo_bytes: bytes):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–∫–∞–∑–æ–º —Å–∞–º–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._delete_original_photo(bot, message)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            error_msg = str(error).lower()
            
            if "–Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é" in error_msg:
                if "—Ä–∞–∑–º–µ—Ä" in error_msg:
                    error_text = "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–∏–Ω–∏–º—É–º 512√ó512 –ø–∏–∫—Å–µ–ª–µ–π)"
                elif "–¥—É–±–ª–∏–∫–∞—Ç" in error_msg or "—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in error_msg:
                    error_text = "–≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ"
                elif "—Ñ–æ—Ä–º–∞—Ç" in error_msg:
                    error_text = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG –∏–ª–∏ PNG)"
                elif "—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞" in error_msg:
                    error_text = "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)"
                else:
                    error_text = str(error).replace("–§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ", "")
            elif "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç" in error_msg:
                error_text = f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {self.max_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            else:
                error_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–Ω—è—Ç–Ω–æ"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error_photo")]
            ])
            
            # –°–æ–∑–¥–∞–µ–º caption —Å –æ—à–∏–±–∫–æ–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏
            caption = f"""
‚ùå **–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ:** {error_text}

üì∏ **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞.

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –†–∞–∑–º–µ—Ä –æ—Ç 512√ó512 –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ –§–æ—Ä–º–∞—Ç JPG –∏–ª–∏ PNG
‚Ä¢ –ë–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
            photo_input = BufferedInputFile(photo_bytes, filename="rejected_photo.jpg")
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_input,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            logger.warning(f"–ü–æ–∫–∞–∑–∞–Ω–æ —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ —Å –æ—à–∏–±–∫–æ–π: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏**\n\n{str(error)}", parse_mode="Markdown")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...
    
    def _get_upload_intro_text(self, name: str, training_type: str, gender: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        gender_emoji = "üë®" if gender == "male" else "üë©"
        
        if training_type == "portrait":
            tips = "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n‚Ä¢ –†–∞–∑–Ω—ã–µ —É–≥–ª—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞\n‚Ä¢ –ë–µ–∑ –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤ –∏ –æ—á–∫–æ–≤"
        elif training_type == "style":
            tips = "‚Ä¢ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n‚Ä¢ –†–∞–∑–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Å—Ç–∏–ª–∏\n‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
        else:
            tips = "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n‚Ä¢ –†–∞–∑–Ω—ã–µ –ø–æ–∑—ã –∏ —É–≥–ª—ã\n‚Ä¢ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–∞—Å–æ–∫"
        
        return f"""
üì∏ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π**

{gender_emoji} **–ê–≤–∞—Ç–∞—Ä:** {name}
üéØ **–¢–∏–ø:** {training_type.title()}

üìã **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{tips}

üìä **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {self.min_photos} —Ñ–æ—Ç–æ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {self.max_photos} —Ñ–æ—Ç–æ
‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG (–¥–æ 20MB)
‚Ä¢ –†–∞–∑–º–µ—Ä: –º–∏–Ω–∏–º—É–º 512√ó512 –ø–∏–∫—Å–µ–ª–µ–π

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üì§ **–ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**
"""

    async def _show_upload_progress(self, message: Message, photos_count: int, avatar_id: UUID):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        progress_filled = min(photos_count, self.min_photos)
        progress_bar = "‚ñà" * progress_filled + "‚ñë" * (self.min_photos - progress_filled)
        progress_percent = int((photos_count / self.min_photos) * 100) if photos_count <= self.min_photos else 100
        
        if photos_count < self.min_photos:
            status = "üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è**"
            need_more = self.min_photos - photos_count
            next_step = f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ {need_more} —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        elif photos_count < self.max_photos:
            status = "‚úÖ **–ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é!**"
            remaining = self.max_photos - photos_count
            next_step = f"–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ {remaining} —Ñ–æ—Ç–æ (–¥–æ {self.max_photos} –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)"
        else:
            status = "üî• **–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è!**"
            next_step = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!"
        
        text = f"""
{status}

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** `{progress_bar}` {progress_percent}%
üì∏ **–ó–∞–≥—Ä—É–∂–µ–Ω–æ:** {photos_count}/{self.max_photos}

üí° **–î–∞–ª–µ–µ:** {next_step}
"""
        
        keyboard = get_photo_upload_keyboard(photos_count, self.min_photos, self.max_photos)
        
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_progress_messages:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                prev_message = user_progress_messages[user_id]
                await prev_message.edit_text(
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                return
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
        try:
            sent_message = await message.answer(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            user_progress_messages[user_id] = sent_message
        except Exception as e:
            # Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            sent_message = await message.answer(
                f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photos_count}/{self.max_photos} —Ñ–æ—Ç–æ",
                reply_markup=keyboard
            )
            user_progress_messages[user_id] = sent_message

    async def _handle_upload_error(self, message: Message, error: Exception):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        error_msg = str(error).lower()
        
        if "–Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é" in error_msg:
            if "—Ä–∞–∑–º–µ—Ä" in error_msg:
                text = "‚ùå **–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ**\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 512√ó512 –ø–∏–∫—Å–µ–ª–µ–π"
            elif "–¥—É–±–ª–∏–∫–∞—Ç" in error_msg or "—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in error_msg:
                text = "‚ùå **–î—É–±–ª–∏–∫–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏**\n\n–≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ"
            elif "—Ñ–æ—Ä–º–∞—Ç" in error_msg:
                text = "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG –∏–ª–∏ PNG"
            elif "—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞" in error_msg:
                text = "‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB"
            else:
                text = f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏**\n\n{str(error)}"
        elif "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç" in error_msg:
            text = f"‚ùå **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç**\n\n–ú–∞–∫—Å–∏–º—É–º {self.max_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
        
        await message.answer(text, parse_mode="Markdown")
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {error}")

    async def _update_gallery_if_open(self, user_id: int, avatar_id: UUID, photos: List[AvatarPhoto]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–∞–ª–µ—Ä–µ—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in user_gallery_cache:
            cache = user_gallery_cache[user_id]
            if cache["avatar_id"] == str(avatar_id):
                cache["photos"] = photos
                cache["total"] = len(photos)
    
    async def handle_cancel_draft(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            avatar_name = data.get("avatar_name", "–∞–≤–∞—Ç–∞—Ä")
            
            if avatar_id_str:
                avatar_id = UUID(avatar_id_str)
                
                # –£–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ë–î –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                async with get_avatar_service() as avatar_service:
                    await avatar_service.delete_avatar_completely(avatar_id)
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            if user_id in user_progress_messages:
                del user_progress_messages[user_id]
            if user_id in user_gallery_cache:
                del user_gallery_cache[user_id]
            if user_id in user_upload_locks:
                del user_upload_locks[user_id]
            
            # –û—á–∏—â–∞–µ–º Redis-–±—É—Ñ–µ—Ä
            await self.redis_service.clear_user_data(user_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            text = f"""
üóëÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ**

–î—Ä–∞—Ñ—Ç –∞–≤–∞—Ç–∞—Ä–∞ "{avatar_name}" –∏ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã.

–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
"""
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = get_main_menu()
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)

    async def show_photo_gallery(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            avatar_name = data.get("avatar_name", "–ê–≤–∞—Ç–∞—Ä")
            
            if not avatar_id_str:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
            
            if not photos:
                await callback.answer("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ –≥–∞–ª–µ—Ä–µ–∏
            user_gallery_cache[user_id] = {
                "avatar_id": str(avatar_id),
                "photos": photos,
                "total": total,
                "current": 1,
                "avatar_name": avatar_name
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            await self._show_gallery_photo(callback, user_id, 1)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –≥–∞–ª–µ—Ä–µ—é –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id} ({total} —Ñ–æ—Ç–æ)")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–∞–ª–µ—Ä–µ–∏", show_alert=True)
    
    async def _show_gallery_photo(self, callback: CallbackQuery, user_id: int, photo_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ"""
        try:
            if user_id not in user_gallery_cache:
                await callback.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            cache = user_gallery_cache[user_id]
            photos = cache["photos"]
            total = cache["total"]
            avatar_name = cache["avatar_name"]
            avatar_id = cache["avatar_id"]
            
            if photo_index < 1 or photo_index > total:
                await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
            cache["current"] = photo_index
            
            photo = photos[photo_index - 1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
            from app.services.storage import StorageService
            storage = StorageService()
            
            try:
                file_data = await storage.download_file("avatars", photo.minio_key)
                
                # –°–æ–∑–¥–∞–µ–º caption
                caption = f"""
üì∏ **–ì–∞–ª–µ—Ä–µ—è: {avatar_name}**

üñºÔ∏è **–§–æ—Ç–æ {photo_index} –∏–∑ {total}**
üìÖ **–ó–∞–≥—Ä—É–∂–µ–Ω–æ:** {photo.created_at.strftime("%d.%m.%Y %H:%M") if photo.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üìè **–†–∞–∑–º–µ—Ä:** {photo.width}√ó{photo.height} px
"""
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = get_photo_gallery_navigation_keyboard(photo_index, total, avatar_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ caption –Ω–∞ –º–µ—Å—Ç–µ
                from aiogram.types import InputMediaPhoto
                photo_input = BufferedInputFile(file_data, filename=f"photo_{photo_index}.jpg")
                media = InputMediaPhoto(media=photo_input, caption=caption, parse_mode="Markdown")
                
                try:
                    await callback.message.edit_media(media=media, reply_markup=keyboard)
                except Exception as edit_error:
                    # Fallback –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ: {edit_error}")
                    await callback.message.delete()
                    await callback.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo_input,
                        caption=caption,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                
            except Exception as storage_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–∑ MinIO: {storage_error}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ", show_alert=True)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def handle_gallery_navigation(self, callback: CallbackQuery, direction: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≥–∞–ª–µ—Ä–µ–µ"""
        try:
            user_id = callback.from_user.id
            
            if user_id not in user_gallery_cache:
                await callback.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            cache = user_gallery_cache[user_id]
            current = cache["current"]
            total = cache["total"]
            
            if direction == "prev" and current > 1:
                new_index = current - 1
            elif direction == "next" and current < total:
                new_index = current + 1
            else:
                await callback.answer("üì∏ –≠—Ç–æ –∫—Ä–∞–π–Ω–µ–µ —Ñ–æ—Ç–æ")
                return
            
            await self._show_gallery_photo(callback, user_id, new_index)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–∞–ª–µ—Ä–µ–µ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
    
    async def handle_back_to_upload(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            user_id = callback.from_user.id
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏
            if user_id in user_gallery_cache:
                del user_gallery_cache[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            avatar_name = data.get("avatar_name", "–ê–≤–∞—Ç–∞—Ä")
            
            if not avatar_id_str:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
            
            # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            await callback.message.delete()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
            text = f"""
üîÑ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞**

üé≠ **–ò–º—è:** {avatar_name}
üì∏ **–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {total}/{self.max_photos} —Ñ–æ—Ç–æ
üë§ **–ü–æ–ª:** –ú—É–∂—Å–∫–æ–π
üé® **–¢–∏–ø:** –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π

‚úÖ **–û—Ç–ª–∏—á–Ω–æ!** –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.

üì§ **–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:**
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ  
‚Ä¢ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚â•{self.min_photos} —Ñ–æ—Ç–æ)

üí° **–°–æ–≤–µ—Ç:** –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {self.max_photos} —Ñ–æ—Ç–æ

üì∏ **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**
"""
            
            keyboard = get_photo_upload_keyboard(total, self.min_photos, self.max_photos)
            
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_delete_photo(self, callback: CallbackQuery, avatar_id: UUID, photo_index: int):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"""
        try:
            user_id = callback.from_user.id
            
            if user_id not in user_gallery_cache:
                await callback.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            cache = user_gallery_cache[user_id]
            photos = cache["photos"]
            total = cache["total"]
            
            if photo_index < 1 or photo_index > total:
                await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            photo_to_delete = photos[photo_index - 1]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –ë–î –∏ MinIO
            async with get_avatar_service() as avatar_service:
                await avatar_service.delete_avatar_photo(photo_to_delete.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            photos.pop(photo_index - 1)
            cache["photos"] = photos
            cache["total"] = len(photos)
            
            if len(photos) == 0:
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ
                await callback.message.delete()
                await callback.answer("üì∏ –í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã. –í–µ—Ä–Ω–µ–º—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ.")
                return
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ
            if photo_index > len(photos):
                new_index = len(photos)
            else:
                new_index = photo_index
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ
            await self._show_gallery_photo(callback, user_id, new_index)
            await callback.answer(f"‚úÖ –§–æ—Ç–æ {photo_index} —É–¥–∞–ª–µ–Ω–æ")
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Ñ–æ—Ç–æ {photo_to_delete.id} –∏–∑ –≥–∞–ª–µ—Ä–µ–∏")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", show_alert=True)

    async def show_training_confirmation(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è"""
        try:
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            avatar_name = data.get("avatar_name", "–ê–≤–∞—Ç–∞—Ä")
            gender = data.get("gender", "unknown")
            training_type = data.get("training_type", "portrait")
            
            if not avatar_id_str:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            async with get_avatar_service() as avatar_service:
                photos, photos_count = await avatar_service.get_avatar_photos(avatar_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç balance)
                user_balance = getattr(user, 'balance', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            avatar_cost = 150 if training_type == "style" else 120  # –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Ä–æ–∂–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            from app.core.config import settings
            is_test_mode = getattr(settings, 'AVATAR_TEST_MODE', False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            gender_text = "üë® –º—É–∂—Å–∫–æ–π" if gender == "male" else "üë© –∂–µ–Ω—Å–∫–∏–π"
            type_text = "üñºÔ∏è –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" if training_type == "style" else "üé® –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
            
            text = f"""
ü¶ã **–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï –ê–í–ê–¢–ê–†–ê**

üë§ **–ò–º—è:** {avatar_name}
üöª **–ü–æ–ª:** {gender_text}
üì∏ **–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ:** {photos_count}

üíé **–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∞:** {avatar_cost}
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {user_balance}
"""
            
            if is_test_mode:
                text += "\nüß™ **–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú** - –æ–±—É—á–µ–Ω–∏–µ –∏–º–∏—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç\n"
            
            text += "\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä:"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
            if not is_test_mode and user_balance < avatar_cost:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
                text += f"\n\n‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {avatar_cost - user_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                            callback_data="balance_top_up"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ö –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
                            callback_data="back_to_upload"
                        )
                    ]
                ])
            else:
                # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
                            callback_data=f"start_training_{avatar_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ö –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
                            callback_data="back_to_upload"
                        )
                    ]
                ])
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞–≤–∞—Ç–∞—Ä {avatar_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
photo_handler = PhotoUploadHandler()

# ============= –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =============

@router.callback_query(F.data == "start_photo_upload")
async def start_photo_upload(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await photo_handler.start_photo_upload(callback, state)

@router.message(F.photo, AvatarStates.uploading_photos)
async def handle_photo_upload(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await photo_handler.handle_photo_upload(message, state, bot)

@router.callback_query(F.data == "delete_error_photo")
async def handle_delete_error_photo(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"""
    try:
        await callback.message.delete()
        await callback.answer("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: {e}")
        await callback.answer("üí° –ü–æ–Ω—è—Ç–Ω–æ")

@router.callback_query(F.data.startswith("cancel_avatar_draft"))
async def handle_cancel_avatar_draft(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    await photo_handler.handle_cancel_draft(callback, state)

@router.callback_query(F.data == "show_photo_gallery")
async def show_photo_gallery(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await photo_handler.show_photo_gallery(callback, state)

@router.callback_query(F.data == "back_to_upload")
async def handle_back_to_upload(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await photo_handler.handle_back_to_upload(callback, state)

@router.callback_query(F.data == "gallery_nav_prev")
async def handle_gallery_nav_prev(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ"""
    await photo_handler.handle_gallery_navigation(callback, "prev")

@router.callback_query(F.data == "gallery_nav_next")  
async def handle_gallery_nav_next(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ"""
    await photo_handler.handle_gallery_navigation(callback, "next")

@router.callback_query(F.data == "photo_counter")
async def handle_photo_counter(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—á–µ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)"""
    await callback.answer()

@router.callback_query(F.data.startswith("delete_photo_"))
async def handle_delete_photo_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: delete_photo_{avatar_id}_{photo_index}
        parts = callback.data.split("_", 3)  # ["delete", "photo", avatar_id, photo_index]
        if len(parts) != 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
            return
        
        avatar_id = UUID(parts[2])
        photo_index = int(parts[3])
        
        await photo_handler.handle_delete_photo(callback, avatar_id, photo_index)
        
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "confirm_training_current")
async def handle_confirm_training_current(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é"""
    await photo_handler.show_training_confirmation(callback, state)

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["photo_handler", "router"] 