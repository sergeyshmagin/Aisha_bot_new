"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ archive/aisha_v1 —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
"""
import asyncio
from aiogram import Router, F, Bot
from aiogram.types import (
    CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, FSInputFile
)
from aiogram.fsm.context import FSMContext
from uuid import UUID
import io
from typing import Dict, List, Optional, Any
import time

from app.handlers.state import AvatarStates
from app.core.di import get_user_service, get_avatar_service
from app.services.avatar.photo_service import PhotoUploadService
from app.services.avatar.redis_service import AvatarRedisService
from app.database.models import AvatarGender, AvatarType, AvatarTrainingType, AvatarPhoto
from app.core.logger import get_logger
from app.keyboards.photo_upload import (
    get_photo_upload_keyboard,
    get_photo_gallery_navigation_keyboard,
    get_training_start_keyboard,
    get_photo_tips_keyboard
)

logger = get_logger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
user_gallery_cache: Dict[int, Dict] = {}  # user_id -> {avatar_id, photos, current_idx}
user_upload_locks: Dict[int, asyncio.Lock] = {}  # user_id -> lock
user_last_gallery_message: Dict[int, int] = {}  # user_id -> message_id


class PhotoUploadHandler:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ archive/aisha_v1
    
    –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    ‚úÖ –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Redis
    ‚úÖ –ì–∞–ª–µ—Ä–µ—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π 
    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    ‚úÖ Batch –∑–∞–≥—Ä—É–∑–∫–∞ (media groups)
    ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π UX —Å —Å–æ–≤–µ—Ç–∞–º–∏
    """
    
    def __init__(self):
        self.min_photos = 10
        self.max_photos = 20
        self.redis_service = AvatarRedisService()
        
    async def start_photo_upload(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            training_type = data.get("training_type", "portrait")
            gender = data.get("gender", "male")
            name = data.get("avatar_name", "–ù–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(callback.from_user.id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
            lock_token = await self.redis_service.acquire_avatar_lock(user.id, "create")
            if not lock_token:
                await callback.answer("‚è≥ –î—Ä—É–≥–æ–π –∞–≤–∞—Ç–∞—Ä —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
                return
            
            try:
                # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ë–î
                async with get_avatar_service() as avatar_service:
                    avatar = await avatar_service.create_avatar(
                        user_id=user.id,
                        name=name,
                        gender=AvatarGender(gender),
                        avatar_type=AvatarType.CHARACTER,
                        training_type=AvatarTrainingType(training_type)
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    await state.update_data(avatar_id=str(avatar.id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ Redis –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                await self.redis_service.save_avatar_draft(user.id, {
                    "avatar_id": str(avatar.id),
                    "name": name,
                    "gender": gender,
                    "training_type": training_type,
                    "created_at": time.time()
                })
                
            finally:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                await self.redis_service.release_avatar_lock(user.id, lock_token, "create")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏
            text = self._get_upload_intro_text(name, training_type, gender)
            keyboard = get_photo_upload_keyboard(0, self.min_photos, self.max_photos)
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            await state.set_state(AvatarStates.uploading_photos)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    async def handle_photo_upload(self, message: Message, state: FSMContext, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ archive/aisha_v1/frontend_bot/handlers/avatar/photo_upload.py
        """
        try:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            
            if not avatar_id_str:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_id)
                if not user:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–Ω–∞—á–∞–ª–∞
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
                if total >= self.max_photos:
                    await message.answer(
                        f"üì∏ **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!**\n\n"
                        f"–ú–∞–∫—Å–∏–º—É–º: {self.max_photos} —Ñ–æ—Ç–æ\n"
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total}\n\n"
                        f"–ú–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.",
                        parse_mode="Markdown"
                    )
                    return
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∑–∞–≥—Ä—É–∑–æ–∫
            if user_id not in user_upload_locks:
                user_upload_locks[user_id] = asyncio.Lock()
            
            async with user_upload_locks[user_id]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                loading_msg = await message.answer("üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
                    photo = message.photo[-1]
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
                    file_info = await bot.get_file(photo.file_id)
                    file_data = await bot.download_file(file_info.file_path)
                    
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    photo_bytes = file_data.read()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ PhotoUploadService —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                    async with get_avatar_service() as avatar_service:
                        session = avatar_service.session
                        
                        photo_service = PhotoUploadService(session)
                        uploaded_photo = await photo_service.upload_photo(
                            avatar_id=avatar_id,
                            user_id=user.id,
                            photo_data=photo_bytes,
                            filename=f"telegram_photo_{photo.file_id}.jpg"
                        )
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    await loading_msg.delete()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
                    async with get_avatar_service() as avatar_service:
                        photos, photos_count = await avatar_service.get_avatar_photos(avatar_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                    await self._update_gallery_if_open(user_id, avatar_id, photos)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    await self._show_upload_progress(message, photos_count, avatar_id)
                    
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ {uploaded_photo.id} –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}, –≤—Å–µ–≥–æ: {photos_count}")
                    
                except Exception as upload_error:
                    await loading_msg.delete()
                    await self._handle_upload_error(message, upload_error)
                    
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...
    
    def _get_upload_intro_text(self, name: str, training_type: str, gender: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        gender_emoji = "üë®" if gender == "male" else "üë©"
        
        if training_type == "portrait":
            tips = "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n‚Ä¢ –†–∞–∑–Ω—ã–µ —É–≥–ª—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞\n‚Ä¢ –ë–µ–∑ –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤ –∏ –æ—á–∫–æ–≤"
        elif training_type == "style":
            tips = "‚Ä¢ –§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n‚Ä¢ –†–∞–∑–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Å—Ç–∏–ª–∏\n‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
        else:
            tips = "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n‚Ä¢ –†–∞–∑–Ω—ã–µ –ø–æ–∑—ã –∏ —É–≥–ª—ã\n‚Ä¢ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–∞—Å–æ–∫"
        
        return f"""
üì∏ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π**

{gender_emoji} **–ê–≤–∞—Ç–∞—Ä:** {name}
üéØ **–¢–∏–ø:** {training_type.title()}

üìã **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{tips}

üìä **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {self.min_photos} —Ñ–æ—Ç–æ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {self.max_photos} —Ñ–æ—Ç–æ
‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG (–¥–æ 20MB)
‚Ä¢ –†–∞–∑–º–µ—Ä: –º–∏–Ω–∏–º—É–º 512√ó512 –ø–∏–∫—Å–µ–ª–µ–π

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üì§ **–ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**
"""

    async def _show_upload_progress(self, message: Message, photos_count: int, avatar_id: UUID):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        progress_filled = min(photos_count, self.min_photos)
        progress_bar = "‚ñà" * progress_filled + "‚ñë" * (self.min_photos - progress_filled)
        progress_percent = int((photos_count / self.min_photos) * 100) if photos_count <= self.min_photos else 100
        
        if photos_count < self.min_photos:
            status = "üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è**"
            need_more = self.min_photos - photos_count
            next_step = f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â–µ {need_more} —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        elif photos_count < self.max_photos:
            status = "‚úÖ **–ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é!**"
            next_step = "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
        else:
            status = "üî• **–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è!**"
            next_step = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!"
        
        text = f"""
{status}

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** `{progress_bar}` {progress_percent}%
üì∏ **–ó–∞–≥—Ä—É–∂–µ–Ω–æ:** {photos_count}/{self.max_photos}
üéØ **ID:** `{str(avatar_id)[:8]}...`

üí° **–î–∞–ª–µ–µ:** {next_step}
"""
        
        keyboard = get_photo_upload_keyboard(photos_count, self.min_photos, self.max_photos)
        
        await message.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def _handle_upload_error(self, message: Message, error: Exception):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        error_msg = str(error).lower()
        
        if "–Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é" in error_msg:
            if "—Ä–∞–∑–º–µ—Ä" in error_msg:
                text = "‚ùå **–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ**\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 512√ó512 –ø–∏–∫—Å–µ–ª–µ–π"
            elif "–¥—É–±–ª–∏–∫–∞—Ç" in error_msg or "—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in error_msg:
                text = "‚ùå **–î—É–±–ª–∏–∫–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏**\n\n–≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ"
            elif "—Ñ–æ—Ä–º–∞—Ç" in error_msg:
                text = "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG –∏–ª–∏ PNG"
            elif "—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞" in error_msg:
                text = "‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB"
            else:
                text = f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏**\n\n{str(error)}"
        elif "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç" in error_msg:
            text = f"‚ùå **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç**\n\n–ú–∞–∫—Å–∏–º—É–º {self.max_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
        
        await message.answer(text, parse_mode="Markdown")
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {error}")

    async def _update_gallery_if_open(self, user_id: int, avatar_id: UUID, photos: List[AvatarPhoto]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–∞–ª–µ—Ä–µ—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in user_gallery_cache:
            cache = user_gallery_cache[user_id]
            if cache["avatar_id"] == str(avatar_id):
                cache["photos"] = photos
                cache["total"] = len(photos)


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
photo_handler = PhotoUploadHandler()

# ============= –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =============

@router.callback_query(F.data == "start_photo_upload")
async def start_photo_upload(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await photo_handler.start_photo_upload(callback, state)

@router.message(F.photo, AvatarStates.uploading_photos)
async def handle_photo_upload(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await photo_handler.handle_photo_upload(message, state, bot)

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["photo_handler", "router"] 