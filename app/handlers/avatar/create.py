"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
Workflow: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è ‚Üí –ü–æ–ª ‚Üí –ò–º—è ‚Üí –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.keyboards.avatar_clean import get_avatar_gender_keyboard
from app.handlers.state import AvatarStates
from app.core.logger import get_logger

logger = get_logger(__name__)
router = Router()

@router.callback_query(F.data == "create_avatar")
async def start_avatar_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ —Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        from .training_type_selection import show_training_type_selection
        await show_training_type_selection(callback, state)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "select_gender")
async def show_gender_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        text = """
üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∞–≤–∞—Ç–∞—Ä–∞**

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""
        
        keyboard = get_avatar_gender_keyboard()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(AvatarStates.selecting_gender)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("avatar_gender_"))
async def select_avatar_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        gender = callback.data.split("_", 2)[2]  # male, female
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª (—Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–æ–π –∏ –∂–µ–Ω—Å–∫–∏–π)
        if gender not in ["male", "female"]:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(gender=gender)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
        text = """
üìù **–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞**

–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:

‚úÖ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –û—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –õ—é–±—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
‚Ä¢ –ü—Ä–æ–±–µ–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã

üí° **–ü—Ä–∏–º–µ—Ä—ã:** –ê–ª–µ–∫—Å–µ–π, Maya, Cyber Alex, –ê–Ω–Ω–∞-–ú–∞—Ä–∏—è

‚úçÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è:**
"""
        
        await callback.message.edit_text(
            text=text,
            parse_mode="Markdown"
        )
        
        await state.set_state(AvatarStates.entering_name)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender}")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(AvatarStates.entering_name)
async def process_avatar_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message.text:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º.\n"
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã."
            )
            return
            
        name = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–∞
        if not name:
            await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        if len(name) < 2:
            await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
            return
            
        if len(name) > 50:
            await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
            return
        
        # ‚úÖ –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Å–∏–º–≤–æ–ª—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        await state.update_data(avatar_name=name)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        data = await state.get_data()
        gender = data.get("gender", "male")
        training_type = data.get("training_type", "portrait")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from app.core.di import get_user_service, get_avatar_service
        from app.database.models import AvatarGender, AvatarType, AvatarTrainingType
        
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
            user_id = user.id
        
        async with get_avatar_service() as avatar_service:
            avatar = await avatar_service.create_avatar(
                user_id=user_id,
                name=name,
                gender=AvatarGender(gender),
                avatar_type=AvatarType.CHARACTER,
                training_type=AvatarTrainingType(training_type)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(avatar_id=str(avatar.id))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        text = f"""
‚úÖ **–ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω!**

üé≠ **–ò–º—è:** {name}
üë§ **–ü–æ–ª:** {"–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"}
üéØ **–¢–∏–ø:** {"–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π" if training_type == "portrait" else "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"}

üì∏ **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

–ú–∏–Ω–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 15-20 —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

üöÄ **–ì–æ—Ç–æ–≤—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ?**
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì∏ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ",
                    callback_data="start_photo_upload"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                    callback_data="select_gender"
                )
            ]
        ])
        
        await message.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–ª –∞–≤–∞—Ç–∞—Ä: {name} (ID: {avatar.id})")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

 