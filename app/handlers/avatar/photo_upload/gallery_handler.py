"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/avatar/photo_upload.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫

–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ PhotoUploadGalleryHandler –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –≥–∞–ª–µ—Ä–µ—è–º–∏
"""
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from uuid import UUID
from typing import Dict, List, Optional
import logging
import json

from app.core.di import get_avatar_service, get_redis, get_user_service
from app.database.models import AvatarPhoto
from app.keyboards.photo_upload import get_photo_gallery_navigation_keyboard

logger = logging.getLogger(__name__)

class PhotoUploadGalleryHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏–∑ GalleryHandler)"""
    
    async def _get_gallery_cache(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis"""
        try:
            redis_client = await get_redis()
            cache_key = f"photo_gallery_cache:{user_id}"
            cached_data = await redis_client.get(cache_key)
            
            if cached_data:
                return json.loads(cached_data)
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis: {e}")
            
        return None
    
    async def _set_gallery_cache(self, user_id: int, cache_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –≤ Redis"""
        try:
            redis_client = await get_redis()
            cache_key = f"photo_gallery_cache:{user_id}"
            
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
            await redis_client.setex(
                cache_key, 
                600,  # 10 –º–∏–Ω—É—Ç TTL
                json.dumps(cache_data, default=str)
            )
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –≥–∞–ª–µ—Ä–µ–∏ –≤ Redis: {e}")
    
    async def _clear_gallery_cache(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis"""
        try:
            redis_client = await get_redis()
            cache_key = f"photo_gallery_cache:{user_id}"
            await redis_client.delete(cache_key)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis: {e}")
    
    async def show_photo_gallery(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("avatar_id")
            
            if not avatar_id_str:
                await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            async with get_avatar_service() as avatar_service:
                photos, total = await avatar_service.get_avatar_photos(avatar_id)
            
            if not photos:
                await callback.answer("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            cache_data = {
                "photos": [{"id": str(p.id), "minio_key": p.minio_key, "width": p.width, "height": p.height, 
                           "created_at": p.created_at.isoformat()} for p in photos],
                "current_index": 0,
                "avatar_id": str(avatar_id)
            }
            await self._set_gallery_cache(user_id, cache_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            await self._show_gallery_photo(callback, user_id, 0)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∞–ª–µ—Ä–µ–∏", show_alert=True)

    async def _show_gallery_photo(self, callback: CallbackQuery, user_id: int, photo_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ"""
        try:
            cache_data = await self._get_gallery_cache(user_id)
            if cache_data is None:
                await callback.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            photos = cache_data["photos"]
            
            if photo_index < 0 or photo_index >= len(photos):
                await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            photo = photos[photo_index]
            cache_data["current_index"] = photo_index
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
            await self._set_gallery_cache(user_id, cache_data)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
            from app.services.storage import StorageService
            storage = StorageService()
            
            try:
                file_data = await storage.download_file("avatars", photo["minio_key"])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ
                caption = f"""üì∏ –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

üìä –§–æ—Ç–æ {photo_index + 1} –∏–∑ {len(photos)}
üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo['created_at'][:10]}
üìè –†–∞–∑–º–µ—Ä: {photo['width']}√ó{photo['height']} –ø–∏–∫—Å–µ–ª–µ–π

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = get_photo_gallery_navigation_keyboard(
                    photo_index + 1, len(photos), photo["id"]
                )
                
                # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                from aiogram.types import BufferedInputFile
                photo_input = BufferedInputFile(file_data, filename=f"photo_{photo_index + 1}.jpg")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                if callback.message.photo:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
                    media = InputMediaPhoto(media=photo_input, caption=caption)
                    try:
                        await callback.message.edit_media(media=media, reply_markup=keyboard)
                    except Exception as edit_error:
                        # Fallback –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ: {edit_error}")
                        await callback.message.delete()
                        await callback.bot.send_photo(
                            chat_id=callback.message.chat.id,
                            photo=photo_input,
                            caption=caption,
                            reply_markup=keyboard
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
                    await callback.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo_input,
                        caption=caption,
                        reply_markup=keyboard
                    )
                
            except Exception as storage_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–∑ MinIO: {storage_error}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ", show_alert=True)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", show_alert=True)

    async def handle_gallery_navigation(self, callback: CallbackQuery, direction: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≥–∞–ª–µ—Ä–µ–µ"""
        try:
            user_id = callback.from_user.id
            
            cache_data = await self._get_gallery_cache(user_id)
            if cache_data is None:
                await callback.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            current_index = cache_data["current_index"]
            photos_count = len(cache_data["photos"])
            
            if direction == "prev":
                new_index = max(0, current_index - 1)
            elif direction == "next":
                new_index = min(photos_count - 1, current_index + 1)
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", show_alert=True)
                return
            
            if new_index == current_index:
                await callback.answer()
                return
            
            await self._show_gallery_photo(callback, user_id, new_index)
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–∞–ª–µ—Ä–µ–µ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)

    async def handle_delete_photo(self, callback: CallbackQuery, avatar_id: UUID, photo_index: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"""
        try:
            user_id = callback.from_user.id
            
            cache_data = await self._get_gallery_cache(user_id)
            if cache_data is None:
                await callback.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            photos = cache_data["photos"]
            
            if photo_index < 0 or photo_index >= len(photos):
                await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            photo = photos[photo_index]
            
            # –ü–æ–ª—É—á–∞–µ–º user UUID –∏–∑ –ë–î
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                user_uuid = user.id
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            async with get_avatar_service() as avatar_service:
                await avatar_service.delete_avatar_photo(UUID(photo["id"]), user_uuid)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            photos.pop(photo_index)
            cache_data["photos"] = photos
            
            if not photos:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
                await callback.message.edit_text(
                    "üì∏ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω—ã.\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", callback_data="back_to_upload")]
                    ])
                )
                await self._clear_gallery_cache(user_id)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
                new_index = min(photo_index, len(photos) - 1)
                cache_data["current_index"] = new_index
                await self._set_gallery_cache(user_id, cache_data)
                await self._show_gallery_photo(callback, user_id, new_index)
            
            await callback.answer("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ {photo['id']} –∏–∑ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", show_alert=True)

    async def clear_gallery_cache(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._clear_gallery_cache(user_id) 