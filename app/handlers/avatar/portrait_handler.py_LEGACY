"""
LEGACY: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
–£–°–¢–ê–†–ï–õ–û: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π workflow app/handlers/avatar/create.py
–¢–µ–ø–µ—Ä—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–∞–∫ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from typing import Dict, Any

from app.core.logger import get_logger
from app.handlers.state import AvatarStates
from app.database.models import AvatarTrainingType, AvatarGender
from app.services.avatar.fal_training_service import FALTrainingService
from app.keyboards.avatar_clean import get_avatar_gender_keyboard
from app.texts.avatar import AvatarTexts

logger = get_logger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
avatar_texts = AvatarTexts()


@router.callback_query(F.data == "create_portrait_avatar")
async def start_portrait_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –∫–∞–∫ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π
        await state.update_data(training_type="portrait")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        text = """
üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞** ‚≠ê

**–õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤!**

‚ú® **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ª–∏—Ü–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π —Å—ä–µ–º–∫–∏
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (3-15 –º–∏–Ω—É—Ç)
‚Ä¢ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–µ–ª—Ñ–∏ –∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π

üöÄ **–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
2. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ 10-20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ

üí° **–°–æ–≤–µ—Ç**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:
"""
        
        keyboard = get_avatar_gender_keyboard()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.set_state(AvatarStates.selecting_gender)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("avatar_gender_"))
async def select_portrait_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        gender = callback.data.split("_", 2)[2]  # male, female
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª
        valid_genders = [g.value for g in AvatarGender]
        if gender not in valid_genders:
            await callback.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_genders)}", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        await state.update_data(gender=gender)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        training_type = data.get("training_type", "portrait")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
        gender_emoji = {"male": "üë®", "female": "üë©"}
        gender_text = {"male": "–º—É–∂—Å–∫–æ–π", "female": "–∂–µ–Ω—Å–∫–∏–π"}
        
        text = f"""
{gender_emoji.get(gender, 'ü§ñ')} **–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä ({gender_text.get(gender, '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π')})**

‚úÖ **–í—ã–±—Ä–∞–Ω–æ:**
‚Ä¢ –¢–∏–ø: üé≠ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª–∏—Ü)
‚Ä¢ –ü–æ–ª: {gender_text.get(gender, '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π').title()}

üéØ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è {gender_text.get(gender, '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ')} –ø–æ–ª–∞:**
‚Ä¢ –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —á–µ—Ä—Ç –ª–∏—Ü–∞
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è

üìù **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥**: –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏–º—ë–Ω**: –ú–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç, –ê–ª–µ–∫—Å–µ–π, Maya, –°–µ–ª—Ñ–∏-—Å—Ç–∏–ª—å

‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞:
"""
        
        await callback.message.edit_text(
            text=text,
            parse_mode="Markdown"
        )
        
        await state.set_state(AvatarStates.entering_name)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {gender}")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.message(AvatarStates.entering_name)
async def process_portrait_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if len(name) < 2:
            await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(name) > 50:
            await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        await state.update_data(name=name)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        gender = data.get("gender", "other")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        gender_emoji = {"male": "üë®", "female": "üë©"}
        
        text = f"""
{gender_emoji.get(gender, 'ü§ñ')} **"{name}"** - –æ—Ç–ª–∏—á–Ω–æ–µ –∏–º—è!

‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:**
‚Ä¢ –ò–º—è: {name}
‚Ä¢ –¢–∏–ø: üé≠ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {gender.title()}

üì∏ **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥**: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

üéØ **–î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:**
‚Ä¢ 10-20 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ
‚Ä¢ –ë–µ–∑ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –æ—á–∫–æ–≤ –∏ –º–∞—Å–æ–∫

üì§ **–ù–∞—á–Ω–∏—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º–∏.
"""
        
        await message.answer(
            text=text,
            parse_mode="Markdown"
        )
        
        await state.set_state(AvatarStates.uploading_photos)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–º—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {name}")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def get_portrait_training_config(gender: str) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤
    config = {
        "training_type": "portrait",
        "trigger_phrase": "PERSON",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤
        "steps": 1000,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤
        "learning_rate": 0.0004,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        "multiresolution_training": True,  # –ú—É–ª—å—Ç–∏—Ä–∞–∑—Ä–µ—à–∞—é—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ
        "subject_crop": True,  # –ê–≤—Ç–æ–æ–±—Ä–µ–∑–∫–∞ —Å—É–±—ä–µ–∫—Ç–∞
        "create_masks": False,  # –û–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤
    }
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª
    if gender == "male":
        config["optimization_note"] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º—É–∂—Å–∫–∏—Ö —á–µ—Ä—Ç –ª–∏—Ü–∞"
    elif gender == "female":
        config["optimization_note"] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö —á–µ—Ä—Ç –ª–∏—Ü–∞"
    else:
        config["optimization_note"] = "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    
    return config


async def get_portrait_quality_info() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    fal_service = FALTrainingService()
    
    return {
        "type_name": "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
        "specialization": "–õ–∏—Ü–∞ –ª—é–¥–µ–π",
        "speed": "–ë—ã—Å—Ç—Ä–æ (3-15 –º–∏–Ω)",
        "quality": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤",
        "technology": "Flux LoRA Portrait Trainer",
        "test_mode": fal_service.is_test_mode(),
        "recommended_photos": "10-20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        "optimization": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏ –º–∞—Å–∫–∏"
    } 