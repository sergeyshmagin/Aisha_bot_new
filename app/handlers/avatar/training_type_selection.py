"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø–ª–∞–Ω–∞ avatar_implementation_plan.md - –≠—Ç–∞–ø 0
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.keyboards.avatar_clean import (    get_training_type_keyboard,    get_training_type_confirmation_keyboard,    get_comparison_keyboard)
from app.texts.avatar import TRAINING_TYPE_TEXTS
from app.handlers.state import AvatarStates
from app.services.avatar.fal_training_service import FALTrainingService
from app.database.models import AvatarTrainingType
from app.core.logger import get_logger

logger = get_logger(__name__)
router = Router()

@router.callback_query(F.data == "select_training_type")
async def show_training_type_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fal_service = FALTrainingService()
        config = fal_service.get_config_summary()
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
        text = TRAINING_TYPE_TEXTS["selection_menu"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
        if config["test_mode"]:
            text += "\n\nüß™ **–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú** - –æ–±—É—á–µ–Ω–∏–µ –∏–º–∏—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç"
        
        keyboard = get_training_type_keyboard()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(AvatarStates.selecting_training_type)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("training_type_"))
async def select_training_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        training_type = callback.data.split("_", 2)[2]  # portrait, style, etc.
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è
        valid_types = [t.value for t in AvatarTrainingType]
        if training_type not in valid_types:
            await callback.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_types)}", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(training_type=training_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∏–ø–µ
        fal_service = FALTrainingService()
        type_info = fal_service.get_training_type_info(training_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∏–ø–µ
        text = TRAINING_TYPE_TEXTS[f"{training_type}_info"]
        keyboard = get_training_type_confirmation_keyboard(training_type)
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.set_state(AvatarStates.viewing_training_info)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("confirm_training_"))
async def confirm_training_type(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º training_type –∏–∑ callback_data –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        callback_training_type = callback.data.split("_", 2)[2]
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —ç—Ç–æ "current", —Ç–æ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é
        # –∏–∑ photo_upload, –∞ –Ω–µ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        if callback_training_type == "current":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ photo_upload
            from .photo_upload import photo_handler
            await photo_handler.show_training_confirmation(callback, state)
            return
        
        # –î–ª—è –Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ (portrait/style) - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        training_type = callback_training_type
        await state.update_data(training_type=training_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        fal_service = FALTrainingService()
        type_info = fal_service.get_training_type_info(training_type)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = TRAINING_TYPE_TEXTS["training_type_saved"].format(
            type_name=type_info["name"]
        )
        
        await callback.message.edit_text(
            text=text,
            parse_mode="Markdown"
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
        await asyncio.sleep(1)
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤)
        from .create import show_gender_selection
        await show_gender_selection(callback, state)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è: {training_type}")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "compare_training_types")
async def show_training_types_comparison(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        text = TRAINING_TYPE_TEXTS["detailed_comparison"]
        keyboard = get_comparison_keyboard()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.set_state(AvatarStates.viewing_training_comparison)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "detailed_comparison")
async def show_detailed_comparison(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –≠—Ç–æ —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –≤—ã—à–µ
        await show_training_types_comparison(callback, state)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "back_to_avatar_menu")
async def back_to_avatar_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π handler)
        from .main import avatar_main_handler
        await avatar_main_handler.show_avatar_menu(callback, state)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
import asyncio 