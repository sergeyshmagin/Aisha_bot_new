"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/avatar/gallery.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from uuid import UUID
import logging

from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest

from app.core.di import get_user_service, get_avatar_service
from app.handlers.state import AvatarStates
from .keyboards import GalleryKeyboards
from .models import gallery_cache
from app.core.logger import get_logger

logger = logging.getLogger(__name__)

class AvatarActionsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏"""
    
    def __init__(self):
        self.keyboards = GalleryKeyboards()
    
    async def handle_set_main_avatar(self, callback: CallbackQuery):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π"""
        try:
            user_telegram_id = callback.from_user.id
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = None
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                user_id = user.id
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                success = await avatar_service.set_main_avatar(user.id, avatar_id)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    cache_data = await gallery_cache.get_avatars(user_telegram_id)
                    if cache_data:
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                        current_idx = 0
                        for i, avatar in enumerate(avatars):
                            if avatar.id == avatar_id:
                                current_idx = i
                                break
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        await gallery_cache.set_avatars(user_telegram_id, avatars, current_idx)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                        from .avatar_cards import AvatarCardsHandler
                        cards_handler = AvatarCardsHandler()
                        await cards_handler.send_avatar_card(callback, user.id, avatars, current_idx)
                    
                    await callback.answer("‚≠ê –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π!")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π", show_alert=True)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_rename_avatar(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_telegram_id = callback.from_user.id
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤–∞—Ç–∞—Ä
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar or str(avatar.user_id) != str(user.id):
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                current_name = avatar.name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(rename_avatar_id=str(avatar_id))
            await state.set_state(AvatarStates.renaming_avatar)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            text = f"""‚úèÔ∏è **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞**

üè∑Ô∏è **–¢–µ–∫—É—â–µ–µ –∏–º—è:** {current_name}

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –î–ª–∏–Ω–∞: 2-30 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤

‚úÖ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤ —á–∞—Ç"""
            
            keyboard = self.keyboards.get_rename_cancel_keyboard(str(avatar_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            if callback.message.photo:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                
                await callback.message.answer(
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                await callback.message.edit_text(
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–∞—á–∞–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_rename_avatar_cancel(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_telegram_id = callback.from_user.id
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞–≤–∞—Ç–∞—Ä–∞
                current_idx = 0
                for i, avatar in enumerate(avatars):
                    if avatar.id == avatar_id:
                        current_idx = i
                        break
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤–∞—Ç–∞—Ä–∞
                from .avatar_cards import AvatarCardsHandler
                cards_handler = AvatarCardsHandler()
                await cards_handler.send_avatar_card(callback, user.id, avatars, current_idx)
            
            await callback.answer("‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def process_avatar_rename(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_telegram_id = message.from_user.id
            new_name = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not new_name:
                await message.reply("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            
            if len(new_name) < 2:
                await message.reply("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            
            if len(new_name) > 30:
                await message.reply("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id_str = data.get("rename_avatar_id")
            if not avatar_id_str:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            avatar_id = UUID(avatar_id_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar or str(avatar.user_id) != str(user.id):
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
                
                old_name = avatar.name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
                updated_avatar = await avatar_service.set_avatar_name(avatar_id, new_name)
                
                if updated_avatar:
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.clear()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤
                    avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                    current_idx = 0
                    for i, avatar in enumerate(avatars):
                        if avatar.id == avatar_id:
                            current_idx = i
                            break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    await gallery_cache.set_avatars(user_telegram_id, avatars, current_idx)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    await message.reply(f"‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!\n\nüìù **{old_name}** ‚Üí **{new_name}**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤–∞—Ç–∞—Ä–∞
                    from .avatar_cards import AvatarCardsHandler
                    cards_handler = AvatarCardsHandler()
                    await cards_handler.send_avatar_card(
                        type('CallbackQuery', (), {
                            'message': message,
                            'from_user': message.from_user
                        })(), 
                        user.id, 
                        avatars, 
                        current_idx
                    )
                    
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –∞–≤–∞—Ç–∞—Ä {avatar_id}: '{old_name}' ‚Üí '{new_name}'")
                else:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            
        except ValueError as e:
            await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏: {e}")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    async def handle_delete_avatar(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_telegram_id = callback.from_user.id
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤–∞—Ç–∞—Ä
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ
            avatar_name = "–∞–≤–∞—Ç–∞—Ä"
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar or str(avatar.user_id) != str(user.id):
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                avatar_name = avatar.name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä"
                photos, total_photos = await avatar_service.get_avatar_photos(avatar_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            text = f"""üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞**

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä **¬´{avatar_name}¬ª**?

‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**

üóÇÔ∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:
‚Ä¢ {total_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π

ü§î –ü–æ–¥—É–º–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º."""
            
            keyboard = self.keyboards.get_delete_confirmation_keyboard(str(avatar_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if callback.message.photo:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except TelegramBadRequest as markdown_error:
                    if "parse entities" in str(markdown_error):
                        # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {markdown_error}")
                        text_plain = text.replace('**', '')
                        await callback.message.answer(
                            text=text_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {markdown_error}")
                        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
                        return
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                try:
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                except TelegramBadRequest as markdown_error:
                    if "parse entities" in str(markdown_error):
                        # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ): {markdown_error}")
                        text_plain = text.replace('**', '')
                        await callback.message.edit_text(
                            text=text_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {markdown_error}")
                        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
                        return
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_delete_avatar_confirm(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            user_telegram_id = callback.from_user.id
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = None
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                user_id = user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            avatar_name = "–∞–≤–∞—Ç–∞—Ä"
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if avatar and str(avatar.user_id) == str(user.id):
                    avatar_name = avatar.name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä"
                
                # –£–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
                success = await avatar_service.delete_avatar_completely(avatar_id)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
                    avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                    
                    if avatars:
                        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞–≤–∞—Ç–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π
                        await gallery_cache.set_avatars(user_telegram_id, avatars, 0)
                        
                        from .avatar_cards import AvatarCardsHandler
                        cards_handler = AvatarCardsHandler()
                        await cards_handler.send_avatar_card(callback, user.id, avatars, 0)
                    else:
                        # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                        await self._show_empty_gallery(callback)
                    
                    await callback.answer(f"üóëÔ∏è –ê–≤–∞—Ç–∞—Ä ¬´{avatar_name}¬ª —É–¥–∞–ª–µ–Ω")
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} —É–¥–∞–ª–∏–ª –∞–≤–∞—Ç–∞—Ä {avatar_id} ({avatar_name})")
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", show_alert=True)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

    async def handle_delete_avatar_cancel(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ"""
        try:
            user_telegram_id = callback.from_user.id
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–≤–∞—Ç–∞—Ä—ã –∏–∑ –∫—ç—à–∞
            cache_data = await gallery_cache.get_avatars(user_telegram_id)
            if not cache_data:
                # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã
                async with get_avatar_service() as avatar_service:
                    avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                    if avatars:
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –æ—Ç–º–µ–Ω—è–µ–º–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                        current_idx = 0
                        for i, avatar in enumerate(avatars):
                            if avatar.id == avatar_id:
                                current_idx = i
                                break
                        
                        await gallery_cache.set_avatars(user_telegram_id, avatars, current_idx)
                        cache_data = {"avatars": avatars, "current_idx": current_idx}
                    else:
                        await self._show_empty_gallery(callback)
                        return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞
            from .avatar_cards import AvatarCardsHandler
            cards_handler = AvatarCardsHandler()
            await cards_handler.send_avatar_card(
                callback, 
                user.id, 
                cache_data["avatars"], 
                cache_data["current_idx"]
            )
            
            await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    def _get_status_text(self, status: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
        status_map = {
            "draft": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
            "photos_uploading": "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ",
            "training": "üéì –û–±—É—á–µ–Ω–∏–µ",
            "completed": "‚úÖ –ì–æ—Ç–æ–≤",
            "failed": "‚ùå –û—à–∏–±–∫–∞",
            "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω"
        }
        return status_map.get(status, f"‚ùì {status}")

    async def _show_empty_gallery(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–∏"""
        text = """üé≠ **–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã**

üîç –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤

üÜï –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä —á—Ç–æ–±—ã:
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ üé≠ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã
‚Ä¢ ‚ú® –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∏–ª—è–º–∏

üëÜ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""
        
        keyboard = self.keyboards.get_empty_gallery_keyboard()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if callback.message.photo:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å Markdown
                try:
                    await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
                except TelegramBadRequest as markdown_error:
                    if "parse entities" in str(markdown_error):
                        # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –≤ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {markdown_error}")
                        text_plain = text.replace('**', '')
                        await callback.message.answer(text_plain, reply_markup=keyboard, parse_mode=None)
                    else:
                        logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–∏: {markdown_error}")
                        raise
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å Markdown
                try:
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
                except TelegramBadRequest as markdown_error:
                    if "parse entities" in str(markdown_error):
                        # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –≤ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ): {markdown_error}")
                        text_plain = text.replace('**', '')
                        await callback.message.edit_text(text_plain, reply_markup=keyboard, parse_mode=None)
                    else:
                        logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–∏: {markdown_error}")
                        raise
        except Exception as general_error:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ –∞–≤–∞—Ç–∞—Ä–æ–≤: {general_error}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏", show_alert=True) 