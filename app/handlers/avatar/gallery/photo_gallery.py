"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/avatar/gallery.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from uuid import UUID
import logging

from aiogram.types import CallbackQuery, InputMediaPhoto, BufferedInputFile
from aiogram.fsm.context import FSMContext

from app.core.di import get_avatar_service
from app.core.logger import get_logger
from app.services.storage import StorageService
from .keyboards import GalleryKeyboards
from .models import gallery_cache

logger = get_logger(__name__)

class PhotoGalleryHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    
    def __init__(self):
        self.keyboards = GalleryKeyboards()
    
    async def handle_view_avatar_photos(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            avatar_id = UUID(callback.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                
                if not avatar or not avatar.photos:
                    await callback.answer("üì∏ –£ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", show_alert=True)
                    return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            user_telegram_id = callback.from_user.id
            await gallery_cache.set_photos(user_telegram_id, avatar_id, avatar, 0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            await self.show_avatar_photo(callback, avatar, 0)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_avatar_photo(self, callback: CallbackQuery, avatar, photo_idx: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            if not avatar.photos or photo_idx >= len(avatar.photos):
                await callback.answer("üì∏ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            photo = avatar.photos[photo_idx]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ MinIO
            storage = StorageService()
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "avatars/"
            # –ï—Å–ª–∏ minio_key —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "avatars/", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
            minio_key = photo.minio_key
            if minio_key.startswith("avatars/"):
                # –ö–ª—é—á —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ object_name
                photo_data = await storage.download_file("avatars", minio_key)
            else:
                # –ö–ª—é—á –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                photo_data = await storage.download_file("avatars", f"avatars/{minio_key}")
            
            logger.info(f"[Avatar Photo] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ: bucket=avatars, key={minio_key}, —Ä–∞–∑–º–µ—Ä={len(photo_data) if photo_data else 0} –±–∞–π—Ç")
            
            if not photo_data:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", show_alert=True)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            text = self._format_photo_text(avatar, photo_idx, photo)
            
            keyboard = self.keyboards.get_avatar_photo_gallery_keyboard(
                photo_idx, 
                len(avatar.photos), 
                str(avatar.id)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            photo_file = BufferedInputFile(photo_data, filename=f"photo_{photo_idx + 1}.jpg")
            await callback.message.edit_media(
                media=InputMediaPhoto(media=photo_file, caption=text, parse_mode="Markdown"),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", show_alert=True)

    async def handle_photo_navigation(self, callback: CallbackQuery):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∞–≤–∞—Ç–∞—Ä–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø - –±–µ–∑ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–ª–∏–∫–µ)"""
        try:
            parts = callback.data.split(":")
            direction = parts[0].split("_")[-1]  # "prev" –∏–ª–∏ "next"
            avatar_id = UUID(parts[1])
            current_idx = int(parts[2])
            
            user_telegram_id = callback.from_user.id
            cache_data = await gallery_cache.get_photos(user_telegram_id, avatar_id)
            
            if not cache_data:
                await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                return
            
            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤–º–µ—Å—Ç–æ SQL –∑–∞–ø—Ä–æ—Å–∞!
            avatar = cache_data.get("avatar")
            if not avatar or not avatar.photos:
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–µ—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
                logger.warning(f"–ö–µ—à –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –¥–ª—è {avatar_id}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î")
                async with get_avatar_service() as avatar_service:
                    avatar = await avatar_service.get_avatar(avatar_id)
                    
                if not avatar or not avatar.photos:
                    await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                    return
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                await gallery_cache.set_photos(user_telegram_id, avatar_id, avatar, current_idx)
            
            if direction == "prev":
                new_idx = (current_idx - 1) % len(avatar.photos)
            else:  # "next"
                new_idx = (current_idx + 1) % len(avatar.photos)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
            await gallery_cache.update_photo_idx(user_telegram_id, avatar_id, new_idx)
            
            # üöÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º TTL –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await gallery_cache.extend_cache_ttl(user_telegram_id, avatar_id, ttl=600)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤!)
            await self.show_avatar_photo(callback, avatar, new_idx)
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def handle_view_avatar_card(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏"""
        try:
            avatar_id = UUID(callback.data.split(":")[1])
            user_telegram_id = callback.from_user.id
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏
            await gallery_cache.clear_photos(user_telegram_id, avatar_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏
            cache_data = await gallery_cache.get_avatars(user_telegram_id)
            if not cache_data:
                # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –∑–∞–Ω–æ–≤–æ
                from .main_handler import GalleryHandler
                gallery_handler = GalleryHandler()
                await gallery_handler.show_avatar_gallery(callback, state)
                return
            
            avatars = cache_data["avatars"]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞–≤–∞—Ç–∞—Ä–∞ - –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∏–∑ –ë–î
            from app.core.di import get_user_service, get_avatar_service
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                user_id = user.id
                
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars_with_photos(user_id)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞–≤–∞—Ç–∞—Ä–∞
            avatar_idx = 0
            for i, avatar in enumerate(avatars):
                if avatar.id == avatar_id:
                    avatar_idx = i
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            await gallery_cache.update_current_idx(user_telegram_id, avatar_idx)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AvatarCardsHandler –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            from .avatar_cards import AvatarCardsHandler
            cards_handler = AvatarCardsHandler()
            await cards_handler.send_avatar_card(callback, user_id, avatars, avatar_idx)
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    def _format_photo_text(self, avatar, photo_idx: int, photo) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ"""
        return f"""üé≠ **{avatar.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}**

üì∏ –§–æ—Ç–æ {photo_idx + 1} –∏–∑ {len(avatar.photos)}

üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo.created_at.strftime("%d.%m.%Y %H:%M") if photo.created_at else "‚Äî"}""" 