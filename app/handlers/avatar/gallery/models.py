"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
"""
from typing import Dict, List, Any, Optional
from uuid import UUID
import json
import logging

from app.services.avatar.redis_service import AvatarRedisService

logger = logging.getLogger(__name__)

class GalleryCache:
    """Redis-based –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    def __init__(self):
        self.redis_service = AvatarRedisService()
        self._ttl = 300  # 5 –º–∏–Ω—É—Ç TTL –¥–ª—è –∫—ç—à–∞ –≥–∞–ª–µ—Ä–µ–∏
    
    def _get_avatars_key(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"gallery_cache:avatars:{user_id}"
    
    def _get_photos_key(self, user_id: int, avatar_id: UUID) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏"""
        return f"gallery_cache:photos:{user_id}:{avatar_id}"
    
    async def set_avatars(self, user_id: int, avatars: List, current_idx: int = 0):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis"""
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_avatars_key(user_id)
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ ID –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
            cache_data = {
                "avatar_ids": [str(avatar.id) for avatar in avatars],
                "current_idx": current_idx,
                "total_count": len(avatars)
            }
            
            await redis_client.setex(
                key, 
                self._ttl, 
                json.dumps(cache_data)
            )
            
            logger.debug(f"–ö—ç—à –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def get_avatars(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis"""
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_avatars_key(user_id)
            
            data = await redis_client.get(key)
            if data:
                cache_data = json.loads(data)
                logger.debug(f"–ö—ç—à –∞–≤–∞—Ç–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return cache_data
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def update_current_idx(self, user_id: int, idx: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∞–≤–∞—Ç–∞—Ä–∞ –≤ Redis"""
        try:
            cache_data = await self.get_avatars(user_id)
            if cache_data:
                cache_data["current_idx"] = idx
                
                redis_client = await self.redis_service.get_redis()
                key = self._get_avatars_key(user_id)
                
                await redis_client.setex(
                    key, 
                    self._ttl, 
                    json.dumps(cache_data)
                )
                
                logger.debug(f"–ò–Ω–¥–µ–∫—Å –∞–≤–∞—Ç–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {idx}")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def set_photos(self, user_id: int, avatar_id: UUID, avatar, current_photo_idx: int = 0):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –≤ Redis —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_photos_key(user_id, avatar_id)
            
            # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–≤–∞—Ç–∞—Ä–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            avatar_data = {
                "id": str(avatar.id),
                "name": avatar.name,
                "user_id": avatar.user_id,
                "gender": avatar.gender,
                "avatar_type": avatar.avatar_type,
                "training_type": avatar.training_type,
                "status": avatar.status,
                "is_main": avatar.is_main,
                "created_at": avatar.created_at.isoformat() if avatar.created_at else None,
                "updated_at": avatar.updated_at.isoformat() if avatar.updated_at else None,
                "photos": []
            }
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            if avatar.photos:
                for photo in avatar.photos:
                    photo_data = {
                        "id": str(photo.id),
                        "avatar_id": str(photo.avatar_id),
                        "minio_key": photo.minio_key,
                        "upload_order": photo.upload_order,
                        "width": photo.width,
                        "height": photo.height,
                        "file_size": photo.file_size,
                        "created_at": photo.created_at.isoformat() if photo.created_at else None
                    }
                    avatar_data["photos"].append(photo_data)
            
            cache_data = {
                "avatar": avatar_data,
                "current_photo_idx": current_photo_idx,
                "photos_count": len(avatar.photos) if avatar.photos else 0
            }
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TTL –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (10 –º–∏–Ω—É—Ç)
            await redis_client.setex(
                key, 
                600,  # 10 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ 
                json.dumps(cache_data)
            )
            
            logger.debug(f"–ö—ç—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞–≤–∞—Ç–∞—Ä {avatar_id}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏: {e}")
    
    async def get_photos(self, user_id: int, avatar_id: UUID) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_photos_key(user_id, avatar_id)
            
            data = await redis_client.get(key)
            if data:
                cache_data = json.loads(data)
                
                # üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ –∫–µ—à–∞
                if "avatar" in cache_data:
                    from app.database.models import Avatar, AvatarPhoto
                    from datetime import datetime
                    from uuid import UUID
                    
                    avatar_data = cache_data["avatar"]
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Avatar
                    avatar = Avatar()
                    avatar.id = UUID(avatar_data["id"])
                    avatar.name = avatar_data["name"]
                    avatar.user_id = avatar_data["user_id"]
                    avatar.gender = avatar_data["gender"]
                    avatar.avatar_type = avatar_data["avatar_type"]
                    avatar.training_type = avatar_data["training_type"]
                    avatar.status = avatar_data["status"]
                    avatar.is_main = avatar_data["is_main"]
                    avatar.created_at = datetime.fromisoformat(avatar_data["created_at"]) if avatar_data["created_at"] else None
                    avatar.updated_at = datetime.fromisoformat(avatar_data["updated_at"]) if avatar_data["updated_at"] else None
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    avatar.photos = []
                    for photo_data in avatar_data["photos"]:
                        photo = AvatarPhoto()
                        photo.id = UUID(photo_data["id"])
                        photo.avatar_id = UUID(photo_data["avatar_id"])
                        photo.minio_key = photo_data["minio_key"]
                        photo.upload_order = photo_data["upload_order"]
                        photo.width = photo_data["width"]
                        photo.height = photo_data["height"]
                        photo.file_size = photo_data["file_size"]
                        photo.created_at = datetime.fromisoformat(photo_data["created_at"]) if photo_data["created_at"] else None
                        avatar.photos.append(photo)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
                    cache_data["avatar"] = avatar
                    
                logger.debug(f"–ö—ç—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞–≤–∞—Ç–∞—Ä {avatar_id}")
                return cache_data
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏: {e}")
            return None
    
    async def update_photo_idx(self, user_id: int, avatar_id: UUID, idx: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ –≤ Redis"""
        try:
            cache_data = await self.get_photos(user_id, avatar_id)
            if cache_data:
                cache_data["current_photo_idx"] = idx
                
                redis_client = await self.redis_service.get_redis()
                key = self._get_photos_key(user_id, avatar_id)
                
                await redis_client.setex(
                    key, 
                    self._ttl, 
                    json.dumps(cache_data)
                )
                
                logger.debug(f"–ò–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∞–≤–∞—Ç–∞—Ä {avatar_id}, –∏–Ω–¥–µ–∫—Å {idx}")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ñ–æ—Ç–æ: {e}")
    
    async def clear_photos(self, user_id: int, avatar_id: UUID):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis"""
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_photos_key(user_id, avatar_id)
            
            await redis_client.delete(key)
            logger.debug(f"–ö—ç—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∞–≤–∞—Ç–∞—Ä {avatar_id}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏: {e}")
    
    async def clear_user(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis"""
        try:
            redis_client = await self.redis_service.get_redis()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–≤
            avatars_key = self._get_avatars_key(user_id)
            await redis_client.delete(avatars_key)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É)
            photos_pattern = f"gallery_cache:photos:{user_id}:*"
            keys = await redis_client.keys(photos_pattern)
            if keys:
                await redis_client.delete(*keys)
            
            logger.debug(f"–í–µ—Å—å –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def invalidate_photo_cache(self, user_id: int, avatar_id: UUID):
        """
        –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        """
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_photos_key(user_id, avatar_id)
            await redis_client.delete(key)
            
            logger.debug(f"–ö–µ—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏: {e}")
    
    async def extend_cache_ttl(self, user_id: int, avatar_id: UUID, ttl: int = 600):
        """
        –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç TTL –∫–µ—à–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        """
        try:
            redis_client = await self.redis_service.get_redis()
            key = self._get_photos_key(user_id, avatar_id)
            
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º TTL –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            exists = await redis_client.exists(key)
            if exists:
                await redis_client.expire(key, ttl)
                logger.debug(f"TTL –∫–µ—à–∞ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {ttl}s –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è TTL –∫–µ—à–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
gallery_cache = GalleryCache() 