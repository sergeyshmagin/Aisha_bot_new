"""
–ì–∞–ª–µ—Ä–µ—è –∞–≤–∞—Ç–∞—Ä–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ archive/aisha_v1/frontend_bot/handlers/avatar/gallery.py
"""
import asyncio
import io
from typing import Optional, List
from uuid import UUID

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, BufferedInputFile
from aiogram.fsm.context import FSMContext

from app.core.di import get_user_service, get_avatar_service
from app.services.storage import StorageService
from app.core.logger import get_logger
from app.handlers.state import AvatarStates
from app.database.models import AvatarGender, AvatarStatus, AvatarTrainingType

logger = get_logger(__name__)
router = Router()

# –ö—ç—à –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
gallery_cache = {}


def get_avatar_card_keyboard(avatar_idx: int, total_avatars: int, avatar_id: str, is_main: bool = False, avatar_status = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
    
    buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞)
    if total_avatars > 1:
        nav_buttons = []
        if avatar_idx > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"avatar_card_prev:{avatar_idx}")
            )
        
        nav_buttons.append(
            InlineKeyboardButton(text=f"{avatar_idx + 1}/{total_avatars}", callback_data="noop")
        )
        
        if avatar_idx < total_avatars - 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"avatar_card_next:{avatar_idx}")
            )
        
        buttons.append(nav_buttons)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º
    action_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π
    if not is_main:
        action_buttons.append(
            InlineKeyboardButton(text="‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π", callback_data=f"avatar_set_main:{avatar_id}")
        )
    else:
        action_buttons.append(
            InlineKeyboardButton(text="‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π", callback_data="noop")
        )
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–Ω–æ–ø–∫–∞ "–§–æ—Ç–æ" —Ç–æ–ª—å–∫–æ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ
    if avatar_status in [AvatarStatus.DRAFT, AvatarStatus.PHOTOS_UPLOADING]:
        action_buttons.append(
            InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data=f"avatar_view_photos:{avatar_id}")
        )
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    action_buttons.append(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"avatar_delete:{avatar_id}")
    )
    
    buttons.append(action_buttons)
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤", callback_data="avatar_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_avatar_photo_gallery_keyboard(photo_idx: int, total_photos: int, avatar_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞"""
    
    buttons = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ
    if total_photos > 1:
        nav_buttons = []
        if photo_idx > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"avatar_photo_prev:{avatar_id}:{photo_idx}")
            )
        
        nav_buttons.append(
            InlineKeyboardButton(text=f"{photo_idx + 1}/{total_photos}", callback_data="noop")
        )
        
        if photo_idx < total_photos - 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"avatar_photo_next:{avatar_id}:{photo_idx}")
            )
        
        buttons.append(nav_buttons)
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∞–≤–∞—Ç–∞—Ä—É", callback_data=f"avatar_view_card:{avatar_id}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def send_avatar_card(
    callback: CallbackQuery, 
    user_id: UUID, 
    avatars: List, 
    avatar_idx: int = 0
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤–∞—Ç–∞—Ä–∞"""
    
    if not avatars or avatar_idx >= len(avatars):
        await callback.message.edit_text(
            "‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="avatar_menu")
            ]])
        )
        return
    
    avatar = avatars[avatar_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ
    name = avatar.name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞)
    gender_str = "üë® –ú—É–∂—Å–∫–æ–π" if avatar.gender == AvatarGender.MALE else "üë© –ñ–µ–Ω—Å–∫–∏–π"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ß–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤–º–µ—Å—Ç–æ enum –∑–Ω–∞—á–µ–Ω–∏–π
    status_map = {
        AvatarStatus.DRAFT: "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
        AvatarStatus.PHOTOS_UPLOADING: "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ",
        AvatarStatus.READY_FOR_TRAINING: "‚è≥ –ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é", 
        AvatarStatus.TRAINING: "üîÑ –û–±—É—á–∞–µ—Ç—Å—è",
        AvatarStatus.COMPLETED: "‚úÖ –ì–æ—Ç–æ–≤",
        AvatarStatus.ERROR: "‚ùå –û—à–∏–±–∫–∞",
        AvatarStatus.CANCELLED: "‚èπÔ∏è –û—Ç–º–µ–Ω–µ–Ω"
    }
    status_str = status_map.get(avatar.status, str(avatar.status))
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
    type_map = {
        AvatarTrainingType.PORTRAIT: "üé≠ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π",
        AvatarTrainingType.STYLE: "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
    }
    type_str = type_map.get(avatar.training_type, str(avatar.training_type))
    
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    created_str = avatar.created_at.strftime("%d.%m.%Y %H:%M") if avatar.created_at else "‚Äî"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photos_count = len(avatar.photos) if avatar.photos else 0
    
    main_str = "‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä" if avatar.is_main else ""
    
    text = f"""
üé≠ **{name}**

{main_str}

üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ üöª –ü–æ–ª: {gender_str}
‚Ä¢ üéØ –¢–∏–ø: {type_str}
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å: {status_str}
‚Ä¢ üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}
‚Ä¢ üìÖ –°–æ–∑–¥–∞–Ω: {created_str}

({avatar_idx + 1} –∏–∑ {len(avatars)})
"""
    
    keyboard = get_avatar_card_keyboard(
        avatar_idx, 
        len(avatars), 
        str(avatar.id), 
        avatar.is_main,
        avatar.status
    )
    
    # –ï—Å–ª–∏ —É –∞–≤–∞—Ç–∞—Ä–∞ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if avatar.photos and len(avatar.photos) > 0:
        try:
            storage = StorageService()
            first_photo = avatar.photos[0]
            photo_data = await storage.download_file("avatars", first_photo.minio_key)
            
            if photo_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏
                photo_file = BufferedInputFile(photo_data, filename="preview.jpg")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if callback.message.photo:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_media
                    await callback.message.edit_media(
                        media=InputMediaPhoto(media=photo_file, caption=text, parse_mode="Markdown"),
                        reply_markup=keyboard
                    )
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    
                    await callback.message.answer_photo(
                        photo=photo_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                return
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}: {e}")
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    if callback.message.photo:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∞ –ø—Ä–µ–≤—å—é –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        await callback.message.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ - –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "avatar_gallery")
async def show_avatar_gallery(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_telegram_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            if not user:
                await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
            user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_avatar_service() as avatar_service:
            avatars = await avatar_service.get_user_avatars_with_photos(user_id)
        
        if not avatars:
            # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –Ω–µ—Ç
            text = """
üé≠ **–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã**

üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤

üÜï –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä —á—Ç–æ–±—ã:
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ üé≠ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã
‚Ä¢ ‚ú® –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∏–ª—è–º–∏

üëÜ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
"""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="avatar_create")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="avatar_menu")]
            ])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if callback.message.photo:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –∫—ç—à
        gallery_cache[user_telegram_id] = {
            "avatars": avatars,
            "current_idx": 0
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä
        await send_avatar_card(callback, user.id, avatars, 0)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –æ—Ç–∫—Ä—ã–ª –≥–∞–ª–µ—Ä–µ—é –∞–≤–∞—Ç–∞—Ä–æ–≤ ({len(avatars)} —à—Ç.)")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–∞–ª–µ—Ä–µ–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∞–ª–µ—Ä–µ–∏", show_alert=True)


@router.callback_query(F.data.startswith("avatar_card_prev:"))
async def handle_avatar_card_prev(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∞–≤–∞—Ç–∞—Ä—É"""
    try:
        user_telegram_id = callback.from_user.id
        current_idx = int(callback.data.split(":")[1])
        
        cache_data = gallery_cache.get(user_telegram_id)
        if not cache_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        avatars = cache_data["avatars"]
        new_idx = (current_idx - 1) % len(avatars)  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        gallery_cache[user_telegram_id]["current_idx"] = new_idx
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            await send_avatar_card(callback, user.id, avatars, new_idx)
        
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∞–≤–∞—Ç–∞—Ä—É: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("avatar_card_next:"))
async def handle_avatar_card_next(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–≤–∞—Ç–∞—Ä—É"""
    try:
        user_telegram_id = callback.from_user.id
        current_idx = int(callback.data.split(":")[1])
        
        cache_data = gallery_cache.get(user_telegram_id)
        if not cache_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        avatars = cache_data["avatars"]
        new_idx = (current_idx + 1) % len(avatars)  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        gallery_cache[user_telegram_id]["current_idx"] = new_idx
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            await send_avatar_card(callback, user.id, avatars, new_idx)
        
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–≤–∞—Ç–∞—Ä—É: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("avatar_set_main:"))
async def handle_set_main_avatar(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π"""
    try:
        user_telegram_id = callback.from_user.id
        avatar_id = UUID(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
            user_id = user.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
        async with get_avatar_service() as avatar_service:
            success = await avatar_service.set_main_avatar(user.id, avatar_id)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                cache_data = gallery_cache.get(user_telegram_id)
                if cache_data:
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                    cache_data["avatars"] = avatars
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                    current_idx = 0
                    for i, avatar in enumerate(avatars):
                        if avatar.id == avatar_id:
                            current_idx = i
                            break
                    
                    cache_data["current_idx"] = current_idx
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                    await send_avatar_card(callback, user.id, avatars, current_idx)
                
                await callback.answer("‚≠ê –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π!")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π", show_alert=True)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("avatar_delete:"))
async def handle_delete_avatar(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä"""
    try:
        user_telegram_id = callback.from_user.id
        avatar_id = UUID(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
            user_id = user.id
        
        # –£–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        async with get_avatar_service() as avatar_service:
            success = await avatar_service.delete_avatar_completely(avatar_id)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
                avatars = await avatar_service.get_user_avatars_with_photos(user.id)
                
                if avatars:
                    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞–≤–∞—Ç–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π
                    gallery_cache[user_telegram_id] = {
                        "avatars": avatars,
                        "current_idx": 0
                    }
                    await send_avatar_card(callback, user.id, avatars, 0)
                else:
                    # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∑–∞–≥–ª—É—à–∫—É
                    text = """
üé≠ **–ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã**

üîç –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤

üÜï –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä —á—Ç–æ–±—ã:
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ üé≠ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã
‚Ä¢ ‚ú® –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∏–ª—è–º–∏

üëÜ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
"""
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="avatar_create")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="avatar_menu")]
                    ])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    if callback.message.photo:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                        try:
                            await callback.message.delete()
                        except Exception:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                        
                        await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
                    else:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
                
                await callback.answer("üóëÔ∏è –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", show_alert=True)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("avatar_view_photos:"))
async def handle_view_avatar_photos(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        avatar_id = UUID(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        async with get_avatar_service() as avatar_service:
            avatar = await avatar_service.get_avatar(avatar_id)
            
            if not avatar or not avatar.photos:
                await callback.answer("üì∏ –£ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", show_alert=True)
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        user_telegram_id = callback.from_user.id
        gallery_cache[f"{user_telegram_id}_photos_{avatar_id}"] = {
            "avatar": avatar,
            "current_photo_idx": 0
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        await show_avatar_photo(callback, avatar, 0)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def show_avatar_photo(callback: CallbackQuery, avatar, photo_idx: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        if not avatar.photos or photo_idx >= len(avatar.photos):
            await callback.answer("üì∏ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        photo = avatar.photos[photo_idx]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        storage = StorageService()
        photo_data = await storage.download_file("avatars", photo.minio_key)
        
        if not photo_data:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", show_alert=True)
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ
        text = f"""
üé≠ **{avatar.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}**

üì∏ –§–æ—Ç–æ {photo_idx + 1} –∏–∑ {len(avatar.photos)}

üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {photo.created_at.strftime("%d.%m.%Y %H:%M") if photo.created_at else "‚Äî"}
"""
        
        keyboard = get_avatar_photo_gallery_keyboard(
            photo_idx, 
            len(avatar.photos), 
            str(avatar.id)
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –±–∞–π—Ç–æ–≤
        photo_file = BufferedInputFile(photo_data, filename=f"photo_{photo_idx + 1}.jpg")
        await callback.message.edit_media(
            media=InputMediaPhoto(media=photo_file, caption=text, parse_mode="Markdown"),
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", show_alert=True)


@router.callback_query(F.data.startswith("avatar_photo_prev:"))
@router.callback_query(F.data.startswith("avatar_photo_next:"))
async def handle_photo_navigation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        parts = callback.data.split(":")
        direction = parts[0].split("_")[-1]  # "prev" –∏–ª–∏ "next"
        avatar_id = UUID(parts[1])
        current_idx = int(parts[2])
        
        user_telegram_id = callback.from_user.id
        cache_key = f"{user_telegram_id}_photos_{avatar_id}"
        cache_data = gallery_cache.get(cache_key)
        
        if not cache_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ —É—Ç–µ—Ä—è–Ω—ã", show_alert=True)
            return
        
        avatar = cache_data["avatar"]
        
        if direction == "prev":
            new_idx = (current_idx - 1) % len(avatar.photos)
        else:  # "next"
            new_idx = (current_idx + 1) % len(avatar.photos)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        cache_data["current_photo_idx"] = new_idx
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        await show_avatar_photo(callback, avatar, new_idx)
        
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("avatar_view_card:"))
async def handle_view_avatar_card(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏"""
    try:
        avatar_id = UUID(callback.data.split(":")[1])
        user_telegram_id = callback.from_user.id
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏
        cache_key = f"{user_telegram_id}_photos_{avatar_id}"
        if cache_key in gallery_cache:
            del gallery_cache[cache_key]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏
        cache_data = gallery_cache.get(user_telegram_id)
        if not cache_data:
            # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –∑–∞–Ω–æ–≤–æ
            await show_avatar_gallery(callback, state)
            return
        
        avatars = cache_data["avatars"]
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞–≤–∞—Ç–∞—Ä–∞
        avatar_idx = 0
        for i, avatar in enumerate(avatars):
            if avatar.id == avatar_id:
                avatar_idx = i
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        cache_data["current_idx"] = avatar_idx
        
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            user_id = user.id
            
        await send_avatar_card(callback, user_id, avatars, avatar_idx)
        
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "noop")
async def handle_noop(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö callback'–æ–≤ (–¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)"""
    await callback.answer() 