"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
from uuid import UUID

from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user, require_main_avatar
from app.core.logger import get_logger
from app.services.generation.generation_service import GENERATION_COST
from .states import GenerationStates
from .keyboards import build_custom_prompt_keyboard, build_aspect_ratio_keyboard
from app.shared.utils.telegram_utils import safe_edit_callback_message

logger = get_logger(__name__)


class CustomPromptHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    @require_user()
    @require_main_avatar(check_completed=True)
    async def show_custom_prompt_input(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None,
        main_avatar=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º avatar_id –∏–∑ callback_data (gen_custom:{avatar_id})
            data_parts = callback.data.split(":")
            avatar_id = UUID(data_parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∞–≤–∞—Ç–∞—Ä
            if avatar_id != main_avatar.id:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–≤–∞—Ç–∞—Ä", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if not await self.check_user_balance(
                user, 
                GENERATION_COST, 
                callback=callback
            ):
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
            text = f"""üìù <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {main_avatar.name}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {GENERATION_COST:.0f} –µ–¥–∏–Ω–∏—Ü

‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ –Ω–∞ —Ñ–æ–Ω–µ –∑–∞–∫–∞—Ç–∞"</i>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –¥–µ—Ç–∞–ª—è—Ö
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
            
            keyboard = build_custom_prompt_keyboard()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                avatar_id=str(avatar_id),
                user_id=str(user.id)
            )
            await state.set_state(GenerationStates.waiting_for_custom_prompt)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            success = await safe_edit_callback_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            if success:
                logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            await self.safe_clear_state(state)
    
    async def process_custom_prompt(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = UUID(data.get("avatar_id"))
            user_id = UUID(data.get("user_id"))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_message(message)
            if not user or user.id != user_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar = await self.get_avatar_by_id(
                avatar_id, 
                user_id=user.id,
                message=message
            )
            if not avatar:
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
            if avatar.status != "completed":
                await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if not await self.check_user_balance(
                user, 
                GENERATION_COST, 
                message=message
            ):
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            custom_prompt = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
            if len(custom_prompt) < 5:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            if len(custom_prompt) > 500:
                await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                custom_prompt=custom_prompt,
                avatar_name=avatar.name
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
            await self.show_aspect_ratio_selection(message, state)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞")
            await self.safe_clear_state(state)
    
    async def show_aspect_ratio_selection(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            text = f"""üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:100]}{"..." if len(custom_prompt) > 100 else ""}

üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:</b>"""
            
            keyboard = build_aspect_ratio_keyboard()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
            await state.set_state(GenerationStates.waiting_for_aspect_ratio_selection)
            
            await message.reply(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.safe_clear_state(state) 