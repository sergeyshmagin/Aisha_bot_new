"""
–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
from typing import List
from uuid import UUID

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from app.core.di import get_user_service, get_avatar_service
from app.core.logger import get_logger
from app.services.generation.style_service import StyleService
from app.services.generation.generation_service import ImageGenerationService, GENERATION_COST
from app.database.models.generation import StyleCategory, StyleTemplate, ImageGeneration, GenerationStatus
from app.database.models import AvatarStatus
from .states import GenerationStates

logger = get_logger(__name__)
router = Router()


class GenerationMainHandler:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.style_service = StyleService()
        self.generation_service = ImageGenerationService()
    
    async def show_generation_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_balance = await user_service.get_user_balance(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                main_avatar = await avatar_service.get_main_avatar(user.id)
                if not main_avatar:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if main_avatar.status != AvatarStatus.COMPLETED:
                    await callback.answer("‚ùå –í–∞—à –∞–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è!", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            popular_categories = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)
            favorites = []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            avatar_type_text = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π" if main_avatar.training_type.value == "portrait" else "–°—Ç–∏–ª–µ–≤–æ–π"
            
            text = f"""üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
üë§ –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä: {main_avatar.name} ({avatar_type_text})
üí∞ –ë–∞–ª–∞–Ω—Å: {user_balance:.0f} –µ–¥–∏–Ω–∏—Ü
üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {GENERATION_COST:.0f} –µ–¥–∏–Ω–∏—Ü –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏</b>"""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._build_generation_menu_keyboard(
                popular_categories, 
                favorites, 
                main_avatar.id,
                user_balance
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    def _build_generation_menu_keyboard(
        self, 
        popular_categories: List[StyleCategory],
        favorites: List[StyleTemplate],
        avatar_id: UUID,
        user_balance: float
    ) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        buttons = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
        has_balance = user_balance >= GENERATION_COST
        
        if has_balance:
            # –°–≤–æ–π –ø—Ä–æ–º–ø—Ç
            buttons.append([
                InlineKeyboardButton(
                    text="üìù –°–≤–æ–π –ø—Ä–æ–º–ø—Ç",
                    callback_data=f"gen_custom:{avatar_id}"
                )
            ])
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞
            buttons.append([
                InlineKeyboardButton(
                    text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    callback_data="balance_topup"
                )
            ])
        
        # –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
        buttons.append([
            InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
                callback_data="gen_change_avatar"
            )
        ])
        
        # –ú–æ—è –≥–∞–ª–µ—Ä–µ—è
        buttons.append([
            InlineKeyboardButton(
                text="üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è",
                callback_data="my_gallery"
            )
        ])
        
        # –ù–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def show_custom_prompt_input(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º avatar_id –∏–∑ callback_data (gen_custom:{avatar_id})
            data_parts = callback.data.split(":")
            avatar_id = UUID(data_parts[1])
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(avatar_id)
                if not avatar or avatar.user_id != user.id:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.status != AvatarStatus.COMPLETED:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!", show_alert=True)
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
            text = f"""üìù <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
‚ú® <b>–¢–∏–ø:</b> {avatar.training_type.value.title()}

üìã <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>

ü§ñ <b>–ù–û–í–ê–Ø –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:</b>
‚Ä¢ üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
‚Ä¢ üéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ üì∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
‚Ä¢ üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ ‚ö° –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ –∞–≤–∞—Ç–∞—Ä–∞ (–ø–æ—Ä—Ç—Ä–µ—Ç/—Å—Ç–∏–ª—å)

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (–ø—Ä–µ–≤—Ä–∞—Ç—è—Ç—Å—è –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–µ!):</b>
‚Ä¢ "–¥–µ–ª–æ–≤–æ–π –º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ" ‚Üí –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–æ —Å—Ç—É–¥–∏–π–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ "Superman costume" ‚Üí –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π
‚Ä¢ "–∫–æ—Ñ–µ–π–Ω—è, –æ—á–∫–∏" ‚Üí –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–º–µ—Ä—ã
‚Ä¢ "–∫–æ—Å–º–æ–Ω–∞–≤—Ç –≤ —à–ª–µ–º–µ" ‚Üí —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π

‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –õ–Æ–ë–û–ô –ø—Ä–æ–º–ø—Ç (–¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–π):</b>
–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—è–º",
                        callback_data="generation_menu"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º avatar_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.update_data(avatar_id=str(avatar_id))
            await state.set_state(GenerationStates.waiting_for_custom_prompt)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except ValueError as e:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def process_custom_prompt(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            
            if not avatar_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await state.clear()
                return
            
            custom_prompt = message.text
            user_telegram_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –î–û –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(UUID(avatar_id))
                if not avatar or avatar.user_id != user.id:
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await state.clear()
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if avatar.status != AvatarStatus.COMPLETED:
                    await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                    await state.clear()
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            processing_message = await message.reply(
                f"""üé® <b>–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>

üìù <b>–í–∞—à –ø—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º)

‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...</b>
üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_custom(
                user_id=user.id,
                avatar_id=UUID(avatar_id),
                custom_prompt=custom_prompt,
                quality_preset="photorealistic_max",
                aspect_ratio="1:1",
                num_images=1
            )
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            await self._monitor_generation_status(processing_message, generation, custom_prompt, avatar.name)
            
            await state.clear()
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.)
            await message.reply(f"‚ùå {str(e)}")
            await state.clear()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await state.clear()

    async def _monitor_generation_status(self, message, generation, original_prompt: str, avatar_name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        
        import asyncio
        max_attempts = 120  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º (–ø–æ 1 —Å–µ–∫—É–Ω–¥–µ)
        attempt = 0
        
        while attempt < max_attempts:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                current_generation = await self.generation_service.get_generation_by_id(generation.id)
                
                if not current_generation:
                    await message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        parse_mode="HTML"
                    )
                    return
                
                if current_generation.status == GenerationStatus.COMPLETED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await self._show_final_result(message, current_generation, original_prompt, avatar_name)
                    return
                    
                elif current_generation.status == GenerationStatus.FAILED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    await self._show_final_error(message, current_generation)
                    return
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç - –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)
                attempt += 1
                
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(1)
                attempt += 1
        
        # –¢–∞–π–º–∞—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            f"""‚è∞ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {original_prompt[:60]}{'...' if len(original_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –≥–∞–ª–µ—Ä–µ–µ""",
            parse_mode="HTML"
        )

    async def _show_final_result(self, message, generation, original_prompt: str, avatar_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            if not generation.result_urls or len(generation.result_urls) == 0:
                await message.edit_text(
                    "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    parse_mode="HTML"
                )
                return
            
            duration = (generation.completed_at - generation.created_at).total_seconds() if generation.completed_at else 0
            
            text = f"""‚ú® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {original_prompt[:60]}{'...' if len(original_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
‚ö° <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º
‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {duration:.1f}—Å

üéâ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ",
                        callback_data="generation_menu"
                    ),
                    InlineKeyboardButton(
                        text="üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è",
                        callback_data="my_gallery"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                        callback_data=f"show_prompt:{generation.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result_url = generation.result_urls[0]
            await message.reply_photo(
                photo=result_url,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await message.delete()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                parse_mode="HTML"
            )

    async def _show_final_error(self, message, generation):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        error_message = generation.error_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        
        text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message[:100]}{'...' if len(error_message) > 100 else ''}

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–º–ø—Ç  
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data="generation_menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ]
        ])
        
        await message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def show_full_prompt(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data (show_prompt:{generation_id})
            data_parts = callback.data.split(":")
            generation_id = UUID(data_parts[1])
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.get_generation_by_id(generation_id)
            if not generation:
                await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if generation.user_id != user.id:
                await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            text = f"""üìù <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {generation.avatar.name}
üìä <b>ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {str(generation.id)[:8]}...

üìã <b>–í–∞—à –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç:</b>
<code>{generation.original_prompt}</code>

üéØ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—Å–æ–∑–¥–∞–Ω GPT-4o):</b>
<pre>{generation.final_prompt}</pre>

‚ú® <b>–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞:</b>
‚Ä¢ –î–ª–∏–Ω–∞: {len(generation.final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏: ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã
‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: ‚úÖ –û–ø–∏—Å–∞–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ
‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ: ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º

üí° <b>–ö–∞–∫ —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>
–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–∞–µ—Ç AI —Ç–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –æ—Å–≤–µ—â–µ–Ω–∏–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"gen_status:{generation.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        callback_data="generation_menu"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except ValueError as e:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
generation_handler = GenerationMainHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "generation_menu")
async def handle_generation_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await generation_handler.show_generation_menu(callback)

@router.callback_query(F.data.startswith("gen_custom:"))
async def handle_custom_prompt_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.show_custom_prompt_input(callback, state)

@router.message(F.text, StateFilter(GenerationStates.waiting_for_custom_prompt))
async def handle_custom_prompt_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.process_custom_prompt(message, state)

@router.callback_query(F.data.startswith("show_prompt:"))
async def handle_show_full_prompt(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await generation_handler.show_full_prompt(callback)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data.startswith("gen_template:"))
async def handle_template_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞"""
    await callback.answer("üöß –®–∞–±–ª–æ–Ω—ã —Å—Ç–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data.startswith("gen_category:"))
async def show_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.answer("üöß –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "gen_all_categories")
async def show_all_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await callback.answer("üöß –ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "gen_favorites")
async def show_favorites(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
    await callback.answer("üöß –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "noop")
async def handle_noop(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö callback'–æ–≤"""
    await callback.answer() 