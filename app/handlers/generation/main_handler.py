"""
–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
from typing import List
from uuid import UUID

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.core.di import get_user_service, get_avatar_service
from app.core.logger import get_logger
from app.services.generation.style_service import StyleService
from app.services.generation.generation_service import ImageGenerationService, GENERATION_COST
from app.database.models.generation import StyleCategory, StyleTemplate
from app.database.models import AvatarStatus

logger = get_logger(__name__)
router = Router()


class GenerationMainHandler:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.style_service = StyleService()
        self.generation_service = ImageGenerationService()
    
    async def show_generation_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        user_telegram_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_balance = await user_service.get_user_balance(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                main_avatar = await avatar_service.get_user_main_avatar(user.id)
                if not main_avatar:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
                if main_avatar.status != AvatarStatus.COMPLETED:
                    await callback.answer("‚ùå –í–∞—à –∞–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è!", show_alert=True)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            popular_categories = await self.style_service.get_popular_categories(limit=4)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            favorites = await self.style_service.get_user_favorites(user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            avatar_type_text = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π" if main_avatar.training_type.value == "portrait" else "–°—Ç–∏–ª–µ–≤–æ–π"
            
            text = f"""üé® **–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**
üë§ –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä: {main_avatar.name} ({avatar_type_text})
üí∞ –ë–∞–ª–∞–Ω—Å: {user_balance:.0f} –µ–¥–∏–Ω–∏—Ü
üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {GENERATION_COST:.0f} –µ–¥–∏–Ω–∏—Ü –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏**"""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._build_generation_menu_keyboard(
                popular_categories, 
                favorites, 
                main_avatar.id,
                user_balance
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    def _build_generation_menu_keyboard(
        self, 
        popular_categories: List[StyleCategory],
        favorites: List[StyleTemplate],
        avatar_id: UUID,
        user_balance: float
    ) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        buttons = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
        has_balance = user_balance >= GENERATION_COST
        
        if has_balance:
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏ (2x2)
            if popular_categories:
                popular_buttons = []
                for i in range(0, len(popular_categories), 2):
                    row = []
                    for j in range(2):
                        if i + j < len(popular_categories):
                            cat = popular_categories[i + j]
                            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                            name_parts = cat.name.split(' ', 1)
                            button_text = f"{cat.icon} {name_parts[1] if len(name_parts) > 1 else name_parts[0]}"
                            row.append(InlineKeyboardButton(
                                text=button_text,
                                callback_data=f"gen_category:{cat.id}"
                            ))
                    if row:
                        popular_buttons.append(row)
                buttons.extend(popular_buttons)
            
            # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            buttons.append([
                InlineKeyboardButton(
                    text="üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    callback_data="gen_all_categories"
                )
            ])
            
            # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if favorites:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ú® –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ({len(favorites)})",
                        callback_data="gen_favorites"
                    )
                ])
            
            # –°–≤–æ–π –ø—Ä–æ–º–ø—Ç
            buttons.append([
                InlineKeyboardButton(
                    text="üìù –°–≤–æ–π –ø—Ä–æ–º–ø—Ç",
                    callback_data=f"gen_custom:{avatar_id}"
                )
            ])
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞
            buttons.append([
                InlineKeyboardButton(
                    text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    callback_data="balance_topup"
                )
            ])
        
        # –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
        buttons.append([
            InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
                callback_data="gen_change_avatar"
            )
        ])
        
        # –ú–æ—è –≥–∞–ª–µ—Ä–µ—è
        buttons.append([
            InlineKeyboardButton(
                text="üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è",
                callback_data="my_gallery"
            )
        ])
        
        # –ù–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def show_template_details(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π"""
        
        try:
            template_id = callback.data.split(":")[1]
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                user_balance = await user_service.get_user_balance(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = await self.style_service.get_template_by_id(template_id)
            if not template:
                await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
            async with get_avatar_service() as avatar_service:
                main_avatar = await avatar_service.get_user_main_avatar(user.id)
                if not main_avatar:
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ —à–∞–±–ª–æ–Ω
            is_favorite = await self.style_service.is_template_favorite(user.id, template_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = f"""üìä **{template.name}**

üìù **–ü—Ä–æ–º–ø—Ç:**
_{template.prompt}_

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
‚Ä¢ –§–æ—Ä–º–∞—Ç: üñºÔ∏è –ö–≤–∞–¥—Ä–∞—Ç (1:1)
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {GENERATION_COST:.0f} –µ–¥–∏–Ω–∏—Ü
üí≥ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {user_balance:.0f} –µ–¥–∏–Ω–∏—Ü"""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._build_template_details_keyboard(
                template_id, 
                main_avatar.id, 
                is_favorite,
                user_balance >= GENERATION_COST
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    def _build_template_details_keyboard(
        self, 
        template_id: str, 
        avatar_id: UUID, 
        is_favorite: bool,
        has_balance: bool
    ) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞"""
        
        buttons = []
        
        if has_balance:
            # –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            buttons.append([
                InlineKeyboardButton(
                    text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    callback_data=f"gen_start:{template_id}:{avatar_id}"
                )
            ])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            buttons.append([
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    callback_data=f"gen_settings:{template_id}:{avatar_id}"
                )
            ])
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞
            buttons.append([
                InlineKeyboardButton(
                    text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    callback_data="balance_topup"
                )
            ])
        
        # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        favorite_text = "üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        favorite_action = "remove" if is_favorite else "add"
        buttons.append([
            InlineKeyboardButton(
                text=favorite_text,
                callback_data=f"gen_favorite:{favorite_action}:{template_id}"
            )
        ])
        
        # –ù–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ö –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª–µ–π",
                callback_data="generation_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def start_generation(self, callback: CallbackQuery):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            data_parts = callback.data.split(":")
            template_id = data_parts[1]
            avatar_id = UUID(data_parts[2])
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_from_template(
                user_id=user.id,
                avatar_id=avatar_id,
                template_id=template_id,
                quality_preset="balanced",
                aspect_ratio="1:1",
                num_images=1
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await self._show_generation_status(callback, generation)
            
        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.)
            await callback.answer(f"‚ùå {str(e)}", show_alert=True)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
    
    async def _show_generation_status(self, callback: CallbackQuery, generation):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        template_name = generation.template.name if generation.template else "–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"
        
        text = f"""üé® **–°–æ–∑–¥–∞—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...**

üìä **–®–∞–±–ª–æ–Ω:** {template_name}
üé≠ **–ê–≤–∞—Ç–∞—Ä:** {generation.avatar.name}
‚ö° **–ö–∞—á–µ—Å—Ç–≤–æ:** –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
üñºÔ∏è **–§–æ—Ä–º–∞—Ç:** –ö–≤–∞–¥—Ä–∞—Ç (1:1)

‚è±Ô∏è **–°—Ç–∞—Ç—É—Å:** –û–±—Ä–∞–±–æ—Ç–∫–∞...
üí° –û–±—ã—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                    callback_data=f"gen_status:{generation.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ö –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª–µ–π",
                    callback_data="generation_menu"
                )
            ]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def toggle_favorite_template(self, callback: CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
        
        try:
            data_parts = callback.data.split(":")
            action = data_parts[1]  # add –∏–ª–∏ remove
            template_id = data_parts[2]
            
            user_telegram_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                if not user:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
            
            if action == "add":
                success = await self.style_service.add_to_favorites(user.id, template_id)
                message = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if success else "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
            else:
                success = await self.style_service.remove_from_favorites(user.id, template_id)
                message = "‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if success else "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"
            
            await callback.answer(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞
            callback.data = f"gen_template:{template_id}"
            await self.show_template_details(callback)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
generation_handler = GenerationMainHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "generation_menu")
async def handle_generation_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await generation_handler.show_generation_menu(callback)

@router.callback_query(F.data.startswith("gen_template:"))
async def handle_template_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞"""
    await generation_handler.show_template_details(callback)

@router.callback_query(F.data.startswith("gen_start:"))
async def handle_start_generation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await generation_handler.start_generation(callback)

@router.callback_query(F.data.startswith("gen_favorite:"))
async def handle_toggle_favorite(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    await generation_handler.toggle_favorite_template(callback)

@router.callback_query(F.data.startswith("gen_category:"))
async def show_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await generation_handler.show_category(callback)

@router.callback_query(F.data == "gen_all_categories")
async def show_all_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await generation_handler.show_all_categories(callback)

@router.callback_query(F.data == "gen_favorites")
async def show_favorites(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
    await generation_handler.show_favorites(callback)

@router.callback_query(F.data == "noop")
async def handle_noop(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö callback'–æ–≤"""
    await callback.answer() 