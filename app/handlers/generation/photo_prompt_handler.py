"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
from uuid import UUID

from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user, require_main_avatar
from app.core.logger import get_logger
from app.core.di import get_user_service
from app.services.generation.image_analysis_service import ImageAnalysisService
from app.services.user_settings import UserSettingsService
from .states import GenerationStates
from .keyboards import build_photo_prompt_keyboard, build_aspect_ratio_keyboard
from app.database.models import ImageGeneration, UserSettings

logger = get_logger(__name__)


class PhotoPromptHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —Ñ–æ—Ç–æ"""
    
    def __init__(self):
        self.image_analysis_service = ImageAnalysisService()
        self.user_settings_service = UserSettingsService()
    
    @require_user()
    @require_main_avatar(check_completed=True)
    async def show_photo_prompt_input(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None,
        main_avatar=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º avatar_id –∏–∑ callback_data (gen_photo:{avatar_id})
            data_parts = callback.data.split(":")
            avatar_id = UUID(data_parts[1])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"[PhotoPromptInput] User {user.telegram_id}, callback_data: {callback.data}")
            logger.info(f"[PhotoPromptInput] Avatar ID from callback: {avatar_id}")
            logger.info(f"[PhotoPromptInput] Main avatar ID: {main_avatar.id}")
            logger.info(f"[PhotoPromptInput] Main avatar name: {main_avatar.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∞–≤–∞—Ç–∞—Ä
            if avatar_id != main_avatar.id:
                logger.warning(f"[PhotoPromptInput] Avatar mismatch: callback={avatar_id} != main={main_avatar.id}")
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–≤–∞—Ç–∞—Ä", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Vision API
            if not self.image_analysis_service.is_available():
                await callback.answer("‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            text = f"""üì∏ <b>–ü—Ä–æ–º–ø—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–º—É —Ñ–æ—Ç–æ</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {main_avatar.name}
‚ú® <b>–¢–∏–ø:</b> {main_avatar.training_type.value.title()}

üìã <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>

ü§ñ <b>–ò–ò-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
‚Ä¢ üîç GPT-4 Vision –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ
‚Ä¢ ‚úçÔ∏è –°–æ–∑–¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
‚Ä¢ üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
‚Ä¢ üóëÔ∏è –í–∞—à–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞

üí° <b>–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
‚Ä¢ –í–∏–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏ –ª–∏—Ü–∞, –æ–¥–µ–∂–¥—ã, –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç—ã, –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–¥—Ä—ã
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–æ—Ç–æ

üì± <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ!"""

            keyboard = build_photo_prompt_keyboard()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º avatar_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.update_data(
                avatar_id=str(avatar_id),
                user_id=str(user.id)
            )
            await state.set_state(GenerationStates.waiting_for_reference_photo)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar_id}")
            
        except ValueError as e:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã —Ñ–æ—Ç–æ-–ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            await self.safe_clear_state(state)

    async def process_reference_photo(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            user_id = data.get("user_id")
            
            if not avatar_id or not user_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_message(message)
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await self.safe_clear_state(state)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è UUID)
            if str(user.id) != user_id:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                await self.safe_clear_state(state)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar = await self.get_avatar_by_id(
                UUID(avatar_id), 
                user_id=user.id,
                message=message
            )
            if not avatar:
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
            if avatar.status != "completed":
                await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                await self.safe_clear_state(state)
                return
            
            # üîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            analysis_message = await message.reply(
                f"""üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
ü§ñ <b>–ò–ò-–∞–Ω–∞–ª–∏–∑:</b> GPT-4 Vision
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra

‚è≥ <b>–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>
‚Ä¢ üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...
‚Ä¢ ‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...
‚Ä¢ üé® –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...

üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_bytes = await self._extract_image_from_message(message, analysis_message)
            if not image_bytes:
                return
            
            # ü§ñ –≠–¢–ê–ü 2: –ò–ò-–∞–Ω–∞–ª–∏–∑
            await analysis_message.edit_text(
                f"""ü§ñ <b>–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {len(image_bytes)} –±–∞–π—Ç –ø–æ–ª—É—á–µ–Ω–æ
üîç <b>GPT-4 Vision:</b> –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...

‚è≥ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ ‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...
‚Ä¢ ‚è≥ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...

üí° –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç""",
                parse_mode="HTML"
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            avatar_type = avatar.training_type.value if avatar.training_type else "portrait"
            analysis_result = await self.image_analysis_service.analyze_image_for_prompt(
                image_bytes, avatar_type
            )
            
            if not analysis_result.get("prompt"):
                await analysis_message.edit_text(
                    f"""‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {analysis_result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')}

üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (JPG, PNG)""",
                    parse_mode="HTML"
                )
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ
            try:
                await message.delete()
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ (message_id: {message.message_id})")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")
            
            # ‚úÖ –≠–¢–ê–ü 3: –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            await analysis_message.edit_text(
                f"""‚úÖ <b>–ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω!</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar.name}
‚úçÔ∏è <b>–ü—Ä–æ–º–ø—Ç:</b> –°–æ–∑–¥–∞–Ω ({len(analysis_result['prompt'])} —Å–∏–º–≤–æ–ª–æ–≤)
üé® <b>–°—Ç–∏–ª—å:</b> –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 8K

‚è≥ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
‚Ä¢ ‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä...

üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>""",
                parse_mode="HTML"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            user_settings = await self.user_settings_service.get_user_settings(user.id)
            quick_mode = user_settings.quick_generation_mode if user_settings else False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                avatar_id=str(avatar_id),
                user_id=str(user.id),
                custom_prompt=analysis_result['prompt'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç GPT Vision
                avatar_name=avatar.name,
                is_photo_analysis=True,
                original_analysis=analysis_result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω')
            )
            
            if quick_mode:
                # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_aspect_ratio = user_settings.default_aspect_ratio if user_settings else "1:1"
                await self.start_photo_generation(analysis_message, state, default_aspect_ratio, analysis_result)
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
                await self.show_photo_aspect_ratio_selection(analysis_message, state, analysis_result)
            
        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.)
            await message.reply(f"‚ùå {str(e)}")
            await self.safe_clear_state(state)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            await self.safe_clear_state(state)
    
    async def _extract_image_from_message(self, message: Message, analysis_message: Message) -> bytes:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            if message.photo:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                photo = message.photo[-1]
                file_info = await message.bot.get_file(photo.file_id)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                image_data = await message.bot.download_file(file_info.file_path)
                image_bytes = image_data.read()
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(image_bytes)} –±–∞–π—Ç, file_id: {photo.file_id}")
                return image_bytes
                
            elif message.document and message.document.mime_type and message.document.mime_type.startswith('image/'):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                file_info = await message.bot.get_file(message.document.file_id)
                image_data = await message.bot.download_file(file_info.file_path)
                image_bytes = image_data.read()
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(image_bytes)} –±–∞–π—Ç, file_id: {message.document.file_id}")
                return image_bytes
                
            else:
                await analysis_message.edit_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª)",
                    parse_mode="HTML"
                )
                return None
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await analysis_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                parse_mode="HTML"
            )
            return None
    
    async def show_photo_aspect_ratio_selection(self, message: Message, state: FSMContext, analysis_result: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –¥–ª—è —Ñ–æ—Ç–æ-–ø—Ä–æ–º–ø—Ç–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_name = data.get("avatar_name")
            custom_prompt = data.get("custom_prompt", "")
            
            text = f"""üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
‚úçÔ∏è <b>–ü—Ä–æ–º–ø—Ç:</b> –°–æ–∑–¥–∞–Ω ({len(custom_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)

üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:</b>"""
            
            keyboard = build_aspect_ratio_keyboard()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
            await state.set_state(GenerationStates.waiting_for_aspect_ratio_selection)
            
            await message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –¥–ª—è —Ñ–æ—Ç–æ-–ø—Ä–æ–º–ø—Ç–∞")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await self.safe_clear_state(state)
    
    async def start_photo_generation(self, message: Message, state: FSMContext, aspect_ratio: str, analysis_result: dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ-–ø—Ä–æ–º–ø—Ç—É"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = data.get("avatar_id")
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            if not all([avatar_id, custom_prompt]):
                await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                await self.safe_clear_state(state)
                return
            
            user_telegram_id = message.chat.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id 
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(str(user_telegram_id))
                
            if not user:
                await message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            valid_options = UserSettings.get_aspect_ratio_options()
            aspect_name = valid_options.get(aspect_ratio, {}).get("name", aspect_ratio)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await message.edit_text(
                f"""üé® <b>–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ...</b>

üîç <b>–ê–Ω–∞–ª–∏–∑:</b> {str(analysis_result.get('analysis', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'))[:80]}{'...' if len(str(analysis_result.get('analysis', ''))) > 80 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìê <b>–†–∞–∑–º–µ—Ä:</b> {aspect_name}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º)

‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...</b>
üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            from app.services.generation.generation_service import ImageGenerationService
            from uuid import UUID
            
            generation_service = ImageGenerationService()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await generation_service.generate_custom(
                user_id=user.id,
                avatar_id=UUID(avatar_id),
                custom_prompt=custom_prompt,
                aspect_ratio=aspect_ratio
            )
            
            if not generation:
                await message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML"
                )
                await self.safe_clear_state(state)
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self.safe_clear_state(state)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            from .generation_monitor import GenerationMonitor
            
            generation_monitor = GenerationMonitor()
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
            await generation_monitor.monitor_generation_status(
                message, 
                generation, 
                f"[–§–æ—Ç–æ-–∞–Ω–∞–ª–∏–∑] {custom_prompt}", 
                avatar_name
            )
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {generation.id} —Å —Ä–∞–∑–º–µ—Ä–æ–º {aspect_ratio} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
        except ValueError as e:
            await message.edit_text(f"‚ùå {str(e)}")
            await self.safe_clear_state(state)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await self.safe_clear_state(state) 