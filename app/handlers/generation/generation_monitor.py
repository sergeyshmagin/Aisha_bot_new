"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
import asyncio
from uuid import UUID

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext

from app.shared.handlers.base_handler import BaseHandler
from app.core.logger import get_logger
from app.services.generation.generation_service import ImageGenerationService, GENERATION_COST
from app.services.user_settings import UserSettingsService
from app.database.models.generation import GenerationStatus
from .keyboards import build_generation_result_keyboard

logger = get_logger(__name__)


class GenerationMonitor(BaseHandler):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.generation_service = ImageGenerationService()
        self.user_settings_service = UserSettingsService()
    
    async def start_generation(
        self, 
        message: Message, 
        state: FSMContext, 
        aspect_ratio: str,
        is_photo_analysis: bool = False
    ):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = UUID(data.get("avatar_id"))
            user_id = UUID(data.get("user_id"))
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_message(message, show_error=False)
            if not user or str(user.id) != str(user_id):
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar = await self.get_avatar_by_id(
                avatar_id, 
                user_id=user.id,
                message=message,
                show_error=False
            )
            if not avatar:
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
            if avatar.status != "completed":
                await message.reply("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if not await self.check_user_balance(
                user, 
                GENERATION_COST, 
                message=message
            ):
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_message = await message.reply(
                f"""üé® <b>–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üìê <b>–§–æ—Ä–º–∞—Ç:</b> {aspect_ratio}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra

‚è≥ <b>–ü—Ä–æ—Ü–µ—Å—Å:</b>
‚Ä¢ üí∞ –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...
‚Ä¢ üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å...
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...

üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_custom(
                user_id=user.id,
                avatar_id=avatar_id,
                custom_prompt=custom_prompt,
                aspect_ratio=aspect_ratio
            )
            
            if not generation:
                await generation_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML"
                )
                await self.safe_clear_state(state)
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self.safe_clear_state(state)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await generation_message.edit_text(
                f"""‚úÖ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üìê <b>–§–æ—Ä–º–∞—Ç:</b> {aspect_ratio}
üÜî <b>ID:</b> {str(generation.id)[:8]}...

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –í –æ—á–µ—Ä–µ–¥–∏
üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π

üí° –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.monitor_generation_status(
                generation_message, 
                generation, 
                custom_prompt, 
                avatar_name
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await self.safe_clear_state(state)
    
    async def start_generation_from_callback(
        self, 
        callback: CallbackQuery, 
        state: FSMContext, 
        aspect_ratio: str
    ):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ callback (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            avatar_id = UUID(data.get("avatar_id"))
            user_id = UUID(data.get("user_id"))
            custom_prompt = data.get("custom_prompt")
            avatar_name = data.get("avatar_name")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback, show_error=False)
            if not user or str(user.id) != str(user_id):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", show_alert=True)
                await self.safe_clear_state(state)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar = await self.get_avatar_by_id(
                avatar_id, 
                user_id=user.id,
                callback=callback,
                show_error=False
            )
            if not avatar:
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞
            if avatar.status != "completed":
                await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!", show_alert=True)
                await self.safe_clear_state(state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if not await self.check_user_balance(
                user, 
                GENERATION_COST, 
                callback=callback
            ):
                await self.safe_clear_state(state)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await callback.message.edit_text(
                f"""üé® <b>–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üìê <b>–§–æ—Ä–º–∞—Ç:</b> {aspect_ratio}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra

‚è≥ <b>–ü—Ä–æ—Ü–µ—Å—Å:</b>
‚Ä¢ üí∞ –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...
‚Ä¢ üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å...
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...

üí° –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.generate_custom(
                user_id=user.id,
                avatar_id=avatar_id,
                custom_prompt=custom_prompt,
                aspect_ratio=aspect_ratio
            )
            
            if not generation:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML"
                )
                await self.safe_clear_state(state)
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self.safe_clear_state(state)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"""‚úÖ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {custom_prompt[:60]}{'...' if len(custom_prompt) > 60 else ''}
üìê <b>–§–æ—Ä–º–∞—Ç:</b> {aspect_ratio}
üÜî <b>ID:</b> {str(generation.id)[:8]}...

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –í –æ—á–µ—Ä–µ–¥–∏
üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π

üí° –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.monitor_generation_status(
                callback.message, 
                generation, 
                custom_prompt, 
                avatar_name
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            await self.safe_clear_state(state)
    
    async def monitor_generation_status(self, message, generation, original_prompt: str, avatar_name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        
        max_attempts = 120  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º (–ø–æ 1 —Å–µ–∫—É–Ω–¥–µ)
        attempt = 0
        
        while attempt < max_attempts:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                current_generation = await self.generation_service.get_generation_by_id(generation.id)
                
                if not current_generation:
                    await message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        parse_mode="HTML"
                    )
                    return
                
                if current_generation.status == GenerationStatus.COMPLETED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await self.show_final_result(message, current_generation, original_prompt, avatar_name)
                    return
                    
                elif current_generation.status == GenerationStatus.FAILED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    await self.show_final_error(message, current_generation)
                    return
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç - –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)
                attempt += 1
                
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(1)
                attempt += 1
        
        # –¢–∞–π–º–∞—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            f"""‚è∞ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {original_prompt[:60]}{'...' if len(original_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –≥–∞–ª–µ—Ä–µ–µ""",
            parse_mode="HTML"
        )

    async def show_final_result(self, message, generation, original_prompt: str, avatar_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            if not generation.result_urls or len(generation.result_urls) == 0:
                await message.edit_text(
                    "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    parse_mode="HTML"
                )
                return
            
            duration = (generation.completed_at - generation.created_at).total_seconds() if generation.completed_at else 0
            
            text = f"""‚ú® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>

üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {original_prompt[:60]}{'...' if len(original_prompt) > 60 else ''}
üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
‚ö° <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º
‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {duration:.1f}—Å

üéâ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!"""

            keyboard = build_generation_result_keyboard(generation.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result_url = generation.result_urls[0]
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ 1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ URL
                await message.reply_photo(
                    photo=result_url,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                await message.delete()
                
            except Exception as telegram_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {telegram_error}")
                
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
                    import aiohttp
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.get(result_url) as response:
                            if response.status == 200:
                                image_data = await response.read()
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                                content_type = response.headers.get('content-type', 'image/jpeg')
                                extension = '.jpg' if 'jpeg' in content_type else '.png' if 'png' in content_type else '.jpg'
                                
                                photo_input = BufferedInputFile(
                                    image_data, 
                                    filename=f"generated_image_{generation.id}{extension}"
                                )
                                
                                await message.reply_photo(
                                    photo=photo_input,
                                    caption=text,
                                    reply_markup=keyboard,
                                    parse_mode="HTML"
                                )
                                
                                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                await message.delete()
                                
                                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation.id}")
                                
                            else:
                                raise Exception(f"HTTP {response.status} –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                                
                except Exception as download_error:
                    logger.exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {download_error}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await message.edit_text(
                        text + "\n\n‚ùå <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é.",
                parse_mode="HTML"
            )

    async def show_final_error(self, message, generation):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        error_message = generation.error_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        
        text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message[:100]}{'...' if len(error_message) > 100 else ''}

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–º–ø—Ç  
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data="generation_menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ]
        ])
        
        await message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def show_full_prompt(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data (show_prompt:{generation_id})
            data_parts = callback.data.split(":")
            generation_id = UUID(data_parts[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.get_generation_by_id(generation_id)
            if not generation:
                await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user = await self.get_user_from_callback(callback)
            if not user or generation.user_id != user.id:
                await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            text = f"""üìù <b>–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üÜî <b>ID:</b> {str(generation.id)[:8]}...
üìÖ <b>–î–∞—Ç–∞:</b> {generation.created_at.strftime('%d.%m.%Y %H:%M')}

<b>–ü—Ä–æ–º–ø—Ç:</b>
<code>{generation.final_prompt}</code>

üìê <b>–§–æ—Ä–º–∞—Ç:</b> {generation.aspect_ratio}
‚ö° <b>–ú–æ–¥–µ–ª—å:</b> FLUX 1.1 Ultra"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="noop"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True) 