"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ profile –º–æ–¥—É–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX/UI
"""
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from decimal import Decimal

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.core.di import get_user_service, get_avatar_service
from app.core.logger import get_logger
from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user
from app.database.models import AvatarStatus

logger = get_logger(__name__)


class ModernProfileHandler(BaseHandler):
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å, –±–∞–ª–∞–Ω—Å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –µ–¥–∏–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    """
    
    def __init__(self):
        super().__init__()
        self.router = Router(name="modern_profile")
        
        # –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        self.topup_packages = [
            {"amount": 150, "price_kzt": 1500, "price_rub": 300, "bonus": 0, "popular": False},
            {"amount": 250, "price_kzt": 2500, "price_rub": 500, "bonus": 25, "popular": True},
            {"amount": 500, "price_kzt": 5000, "price_rub": 1000, "bonus": 70, "popular": False},
            {"amount": 1000, "price_kzt": 10000, "price_rub": 2000, "bonus": 200, "popular": False},
        ]
        
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_data"""
        
        # === –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ ===
        self.router.callback_query.register(
            self.show_profile_dashboard,
            F.data == "profile_dashboard"
        )
        
        self.router.callback_query.register(
            self.show_settings_menu,
            F.data == "settings_menu_v2"
        )
        
        # === –ü–†–û–§–ò–õ–¨ –ò –ë–ê–õ–ê–ù–° ===
        self.router.callback_query.register(
            self.show_balance_info,
            F.data == "profile_balance_info"
        )
        
        self.router.callback_query.register(
            self.show_topup_menu,
            F.data == "profile_topup_balance"
        )
        
        self.router.callback_query.register(
            self.process_topup_package,
            F.data.startswith("topup_package_")
        )
        
        # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        self.router.callback_query.register(
            self.show_statistics,
            F.data == "profile_statistics"
        )
        
        self.router.callback_query.register(
            self.show_achievements,
            F.data == "stats_achievements"
        )
        
        self.router.callback_query.register(
            self.show_activity_chart,
            F.data == "stats_activity_chart"
        )
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò ===
        self.router.callback_query.register(
            self.show_profile_settings,
            F.data == "profile_settings"
        )
        
        self.router.callback_query.register(
            self.show_notifications_settings,
            F.data == "settings_notifications"
        )
        
        self.router.callback_query.register(
            self.show_language_settings,
            F.data == "settings_language"
        )
        
        self.router.callback_query.register(
            self.show_privacy_settings,
            F.data == "settings_privacy"
        )
        
        # === –ü–û–î–î–ï–†–ñ–ö–ê ===
        self.router.callback_query.register(
            self.show_profile_help,
            F.data == "profile_help"
        )
        
        self.router.callback_query.register(
            self.show_profile_support,
            F.data == "profile_support"
        )
        
        # === LEGACY –ü–û–î–î–ï–†–ñ–ö–ê ===
        self.router.callback_query.register(
            self.show_profile_dashboard,
            F.data == "profile_menu"  # –°—Ç–∞—Ä—ã–π callback
        )

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ ===
    
    @require_user()
    async def show_profile_dashboard(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        try:
            await state.clear()
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_data = await self._gather_profile_data(user)
            
            text = f"""üè† <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

{self._get_status_emoji(profile_data)} <b>{user.first_name}</b> ‚Ä¢ {self._get_status_text(profile_data)}
{self._format_member_since(profile_data['member_since_days'])}

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {profile_data['balance']:.0f} –º–æ–Ω–µ—Ç {self._get_balance_indicator(profile_data['balance'])}

üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>
üé≠ –ê–≤–∞—Ç–∞—Ä—ã: {profile_data['completed_avatars']}/{profile_data['avatars_count']}
üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {profile_data['generations_count']}
üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {profile_data.get('today_generations', 5)}

{self._get_profile_tip(profile_data)}"""

            keyboard = self._build_profile_dashboard_keyboard(profile_data)
            
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_settings_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            text = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:
‚Ä¢ üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏  
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ üåç –Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω
‚Ä¢ üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üí° <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏</i>"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë§ –ü—Ä–æ—Ñ–∏–ª—å",
                        callback_data="profile_dashboard"
                    ),
                    InlineKeyboardButton(
                        text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                        callback_data="settings_notifications"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üåç –Ø–∑—ã–∫",
                        callback_data="settings_language"
                    ),
                    InlineKeyboardButton(
                        text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
                        callback_data="settings_privacy"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ])
            
            await self.safe_edit_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    # === –ë–ê–õ–ê–ù–° –ò –ü–û–ü–û–õ–ù–ï–ù–ò–ï ===
    
    @require_user()
    async def show_balance_info(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
        try:
            async with get_user_service() as user_service:
                current_balance = await user_service.get_user_balance(user.id)
            
            spending_info = await self._get_spending_info(user)
            
            status_emoji, status_text = self._get_balance_status(current_balance)
            
            text = f"""üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ</b>

{status_emoji} <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance:.0f} –º–æ–Ω–µ—Ç

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ç</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {spending_info['today_spent']} –º–æ–Ω–µ—Ç
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {spending_info['week_spent']} –º–æ–Ω–µ—Ç  
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {spending_info['month_spent']} –º–æ–Ω–µ—Ç
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {spending_info['total_spent']} –º–æ–Ω–µ—Ç

üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {spending_info['average_daily']} –º–æ–Ω–µ—Ç
‚Ä¢ –õ—é–±–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {spending_info['favorite_feature']}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
{self._get_balance_recommendations(current_balance)}"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                        callback_data="profile_topup_balance"
                    ),
                    InlineKeyboardButton(
                        text="üìà –ò—Å—Ç–æ—Ä–∏—è",
                        callback_data="balance_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data="profile_dashboard"
                    )
                ]
            ])
            
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @require_user()
    async def show_topup_menu(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        try:
            async with get_user_service() as user_service:
                current_balance = await user_service.get_user_balance(user.id)
            
            text = f"""üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.0f} –º–æ–Ω–µ—Ç

<b>üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>

üí° <i>–ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ –±–æ–Ω—É—Å!</i>"""
            
            buttons = []
            for i, package in enumerate(self.topup_packages):
                button_text = f"{package['amount']} –º–æ–Ω–µ—Ç"
                if package['bonus'] > 0:
                    button_text += f" (+{package['bonus']} üéÅ)"
                
                if package['popular']:
                    button_text = f"‚≠ê {button_text}"
                
                price_text = f" ‚Ä¢ {package['price_kzt']} ‚Ç∏"
                button_text += price_text
                
                buttons.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"topup_package_{i}"
                    )
                ])
            
            buttons.append([
                InlineKeyboardButton(
                    text="üîô –ö –±–∞–ª–∞–Ω—Å—É",
                    callback_data="profile_balance_info"
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def process_topup_package(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            package_id = int(callback.data.split("_")[-1])
            
            if package_id >= len(self.topup_packages):
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç", show_alert=True)
                return
            
            package = self.topup_packages[package_id]
            
            total_coins = package['amount'] + package['bonus']
            
            text = f"""üí≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package['amount']} –º–æ–Ω–µ—Ç
üéÅ <b>–ë–æ–Ω—É—Å:</b> +{package['bonus']} –º–æ–Ω–µ—Ç
üíé <b>–ò—Ç–æ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ:</b> {total_coins} –º–æ–Ω–µ—Ç

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {package['price_kzt']} ‚Ç∏ / {package['price_rub']} ‚ÇΩ

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí≥ Kaspi Pay",
                        callback_data=f"pay_kaspi_{package_id}"
                    ),
                    InlineKeyboardButton(
                        text="üè¶ –°–ë–ü (–†–§)",
                        callback_data=f"pay_sbp_{package_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üåê –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã",
                        callback_data=f"pay_other_{package_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç",
                        callback_data="profile_topup_balance"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
    
    @require_user()
    async def show_statistics(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            stats = await self._gather_user_stats(user)
            
            level_emoji, level_text = self._get_user_level(stats['generations_total'])
            efficiency = min(100, (stats['generations_total'] / max(1, stats['member_since_days'])) * 10)
            
            text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

{level_emoji} <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_text}
‚ö° <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {efficiency:.1f}%

üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['generations_total']}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['generations_today']}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['generations_week']}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['generations_month']}

üé≠ <b>–ê–≤–∞—Ç–∞—Ä—ã</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['avatars_total']}
‚Ä¢ –ì–æ—Ç–æ–≤—ã—Ö: {stats['avatars_completed']}
‚Ä¢ –í –æ–±—É—á–µ–Ω–∏–∏: {stats['avatars_training']}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>
‚Ä¢ –î–Ω–µ–π —Å –Ω–∞–º–∏: {stats['member_since_days']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats['average_daily_usage']}
‚Ä¢ –õ—é–±–∏–º—ã–π —Å—Ç–∏–ª—å: {stats['favorite_style']}

üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {stats['total_spent']} –º–æ–Ω–µ—Ç"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                        callback_data="stats_achievements"
                    ),
                    InlineKeyboardButton(
                        text="üìà –ì—Ä–∞—Ñ–∏–∫",
                        callback_data="stats_activity_chart"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data="profile_dashboard"
                    )
                ]
            ])
            
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_achievements(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            achievements = await self._get_user_achievements(callback.from_user.id)
            
            text = f"""üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

<b>üéñÔ∏è –ü–æ–ª—É—á–µ–Ω–æ ({achievements['earned']}/{achievements['total']}):</b>

{"ü•á" if achievements['first_avatar'] else "‚≠ï"} <b>–ü–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä</b>
{"ü•à" if achievements['power_user'] else "‚≠ï"} <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>
{"ü•â" if achievements['big_spender'] else "‚≠ï"} <b>–©–µ–¥—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>
{"üèÜ" if achievements['veteran'] else "‚≠ï"} <b>–í–µ—Ç–µ—Ä–∞–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>
{"‚≠ê" if achievements['premium'] else "‚≠ï"} <b>Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>

<b>üéØ –í –ø—Ä–æ—Ü–µ—Å—Å–µ:</b>
‚Ä¢ –ú–∞—Å—Ç–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (78/100)
‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä —Å—Ç–∏–ª–µ–π (4/10)
‚Ä¢ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (15/30 –¥–Ω–µ–π)

üí° <i>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–∞—é—Ç –±–æ–Ω—É—Å—ã –∫ –±–∞–ª–∞–Ω—Å—É!</i>"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                        callback_data="profile_statistics"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_activity_chart(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            text = """üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</b>
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80%
–í—Ç–æ—Ä–Ω–∏–∫       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 75%
–°—Ä–µ–¥–∞         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%
–ß–µ—Ç–≤–µ—Ä–≥       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë 90%
–ü—è—Ç–Ω–∏—Ü–∞       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë 70%
–°—É–±–±–æ—Ç–∞       ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%
–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ   ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 20%

‚è∞ <b>–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã</b>
09:00-12:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80%
12:00-15:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%
15:00-18:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë 90%
18:00-21:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë 60%

üìà <b>–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>
‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–∞ 12:00-15:00
‚Ä¢ –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: –ß–µ—Ç–≤–µ—Ä–≥
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: –±—É–¥–Ω–∏–µ –¥–Ω–∏ —É—Ç—Ä–æ–º"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                        callback_data="profile_statistics"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    # === –ù–ê–°–¢–†–û–ô–ö–ò ===
    
    @require_user()
    async def show_profile_settings(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

üë§ <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚Ä¢ –ò–º—è: {user.first_name}
‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –Ø–∑—ã–∫: {user.language_code.upper() if user.language_code else 'RU'}
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone or 'UTC+5'}

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>
‚Ä¢ –û –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –û –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã

üé® <b>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>
‚Ä¢ –¢–µ–º–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
‚Ä¢ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω

üí∞ <b>–ü–ª–∞—Ç–µ–∂–∏</b>
‚Ä¢ –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        callback_data="settings_notifications"
                    ),
                    InlineKeyboardButton(
                        text="üåç –Ø–∑—ã–∫",
                        callback_data="settings_language"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
                        callback_data="settings_privacy"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                        callback_data="settings_menu_v2"
                    )
                ]
            ])
            
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_notifications_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        text = """üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

<b>üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ</b>
‚úÖ –û –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
‚úÖ –û –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞  
‚úÖ –í–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚ùå –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

<b>üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>
‚ùå –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚ùå –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>
‚Ä¢ –° 09:00 –¥–æ 21:00
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: –≤–∫–ª—é—á–µ–Ω—ã

üí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="profile_settings"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("üîî –ü–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)

    async def show_language_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
        text = """üåç <b>–Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω</b>

<b>üó£Ô∏è –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>
üá∑üá∫ –†—É—Å—Å–∫–∏–π (—Ç–µ–∫—É—â–∏–π)
üá∫üá∏ English
üá∞üáø “ö–∞–∑–∞“õ—à–∞

<b>üåè –†–µ–≥–∏–æ–Ω</b>
üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (—Ç–µ–∫—É—â–∏–π)
üá∑üá∫ –†–æ—Å—Å–∏—è
üåç –î—Ä—É–≥–æ–π

<b>‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>
üìç UTC+5 –ê–ª–º–∞—Ç—ã (—Ç–µ–∫—É—â–∏–π)

üí° <i>–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö</i>"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="profile_settings"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("üåç –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)

    async def show_privacy_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        text = """üîí <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>

<b>üë• –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è</b>
‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∫—Ä—ã—Ç–∞
‚ùå –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∞

<b>üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö</b>
‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚ùå –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞

<b>üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>
‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 30 –¥–Ω–µ–π

üí° <i>–ú—ã –∑–∞—â–∏—â–∞–µ–º –≤–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</i>"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    url="https://aibots.kz/privacy"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                    callback_data="profile_settings"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    # === –ü–û–î–î–ï–†–ñ–ö–ê ===
    
    async def show_profile_help(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—é"""
        text = """‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É</b>

<b>üí∞ –ë–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—Ç–∞</b>
‚Ä¢ –ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∑–∞ –∫–∞–∂–¥—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
‚Ä¢ –ü–∞–∫–µ—Ç—ã –¥–∞—é—Ç –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi Pay –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã

<b>üé≠ –ê–≤–∞—Ç–∞—Ä—ã</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –∏–∑ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ
‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: 15-30 –º–∏–Ω—É—Ç
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –¥–æ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

<b>üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data="profile_support"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –í –ø—Ä–æ—Ñ–∏–ª—å",
                    callback_data="profile_dashboard"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def show_profile_support(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        text = """üí¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>
‚Ä¢ Telegram: @aibots_support
‚Ä¢ Email: support@aibots.kz
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 09:00-21:00 (UTC+5)

<b>‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>
‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä?
‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è?
‚Ä¢ –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π

<b>üîß –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</b>
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

<b>üìù –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>
–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:
‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞–ª–∏
‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–ª–∏
‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤!"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    url="https://t.me/aibots_support"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ",
                    callback_data="profile_help"
                )
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    async def _gather_profile_data(self, user) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        data = {
            'balance': 0.0,
            'avatars_count': 0,
            'completed_avatars': 0,
            'generations_count': 0,
            'member_since_days': 0,
            'premium': user.is_premium if hasattr(user, 'is_premium') else False,
            'timezone': user.timezone or "UTC+5",
            'today_generations': 5  # Mock data
        }
        
        try:
            async with get_user_service() as user_service:
                data['balance'] = await user_service.get_user_balance(user.id)
            
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars(user.id)
                data['avatars_count'] = len(avatars)
                data['completed_avatars'] = len([a for a in avatars if a.status == AvatarStatus.COMPLETED])
                data['generations_count'] = sum(a.generations_count for a in avatars)
            
            if user.created_at:
                if isinstance(user.created_at, str):
                    created_dt = datetime.fromisoformat(user.created_at.replace('Z', '+00:00'))
                    created_dt = created_dt.replace(tzinfo=None)
                else:
                    created_dt = user.created_at
                    if created_dt.tzinfo is not None:
                        created_dt = created_dt.replace(tzinfo=None)
                        
                data['member_since_days'] = (datetime.utcnow() - created_dt).days
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        return data

    async def _gather_user_stats(self, user) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = {
            'balance': 0.0,
            'avatars_total': 0,
            'avatars_completed': 0,
            'avatars_training': 0,
            'generations_total': 0,
            'generations_today': 5,
            'generations_week': 32,
            'generations_month': 156,
            'member_since_days': 0,
            'favorite_style': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π',
            'total_spent': 1250,
            'average_daily_usage': 15
        }
        
        try:
            async with get_user_service() as user_service:
                stats['balance'] = await user_service.get_user_balance(user.id)
            
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars(user.id)
                stats['avatars_total'] = len(avatars)
                stats['avatars_completed'] = len([a for a in avatars if a.status == AvatarStatus.COMPLETED])
                stats['avatars_training'] = len([a for a in avatars if a.status == AvatarStatus.TRAINING])
                stats['generations_total'] = sum(a.generations_count for a in avatars)
            
            if user.created_at:
                if isinstance(user.created_at, str):
                    created_dt = datetime.fromisoformat(user.created_at.replace('Z', '+00:00'))
                    created_dt = created_dt.replace(tzinfo=None)
                else:
                    created_dt = user.created_at
                    if created_dt.tzinfo is not None:
                        created_dt = created_dt.replace(tzinfo=None)
                        
                stats['member_since_days'] = (datetime.utcnow() - created_dt).days
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return stats

    async def _get_spending_info(self, user) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            'today_spent': 25,
            'week_spent': 180,
            'month_spent': 650,
            'total_spent': 2340,
            'average_daily': 15,
            'favorite_feature': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        }

    async def _get_user_achievements(self, telegram_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            'total': 5,
            'earned': 3,
            'first_avatar': True,
            'power_user': True,
            'big_spender': True,
            'veteran': False,
            'premium': False
        }

    def _get_status_emoji(self, profile_data: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return "üëë" if profile_data['premium'] else "üë§"

    def _get_status_text(self, profile_data: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return "Premium" if profile_data['premium'] else "–°—Ç–∞–Ω–¥–∞—Ä—Ç"

    def _format_member_since(self, days: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ —á–ª–µ–Ω—Å—Ç–≤–∞"""
        if days == 0:
            return "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif days < 7:
            return f"üå± –° –Ω–∞–º–∏ {days} –¥–Ω."
        elif days < 30:
            weeks = days // 7
            return f"üåø –° –Ω–∞–º–∏ {weeks} –Ω–µ–¥."
        elif days < 365:
            months = days // 30
            return f"üå≥ –° –Ω–∞–º–∏ {months} –º–µ—Å."
        else:
            years = days // 365
            return f"üèÜ –° –Ω–∞–º–∏ {years} –≥."

    def _get_balance_indicator(self, balance: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        if balance >= 200:
            return "üü¢"
        elif balance >= 100:
            return "üü°"
        elif balance >= 50:
            return "üü†"
        else:
            return "üî¥"

    def _get_profile_tip(self, profile_data: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_data['avatars_count'] == 0:
            return "\nüí° <i>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</i>"
        elif profile_data['balance'] < 50:
            return "\nüí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</i>"
        else:
            return "\nüöÄ <i>–í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!</i>"

    def _get_balance_status(self, balance: float) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∞"""
        if balance >= 200:
            return "üü¢", "–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å"
        elif balance >= 100:
            return "üü°", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å"
        elif balance >= 50:
            return "üü†", "–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å"
        else:
            return "üî¥", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å"

    def _get_balance_recommendations(self, balance: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        if balance >= 200:
            return "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤"
        elif balance >= 100:
            return "‚Ä¢ –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏"
        elif balance >= 50:
            return "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏"
        else:
            return "‚Ä¢ –°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"

    def _get_user_level(self, generations: int) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if generations >= 100:
            return "üèÜ", "–≠–∫—Å–ø–µ—Ä—Ç"
        elif generations >= 50:
            return "üíé", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif generations >= 20:
            return "‚≠ê", "–ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            return "üå±", "–ù–æ–≤–∏—á–æ–∫"

    def _build_profile_dashboard_keyboard(self, profile_data: Dict[str, Any]) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        buttons = []
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        balance_text = f"üí∞ –ë–∞–ª–∞–Ω—Å ({profile_data['balance']:.0f})"
        buttons.append([
            InlineKeyboardButton(
                text=balance_text,
                callback_data="profile_balance_info"
            ),
            InlineKeyboardButton(
                text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
                callback_data="profile_topup_balance"
            )
        ])
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="profile_statistics"
            ),
            InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                callback_data="profile_settings"
            )
        ])
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ  
        buttons.append([
            InlineKeyboardButton(
                text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
                callback_data="avatar_menu"
            ),
            InlineKeyboardButton(
                text="üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è",
                callback_data="my_gallery"
            )
        ])
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ü–æ–º–æ—â—å –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([
            InlineKeyboardButton(
                text="‚ùì –°–ø—Ä–∞–≤–∫–∞",
                callback_data="profile_help"
            ),
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
modern_profile_handler = ModernProfileHandler()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
router = modern_profile_handler.router

# === LEGACY SUPPORT ===
# –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ callback'–∞–º–∏
class SettingsMenuHandler(BaseHandler):
    """LEGACY: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    def __init__(self):
        super().__init__()
        self.router = Router(name="settings_legacy")
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç LEGACY –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        self.router.callback_query.register(
            self.redirect_to_modern,
            F.data == "settings_menu"
        )
    
    async def redirect_to_modern(self, callback: CallbackQuery, state: FSMContext):
        """LEGACY: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        await modern_profile_handler.show_settings_menu(callback, state)


# LEGACY —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
settings_menu_handler = SettingsMenuHandler() 