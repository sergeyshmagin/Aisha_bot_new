"""
LEGACY: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ó–∞–º–µ–Ω–µ–Ω –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ app/handlers/menu/settings_handler.py
–û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ callback'–∞–º–∏
"""
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.core.di import get_user_service, get_avatar_service
from app.core.logger import get_logger
from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user
from app.database.models import AvatarStatus

logger = get_logger(__name__)
router = Router()


class ProfileMainHandler(BaseHandler):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    
    def __init__(self):
        super().__init__()
    
    @require_user()
    async def show_profile_menu(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            await state.clear()
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_data = await self._gather_profile_data(user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            text = self._build_profile_text(user, profile_data)
            keyboard = self._build_profile_keyboard(profile_data)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _gather_profile_data(self, user) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        data = {
            'balance': 0.0,
            'avatars_count': 0,
            'completed_avatars': 0,
            'generations_count': 0,
            'member_since_days': 0,
            'last_activity': None,
            'premium': user.is_premium,
            'timezone': user.timezone or "UTC+5"
        }
        
        try:
            # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_user_service() as user_service:
                data['balance'] = await user_service.get_user_balance(user.id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars(user.id)
                data['avatars_count'] = len(avatars)
                data['completed_avatars'] = len([a for a in avatars if a.status == AvatarStatus.COMPLETED])
                data['generations_count'] = sum(a.generations_count for a in avatars)
            
            # –î–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if user.created_at:
                # –ü—Ä–∏–≤–æ–¥–∏–º created_at –∫ datetime –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(user.created_at, str):
                    created_dt = datetime.fromisoformat(user.created_at.replace('Z', '+00:00'))
                    # –£–±–∏—Ä–∞–µ–º timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è
                    created_dt = created_dt.replace(tzinfo=None)
                else:
                    created_dt = user.created_at
                    # –£–±–∏—Ä–∞–µ–º timezone –µ—Å–ª–∏ –µ—Å—Ç—å
                    if created_dt.tzinfo is not None:
                        created_dt = created_dt.replace(tzinfo=None)
                    
                days_diff = (datetime.utcnow() - created_dt).days
                data['member_since_days'] = days_diff
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        return data
    
    def _build_profile_text(self, user, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_icon = "üëë" if data['premium'] else "üë§"
        status_text = "Premium" if data['premium'] else "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        member_text = self._format_member_since(data['member_since_days'])
        
        # –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text = f"""üè† <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

{status_icon} <b>{user.first_name}</b> ‚Ä¢ {status_text}
{member_text}

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {data['balance']:.0f} –º–æ–Ω–µ—Ç

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
üé≠ –ê–≤–∞—Ç–∞—Ä—ã: {data['completed_avatars']}/{data['avatars_count']}
üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {data['generations_count']}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data['timezone']}"""

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if data['avatars_count'] == 0:
            text += "\n\nüí° <i>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!</i>"
        elif data['balance'] < 50:
            text += "\n\nüí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</i>"
            
        return text
    
    def _format_member_since(self, days: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ —á–ª–µ–Ω—Å—Ç–≤–∞"""
        if days == 0:
            return "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif days < 7:
            return f"üå± –° –Ω–∞–º–∏ {days} –¥–Ω."
        elif days < 30:
            weeks = days // 7
            return f"üåø –° –Ω–∞–º–∏ {weeks} –Ω–µ–¥."
        elif days < 365:
            months = days // 30
            return f"üå≥ –° –Ω–∞–º–∏ {months} –º–µ—Å."
        else:
            years = days // 365
            return f"üèÜ –° –Ω–∞–º–∏ {years} –≥."
    
    def _build_profile_keyboard(self, data: Dict[str, Any]) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        
        buttons = []
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        balance_text = f"üí∞ –ë–∞–ª–∞–Ω—Å ({data['balance']:.0f})"
        buttons.append([
            InlineKeyboardButton(
                text=balance_text,
                callback_data="profile_balance_info"
            ),
            InlineKeyboardButton(
                text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
                callback_data="profile_topup_balance"
            )
        ])
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="profile_statistics"
            ),
            InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                callback_data="profile_settings"
            )
        ])
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ
        buttons.append([
            InlineKeyboardButton(
                text="üé≠ –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
                callback_data="avatar_menu"
            ),
            InlineKeyboardButton(
                text="üñºÔ∏è –ú–æ—è –≥–∞–ª–µ—Ä–µ—è",
                callback_data="my_gallery"
            )
        ])
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        buttons.append([
            InlineKeyboardButton(
                text="‚ùì –°–ø—Ä–∞–≤–∫–∞",
                callback_data="profile_help"
            ),
            InlineKeyboardButton(
                text="üíå –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                callback_data="profile_support"
            )
        ])
        
        # –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
profile_handler = ProfileMainHandler()

@router.callback_query(F.data == "profile_menu")
async def show_profile_menu_callback(callback: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await profile_handler.show_profile_menu(callback, state)

@router.callback_query(F.data == "profile_help")
async def show_profile_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    help_text = """‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É</b>

üè† <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> - —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
‚Ä¢ –ß–∏—Å–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üé≠ <b>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</b>
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞–º–∏
‚Ä¢ –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üí° <b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile_menu")]
    ])
    
    await callback.message.edit_text(
        text=help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "profile_support")
async def show_profile_support(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_text = """üíå <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º!

<b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>

üìß <b>Email:</b> support@aibots.kz
üì± <b>Telegram:</b> @aisha_support_bot
üåê <b>–°–∞–π—Ç:</b> https://aibots.kz

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 09:00 - 18:00 (UTC+5)
–°–±-–í—Å: 10:00 - 16:00 (UTC+5)

<b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
‚Ä¢ –í–∞—à Telegram ID: <code>{callback.from_user.id}</code>

üí° <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –°–ø—Ä–∞–≤–∫–∞."""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùì FAQ", callback_data="profile_help"),
            InlineKeyboardButton(text="üîô –í –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile_menu")
        ]
    ])
    
    await callback.message.edit_text(
        text=support_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer() 