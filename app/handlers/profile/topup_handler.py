"""
LEGACY: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ app/handlers/menu/settings_handler.py
–û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ callback'–∞–º–∏
"""
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, Dict, Any

from app.core.logger import get_logger
from app.core.config import settings
from app.core.constants import TOPUP_PACKAGES
from app.handlers.base import BaseHandler
from app.keyboards.profile.topup import TopupKeyboard
from app.services.promokode_service import PromokodeService
from app.services.balance_service import BalanceService
from app.database.models import PromokodeType

logger = get_logger(__name__)


class TopupStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    waiting_promokode = State()
    confirming_purchase = State()


class TopupHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    
    def __init__(self):
        super().__init__()
        self.keyboard = TopupKeyboard()
    
    async def show_topup_menu(self, message: types.Message, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        try:
            await state.clear()
            
            async with self.get_session() as session:
                balance_service = BalanceService(session)
                user = await self.get_user(message.from_user.id, session)
                
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
                
                current_balance = await balance_service.get_balance(user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                packages = TOPUP_PACKAGES
                
                text = self._format_topup_text(current_balance, packages)
                keyboard = self.keyboard.create_packages_keyboard(packages)
                
                await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    def _format_topup_text(self, balance: float, packages: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        text = f"""üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

üíé –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.0f} –º–æ–Ω–µ—Ç</b>

üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>

"""
        
        for package_id, package in packages.items():
            coins = package["coins"]
            price_rub = package["price_rub"]
            price_kzt = package["price_kzt"]
            popular = package.get("popular", False)
            
            popular_badge = " üî•" if popular else ""
            
            text += f"üíé <b>{coins} –º–æ–Ω–µ—Ç</b>{popular_badge}\n"
            text += f"üíµ {price_rub} ‚ÇΩ / {price_kzt} ‚Ç∏\n\n"
        
        text += """üéÅ <b>–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?</b>
–ù–∞–∂–º–∏—Ç–µ "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!

üìã –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: 10 –º–æ–Ω–µ—Ç/–º–∏–Ω—É—Ç–∞
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ: 5 –º–æ–Ω–µ—Ç
‚Ä¢ –í–∏–¥–µ–æ 5 —Å–µ–∫: 20 –º–æ–Ω–µ—Ç
‚Ä¢ –í–∏–¥–µ–æ 10 —Å–µ–∫: 40 –º–æ–Ω–µ—Ç
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞: 150 –º–æ–Ω–µ—Ç

üìÑ <a href="{offer_url}">–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã</a> | <a href="{privacy_url}">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>""".format(
            offer_url=settings.OFFER_URL,
            privacy_url=settings.PRIVACY_URL
        )
        
        return text
    
    async def handle_package_selection(self, callback: types.CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞"""
        try:
            package_id = callback.data.split(":")[-1]
            packages = TOPUP_PACKAGES
            
            if package_id not in packages:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç", show_alert=True)
                return
            
            package = packages[package_id]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                package_id=package_id,
                package_data=package
            )
            
            text = self._format_package_confirmation(package_id, package)
            keyboard = self.keyboard.create_confirmation_keyboard(package_id)
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await state.set_state(TopupStates.confirming_purchase)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    
    def _format_package_confirmation(self, package_id: str, package: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
        coins = package["coins"]
        price_rub = package["price_rub"]
        price_kzt = package["price_kzt"]
        
        package_names = {
            "small": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π",
            "medium": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π",
            "large": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π"
        }
        
        package_name = package_names.get(package_id, package_id.title())
        
        return f"""üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

üì¶ –ü–∞–∫–µ—Ç: <b>{package_name}</b>
üíé –ú–æ–Ω–µ—Ç—ã: <b>{coins}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price_rub} ‚ÇΩ / {price_kzt} ‚Ç∏</b>

üéÅ –ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥? –ù–∞–∂–º–∏—Ç–µ "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!

‚ö†Ô∏è –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–û–ø–ª–∞—Ç–∏—Ç—å" –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    
    async def handle_promokode_input(self, callback: types.CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            await callback.message.edit_text(
                "üéÅ <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞.\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
                parse_mode="HTML"
            )
            await state.set_state(TopupStates.waiting_promokode)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    
    async def handle_promokode_message(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"""
        try:
            promokode = message.text.strip().upper()
            
            if not promokode:
                await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
                return
            
            async with self.get_session() as session:
                promokode_service = PromokodeService(session)
                user = await self.get_user(message.from_user.id, session)
                
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
                is_valid, error_msg, promokode_data = await promokode_service.validate_promokode(
                    promokode, user.id
                )
                
                if not is_valid:
                    await message.reply(f"‚ùå {error_msg}")
                    await self._return_to_topup_menu(message, state)
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(promokode=promokode_data)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
                bonus_text = self._format_promokode_bonus(promokode_data)
                await message.reply(bonus_text, parse_mode="HTML")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                await self._return_to_topup_menu(message, state)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    
    def _format_promokode_bonus(self, promokode_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        code = promokode_data["code"]
        promokode_type = promokode_data["type"]
        
        if promokode_type == PromokodeType.BALANCE:
            balance_amount = promokode_data["balance_amount"]
            return f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\nüíé –ë–æ–Ω—É—Å: <b>{balance_amount} –º–æ–Ω–µ—Ç</b>"
        
        elif promokode_type == PromokodeType.BONUS:
            bonus_amount = promokode_data["bonus_amount"]
            return f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\nüéÅ –ë–æ–Ω—É—Å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: <b>+{bonus_amount} –º–æ–Ω–µ—Ç</b>"
        
        elif promokode_type == PromokodeType.DISCOUNT:
            discount_percent = promokode_data["discount_percent"]
            return f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\nüí∞ –°–∫–∏–¥–∫–∞: <b>{discount_percent}%</b>"
        
        return f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ {code} –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>"
    
    async def _return_to_topup_menu(self, message: types.Message, state: FSMContext) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            state_data = await state.get_data()
            promokode_data = state_data.get("promokode")
            
            async with self.get_session() as session:
                balance_service = BalanceService(session)
                user = await self.get_user(message.from_user.id, session)
                
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
                
                current_balance = await balance_service.get_balance(user.id)
                packages = TOPUP_PACKAGES
                
                text = self._format_topup_text_with_promokode(current_balance, packages, promokode_data)
                keyboard = self.keyboard.create_packages_keyboard(packages)
                
                await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é")
    
    def _format_topup_text_with_promokode(
        self, 
        balance: float, 
        packages: Dict[str, Any], 
        promokode_data: Optional[Dict[str, Any]]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º"""
        text = self._format_topup_text(balance, packages)
        
        if promokode_data:
            code = promokode_data["code"]
            promokode_type = promokode_data["type"]
            
            text += f"\n\nüéÅ <b>–ê–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {code}</b>\n"
            
            if promokode_type == PromokodeType.BALANCE:
                balance_amount = promokode_data["balance_amount"]
                text += f"üíé –ë–æ–Ω—É—Å: +{balance_amount} –º–æ–Ω–µ—Ç"
            elif promokode_type == PromokodeType.BONUS:
                bonus_amount = promokode_data["bonus_amount"]
                text += f"üéÅ –ë–æ–Ω—É—Å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: +{bonus_amount} –º–æ–Ω–µ—Ç"
            elif promokode_type == PromokodeType.DISCOUNT:
                discount_percent = promokode_data["discount_percent"]
                text += f"üí∞ –°–∫–∏–¥–∫–∞: {discount_percent}%"
        
        return text
    
    async def handle_payment_creation(self, callback: types.CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            state_data = await state.get_data()
            package_id = state_data.get("package_id")
            package_data = state_data.get("package_data")
            promokode_data = state_data.get("promokode")
            
            if not package_id or not package_data:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞", show_alert=True)
                return
            
            async with self.get_session() as session:
                user = await self.get_user(callback.from_user.id, session)
                
                if not user:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                    return
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
                if promokode_data:
                    await self._apply_promokode(session, user.id, promokode_data, package_data)
                
                # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                
                payment_text = self._format_payment_instructions(package_data, promokode_data)
                await callback.message.edit_text(payment_text, parse_mode="HTML")
                
                await state.clear()
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    
    async def _apply_promokode(
        self, 
        session, 
        user_id, 
        promokode_data: Dict[str, Any], 
        package_data: Dict[str, Any]
    ) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
        try:
            promokode_service = PromokodeService(session)
            balance_service = BalanceService(session)
            
            package_info = {
                "coins": package_data["coins"],
                "package_name": f"topup_{package_data['coins']}_coins"
            }
            
            success, message, result = await promokode_service.apply_promokode(
                code=promokode_data["code"],
                user_id=user_id,
                package_info=package_info
            )
            
            if success and promokode_data["type"] == PromokodeType.BALANCE:
                # –î–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –±–∞–ª–∞–Ω—Å–∞ —Å—Ä–∞–∑—É –∑–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
                await balance_service.add_balance(
                    user_id=user_id,
                    amount=result["total_coins_added"],
                    description=f"–ü—Ä–æ–º–æ–∫–æ–¥ {promokode_data['code']}"
                )
                logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –±–∞–ª–∞–Ω—Å–∞ {promokode_data['code']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    
    def _format_payment_instructions(
        self, 
        package_data: Dict[str, Any], 
        promokode_data: Optional[Dict[str, Any]]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ"""
        coins = package_data["coins"]
        price_rub = package_data["price_rub"]
        price_kzt = package_data["price_kzt"]
        
        text = f"""üí≥ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ</b>

üì¶ –ü–∞–∫–µ—Ç: <b>{coins} –º–æ–Ω–µ—Ç</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price_rub} ‚ÇΩ / {price_kzt} ‚Ç∏</b>

"""
        
        if promokode_data and promokode_data["type"] != PromokodeType.BALANCE:
            text += f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: <b>{promokode_data['code']}</b>\n"
            
            if promokode_data["type"] == PromokodeType.BONUS:
                bonus = promokode_data["bonus_amount"]
                total_coins = coins + bonus
                text += f"üíé –ò—Ç–æ–≥–æ –º–æ–Ω–µ—Ç —Å –±–æ–Ω—É—Å–æ–º: <b>{total_coins}</b>\n\n"
            elif promokode_data["type"] == PromokodeType.DISCOUNT:
                discount = promokode_data["discount_percent"]
                text += f"üí∞ –°–∫–∏–¥–∫–∞: <b>{discount}%</b>\n\n"
        
        text += """üì± <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>

1Ô∏è‚É£ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</b>
2Ô∏è‚É£ <b>–°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)</b>
3Ô∏è‚É£ <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏</b>

‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"""
        
        return text
    
    async def handle_back_to_profile(self, callback: types.CallbackQuery, state: FSMContext) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            await state.clear()
            from app.handlers.profile.main_handler import ProfileHandler
            profile_handler = ProfileHandler()
            await profile_handler.show_profile(callback.message, state)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å", show_alert=True) 