"""
LEGACY: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ app/handlers/menu/settings_handler.py
–û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ callback'–∞–º–∏
"""
from datetime import datetime, timedelta
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.core.di import get_user_service, get_avatar_service
from app.core.logger import get_logger
from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user
from app.database.models import AvatarStatus

logger = get_logger(__name__)
router = Router()


class StatsHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        super().__init__()
    
    @require_user()
    async def show_statistics(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self._gather_user_stats(user)
            
            text = self._build_stats_text(user, stats)
            keyboard = self._build_stats_keyboard()
            
            await self.safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def show_achievements(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            achievements = await self._get_user_achievements(callback.from_user.id)
            
            text = self._build_achievements_text(achievements)
            keyboard = self._build_achievements_keyboard()
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def show_activity_chart(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            text = """üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</b>
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80%
–í—Ç–æ—Ä–Ω–∏–∫       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 75%
–°—Ä–µ–¥–∞         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%
–ß–µ—Ç–≤–µ—Ä–≥       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë 90%
–ü—è—Ç–Ω–∏—Ü–∞       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë 70%
–°—É–±–±–æ—Ç–∞       ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%
–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ   ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 20%

‚è∞ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</b>
06:00-09:00   ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 20%
09:00-12:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80%
12:00-15:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%
15:00-18:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë 90%
18:00-21:00   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë 60%
21:00-00:00   ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%

üìà <b>–í—ã–≤–æ–¥—ã</b>
‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–∞ 12:00-15:00
‚Ä¢ –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: –ß–µ—Ç–≤–µ—Ä–≥
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —É—Ç—Ä–æ"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                        url="https://aibots.kz/analytics"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                        callback_data="profile_statistics"
                    )
                ]
            ])
            
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _gather_user_stats(self, user) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = {
            'balance': 0.0,
            'avatars_total': 0,
            'avatars_completed': 0,
            'avatars_training': 0,
            'generations_total': 0,
            'generations_today': 5,
            'generations_week': 32,
            'generations_month': 156,
            'member_since_days': 0,
            'last_activity': datetime.utcnow(),
            'favorite_style': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π',
            'total_spent': 1250,
            'average_daily_usage': 15
        }
        
        try:
            # –ë–∞–ª–∞–Ω—Å
            async with get_user_service() as user_service:
                stats['balance'] = await user_service.get_user_balance(user.id)
            
            # –ê–≤–∞—Ç–∞—Ä—ã
            async with get_avatar_service() as avatar_service:
                avatars = await avatar_service.get_user_avatars(user.id)
                stats['avatars_total'] = len(avatars)
                stats['avatars_completed'] = len([a for a in avatars if a.status == AvatarStatus.COMPLETED])
                stats['avatars_training'] = len([a for a in avatars if a.status == AvatarStatus.TRAINING])
                stats['generations_total'] = sum(a.generations_count for a in avatars)
            
            # –î–Ω–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if user.created_at:
                # –ü—Ä–∏–≤–æ–¥–∏–º created_at –∫ datetime –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(user.created_at, str):
                    created_dt = datetime.fromisoformat(user.created_at.replace('Z', '+00:00'))
                    created_dt = created_dt.replace(tzinfo=None)
                else:
                    created_dt = user.created_at
                    if created_dt.tzinfo is not None:
                        created_dt = created_dt.replace(tzinfo=None)
                        
                stats['member_since_days'] = (datetime.utcnow() - created_dt).days
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return stats
    
    def _build_stats_text(self, user, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        # –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if stats['generations_total'] >= 100:
            level_emoji = "üèÜ"
            level_text = "–≠–∫—Å–ø–µ—Ä—Ç"
        elif stats['generations_total'] >= 50:
            level_emoji = "üíé"
            level_text = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif stats['generations_total'] >= 20:
            level_emoji = "‚≠ê"
            level_text = "–ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            level_emoji = "üå±"
            level_text = "–ù–æ–≤–∏—á–æ–∫"
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        efficiency = min(100, (stats['generations_total'] / max(1, stats['member_since_days'])) * 10)
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

{level_emoji} <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_text}
üìÖ <b>–° –Ω–∞–º–∏:</b> {stats['member_since_days']} –¥–Ω–µ–π

üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['generations_total']}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['generations_today']}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['generations_week']}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['generations_month']}

üé≠ <b>–ê–≤–∞—Ç–∞—Ä—ã</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {stats['avatars_completed']}
‚Ä¢ –í –æ–±—É—á–µ–Ω–∏–∏: {stats['avatars_training']}
‚Ä¢ –í—Å–µ–≥–æ: {stats['avatars_total']}

üí∞ <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞</b>
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']} –º–æ–Ω–µ—Ç
‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {stats['average_daily_usage']} –º–æ–Ω–µ—Ç
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['balance']:.0f} –º–æ–Ω–µ—Ç

üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {efficiency:.1f}%
üé® <b>–õ—é–±–∏–º—ã–π —Å—Ç–∏–ª—å:</b> {stats['favorite_style']}"""

        return text
    
    def _build_stats_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                    callback_data="stats_achievements"
                ),
                InlineKeyboardButton(
                    text="üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    callback_data="stats_activity_chart"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏",
                    callback_data="stats_leaderboard"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåê –í–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    url="https://aibots.kz/analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="profile_menu"
                )
            ]
        ])
    
    async def _get_user_achievements(self, telegram_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            'unlocked': [
                {"name": "–ü–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä", "icon": "üé≠", "description": "–°–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä"},
                {"name": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç", "icon": "üé®", "description": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"},
                {"name": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", "icon": "üíé", "description": "–ü–æ–ª—å–∑—É–µ—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"},
                {"name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π", "icon": "üí°", "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 5 —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"},
            ],
            'locked': [
                {"name": "–ú–∞—Å—Ç–µ—Ä –∞–≤–∞—Ç–∞—Ä–æ–≤", "icon": "üèÜ", "description": "–°–æ–∑–¥–∞–π—Ç–µ 5 –∞–≤–∞—Ç–∞—Ä–æ–≤"},
                {"name": "–•—É–¥–æ–∂–Ω–∏–∫", "icon": "üñºÔ∏è", "description": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"},
                {"name": "VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "icon": "üëë", "description": "–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ 1000 –º–æ–Ω–µ—Ç"},
            ]
        }
    
    def _build_achievements_text(self, achievements: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        text = """üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</b>"""
        
        for achievement in achievements['unlocked']:
            text += f"\n{achievement['icon']} <b>{achievement['name']}</b>"
            text += f"\n   <i>{achievement['description']}</i>"
        
        text += "\n\nüîí <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</b>"
        
        for achievement in achievements['locked']:
            text += f"\n{achievement['icon']} <b>{achievement['name']}</b>"
            text += f"\n   <i>{achievement['description']}</i>"
        
        progress = len(achievements['unlocked']) / (len(achievements['unlocked']) + len(achievements['locked'])) * 100
        text += f"\n\nüìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress:.0f}% ({len(achievements['unlocked'])}/{len(achievements['unlocked']) + len(achievements['locked'])})"
        
        return text
    
    def _build_achievements_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéØ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ",
                    callback_data="achievements_guide"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                    callback_data="profile_statistics"
                )
            ]
        ])


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
stats_handler = StatsHandler()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "profile_statistics")
async def show_statistics_callback(callback: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await stats_handler.show_statistics(callback, state)

@router.callback_query(F.data == "stats_achievements")
async def show_achievements_callback(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await stats_handler.show_achievements(callback)

@router.callback_query(F.data == "stats_activity_chart")
async def show_activity_chart_callback(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await stats_handler.show_activity_chart(callback)

@router.callback_query(F.data == "stats_leaderboard")
async def show_leaderboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    text = """üìä <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üèÜ <b>–¢–æ–ø –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º (—ç—Ç–∞ –Ω–µ–¥–µ–ª—è)</b>
1. ü•á –ê–ª–µ–∫—Å–µ–π –ö. ‚Äî 127 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
2. ü•à –ú–∞—Ä–∏—è –ü. ‚Äî 89 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π  
3. ü•â –î–º–∏—Ç—Ä–∏–π –õ. ‚Äî 73 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
4. üèÖ –ê–Ω–Ω–∞ –°. ‚Äî 61 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
5. üèÖ –ò–≤–∞–Ω –ú. ‚Äî 55 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
...
15. üìç <b>–í—ã</b> ‚Äî 32 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

üíé <b>–¢–æ–ø –ø–æ –∞–≤–∞—Ç–∞—Ä–∞–º</b>
1. ü•á –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í. ‚Äî 8 –∞–≤–∞—Ç–∞—Ä–æ–≤
2. ü•à –°–µ—Ä–≥–µ–π –ö. ‚Äî 6 –∞–≤–∞—Ç–∞—Ä–æ–≤
3. ü•â –û–ª—å–≥–∞ –ù. ‚Äî 5 –∞–≤–∞—Ç–∞—Ä–æ–≤
...
8. üìç <b>–í—ã</b> ‚Äî 2 –∞–≤–∞—Ç–∞—Ä–∞

üéØ <b>–í–∞—à–∞ —Ü–µ–ª—å:</b> –≤–æ–π—Ç–∏ –≤ —Ç–æ–ø-10!
üí° <b>–°–æ–≤–µ—Ç:</b> —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —Ä–æ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                callback_data="generation_menu"
            )
        ],
        [
            InlineKeyboardButton(
                text="üé≠ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
                callback_data="create_avatar"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                callback_data="profile_statistics"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "achievements_guide")
async def show_achievements_guide(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–π–¥ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    text = """üéØ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä—ã</b>
‚Ä¢ –ú–∞—Å—Ç–µ—Ä –∞–≤–∞—Ç–∞—Ä–æ–≤ ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ 5 –∞–≤–∞—Ç–∞—Ä–æ–≤
‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ 10 –∞–≤–∞—Ç–∞—Ä–æ–≤
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞

üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>
‚Ä¢ –•—É–¥–æ–∂–Ω–∏–∫ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ú–∞—Å—Ç–µ—Ä –∫–∏—Å—Ç–∏ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 500 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 1000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üí∞ <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞</b>
‚Ä¢ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ—Ç—Ä–∞—Ç—å—Ç–µ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä ‚Äî –ø–æ—Ç—Ä–∞—Ç—å—Ç–µ 5000 –º–æ–Ω–µ—Ç
‚Ä¢ –ú–µ—Ü–µ–Ω–∞—Ç ‚Äî –ø–æ—Ç—Ä–∞—Ç—å—Ç–µ 10000 –º–æ–Ω–µ—Ç

üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ‚Äî 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ –í–µ—Ä–Ω—ã–π –¥—Ä—É–≥ ‚Äî 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞ ‚Äî 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥

üé® <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ</b>
‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 10 —Å—Ç–∏–ª–µ–π
‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ù–æ–≤–∞—Ç–æ—Ä ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã

üí° <b>–°–æ–≤–µ—Ç:</b> —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üèÜ –ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º",
                callback_data="stats_achievements"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer() 