"""
–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/handlers/transcript_main.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""

import logging
from typing import Any, Dict, Optional, Union
from uuid import UUID

from aiogram.types import CallbackQuery, Message

from app.core.di import get_transcript_service
from app.keyboards.transcript import get_transcript_actions_keyboard
from app.utils.uuid_utils import safe_uuid

from .models import TranscriptMainConfig

logger = logging.getLogger(__name__)


class TranscriptViewer:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ ID
    - –ó–∞–≥—Ä—É–∑–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    - –û—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    def __init__(self, get_session_func):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤

        Args:
            get_session_func: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        """
        self.get_session = get_session_func
        self.config = TranscriptMainConfig()

    async def get_transcript_with_content(
        self, user_id: str, transcript_id: UUID
    ) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            transcript_id: ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞

        Returns:
            –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å preview –∏–ª–∏ None
        """
        try:
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)

                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                transcript = await transcript_service.get_transcript(user_id, transcript_id)
                if not transcript:
                    logger.warning(
                        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç {transcript_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                    )
                    return None

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è preview
                content = await transcript_service.get_transcript_content(user_id, transcript_id)
                if content:
                    try:
                        text = content.decode("utf-8")
                        if text:
                            # –î–æ–±–∞–≤–ª—è–µ–º preview –≤ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                            transcript["preview"] = text[: self.config.PREVIEW_LENGTH]
                            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω preview –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ {transcript_id}")
                    except Exception as decode_error:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ {transcript_id}: {decode_error}"
                        )

                return transcript

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ {transcript_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            return None

    async def render_transcript_card(self, transcript: Dict[str, Any], telegram_id: int) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∞ –∏–∑ processing handler –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
            from app.handlers.transcript_processing import TranscriptProcessingHandler

            handler = TranscriptProcessingHandler()
            return await handler.render_transcript_card(transcript, telegram_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
            return self._render_simple_card(transcript)

    def _render_simple_card(self, transcript: Dict[str, Any]) -> str:
        """
        –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (fallback)

        Args:
            transcript: –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞

        Returns:
            –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        """
        metadata = transcript.get("metadata", {})
        source = metadata.get("source", "unknown")
        created_at = transcript.get("created_at", "")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
        type_icon = "üéµ" if source == "audio" else "üìù"
        type_name = "–ê—É–¥–∏–æ" if source == "audio" else "–¢–µ–∫—Å—Ç"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card_lines = [
            f"üìÑ <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç</b>",
            f"üîπ –¢–∏–ø: {type_icon} {type_name}",
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at[:16] if created_at else '‚Äî'}",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º preview –µ—Å–ª–∏ –µ—Å—Ç—å
        preview = transcript.get("preview")
        if preview:
            card_lines.extend(
                ["", "<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>", preview[:200] + ("..." if len(preview) > 200 else "")]
            )

        return "\n".join(card_lines)

    async def open_transcript_by_callback(self, call: CallbackQuery, user_id: str) -> bool:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É

        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UUID —Å—Ç—Ä–æ–∫–∞)

        Returns:
            True –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç, False –∏–Ω–∞—á–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ callback_data
            transcript_id = safe_uuid(call.data.replace("transcribe_open_", "").strip())
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            transcript = await self.get_transcript_with_content(user_id, transcript_id)
            if not transcript:
                await call.answer("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return False

            # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∏–∑ call)
            telegram_id = call.from_user.id
            card_text = await self.render_transcript_card(transcript, telegram_id)
            keyboard = get_transcript_actions_keyboard(str(transcript["id"]))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            await self._send_transcript_card(call, card_text, keyboard)

            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç {transcript_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (callback) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)
            return False

    async def open_transcript_by_command(self, message: Message, user_id: str) -> bool:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /open_{id}

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UUID —Å—Ç—Ä–æ–∫–∞)

        Returns:
            True –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–∞—Ä—Å–∏–º ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            parts = message.text.strip().split("_", 1)
            if len(parts) != 2 or not parts[1]:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /open_<id>")
                return False

            transcript_id = safe_uuid(parts[1])
            if not transcript_id:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            transcript = await self.get_transcript_with_content(user_id, transcript_id)
            if not transcript:
                await message.answer("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∏–∑ message)
            telegram_id = message.from_user.id
            card_text = await self.render_transcript_card(transcript, telegram_id)
            keyboard = get_transcript_actions_keyboard(str(transcript["id"]))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            await message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")

            logger.info(
                f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç {transcript_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            return True

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.")
            return False

    async def _send_transcript_card(self, call: CallbackQuery, card_text: str, keyboard) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞

        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å
            card_text: –¢–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º —Ç–µ–∫—Å—Ç)
            if call.message.text:
                try:
                    await call.message.edit_text(
                        card_text, reply_markup=keyboard, parse_mode="HTML"
                    )
                    return
                except Exception as edit_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await call.message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await call.message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            raise
