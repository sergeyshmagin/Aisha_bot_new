"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/handlers/transcript_main.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import logging
from typing import List, Dict, Any, Union
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.core.di import get_transcript_service
from app.keyboards.transcript import get_back_to_menu_keyboard
from .models import TranscriptMainConfig, TranscriptDisplayData

logger = logging.getLogger(__name__)class TranscriptHistoryManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    - –û—Ç–ø—Ä–∞–≤–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å—Ç–æ—Ä–∏–∏
    """
    
    def __init__(self, get_session_func):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        
        Args:
            get_session_func: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        """
        self.get_session = get_session_func
        self.config = TranscriptMainConfig()
    
    async def get_transcripts_page(self, user_id: str, page: int = 0) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TranscriptService
                user_id_str = str(user_id) if not isinstance(user_id, str) else user_id
                transcripts = await transcript_service.list_transcripts(
                    user_id_str, 
                    limit=self.config.PAGE_SIZE, 
                    offset=page * self.config.PAGE_SIZE
                )
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transcripts)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
                return transcripts
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
            return []
    
    def create_history_keyboard(self, transcripts: List[Dict[str, Any]], page: int) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        
        Args:
            transcripts: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        """
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        for transcript in transcripts:
            display_data = TranscriptDisplayData(transcript)
            btn_text = display_data.get_friendly_filename()
            
            try:
                btn = InlineKeyboardButton(
                    text=btn_text, 
                    callback_data=f"transcribe_open_{display_data.id}"
                )
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {display_data.id}")
                builder.row(btn)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ {display_data.id}: {e}")
                continue
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            try:
                back_btn = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"transcribe_history_page_{page-1}"
                )
                nav_buttons.append(back_btn)
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page-1}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
        
        if len(transcripts) == self.config.PAGE_SIZE:
            try:
                forward_btn = InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", 
                    callback_data=f"transcribe_history_page_{page+1}"
                )
                nav_buttons.append(forward_btn)
                logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–ø–µ—Ä—ë–¥' –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page+1}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä—ë–¥': {e}")
        
        if nav_buttons:
            builder.row(*nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        try:
            menu_btn = InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                callback_data="transcribe_back_to_menu"
            )
            builder.row(menu_btn)
            logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é': {e}")
        
        return builder.as_markup()
    
    def format_history_text(self, page: int, has_transcripts: bool) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
        
        Args:
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            has_transcripts: –ï—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not has_transcripts:
            return "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤:\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ"
        
        return f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤</b> (—Å—Ç—Ä. {page+1}):\n\n"
    
    async def send_history_page(
        self, 
        message_or_call: Union[Message, CallbackQuery], 
        user_id: str, 
        page: int = 0, 
        edit: bool = False
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            message_or_call: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            edit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        """
        logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: user_id={user_id}, page={page}, edit={edit}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            transcripts = await self.get_transcripts_page(user_id, page)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = self.format_history_text(page, bool(transcripts))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if transcripts:
                keyboard = self.create_history_keyboard(transcripts, page)
            else:
                keyboard = get_back_to_menu_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._send_message(message_or_call, text, keyboard, edit)
            
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            error_keyboard = get_back_to_menu_keyboard()
            await self._send_message(message_or_call, error_text, error_keyboard, edit)
    
    async def _send_message(
        self, 
        message_or_call: Union[Message, CallbackQuery], 
        text: str, 
        keyboard: InlineKeyboardMarkup, 
        edit: bool
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message_or_call: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            edit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        """
        try:
            if edit and hasattr(message_or_call, 'message') and message_or_call.message.text:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await message_or_call.message.edit_text(
                        text, 
                        reply_markup=keyboard, 
                        parse_mode="HTML"
                    )
                    return
                except Exception as edit_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await message_or_call.message.answer(
                        text, 
                        reply_markup=keyboard, 
                        parse_mode="HTML"
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_or_call.answer(
                    text, 
                    reply_markup=keyboard, 
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
