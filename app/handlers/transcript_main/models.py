"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–í—ã–¥–µ–ª–µ–Ω–æ –∏–∑ app/handlers/transcript_main.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
from typing import Dict, Any, Optional
from datetime import datetime


class TranscriptMainConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    PAGE_SIZE = 5
    MAX_FILENAME_LENGTH = 20
    PREVIEW_LENGTH = 300
    
    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    TYPE_ICONS = {
        "audio": "üéµ",
        "text": "üìù",
        "unknown": "üìÑ"
    }
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    TYPE_NAMES = {
        "audio": "–ê—É–¥–∏–æ", 
        "text": "–¢–µ–∫—Å—Ç",
        "unknown": "–§–∞–π–ª"
    }


class TranscriptDisplayData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    def __init__(self, transcript_data: Dict[str, Any]):
        self.data = transcript_data
        self.metadata = transcript_data.get("metadata", {})
        
    @property
    def id(self) -> str:
        """ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
        return str(self.data.get("id", ""))
    
    @property
    def source(self) -> str:
        """–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (audio/text)"""
        return self.metadata.get("source", "unknown")
    
    @property
    def original_filename(self) -> str:
        """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        return self.metadata.get("file_name", "")
    
    @property
    def word_count(self) -> Optional[int]:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤"""
        return self.metadata.get("word_count")
    
    @property
    def created_at(self) -> str:
        """–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        return self.data.get("created_at", "")
    
    @property
    def formatted_date(self) -> str:
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        try:
            if isinstance(self.created_at, str):
                # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                clean_date = self.created_at.split('.')[0].replace('T', ' ')
                dt = datetime.fromisoformat(clean_date)
                return dt.strftime("%d.%m %H:%M")
            else:
                return "‚Äî"
        except Exception:
            return "‚Äî"
    
    @property
    def type_icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        return TranscriptMainConfig.TYPE_ICONS.get(self.source, "üìÑ")
    
    @property
    def type_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        return TranscriptMainConfig.TYPE_NAMES.get(self.source, "–§–∞–π–ª")
    
    def get_friendly_filename(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Returns:
            –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if self.original_filename:
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            name_without_ext = self.original_filename.rsplit('.', 1)[0]
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–æ–¥–µ "2025-05-21_10-01_file_362"
            if '_file_' in name_without_ext or name_without_ext.count('_') >= 2:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–∏–ø –∏ –¥–∞—Ç—É
                friendly_name = f"{self.type_icon} {self.type_name}"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ
                if len(name_without_ext) > TranscriptMainConfig.MAX_FILENAME_LENGTH:
                    friendly_name = f"{self.type_icon} {name_without_ext[:17]}..."
                else:
                    friendly_name = f"{self.type_icon} {name_without_ext}"
        else:
            # Fallback –∫ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            friendly_name = f"{self.type_icon} {self.type_name}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        if self.word_count and self.source == "text":
            friendly_name += f" ({self.word_count} —Å–ª.)"
        
        return f"{friendly_name} ‚Ä¢ {self.formatted_date}"


class UserRegistrationData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, telegram_user):
        self.telegram_user = telegram_user
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return {
            "id": self.telegram_user.id,
            "username": self.telegram_user.username,
            "first_name": self.telegram_user.first_name,
            "last_name": self.telegram_user.last_name,
            "language_code": self.telegram_user.language_code or "ru",
            "is_bot": self.telegram_user.is_bot,
            "is_premium": getattr(self.telegram_user, "is_premium", False)
        } 