"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""
from uuid import UUID

from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.core.logger import get_logger
from app.core.di import get_user_service
from app.core.database import get_session
from app.services.promokode_service import PromokodeService
from app.shared.decorators.auth_decorators import require_user

logger = get_logger(__name__)
router = Router()


from app.handlers.state import TranscribeStates

@router.message(F.text, TranscribeStates.waiting_promo_code)
@require_user()
async def handle_promo_code_message(message: Message, state: FSMContext, user=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ-–∫–æ–¥–æ–º
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ-–∫–æ–¥–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞)
    """
    try:
        promo_code = message.text.strip().upper()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–º–æ-–∫–æ–¥–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        async with get_session() as session:
            promo_service = PromokodeService(session)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            is_valid, error_msg, result = await promo_service.apply_promokode(
                code=promo_code,
                user_id=user.id
            )
            
            if is_valid:
                coins_added = result.get("total_coins_added", 0)
                success_text = f"""üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>

üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo_code}</code>
üí∞ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {coins_added} –º–æ–Ω–µ—Ç
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result.get('message', '–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω')}

‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é!
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ü–µ–Ω–æ–∫."""
                
                await message.answer(
                    success_text,
                    parse_mode="HTML"
                )
                
                logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: +{coins_added} –º–æ–Ω–µ—Ç")
                
            else:
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n{error_msg}",
                    parse_mode="HTML"
                )
                
                logger.info(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {error_msg}")
        
        await state.clear()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        await state.clear() 