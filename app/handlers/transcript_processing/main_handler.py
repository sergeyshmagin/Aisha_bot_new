"""
–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ app/handlers/transcript_processing.py (1007 —Å—Ç—Ä–æ–∫ ‚Üí –º–æ–¥—É–ª–∏)
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç AudioHandler, TextHandler, AIFormatter
"""

import logging
from datetime import datetime
from typing import Any, Dict, Optional

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.handlers.state import TranscribeStates
from app.handlers.transcript_base import TranscriptBaseHandler
from app.keyboards.transcript import get_back_to_menu_keyboard, get_transcript_actions_keyboard

from .ai_formatter import AIFormatter
from .audio_handler import AudioHandler
from .text_handler import TextHandler

logger = logging.getLogger(__name__)


class TranscriptProcessingHandler(TranscriptBaseHandler):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–æ–¥—É–ª–∏: AudioHandler, TextHandler, AIFormatter
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        super().__init__()
        self.router = Router()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        self.audio_handler = AudioHandler(self.get_session)
        self.text_handler = TextHandler(self.get_session)
        self.ai_formatter = AIFormatter(self.get_session)

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω TranscriptProcessingHandler —Å –º–æ–¥—É–ª—è–º–∏")

    async def register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è:
        - –û–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ (AudioHandler)
        - –û–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (TextHandler)
        - AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (AIFormatter)
        - –î–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º
        """
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤")

        # –í–ê–ñ–ù–û: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –†–ê–ù–¨–®–ï —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö!

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è - —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_text)
        self.router.message.register(
            self._handle_text_processing,
            F.document & F.document.mime_type.in_(["text/plain"]),
            StateFilter(TranscribeStates.waiting_text),
        )

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        self.router.message.register(self._handle_audio_universal, F.audio)

        self.router.message.register(self._handle_audio_universal, F.voice)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        self.router.message.register(self._handle_audio_document, F.document)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.router.callback_query.register(
            self._handle_transcript_format, F.data.startswith("transcript_format_")
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ (summary, todo, protocol)
        self.router.callback_query.register(
            self._handle_transcript_actions,
            F.data.startswith("transcript_summary_")
            | F.data.startswith("transcript_todo_")
            | F.data.startswith("transcript_protocol_"),
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
        self.router.callback_query.register(
            self._handle_back_to_transcribe_menu, F.data == "transcribe_back_to_menu"
        )

    # –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –º–æ–¥—É–ª—è–º
    async def _handle_audio_universal(self, message: Message, state: FSMContext) -> None:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –∫ AudioHandler"""
        await self.audio_handler.handle_audio_universal(message, state)

    async def _handle_audio_document(self, message: Message, state: FSMContext) -> None:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫ AudioHandler"""
        await self.audio_handler.handle_audio_document(message, state)

    async def _handle_text_processing(self, message: Message, state: FSMContext) -> None:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –∫ TextHandler"""
        await self.text_handler.handle_text_processing(message, state)

    async def _handle_transcript_actions(self, call: CallbackQuery, state: FSMContext) -> None:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ AIFormatter"""
        await self.ai_formatter.handle_transcript_actions(call, state)

    async def _handle_transcript_format(self, call: CallbackQuery, state: FSMContext) -> None:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ AIFormatter (legacy –º–µ—Ç–æ–¥)"""
        await self.ai_formatter.handle_transcript_format(call, state)

    async def _handle_back_to_transcribe_menu(self, call: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        await call.answer()
        await state.set_state(TranscribeStates.waiting_text)

    # –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    async def render_transcript_card(self, transcript: dict, telegram_id: int) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = transcript.get("metadata", {})
        file_name = metadata.get("file_name", "–§–∞–π–ª")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        created_at = transcript.get("created_at")
        async with self.get_session() as session:
            from app.core.di import get_timezone_handler_with_session

            tz_handler = get_timezone_handler_with_session(session)
            created_at_str = await tz_handler.format_metadata_date(
                {"created_at": created_at}, telegram_id
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
        source = metadata.get("source", "unknown")
        transcript_type = "–ê—É–¥–∏–æ" if source in ["audio", "voice"] else "–¢–µ–∫—Å—Ç"

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        word_count = metadata.get("word_count")
        if not word_count:
            text = transcript.get("text") or transcript.get("preview")
            if text:
                word_count = len(text.split())
            else:
                word_count = "‚Äî"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
        text_preview = transcript.get("preview")
        if not text_preview:
            text = transcript.get("text")
            if text:
                text_preview = text[:200] + "..." if len(text) > 200 else text
            else:
                text_preview = "‚Äî"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
        card = (
            f"<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç</b>\n"
            f"üìé –§–∞–π–ª: {file_name}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at_str}\n"
            f"üìù –¢–∏–ø: {transcript_type}\n"
            f"üìä –°–ª–æ–≤: {word_count}\n\n"
            f"¬´{text_preview}¬ª"
        )
        return card

    async def _send_transcript_result(
        self, message: Message, transcript: Dict[str, Any], status_message: Optional[Message] = None
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–π—Å—Ç–≤–∏–π.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            transcript: –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            status_message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if status_message:
                try:
                    await status_message.delete()
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –ë–î
            async with self.get_session() as session:
                from app.core.di import get_transcript_service, get_user_service_with_session
                from app.utils.uuid_utils import safe_uuid

                transcript_service = get_transcript_service(session)
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)

                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                transcript_id = safe_uuid(transcript.get("id"))
                if not transcript_id:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return

                content = await transcript_service.get_transcript_content(user.id, transcript_id)
                if not content:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return

                try:
                    text = content.decode("utf-8")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–≤—å—é –≤ transcript –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
                    transcript["text"] = text
                    transcript["preview"] = text[:300] + "..." if len(text) > 300 else text
                except UnicodeDecodeError as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                    return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–µ–≤—å—é)
            card_text = await self.render_transcript_card(transcript, message.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            transcript_id_str = str(transcript.get("id"))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = get_transcript_actions_keyboard(transcript_id_str)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            metadata = transcript.get("metadata", {})
            original_file_name = metadata.get("file_name", "transcript")

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ .txt
            if original_file_name.endswith((".ogg", ".mp3", ".wav", ".m4a", ".aac")):
                # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ .txt
                file_name = original_file_name.rsplit(".", 1)[0] + ".txt"
            elif not original_file_name.endswith(".txt"):
                file_name = original_file_name + ".txt"
            else:
                file_name = original_file_name

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∫–∞–∫ caption
            from aiogram.types import BufferedInputFile

            input_file = BufferedInputFile(content, filename=file_name)

            await message.answer_document(
                document=input_file, caption=card_text, reply_markup=keyboard, parse_mode="HTML"
            )

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å —Ñ–∞–π–ª–æ–º: {transcript_id_str}, —Ñ–∞–π–ª: {file_name}")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await message.answer(
                "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤.",
                reply_markup=get_back_to_menu_keyboard(),
            )
