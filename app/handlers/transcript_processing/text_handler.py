"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/transcript_processing.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import logging
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.handlers.state import TranscribeStates
from app.core.di import (
    get_text_processing_service,
    get_transcript_service,
    get_user_service_with_session
)
from app.keyboards.transcript import get_back_to_menu_keyboard

logger = logging.getLogger(__name__)

class TextHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    
    def __init__(self, get_session_func):
        """
        Args:
            get_session_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        """
        self.get_session = get_session_func
    
    async def handle_text_processing(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ .txt
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        logger.info(f"[TEXT] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç user_id={message.from_user.id}, state={await state.get_state()}")
        
        try:
            if not message.document:
                await message.reply(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return
                
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            if not await self._validate_text_file(message):
                return
                
            processing_msg = await message.answer("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
            await state.set_state(TranscribeStates.processing)

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            text, file_name = await self._download_and_read_file(message)
            
            if not text:
                await message.reply(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            processed_text = await self._process_text_content(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            transcript = await self._save_text_transcript(message, processed_text, text, file_name)
            
            if transcript:
                from .main_handler import TranscriptProcessingHandler
                handler = TranscriptProcessingHandler()
                await handler._send_transcript_result(message, transcript, processing_msg)
                await state.set_state(TranscribeStates.result)
            else:
                await message.reply(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
                    reply_markup=get_back_to_menu_keyboard()
                )

        except Exception as e:
            logger.exception(f"[TEXT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _validate_text_file(self, message: Message) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        file_name = message.document.file_name or ""
        mime_type = message.document.mime_type or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if not (mime_type == "text/plain" or file_name.lower().endswith(".txt")):
            await message.reply(
                f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞**\n\n"
                f"üìÅ –§–∞–π–ª: {file_name}\n"
                f"üè∑Ô∏è MIME —Ç–∏–ø: {mime_type}\n\n"
                f"‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
                f"üìù .txt —Ñ–∞–π–ª—ã (text/plain)\n\n"
                f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt",
                parse_mode="Markdown",
                reply_markup=get_back_to_menu_keyboard()
            )
            return False
        
        return True

    async def _download_and_read_file(self, message: Message) -> tuple[str, str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —á–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            file = await message.bot.get_file(message.document.file_id)
            file_bytes_io = await message.bot.download_file(file.file_path)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ UTF-8
            try:
                text = file_bytes_io.read().decode("utf-8")
            except UnicodeDecodeError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                file_bytes_io.seek(0)
                try:
                    text = file_bytes_io.read().decode("cp1251")
                except UnicodeDecodeError:
                    file_bytes_io.seek(0)
                    text = file_bytes_io.read().decode("latin-1")
            
            file_name = message.document.file_name or "text_file.txt"
            return text, file_name
            
        except Exception as e:
            logger.exception(f"[TEXT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return "", ""

    async def _process_text_content(self, text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ text_service"""
        try:
            async with self.get_session() as session:
                text_service = get_text_processing_service(session)
                processed_text = await text_service.process_text(text)
                return processed_text
        except Exception as e:
            logger.exception(f"[TEXT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            return text

    async def _save_text_transcript(self, message: Message, processed_text: str, original_text: str, file_name: str) -> dict:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –ë–î"""
        try:
            async with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                
                if not user:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = {
                        "id": message.from_user.id,
                        "username": message.from_user.username,
                        "first_name": message.from_user.first_name,
                        "last_name": message.from_user.last_name,
                        "language_code": message.from_user.language_code or "ru",
                        "is_bot": message.from_user.is_bot,
                        "is_premium": getattr(message.from_user, "is_premium", False)
                    }
                    user = await user_service.register_user(user_data)
                    if not user:
                        logger.error(f"[TEXT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
                        return None

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                transcript_service = get_transcript_service(session)
                transcript = await transcript_service.save_transcript(
                    user_id=user.id,
                    transcript_data=processed_text.encode('utf-8'),
                    metadata={
                        "source": "text",
                        "length": len(original_text),
                        "file_name": file_name,
                        "word_count": len(processed_text.split()) if processed_text else 0,
                        "file_size": len(original_text.encode('utf-8')),
                        "processing_method": "text_file"
                    }
                )
                
                return transcript
                
        except Exception as e:
            logger.exception(f"[TEXT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return None
