"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ
"""
from typing import Optional, Dict, Any
from uuid import UUID

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.handlers.state import TranscribeStates

from app.core.logger import get_logger
from app.core.di import get_user_service
from app.core.database import get_session
from app.core.exceptions.audio_exceptions import InsufficientBalanceError, AudioProcessingError
from app.services.transcription_service import PaidTranscriptionService
from app.services.promokode_service import PromokodeService
from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user

logger = get_logger(__name__)
router = Router()


class PaidTranscriptionHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    
    def __init__(self):
        super().__init__()
    
    async def show_transcription_quote(
        self, 
        message: Message, 
        audio_data: bytes, 
        file_info: Dict[str, Any],
        user_id: UUID,
        state: FSMContext = None
    ) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ü–µ–Ω–∫–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ
            audio_data: –î–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            file_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            async with get_session() as session:
                transcription_service = PaidTranscriptionService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏
                quote = await transcription_service.get_transcription_quote(audio_data)
                balance_estimate = await transcription_service.check_balance_and_estimate(user_id, audio_data)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                duration_str = f"{quote['duration_minutes']:.1f} –º–∏–Ω"
                if quote['duration_seconds'] < 60:
                    duration_str = f"{quote['duration_seconds']:.0f} —Å–µ–∫"
                
                size_mb = quote['file_size_mb']
                
                text = f"""üí∞ <b>–ü–ª–∞—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>

üìé <b>–§–∞–π–ª:</b> {file_info.get('file_name', '–∞—É–¥–∏–æ')}
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_str}
üì¶ <b>–†–∞–∑–º–µ—Ä:</b> {size_mb:.1f} –ú–ë
üîä <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {quote['quality_info']['sample_rate']} Hz, {quote['quality_info']['bitrate']} kbps

üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {quote['cost']:.0f} –º–æ–Ω–µ—Ç
üìä <b>–¢–∞—Ä–∏—Ñ:</b> {quote['cost_per_minute']:.0f} –º–æ–Ω–µ—Ç/–º–∏–Ω
üìù <b>~–°–ª–æ–≤:</b> {quote['estimate_words']}

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance_estimate['current_balance']:.0f} –º–æ–Ω–µ—Ç"""
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
                if balance_estimate['can_afford']:
                    text += f"\n‚úÖ <b>–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\nüí≥ –ö —Å–ø–∏—Å–∞–Ω–∏—é: {quote['cost']:.0f} –º–æ–Ω–µ—Ç"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {quote['cost']:.0f} –º–æ–Ω–µ—Ç",
                                callback_data=f"pay_transcription_{hash(str(audio_data[:100]))}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥",
                                callback_data=f"enter_promo_{hash(str(audio_data[:100]))}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∞",
                                callback_data="transcription_cancel"
                            )
                        ]
                    ])
                else:
                    shortage = balance_estimate['required_balance']
                    text += f"\n‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\nüí∏ –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç: {shortage:.0f} –º–æ–Ω–µ—Ç"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text=f"üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                callback_data="profile_topup_balance"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥",
                                callback_data=f"enter_promo_{hash(str(audio_data[:100]))}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∞",
                                callback_data="transcription_cancel"
                            )
                        ]
                    ])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                await self._store_audio_data(message.from_user.id, audio_data, file_info, quote)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
                if state:
                    await state.set_state(TranscribeStates.waiting_payment_confirmation)
                else:
                    # Fallback: —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç FSM –≤—Ä—É—á–Ω—É—é
                    from aiogram.fsm.context import FSMContext
                    from app.core.di import get_state_storage
                    
                    storage = get_state_storage()
                    manual_state = FSMContext(
                        storage=storage,
                        key=storage.make_key(
                            bot_id=message.bot.id,
                            chat_id=message.chat.id,
                            user_id=message.from_user.id
                        )
                    )
                    await manual_state.set_state(TranscribeStates.waiting_payment_confirmation)
                
                await message.answer(
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—Ü–µ–Ω–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    async def process_paid_transcription(
        self,
        callback: CallbackQuery,
        user_id: UUID
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        
        Args:
            callback: Callback —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É, –¥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            await callback.answer()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ
            audio_data, file_info, quote = await self._retrieve_audio_data(callback.from_user.id)
            
            if not audio_data:
                await callback.message.edit_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=None
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            await callback.message.edit_text(
                f"""üéµ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...</b>

üí≥ –°–ø–∏—Å—ã–≤–∞—é {quote['cost']:.0f} –º–æ–Ω–µ—Ç...
üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...

‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ {int(quote['duration_minutes']) + 1} –º–∏–Ω—É—Ç""",
                parse_mode="HTML"
            )
            
            async with get_session() as session:
                transcription_service = PaidTranscriptionService(session)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                result = await transcription_service.transcribe_with_payment(
                    user_id=user_id,
                    audio_data=audio_data,
                    language="ru",
                    metadata={
                        "source": file_info.get("source_type", "audio"),
                        "file_name": file_info.get("file_name", "audio"),
                        "file_size": file_info.get("file_size", 0),
                        "file_id": file_info.get("file_id"),
                        "processing_type": "paid_transcription"
                    }
                )
                
                if result["success"]:
                    # –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                    payment_info = result["payment_info"]
                    transcript_id = result.get("transcript_id")  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                    
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
                    text_preview = result["text"][:200] + "..." if len(result["text"]) > 200 else result["text"]
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞
                    combined_caption = f"""‚úÖ <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üí≥ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {payment_info['cost']:.0f} –º–æ–Ω–µ—Ç
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {payment_info['new_balance']:.0f} –º–æ–Ω–µ—Ç
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {payment_info['duration']:.0f} —Å–µ–∫

üìù <b>–ü—Ä–µ–≤—å—é:</b>
{text_preview}

üìé <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏</b>
üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>"""
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ–Ω—é
                    from aiogram.types import BufferedInputFile
                    from app.keyboards.transcript import get_transcript_actions_keyboard
                    
                    file_name = file_info.get("file_name", "transcript")
                    if not file_name.endswith(".txt"):
                        file_name = file_name.rsplit(".", 1)[0] + ".txt"
                    
                    input_file = BufferedInputFile(
                        result["text"].encode('utf-8'),
                        filename=file_name
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ caption
                    if transcript_id:
                        keyboard = get_transcript_actions_keyboard(transcript_id)
                    else:
                        keyboard = None
                        # –ï—Å–ª–∏ –Ω–µ—Ç transcript_id, —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
                        combined_caption = combined_caption.replace(
                            "\nüîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>", ""
                        )
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—Ü–µ–Ω–∫–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    await callback.message.delete()
                    await callback.message.answer_document(
                        document=input_file,
                        caption=combined_caption,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                    
                else:
                    await callback.message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏. "
                        "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
                    )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._clear_audio_data(callback.from_user.id)
            
        except InsufficientBalanceError as e:
            await callback.message.edit_text(
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n{str(e)}\n\n"
                "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.",
                parse_mode="HTML"
            )
            
        except AudioProcessingError as e:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ</b>\n\n{str(e)}",
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_promo_code_entry(self, callback: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        Args:
            callback: Callback –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            await callback.message.edit_text(
                "üéÅ <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞",
                            callback_data="transcription_cancel"
                        )
                    ]
                ])
            )
            
            await state.set_state(TranscribeStates.waiting_promo_code)
            await state.update_data({"callback_data": callback.data})
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def apply_promo_code(
        self, 
        message: Message, 
        state: FSMContext, 
        user_id: UUID
    ) -> None:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            promo_code = message.text.strip().upper()
            
            async with get_session() as session:
                promo_service = PromokodeService(session)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
                is_valid, error_msg, result = await promo_service.apply_promokode(
                    code=promo_code,
                    user_id=user_id
                )
                
                if is_valid:
                    coins_added = result.get("total_coins_added", 0)
                    success_text = f"""üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>

üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}
üí∞ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {coins_added} –º–æ–Ω–µ—Ç
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result.get('message', '–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω')}

‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é!"""
                    
                    await message.answer(
                        success_text,
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏",
                                    callback_data="refresh_transcription_quote"
                                )
                            ]
                        ])
                    )
                    
                else:
                    await message.answer(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n{error_msg}",
                        parse_mode="HTML"
                    )
            
            await state.clear()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
            await state.clear()
    
    async def _store_audio_data(
        self, 
        user_id: int, 
        audio_data: bytes, 
        file_info: Dict[str, Any], 
        quote: Dict[str, Any]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –≤ Redis –¥–ª—è production
        """
        try:
            from app.services.redis_storage import AudioDataRedisStorage
            storage = AudioDataRedisStorage()
            
            success = await storage.store_audio_data(
                user_id=user_id,
                audio_data=audio_data,
                file_info=file_info,
                quote=quote,
                ttl_seconds=3600  # 1 —á–∞—Å
            )
            
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            # Fallback –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—é –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è development
            if not hasattr(self, '_temp_storage'):
                self._temp_storage = {}
            
            self._temp_storage[user_id] = {
                'audio_data': audio_data,
                'file_info': file_info,
                'quote': quote
            }
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def _retrieve_audio_data(self, user_id: int) -> tuple:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –∏–∑ Redis –∏–ª–∏ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        try:
            from app.services.redis_storage import AudioDataRedisStorage
            storage = AudioDataRedisStorage()
            
            audio_data, file_info, quote = await storage.retrieve_audio_data(user_id)
            
            if audio_data is not None:
                return audio_data, file_info, quote
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ Redis: {e}")
        
        # Fallback –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—é –≤ –ø–∞–º—è—Ç–∏
        if hasattr(self, '_temp_storage'):
            data = self._temp_storage.get(user_id)
            if data:
                return data['audio_data'], data['file_info'], data['quote']
        
        return None, None, None
    
    async def _clear_audio_data(self, user_id: int) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –∏–∑ Redis –∏ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        try:
            from app.services.redis_storage import AudioDataRedisStorage
            storage = AudioDataRedisStorage()
            await storage.clear_audio_data(user_id)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if hasattr(self, '_temp_storage') and user_id in self._temp_storage:
            del self._temp_storage[user_id]


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@router.callback_query(F.data.startswith("pay_transcription_"))
@require_user()
async def handle_pay_transcription(callback: CallbackQuery, user=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    handler = PaidTranscriptionHandler()
    await handler.process_paid_transcription(callback, user.id)


@router.callback_query(F.data.startswith("enter_promo_"))
async def handle_enter_promo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback.message.edit_text(
        "üéÅ <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="transcription_cancel"
                )
            ]
        ])
    )
    
    await state.set_state(TranscribeStates.waiting_promo_code)
    await callback.answer()


@router.callback_query(F.data == "transcription_cancel")
async def handle_transcription_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ
    try:
        handler = PaidTranscriptionHandler()
        await handler._clear_audio_data(callback.from_user.id)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from app.handlers.main_menu import show_main_menu
    await show_main_menu(callback, state)
    
    await state.clear()
    await callback.answer("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "refresh_transcription_quote")
async def handle_refresh_quote(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback.message.edit_text(
        "üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ",
        reply_markup=None
    )
    await callback.answer() 