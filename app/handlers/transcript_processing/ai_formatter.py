"""
AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
–í—ã–¥–µ–ª–µ–Ω –∏–∑ app/handlers/transcript_processing.py –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ ‚â§500 —Å—Ç—Ä–æ–∫
"""
import logging
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from app.handlers.state import TranscribeStates
from app.core.di import (
    get_text_processing_service,
    get_transcript_service,
    get_user_service_with_session
)
from app.keyboards.transcript import get_back_to_transcript_keyboard, get_back_to_menu_keyboard
from app.utils.uuid_utils import safe_uuid

logger = logging.getLogger(__name__)

class AIFormatter:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    def __init__(self, get_session_func):
        """
        Args:
            get_session_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        """
        self.get_session = get_session_func
    
    async def handle_transcript_actions(self, call: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º: summary, todo, protocol
        """
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data: transcript_summary_<id>, transcript_todo_<id>, etc.
            parts = call.data.split("_", 2)
            if len(parts) < 3:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            action = parts[1]  # summary, todo, protocol
            transcript_id = safe_uuid(parts[2])
            
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if action not in ["summary", "todo", "protocol"]:
                await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ GPT
            await state.set_state(TranscribeStates.format_selection)
            processing_msg = await call.message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT...")

            # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            formatted_text, format_name, file_prefix = await self._process_transcript_formatting(
                call.from_user.id, transcript_id, action
            )
            
            if not formatted_text:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ñ–∞–π–ª
            await self._send_formatted_result(
                call.message, processing_msg, formatted_text, 
                format_name, file_prefix, transcript_id
            )
            
            await state.set_state(TranscribeStates.result)

        except Exception as e:
            logger.exception(f"[ACTIONS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await call.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def handle_transcript_format(self, call: CallbackQuery, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (legacy –º–µ—Ç–æ–¥)
        
        Args:
            call: CallbackQuery —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            data = call.data.split("_")
            if len(data) < 4:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return

            transcript_id = safe_uuid(data[2])
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return

            format_type = data[3]
            await state.set_state(TranscribeStates.format_selection)

            # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            formatted_text, _, _ = await self._process_transcript_formatting(
                call.from_user.id, transcript_id, format_type
            )
            
            if not formatted_text:
                await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            transcript = await self._save_formatted_transcript(
                call.from_user.id, formatted_text, transcript_id, format_type
            )

            if transcript:
                from .main_handler import TranscriptProcessingHandler
                handler = TranscriptProcessingHandler()
                await handler._send_transcript_result(call.message, transcript, None)
                await state.set_state(TranscribeStates.result)
            else:
                await call.message.reply(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
                    reply_markup=get_back_to_menu_keyboard()
                )

        except Exception as e:
            logger.exception(f"[FORMAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await state.set_state(TranscribeStates.error)
            await call.message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_menu_keyboard()
            )

    async def _process_transcript_formatting(self, user_telegram_id: int, transcript_id: str, action: str) -> tuple[str, str, str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ AI
        
        Returns:
            tuple: (formatted_text, format_name, file_prefix)
        """
        try:
            async with self.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                transcript_service = get_transcript_service(session)
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(user_telegram_id)
                
                if not user:
                    logger.error(f"[AI_FORMAT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_telegram_id}")
                    return "", "", ""
                    
                content = await transcript_service.get_transcript_content(user.id, transcript_id)
                if not content:
                    logger.error(f"[AI_FORMAT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_id}")
                    return "", "", ""

                text = content.decode('utf-8')
                text_service = get_text_processing_service(session)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI
                if action == "summary":
                    formatted_text = await text_service.format_summary(text)
                    format_name = "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
                    file_prefix = "summary"
                elif action == "todo":
                    formatted_text = await text_service.format_todo(text)
                    format_name = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
                    file_prefix = "todo"
                elif action == "protocol":
                    formatted_text = await text_service.format_protocol(text)
                    format_name = "–ü—Ä–æ—Ç–æ–∫–æ–ª"
                    file_prefix = "protocol"
                else:
                    logger.error(f"[AI_FORMAT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {action}")
                    return "", "", ""

                return formatted_text, format_name, file_prefix
                
        except Exception as e:
            logger.exception(f"[AI_FORMAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return "", "", ""

    async def _send_formatted_result(self, message, processing_msg, formatted_text: str, 
                                   format_name: str, file_prefix: str, transcript_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ñ–∞–π–ª"""
        try:
            file_data = formatted_text.encode('utf-8')
            input_file = BufferedInputFile(file_data, filename=f"{file_prefix}_{transcript_id}.txt")
            
            await processing_msg.delete()
            await message.answer_document(
                document=input_file,
                caption=f"üìÑ {format_name}",
                reply_markup=get_back_to_transcript_keyboard(transcript_id)
            )
            
        except Exception as e:
            logger.exception(f"[AI_FORMAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

    async def _save_formatted_transcript(self, user_telegram_id: int, formatted_text: str, 
                                       original_transcript_id: str, format_type: str) -> dict:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∫–∞–∫ –Ω–æ–≤—ã–π"""
        try:
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                
                formatted_transcript = await transcript_service.save_transcript(
                    user_id=user_telegram_id,
                    transcript_data=formatted_text.encode('utf-8'),
                    metadata={
                        "source": "format",
                        "original_id": str(original_transcript_id),
                        "format_type": format_type,
                        "word_count": len(formatted_text.split()) if formatted_text else 0,
                        "processing_method": "ai_formatting"
                    }
                )
                
                return formatted_transcript
                
        except Exception as e:
            logger.exception(f"[AI_FORMAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return None

    def get_format_display_name(self, format_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —Ç–∏–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        format_names = {
            "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            "todo": "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", 
            "protocol": "–ü—Ä–æ—Ç–æ–∫–æ–ª"
        }
        return format_names.get(format_type, format_type.title())

    def get_format_file_prefix(self, format_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–∏–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        prefixes = {
            "summary": "summary",
            "todo": "todo",
            "protocol": "protocol"
        }
        return prefixes.get(format_type, format_type)
