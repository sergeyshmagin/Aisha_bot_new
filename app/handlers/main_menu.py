from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.keyboards.main import get_main_menu
from app.core.di import get_user_service
from app.services.user import UserService
from app.core.logger import get_logger

logger = get_logger(__name__)
router = Router()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await state.clear()
    
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

ü§ñ –Ø Aisha Bot - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ò–ò.

‚ú® **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üé® –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ –∞–≤–∞—Ç–∞—Ä–∞–º–∏
‚Ä¢ üé≠ –û–±—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
‚Ä¢ üñºÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ!"""

    try:
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu()
        )
    except Exception as e:
        # Fallback –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.exception(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Aisha Bot!",
                reply_markup=get_main_menu()
            )
        except Exception as final_error:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {final_error}")

@router.callback_query(F.data == "main_menu")
async def show_main_menu(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    await state.clear()
    
    menu_text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    try:
        if call.message.photo:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            await call.message.edit_caption(
                caption=menu_text,
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )
            logger.debug("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ")
            
        elif call.message.text or call.message.caption:
            # ‚úÖ –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await call.message.edit_text(
                menu_text,
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )
            logger.debug("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç")
            
        else:
            # ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
            await call.message.answer(
                menu_text,
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )
            logger.debug("‚ö†Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø)")
            
    except TelegramBadRequest as markdown_error:
        if "parse entities" in str(markdown_error):
            # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            menu_text_plain = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            try:
                if call.message.photo:
                    await call.message.edit_caption(
                        caption=menu_text_plain,
                        reply_markup=get_main_menu()
                    )
                elif call.message.text or call.message.caption:
                    await call.message.edit_text(
                        menu_text_plain,
                        reply_markup=get_main_menu()
                    )
                else:
                    await call.message.answer(
                        menu_text_plain,
                        reply_markup=get_main_menu()
                    )
            except Exception as fallback_error:
                logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ fallback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {fallback_error}")
                await call.answer("‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é", show_alert=True)
                
        elif "there is no text in the message to edit" in str(markdown_error):
            # –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–±—É–µ–º edit_caption
            try:
                await call.message.edit_caption(
                    caption=menu_text.replace('**', ''),
                    reply_markup=get_main_menu()
                )
            except Exception:
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await call.message.answer(
                    menu_text.replace('**', ''),
                    reply_markup=get_main_menu()
                )
                
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram
            logger.warning(f"Telegram –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {markdown_error}")
            try:
                await call.message.answer(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_menu()
                )
            except Exception:
                await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)
                
    except Exception as general_error:
        logger.exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {general_error}")
        try:
            await call.message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
        except Exception:
            await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    await call.answer()

@router.callback_query(F.data == "avatar_menu")
async def show_avatar_menu(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤
    from app.handlers.avatar import avatar_main_handler
    
    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    await avatar_main_handler.show_avatar_menu(call, state)

@router.callback_query(F.data == "my_gallery")
async def show_my_gallery(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∞–ª–µ—Ä–µ–∏
    from app.handlers.gallery import gallery_handler
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–∞–ª–µ—Ä–µ–∏
    await gallery_handler.gallery_viewer.show_gallery_main(call, state)

@router.callback_query(F.data == "transcribe_menu")
async def show_transcribe_menu(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    await call.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...", show_alert=False)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    from app.handlers import transcript_main_handler
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —á–µ—Ä–µ–∑ call.message
    try:
        await state.set_state(None)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üé§ –ê—É–¥–∏–æ", callback_data="transcribe_audio"),
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="transcribe_text")
        )
        builder.row(InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="transcribe_history"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å HTML
        try:
            await call.message.edit_text(
                "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        except TelegramBadRequest as html_error:
            if "parse entities" in str(html_error):
                # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {html_error}")
                await call.message.edit_text(
                    "üéô –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode=None,
                    reply_markup=builder.as_markup()
                )
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - fallback
                logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {html_error}")
                await call.message.answer(
                    "üéô –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode=None,
                    reply_markup=builder.as_markup()
                )
        
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "main_help")
async def show_help(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É.
    """
    help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üé® **–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (30-90 —Å–µ–∫—É–Ω–¥)

üé≠ **–ê–≤–∞—Ç–∞—Ä—ã:**
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–∑ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã - –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –°—Ç–∏–ª–µ–≤—ã–µ –∞–≤–∞—Ç–∞—Ä—ã - –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤

üñºÔ∏è **–ì–∞–ª–µ—Ä–µ—è:**
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @support_username"""

    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if call.message.photo:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            await call.message.delete()
            await call.message.answer(
                help_text,
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )
            logger.debug("‚úÖ show_help: —É–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
            return
            
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await call.message.edit_text(
            help_text,
            reply_markup=get_main_menu(),
            parse_mode="Markdown"
        )
        
    except TelegramBadRequest as markdown_error:
        if "parse entities" in str(markdown_error):
            # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤ —Å–ø—Ä–∞–≤–∫–µ: {markdown_error}")
            
            # –£–±–∏—Ä–∞–µ–º Markdown —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
            help_text_plain = help_text.replace('**', '').replace('*', '')
            
            try:
                if call.message.photo:
                    # –î–ª—è —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await call.message.delete()
                    await call.message.answer(
                        help_text_plain,
                        reply_markup=get_main_menu(),
                        parse_mode=None
                    )
                else:
                    # –î–ª—è —Ç–µ–∫—Å—Ç–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await call.message.edit_text(
                        help_text_plain,
                        reply_markup=get_main_menu(),
                        parse_mode=None
                    )
                    
            except TelegramBadRequest as edit_error:
                if "there is no text in the message to edit" in str(edit_error):
                    # Finall fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.warning(f"Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø—Ä–∞–≤–∫–µ: {edit_error}")
                    await call.message.answer(
                        help_text_plain,
                        reply_markup=get_main_menu(),
                        parse_mode=None
                    )
                else:
                    logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ fallback —Å–ø—Ä–∞–≤–∫–µ: {edit_error}")
                    await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏", show_alert=True)
                    
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram - –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.exception(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏: {markdown_error}")
            help_text_plain = help_text.replace('**', '').replace('*', '')
            try:
                await call.message.answer(
                    help_text_plain,
                    reply_markup=get_main_menu(),
                    parse_mode=None
                )
            except Exception:
                await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–∫–∏", show_alert=True)
                
    except Exception as general_error:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π fallback
        logger.exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏: {general_error}")
        help_text_plain = help_text.replace('**', '').replace('*', '')
        try:
            await call.message.answer(
                help_text_plain,
                reply_markup=get_main_menu(),
                parse_mode=None
            )
        except Exception:
            await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("balance_details_"))
async def show_balance_details(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ.
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: balance_details_{added_amount}_{current_balance}
        parts = call.data.split("_")
        if len(parts) >= 4:
            added_amount = float(parts[2])
            current_balance = float(parts[3])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            details_text = (
                f"üí∞ –î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n\n"
                f"‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {added_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                f"üéØ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä (120-150 –∫—Ä–µ–¥–∏—Ç–æ–≤)\n"
                f"‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                f"‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ\n\n"
                f"‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
            )
            
            await call.answer(details_text, show_alert=True)
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.from_user.id}: +{added_amount}, –±–∞–ª–∞–Ω—Å: {current_balance}")
        else:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –±–∞–ª–∞–Ω—Å–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(call: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    await call.answer("üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", show_alert=False)
    
    menu_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    try:
        if call.message.photo:
            # ‚úÖ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            await call.message.edit_caption(
                caption=menu_text,
                reply_markup=get_main_menu()
            )
            logger.debug("‚úÖ back_to_main: –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ")
            
        elif call.message.text or call.message.caption:
            # ‚úÖ –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç  
            await call.message.edit_text(
                menu_text,
                reply_markup=get_main_menu()
            )
            logger.debug("‚úÖ back_to_main: –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç")
            
        else:
            # ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
            await call.message.answer(
                menu_text,
                reply_markup=get_main_menu()
            )
            logger.debug("‚ö†Ô∏è back_to_main: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
    except TelegramBadRequest as edit_error:
        # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ back_to_main: {edit_error}")
        
        try:
            if "there is no text in the message to edit" in str(edit_error):
                # –ü—Ä–æ–±—É–µ–º edit_caption –¥–ª—è —Ñ–æ—Ç–æ
                await call.message.edit_caption(
                    caption=menu_text,
                    reply_markup=get_main_menu()
                )
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await call.message.answer(
                    menu_text,
                    reply_markup=get_main_menu()
                )
        except Exception as send_error:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ back_to_main: {send_error}")
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é", show_alert=True)
            
    except Exception as general_error:
        logger.exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ back_to_main: {general_error}")
        try:
            await call.message.answer(
                menu_text,
                reply_markup=get_main_menu()
            )
        except Exception:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é", show_alert=True) 