"""
–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ - –∏—Å—Ç–æ—Ä–∏—è, –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç TranscriptProcessingHandler
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton  # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.handlers.transcript_base import TranscriptBaseHandler
from app.core.di import (
    get_audio_processing_service,
    get_text_processing_service,
    get_transcript_service,
    get_user_service_with_session,
)
from app.utils.uuid_utils import safe_uuid
from app.keyboards.transcript import get_transcript_menu_keyboard, get_back_to_menu_keyboard, get_transcript_actions_keyboard
from app.handlers.state import TranscribeStates

logger = logging.getLogger(__name__)


class TranscriptMainHandler(TranscriptBaseHandler):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ (FSM).
    """

    PAGE_SIZE = 5

    def __init__(self):
        self.router = Router()
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self._handle_history_command, Command("history"))
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        self.router.callback_query.register(self._handle_history_page, F.data.startswith("transcribe_history_page_"))
        self.router.callback_query.register(self._handle_open_transcript_cb, F.data.startswith("transcribe_open_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ transcribe_*)
        self.router.callback_query.register(
            self._handle_transcript_callback, 
            F.data.in_(["transcribe_audio", "transcribe_text", "transcribe_history"])
        )
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        self.router.callback_query.register(
            self._handle_back_to_transcribe_menu,
            F.data == "transcribe_back_to_menu"
        )

    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        self.router.message.register(self._handle_transcribe_command, Command("transcribe"))
        self.router.message.register(self._handle_transcribe_menu, StateFilter(TranscribeStates.menu), F.text == "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
        
        # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(
            self._handle_history_page,
            F.data.startswith("transcribe_history_page_")
        )
        
        self.router.callback_query.register(
            self._handle_open_transcript_cb,
            F.data.startswith("transcribe_open_")
        )
        
        self.router.callback_query.register(
            self._handle_transcript_callback,
            F.data.startswith("transcribe_")
        )

    async def _handle_transcribe_command(self, message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /transcribe
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            await state.set_state(TranscribeStates.menu)
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üé§ –ê—É–¥–∏–æ", callback_data="transcribe_audio"),
                InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="transcribe_text")
            )
            builder.row(InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="transcribe_history"))
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await message.answer(
                "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /transcribe: {e}")
            await state.set_state(TranscribeStates.error)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _handle_transcribe_menu(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        try:
            await state.set_state(TranscribeStates.menu)
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üé§ –ê—É–¥–∏–æ", callback_data="transcribe_audio"),
                InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="transcribe_text")
            )
            builder.row(InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="transcribe_history"))
            builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await message.answer(
                "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            await state.set_state(TranscribeStates.error)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _send_history_page(self, message_or_call, user_id: int, page: int = 0, edit: bool = False):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        logger.info(f"[SEND_HISTORY] –ù–∞—á–∞–ª–æ: user_id={user_id}, page={page}, edit={edit}")
        logger.info(f"[SEND_HISTORY] InlineKeyboardButton type: {type(InlineKeyboardButton)}")
        
        async with self.get_session() as session:
            transcript_service = get_transcript_service(session)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TranscriptService
            user_id_str = str(user_id) if not isinstance(user_id, str) else user_id
            transcripts = await transcript_service.list_transcripts(user_id_str, limit=self.PAGE_SIZE, offset=page * self.PAGE_SIZE)
            total = len(transcripts)
            logger.info(f"[SEND_HISTORY] –ü–æ–ª—É—á–µ–Ω–æ {total} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤")
            
            if not transcripts:
                text = "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤:\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ"
                kb = get_back_to_menu_keyboard()
                if edit and hasattr(message_or_call, 'message') and message_or_call.message.text:
                    try:
                        await message_or_call.message.edit_text(text, reply_markup=kb)
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message_or_call.message.answer(text, reply_markup=kb)
                else:
                    await message_or_call.answer(text, reply_markup=kb)
                return
                
            text = f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤</b> (—Å—Ç—Ä. {page+1}):\n\n"
            builder = InlineKeyboardBuilder()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
            for t in transcripts:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                btn_text = self._format_friendly_filename(t)
                
                # –Ø–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
                try:
                    btn = InlineKeyboardButton(text=btn_text, callback_data=f"transcribe_open_{t['id']}")
                    logger.info(f"[SEND_HISTORY] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {type(btn)}")
                    builder.row(btn)
                except Exception as e:
                    logger.error(f"[SEND_HISTORY] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
                    raise
                    
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            nav_buttons = []
            if page > 0:
                try:
                    back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"transcribe_history_page_{page-1}")
                    logger.info(f"[SEND_HISTORY] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥': {type(back_btn)}")
                    nav_buttons.append(back_btn)
                except Exception as e:
                    logger.error(f"[SEND_HISTORY] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
                    raise
                    
            if total == self.PAGE_SIZE:
                try:
                    forward_btn = InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"transcribe_history_page_{page+1}")
                    logger.info(f"[SEND_HISTORY] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–ø–µ—Ä—ë–¥': {type(forward_btn)}")
                    nav_buttons.append(forward_btn)
                except Exception as e:
                    logger.error(f"[SEND_HISTORY] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä—ë–¥': {e}")
                    raise
                    
            if nav_buttons:
                builder.row(*nav_buttons)
                
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            try:
                menu_btn = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu")
                logger.info(f"[SEND_HISTORY] –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é': {type(menu_btn)}")
                builder.row(menu_btn)
            except Exception as e:
                logger.error(f"[SEND_HISTORY] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é': {e}")
                raise
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if edit and hasattr(message_or_call, 'message') and message_or_call.message.text:
                try:
                    await message_or_call.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message_or_call.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await message_or_call.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
                
        logger.info(f"[SEND_HISTORY] –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    async def _handle_history_command(self, message: Message, state: FSMContext):
        """
        –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        async with self.get_session() as session:
            user_service = get_user_service_with_session(session)
            user = await user_service.get_user_by_telegram_id(message.from_user.id)
            if not user:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    "id": message.from_user.id,
                    "username": message.from_user.username,
                    "first_name": message.from_user.first_name,
                    "last_name": message.from_user.last_name,
                    "language_code": message.from_user.language_code or "ru",
                    "is_bot": message.from_user.is_bot,
                    "is_premium": getattr(message.from_user, "is_premium", False)
                }
                user = await user_service.register_user(user_data)
                if not user:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
            await self._send_history_page(message, str(user.id), page=0)

    async def _handle_history_page(self, call: CallbackQuery, state: FSMContext):
        """
        Callback –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            page = int(call.data.rsplit("_", 1)[-1])
            async with self.get_session() as session:
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                if not user:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = {
                        "id": call.from_user.id,
                        "username": call.from_user.username,
                        "first_name": call.from_user.first_name,
                        "last_name": call.from_user.last_name,
                        "language_code": call.from_user.language_code or "ru",
                        "is_bot": call.from_user.is_bot,
                        "is_premium": getattr(call.from_user, "is_premium", False)
                    }
                    user = await user_service.register_user(user_data)
                    if not user:
                        await call.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                        return
                await self._send_history_page(call, str(user.id), page=page, edit=True)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await call.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)

    async def _handle_open_transcript_cb(self, call: CallbackQuery, state: FSMContext):
        """
        Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            transcript_id = safe_uuid(call.data.replace("transcribe_open_", "").strip())
            if not transcript_id:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)
                return
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(call.from_user.id)
                if not user:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = {
                        "id": call.from_user.id,
                        "username": call.from_user.username,
                        "first_name": call.from_user.first_name,
                        "last_name": call.from_user.last_name,
                        "language_code": call.from_user.language_code or "ru",
                        "is_bot": call.from_user.is_bot,
                        "is_premium": getattr(call.from_user, "is_premium", False)
                    }
                    user = await user_service.register_user(user_data)
                    if not user:
                        await call.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                        return
                transcript = await transcript_service.get_transcript(str(user.id), transcript_id)
                if not transcript:
                    await call.answer("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                content = await transcript_service.get_transcript_content(str(user.id), transcript_id)
                if content:
                    try:
                        text = content.decode("utf-8")
                    except Exception:
                        text = None
                    if text:
                        transcript["preview"] = text[:300]
                from app.handlers.transcript_processing import TranscriptProcessingHandler
                card_text = TranscriptProcessingHandler().render_transcript_card(transcript)
                keyboard = get_transcript_actions_keyboard(str(transcript["id"]))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º —Ç–µ–∫—Å—Ç)
                if call.message.text:
                    try:
                        await call.message.edit_text(card_text, reply_markup=keyboard, parse_mode="HTML")
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await call.message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await call.message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (callback): {e}")
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞", show_alert=True)

    async def _handle_open_transcript(self, message: Message, state: FSMContext):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /open_{id} –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        """
        try:
            parts = message.text.strip().split("_", 1)
            if len(parts) != 2 or not parts[1]:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä: /open_<id>")
                return
            transcript_id = safe_uuid(parts[1])
            if not transcript_id:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return
            async with self.get_session() as session:
                transcript_service = get_transcript_service(session)
                user_service = get_user_service_with_session(session)
                user = await user_service.get_user_by_telegram_id(message.from_user.id)
                if not user:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = {
                        "id": message.from_user.id,
                        "username": message.from_user.username,
                        "first_name": message.from_user.first_name,
                        "last_name": message.from_user.last_name,
                        "language_code": message.from_user.language_code or "ru",
                        "is_bot": message.from_user.is_bot,
                        "is_premium": getattr(message.from_user, "is_premium", False)
                    }
                    user = await user_service.register_user(user_data)
                    if not user:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        return
                transcript = await transcript_service.get_transcript(str(user.id), transcript_id)
                if not transcript:
                    await message.answer("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                # –ü–æ–ª—É—á–∞–µ–º preview —Ç–µ–∫—Å—Ç–∞
                content = await transcript_service.get_transcript_content(str(user.id), transcript_id)
                if content:
                    try:
                        text = content.decode("utf-8")
                    except Exception:
                        text = None
                    if text:
                        transcript["preview"] = text[:300]
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ processing handler
                from app.handlers.transcript_processing import TranscriptProcessingHandler
                card_text = TranscriptProcessingHandler().render_transcript_card(transcript)
                keyboard = get_transcript_actions_keyboard(str(transcript["id"]))
                await message.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.")

    async def _handle_transcript_callback(self, call: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
        """
        try:
            # –ü–∞—Ä—Å–∏–º action –∏–∑ callback_data
            parts = call.data.split("_")
            if len(parts) < 2:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
                await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
                
            action = parts[1]
            
            if action == "audio":
                await state.set_state(TranscribeStates.waiting_audio)
                builder = InlineKeyboardBuilder()
                builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu"))
                
                await call.message.edit_text(
                    "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:",
                    reply_markup=builder.as_markup()
                )
                
            elif action == "text":
                await state.set_state(TranscribeStates.waiting_text)
                builder = InlineKeyboardBuilder()
                builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="transcribe_back_to_menu"))
                
                await call.message.edit_text(
                    "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                    reply_markup=builder.as_markup()
                )
                
            elif action == "history":
                try:
                    async with self.get_session() as session:
                        user_service = get_user_service_with_session(session)
                        user = await user_service.get_user_by_telegram_id(call.from_user.id)
                        if not user:
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_data = {
                                "id": call.from_user.id,
                                "username": call.from_user.username,
                                "first_name": call.from_user.first_name,
                                "last_name": call.from_user.last_name,
                                "language_code": call.from_user.language_code or "ru",
                                "is_bot": call.from_user.is_bot,
                                "is_premium": getattr(call.from_user, "is_premium", False)
                            }
                            user = await user_service.register_user(user_data)
                            if not user:
                                await call.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                                return
                        logger.info(f"[HISTORY] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id={user.id}")
                        await self._send_history_page(call, str(user.id), page=0, edit=True)
                        logger.info(f"[HISTORY] –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.exception(f"[HISTORY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    try:
                        await call.message.edit_text(
                            "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            parse_mode="HTML",
                            reply_markup=get_back_to_menu_keyboard()
                        )
                    except:
                        await call.message.answer(
                            "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            parse_mode="HTML",
                            reply_markup=get_back_to_menu_keyboard()
                        )
                
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}, –ø–æ–ª–Ω—ã–π callback: {call.data}")
                await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _handle_back_to_transcribe_menu(self, call: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        """
        try:
            await state.clear()
            try:
                await call.message.edit_text(
                    "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=get_transcript_menu_keyboard()
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç)
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {edit_error}")
                await call.message.answer(
                    "üéô <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=get_transcript_menu_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")

    def _format_friendly_filename(self, transcript_data: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            transcript_data: –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        """
        metadata = transcript_data.get("metadata", {})
        source = metadata.get("source", "unknown")
        created_at = transcript_data.get("created_at", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        original_filename = metadata.get("file_name", "")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            if isinstance(created_at, str):
                # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                clean_date = created_at.split('.')[0].replace('T', ' ')
                dt = datetime.fromisoformat(clean_date)
                date_str = dt.strftime("%d.%m %H:%M")
            else:
                date_str = "‚Äî"
        except Exception:
            date_str = "‚Äî"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –∏–∫–æ–Ω–∫—É
        if source == "audio":
            type_icon = "üéµ"
            type_name = "–ê—É–¥–∏–æ"
        else:
            type_icon = "üìù"
            type_name = "–¢–µ–∫—Å—Ç"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if original_filename:
            # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            name_without_ext = original_filename.rsplit('.', 1)[0]
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–æ–¥–µ "2025-05-21_10-01_file_362"
            if '_file_' in name_without_ext or name_without_ext.count('_') >= 2:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–∏–ø –∏ –¥–∞—Ç—É
                friendly_name = f"{type_icon} {type_name}"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ
                if len(name_without_ext) > 20:
                    friendly_name = f"{type_icon} {name_without_ext[:17]}..."
                else:
                    friendly_name = f"{type_icon} {name_without_ext}"
        else:
            # Fallback –∫ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            friendly_name = f"{type_icon} {type_name}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        word_count = metadata.get("word_count")
        if word_count and source == "text":
            friendly_name += f" ({word_count} —Å–ª.)"
        
        return f"{friendly_name} ‚Ä¢ {date_str}"
