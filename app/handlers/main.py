"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
"""
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("debug_avatars"))
async def debug_avatars_command(message: Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    await _debug_avatars_logic(message)

@router.message(Command("debug_avatar"))
async def debug_avatar_command(message: Message):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ (–±–µ–∑ 's')"""
    await _debug_avatars_logic(message)

async def _debug_avatars_logic(message: Message):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    try:
        from app.core.di import get_user_service, get_avatar_service
        
        user_telegram_id = str(message.from_user.id)
        
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(user_telegram_id)
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
        
        async with get_avatar_service() as avatar_service:
            avatars = await avatar_service.get_user_avatars(user.id)
            
            if not avatars:
                await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤")
                return
            
            debug_text = f"üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤** (User ID: `{str(user.id)[:8]}...`)\n\n"
            
            for i, avatar in enumerate(avatars, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                ready_for_generation = avatar.status.value == "completed"
                has_training_data = bool(avatar.diffusers_lora_file_url or avatar.finetune_id)
                
                status_icon = {
                    "draft": "üìù",
                    "uploading": "üì§", 
                    "ready": "‚è≥",
                    "training": "üîÑ",
                    "completed": "‚úÖ",
                    "error": "‚ùå",
                    "cancelled": "‚èπÔ∏è"
                }.get(avatar.status.value, "‚ùì")
                
                debug_text += f"**{i}. {avatar.name}** {status_icon}\n"
                debug_text += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: `{avatar.status.value}`\n"
                debug_text += f"   ‚Ä¢ –¢–∏–ø: `{avatar.training_type.value}`\n"
                debug_text += f"   ‚Ä¢ –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {'‚úÖ' if ready_for_generation else '‚ùå'}\n"
                debug_text += f"   ‚Ä¢ –ò–º–µ–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {'‚úÖ' if has_training_data else '‚ùå'}\n"
                
                if avatar.diffusers_lora_file_url:
                    debug_text += f"   ‚Ä¢ LoRA —Ñ–∞–π–ª: ‚úÖ\n"
                if avatar.finetune_id:
                    debug_text += f"   ‚Ä¢ Finetune ID: `{avatar.finetune_id}`\n"
                if avatar.fal_request_id:
                    debug_text += f"   ‚Ä¢ Request ID: `{avatar.fal_request_id[:8]}...`\n"
                
                debug_text += f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {avatar.training_progress}%\n"
                debug_text += f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {'‚úÖ' if avatar.is_main else '‚ùå'}\n"
                debug_text += f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω: {avatar.created_at.strftime('%d.%m %H:%M') if avatar.created_at else 'N/A'}\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            ready_avatars = [a for a in avatars if a.status.value == "completed"]
            if ready_avatars:
                debug_text += f"üéØ **–ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {len(ready_avatars)} –∏–∑ {len(avatars)}\n"
                debug_text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            else:
                debug_text += "‚ö†Ô∏è **–ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n"
                debug_text += "üí° –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"
            
            await message.reply(debug_text, parse_mode="Markdown")
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã debug_avatars: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}") 