"""
–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–∞–ª–µ—Ä–µ–∏ —Å Redis —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
"""
import json
from aiogram.fsm.state import State, StatesGroup
from typing import Dict, List, Set, Optional
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
from pydantic import BaseModel

from app.core.logger import get_logger

logger = get_logger(__name__)


class GalleryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    viewing = State()
    deleting = State()


class GalleryFilterStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏"""
    selecting_filters = State()
    waiting_custom_date = State()
    
    
@dataclass
class GalleryData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ –≤ –∫–µ—à–µ"""
    image_ids: List[str]  # ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ
    current_index: int  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    total_count: int  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    user_id: str  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters: Dict  # –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    

@dataclass  
class GalleryFilterData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    time_filter: Optional[str] = None  # today, week, month
    size_filters: Set[str] = None  # 1:1, 4:3, 3:4
    status_filters: Set[str] = None  # favorites, recent
    avatar_filters: Set[str] = None  # UUID –∞–≤–∞—Ç–∞—Ä–æ–≤
    active: bool = False  # –ê–∫—Ç–∏–≤–Ω—ã –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
    
    def __post_init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ None
        if self.size_filters is None:
            self.size_filters = set()
        if self.status_filters is None:
            self.status_filters = set()
        if self.avatar_filters is None:
            self.avatar_filters = set()
    
    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        self.time_filter = None
        self.size_filters.clear()
        self.status_filters.clear()
        self.avatar_filters.clear()
        self.active = False
    
    def has_filters(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        return bool(
            self.time_filter or 
            self.size_filters or 
            self.status_filters or 
            self.avatar_filters
        )
    
    def get_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        parts = []
        if self.time_filter:
            time_names = {"today": "–°–µ–≥–æ–¥–Ω—è", "week": "–ù–µ–¥–µ–ª—è", "month": "–ú–µ—Å—è—Ü"}
            parts.append(f"–í—Ä–µ–º—è: {time_names.get(self.time_filter, self.time_filter)}")
        if self.avatar_filters:
            parts.append(f"–ê–≤–∞—Ç–∞—Ä—ã: {len(self.avatar_filters)}")
        if self.size_filters:
            parts.append(f"–†–∞–∑–º–µ—Ä—ã: {', '.join(self.size_filters)}")
        if self.status_filters:
            status_names = {"favorites": "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ", "recent": "–ù–µ–¥–∞–≤–Ω–∏–µ"}
            status_text = [status_names.get(s, s) for s in self.status_filters]
            parts.append(f"–°—Ç–∞—Ç—É—Å: {', '.join(status_text)}")
        
        return " | ".join(parts) if parts else "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"


class GalleryStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –≥–∞–ª–µ—Ä–µ–∏ —Å Redis —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self._cache_service = None
    
    async def _get_cache_service(self):
        """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç cache_service –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if self._cache_service is None:
            from app.services.cache_service import cache_service
            self._cache_service = cache_service
        return self._cache_service
    
    # =============== –§–ò–õ–¨–¢–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===============
    
    async def get_user_filters(self, user_id: int) -> GalleryFilterData:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis"""
        try:
            cache_service = await self._get_cache_service()
            key = f"gallery_filters:{user_id}"
            
            data = await cache_service.get(key)
            if data:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ JSON
                filter_data = GalleryFilterData(
                    time_filter=data.get("time_filter"),
                    size_filters=set(data.get("size_filters", [])),
                    status_filters=set(data.get("status_filters", [])),
                    avatar_filters=set(data.get("avatar_filters", [])),
                    active=data.get("active", False)
                )
                logger.debug(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Redis")
                return filter_data
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            return GalleryFilterData()
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return GalleryFilterData()
    
    async def set_user_filters(self, user_id: int, filter_data: GalleryFilterData, ttl: int = 3600):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis (1 —á–∞—Å TTL)"""
        try:
            cache_service = await self._get_cache_service()
            key = f"gallery_filters:{user_id}"
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            data = {
                "time_filter": filter_data.time_filter,
                "size_filters": list(filter_data.size_filters),
                "status_filters": list(filter_data.status_filters),
                "avatar_filters": list(filter_data.avatar_filters),
                "active": filter_data.active,
                "updated_at": datetime.utcnow().isoformat()
            }
            
            await cache_service.set(key, data, ttl)
            logger.debug(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def clear_user_filters(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cache_service = await self._get_cache_service()
            key = f"gallery_filters:{user_id}"
            await cache_service.delete(key)
            logger.debug(f"üóëÔ∏è –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # =============== –î–ê–ù–ù–´–ï –ì–ê–õ–ï–†–ï–ò ===============
    
    async def get_gallery_data(self, cache_key: str) -> Optional[GalleryData]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ –ø–æ –∫–ª—é—á—É –∫–µ—à–∞"""
        try:
            cache_service = await self._get_cache_service()
            
            data = await cache_service.get(cache_key)
            if data:
                gallery_data = GalleryData(
                    image_ids=data["image_ids"],
                    current_index=data["current_index"], 
                    total_count=data["total_count"],
                    user_id=data["user_id"],
                    filters=data.get("filters", {})
                )
                logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ {cache_key} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Redis")
                return gallery_data
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ {cache_key}: {e}")
            return None
    
    async def set_gallery_data(self, cache_key: str, gallery_data: GalleryData, ttl: int = 1800):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ –≤ Redis (30 –º–∏–Ω—É—Ç TTL)"""
        try:
            cache_service = await self._get_cache_service()
            
            data = {
                "image_ids": gallery_data.image_ids,
                "current_index": gallery_data.current_index,
                "total_count": gallery_data.total_count,
                "user_id": gallery_data.user_id,
                "filters": gallery_data.filters,
                "cached_at": datetime.utcnow().isoformat()
            }
            
            await cache_service.set(cache_key, data, ttl)
            logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ {cache_key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ {cache_key}: {e}")
    
    async def update_gallery_index(self, cache_key: str, new_index: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏"""
        try:
            gallery_data = await self.get_gallery_data(cache_key)
            if gallery_data:
                gallery_data.current_index = new_index
                await self.set_gallery_data(cache_key, gallery_data)
                logger.debug(f"‚úÖ –ò–Ω–¥–µ–∫—Å –≥–∞–ª–µ—Ä–µ–∏ {cache_key} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_index}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –≥–∞–ª–µ—Ä–µ–∏ {cache_key}: {e}")
    
    async def delete_gallery_data(self, cache_key: str):
        """–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏"""
        try:
            cache_service = await self._get_cache_service()
            await cache_service.delete(cache_key)
            logger.debug(f"üóëÔ∏è –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ {cache_key} —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ {cache_key}: {e}")
    
    # =============== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ ===============
    
    async def cleanup_old_gallery_data(self, user_id: str, keep_recent_hours: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è garbage collection)"""
        try:
            cache_service = await self._get_cache_service()
            
            # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ pattern search –≤ cache_service
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            logger.info(f"üßπ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏: {e}")
    
    async def get_cache_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –≥–∞–ª–µ—Ä–µ–∏"""
        try:
            cache_service = await self._get_cache_service()
            return await cache_service.get_cache_stats()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: {e}")
            return {"error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
gallery_state_manager = GalleryStateManager()

# LEGACY: –£–¥–∞–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gallery_state_manager –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–∞–ª–µ—Ä–µ–∏
# Deprecated –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –≤ –ø–æ–ª—å–∑—É Redis-based —Ä–µ—à–µ–Ω–∏—è 