"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù)
"""
import aiohttp
import asyncio
from typing import List, Optional, Dict, Any, Tuple
from uuid import UUID
from datetime import datetime, timedelta

from aiogram.types import CallbackQuery, BufferedInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user
from app.core.logger import get_logger
from app.database.models.generation import ImageGeneration, GenerationStatus
from app.services.generation.generation_service import ImageGenerationService
from .keyboards import build_gallery_image_keyboard, build_empty_gallery_keyboard

logger = get_logger(__name__)


class UltraFastGalleryCache:
    """
    üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–´–ô –ö–≠–® –ì–ê–õ–ï–†–ï–ò
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ 15 –º–∏–Ω—É—Ç
    - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ (prefetch) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ 45 –º–∏–Ω—É—Ç
    - –ü–û–õ–ù–û–ï –∏–∑–±–µ–≥–∞–Ω–∏–µ SQL/HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self._images_cache = {}          # –ö—ç—à —Å–ø–∏—Å–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self._downloaded_cache = {}      # –ö—ç—à —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self._users_cache = {}           # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._prefetch_tasks = {}        # –ó–∞–¥–∞—á–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        self._session_data = {}          # –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SQL
    
    async def get_user_images(self, user_id: UUID) -> Optional[List[ImageGeneration]]:
        """üéØ –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        cache_key = f"user_{user_id}"
        cached_data = self._images_cache.get(cache_key)
        
        if cached_data:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫—ç—à–∞ –¥–æ 15 –º–∏–Ω—É—Ç –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if datetime.now() - cached_data['timestamp'] < timedelta(minutes=15):
                logger.debug(f"‚úÖ Images CACHE HIT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(cached_data['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return cached_data['images']
        
        return None
    
    async def set_user_images(self, user_id: UUID, images: List[ImageGeneration]):
        """üéØ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫—ç—à"""
        cache_key = f"user_{user_id}"
        
        self._images_cache[cache_key] = {
            'images': images,
            'timestamp': datetime.now()
        }
        logger.debug(f"‚úÖ Images CACHE SET –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    async def get_cached_image(self, url: str) -> Optional[bytes]:
        """üéØ –ü–æ–ª—É—á–∞–µ—Ç —Å–∫–∞—á–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        cached_data = self._downloaded_cache.get(url)
        
        if cached_data:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫—ç—à–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 45 –º–∏–Ω—É—Ç
            if datetime.now() - cached_data['timestamp'] < timedelta(minutes=45):
                logger.debug(f"‚úÖ IMAGE CACHE HIT: {url[:50]}... ({len(cached_data['data'])} –±–∞–π—Ç)")
                return cached_data['data']
        
        return None
    
    async def set_cached_image(self, url: str, data: bytes):
        """üéØ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫–∞—á–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à"""
        self._downloaded_cache[url] = {
            'data': data,
            'timestamp': datetime.now()
        }
        logger.debug(f"‚úÖ IMAGE CACHE SET: {url[:50]}... ({len(data)} –±–∞–π—Ç)")
    
    async def prefetch_adjacent_images(self, images: List[ImageGeneration], current_idx: int):
        """üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        
        prefetch_indices = []
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 3 –¥–æ 5)
        for offset in [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5]:
            idx = current_idx + offset
            if 0 <= idx < len(images):
                prefetch_indices.append(idx)
        
        # –¢–∞–∫–∂–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        import random
        random_indices = random.sample(range(len(images)), min(10, len(images)))
        for idx in random_indices:
            if idx not in prefetch_indices and idx != current_idx:
                prefetch_indices.append(idx)
        
        logger.debug(f"üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞: {len(prefetch_indices)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (current: {current_idx})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        priority_tasks = []  # –°–æ—Å–µ–¥–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        background_tasks = []  # –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        
        for idx in prefetch_indices:
            generation = images[idx]
            if generation.result_urls and len(generation.result_urls) > 0:
                url = generation.result_urls[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ
                if url not in self._downloaded_cache:
                    task_key = f"prefetch_{url}"
                    
                    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
                    if task_key not in self._prefetch_tasks:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Å–æ—Å–µ–¥–Ω–∏–µ vs —Å–ª—É—á–∞–π–Ω—ã–µ)
                        is_adjacent = abs(idx - current_idx) <= 5
                        
                        if is_adjacent:
                            task = asyncio.create_task(
                                self._prefetch_single_image_priority(url, high_priority=True)
                            )
                            priority_tasks.append(task)
                        else:
                            task = asyncio.create_task(
                                self._prefetch_single_image_priority(url, high_priority=False)
                            )
                            background_tasks.append(task)
                        
                        self._prefetch_tasks[task_key] = task
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
        if priority_tasks:
            asyncio.create_task(self._wait_priority_prefetch(priority_tasks))
    
    async def _wait_priority_prefetch(self, priority_tasks):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await asyncio.wait_for(
                asyncio.gather(*priority_tasks, return_exceptions=True),
                timeout=2.0
            )
            logger.debug("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except asyncio.TimeoutError:
            logger.debug("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    async def _prefetch_single_image_priority(self, url: str, high_priority: bool = True):
        """üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ
            cached = await self.get_cached_image(url)
            if cached:
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            timeout = 3 if high_priority else 8
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
                    if response.status == 200:
                        data = await response.read()
                        await self.set_cached_image(url, data)
                        priority_text = "HIGH" if high_priority else "LOW"
                        logger.debug(f"üöÄ PREFETCH {priority_text}: {url[:50]}... ({len(data)} –±–∞–π—Ç)")
                    elif response.status == 403:
                        # URL —É—Å—Ç–∞—Ä–µ–ª - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                        if high_priority:
                            updated_data = await self._try_refresh_minio_url_ultra_fast(url)
                            if updated_data:
                                await self.set_cached_image(url, updated_data)
                                logger.debug(f"üöÄ PREFETCH HIGH REFRESHED: {url[:50]}... ({len(updated_data)} –±–∞–π—Ç)")
                    else:
                        logger.debug(f"üöÄ PREFETCH FAILED: {url[:50]}... (HTTP {response.status})")
            
        except asyncio.TimeoutError:
            priority_text = "HIGH" if high_priority else "LOW"
            logger.debug(f"‚è±Ô∏è PREFETCH {priority_text} TIMEOUT: {url[:50]}...")
        except Exception as e:
            logger.debug(f"üöÄ PREFETCH ERROR: {url[:50]}... - {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            task_key = f"prefetch_{url}"
            if task_key in self._prefetch_tasks:
                del self._prefetch_tasks[task_key]
    
    async def set_session_data(self, user_id: UUID, data: Dict[str, Any]):
        """üéØ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self._session_data[user_id] = {
            'data': data,
            'timestamp': datetime.now()
        }
    
    async def get_session_data(self, user_id: UUID) -> Optional[Dict[str, Any]]:
        """üéØ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        cached_data = self._session_data.get(user_id)
        
        if cached_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ (30 –º–∏–Ω—É—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏)
            if datetime.now() - cached_data['timestamp'] < timedelta(minutes=30):
                return cached_data['data']
        
        return None
    
    async def cache_user_data(self, user_id: UUID, user_data: Any):
        """üéØ –ö—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self._users_cache[user_id] = {
            'data': user_data,
            'timestamp': datetime.now()
        }
    
    async def get_cached_user_data(self, user_id: UUID) -> Optional[Any]:
        """üéØ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        cached_data = self._users_cache.get(user_id)
        
        if cached_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ (15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            if datetime.now() - cached_data['timestamp'] < timedelta(minutes=15):
                return cached_data['data']
        
        return None
    
    async def clear_all_cache(self, user_id: UUID):
        """üßπ –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"user_{user_id}"
        if cache_key in self._images_cache:
            del self._images_cache[cache_key]
        
        if user_id in self._users_cache:
            del self._users_cache[user_id]
        
        if user_id in self._session_data:
            del self._session_data[user_id]
    
    async def set_user_gallery_state(self, user_id: UUID, current_index: int):
        """üéØ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≥–∞–ª–µ—Ä–µ–∏ –≤ Redis (fire-and-forget)"""
        try:
            from app.core.di import get_redis
            from datetime import datetime
            import json
            
            redis_client = await get_redis()
            
            state_key = f"gallery_state:{user_id}"
            state_data = {
                'current_index': current_index,
                'timestamp': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø (fire-and-forget)
            asyncio.create_task(redis_client.setex(
                state_key,
                1800,  # 30 –º–∏–Ω—É—Ç TTL
                json.dumps(state_data)
            ))
            
            logger.debug(f"üéØ Gallery state ASYNC SET: user {user_id}, index {current_index}")
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Redis state error (ignored): {e}")
    
    async def get_user_gallery_state(self, user_id: UUID) -> Optional[int]:
        """üéØ –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ Redis"""
        try:
            from app.core.di import get_redis
            import json
            
            redis_client = await get_redis()
            
            state_key = f"gallery_state:{user_id}"
            cached_state = await redis_client.get(state_key)
            
            if cached_state:
                state_data = json.loads(cached_state)
                current_index = state_data.get('current_index', 0)
                
                logger.debug(f"üéØ Gallery state RESTORED: user {user_id}, index {current_index}")
                return current_index
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Redis state error (ignored): {e}")
        
        return None


# üöÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä–æ–≥–æ –∫—ç—à–∞
ultra_gallery_cache = UltraFastGalleryCache()


class GalleryViewer(BaseHandler):
    """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–´–ô –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        # üî• –ù–ï —Å–æ–∑–¥–∞–µ–º generation_service –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –æ–Ω —Å–æ–∑–¥–∞–µ—Ç FAL –∫–ª–∏–µ–Ω—Ç–∞!
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
        self._generation_service = None
    
    @property
    def generation_service(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if self._generation_service is None:
            from app.services.generation.generation_service import ImageGenerationService
            self._generation_service = ImageGenerationService()
        return self._generation_service
    
    @require_user()
    async def show_gallery_main(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None,
        start_index: Optional[int] = None
    ):
        """üöÄ –ë–´–°–¢–†–´–ô –ø–æ–∫–∞–∑ –≥–∞–ª–µ—Ä–µ–∏ —Å –Ω–∞–¥–µ–∂–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        try:
            # üî• –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è (fire-and-forget)
            asyncio.create_task(self.safe_clear_state(state))
            
            # üéØ –°–ò–ù–•–†–û–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ—á–Ω–æ –±—ã–ª–∏ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            await ultra_gallery_cache.set_session_data(user.id, {
                'telegram_id': user.telegram_id,
                'id': str(user.id),
                'username': user.username or '',
                'first_name': user.first_name
            })
            
            # üéØ –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            asyncio.create_task(ultra_gallery_cache.cache_user_data(user.id, user))
            
            # üî• –ü–†–Ø–ú–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ë–ï–ó generation_service)
            images = await self._get_user_completed_images_ultra_fast(user.id)
            
            if not images:
                await self._show_empty_gallery_message(callback)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ë–ï–ó –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if start_index is not None:
                img_idx = max(0, min(start_index, len(images) - 1))
            else:
                # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ Redis (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI)
                try:
                    saved_index = await ultra_gallery_cache.get_user_gallery_state(user.id)
                    img_idx = saved_index if (saved_index is not None and saved_index < len(images)) else 0
                except:
                    img_idx = 0
            
            # üöÄ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
            asyncio.create_task(ultra_gallery_cache.prefetch_adjacent_images(images, img_idx))
            
            # ‚ö° –ü–û–ö–ê–ó–´–í–ê–ï–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û
            await self._send_image_card_ultra_ultra_fast(callback, images, img_idx, user.id)
            
            logger.info(f"‚ö° Gallery shown: user {user.telegram_id}, {len(images)} images, index {img_idx}")
            
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∞–ª–µ—Ä–µ–∏", show_alert=True)
    
    async def handle_image_navigation(self, callback: CallbackQuery, direction: str):
        """‚ö° –ë–´–°–¢–†–ê–Ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –Ω–∞–¥–µ–∂–Ω—ã–º–∏ fallback"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
            data_parts = callback.data.split(":")
            current_idx = int(data_parts[1])
            
            # üî• –£–†–û–í–ï–ù–¨ 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–º –∫—ç—à–µ
            user_id = None
            telegram_id = callback.from_user.id
            
            for cached_user_id, session_cache in ultra_gallery_cache._session_data.items():
                session_data = session_cache.get('data', {})
                if (session_data.get('telegram_id') == telegram_id and
                    datetime.now() - session_cache['timestamp'] < timedelta(minutes=30)):
                    user_id = cached_user_id
                    break
            
            # üî• –£–†–û–í–ï–ù–¨ 2: –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ SQL (fallback)
            if not user_id:
                logger.debug(f"Session cache miss, fallback to SQL for user {telegram_id}")
                user = await self.get_user_from_callback(callback, show_error=False)
                if not user:
                    await callback.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –≥–∞–ª–µ—Ä–µ—é", show_alert=True)
                    return
                
                user_id = user.id
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª–∏–∫–æ–≤
                await ultra_gallery_cache.set_session_data(user_id, {
                    'telegram_id': telegram_id,
                    'id': str(user_id),
                    'username': user.username or '',
                    'first_name': user.first_name
                })
                logger.debug(f"Session restored for user {user_id}")
            
            # üî• –£–†–û–í–ï–ù–¨ 3: –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—ç—à –∏–ª–∏ SQL fallback)
            images = await ultra_gallery_cache.get_user_images(user_id)
            if not images:
                logger.debug(f"Images cache miss, loading from DB for user {user_id}")
                images = await self._get_user_completed_images_ultra_fast(user_id)
                if not images:
                    await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                    return
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            if direction == "prev":
                new_idx = max(0, current_idx - 1)
            else:  # next
                new_idx = min(len(images) - 1, current_idx + 1)
            
            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if new_idx == current_idx:
                await callback.answer()
                return
            
            # üöÄ –ê–ì–†–ï–°–°–ò–í–ù–û –ü–†–ï–î–ó–ê–ì–†–£–ñ–ê–ï–ú —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
            asyncio.create_task(ultra_gallery_cache.prefetch_adjacent_images(images, new_idx))
            
            # ‚ö° –ü–û–ö–ê–ó–´–í–ê–ï–ú –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ
            await self._send_image_card_ultra_ultra_fast(callback, images, new_idx, user_id)
            
            logger.debug(f"‚ö° Navigation: {current_idx} ‚Üí {new_idx}")
            
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _send_image_card_ultra_ultra_fast(
        self, 
        callback: CallbackQuery, 
        images: List[ImageGeneration], 
        img_idx: int,
        user_id: UUID
    ):
        """‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨)"""
        
        generation = images[img_idx]
        
        # üéØ –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        text = self._format_image_card_text_fast(generation, img_idx, len(images))
        
        # üî• –ü–û–õ–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
        keyboard = self._build_optimized_gallery_keyboard_v2(
            img_idx=img_idx,
            total_images=len(images),
            generation_id=str(generation.id),
            is_favorite=getattr(generation, 'is_favorite', False)
        )
        
        # ‚ö° –ü–†–Ø–ú–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞ (–ë–ï–ó –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        if generation.result_urls:
            image_url = generation.result_urls[0]
            image_data = await ultra_gallery_cache.get_cached_image(image_url)
            
            if image_data:
                # –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞
                await self._send_card_with_image_lightning_fast(callback, text, keyboard, image_data)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–æ–Ω–µ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è
                asyncio.create_task(ultra_gallery_cache.set_user_gallery_state(user_id, img_idx))
                return
        
        # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await self._send_card_text_loading(callback, text, keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(ultra_gallery_cache.set_user_gallery_state(user_id, img_idx))
        if generation.result_urls:
            asyncio.create_task(self._async_load_and_update_image(callback, generation.result_urls[0], text, keyboard))
    
    def _format_image_card_text_fast(
        self, 
        generation: ImageGeneration, 
        img_idx: int, 
        total_images: int
    ) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        avatar_name = generation.avatar.name if generation.avatar and generation.avatar.name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_status = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" if getattr(generation, 'is_favorite', False) else ""
        
        # –†–∞–∑–º–µ—Ä
        aspect_ratio = getattr(generation, 'aspect_ratio', '1:1')
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text_parts = [
            f"üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_idx + 1} –∏–∑ {total_images}*",
            "",
            f"üé≠ *–ê–≤–∞—Ç–∞—Ä:* {avatar_name}",
            f"üìê *–†–∞–∑–º–µ—Ä:* {aspect_ratio}"
        ]
        
        if favorite_status:
            text_parts.append("")
            text_parts.append(favorite_status)
        
        return "\n".join(text_parts)
    
    def _build_optimized_gallery_keyboard_v2(
        self,
        img_idx: int, 
        total_images: int, 
        generation_id: str,
        is_favorite: bool = False
    ):
        """üî• –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ü–û–õ–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        buttons = []
        
        # üîù –ë–õ–û–ö 1: –§–∏–ª—å—Ç—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        top_row = [
            InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="gallery_filters"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gallery_stats")
        ]
        buttons.append(top_row)
        
        # üîÑ –ë–õ–û–ö 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        nav_row = []
        
        if img_idx > 0:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"gallery_image_prev:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="noop"))
        
        nav_row.append(InlineKeyboardButton(text=f"{img_idx + 1}/{total_images}", callback_data="noop"))
        
        if img_idx < total_images - 1:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"gallery_image_next:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="noop"))
        
        buttons.append(nav_row)
        
        # üìã –ë–õ–û–ö 3: –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        content_row = [
            InlineKeyboardButton(text="üìã –ü—Ä–æ–º–ø—Ç", callback_data=f"gallery_full_prompt:{generation_id}"),
            InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"gallery_regenerate:{generation_id}")
        ]
        buttons.append(content_row)
        
        # ‚≠ê –ë–õ–û–ö 4: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        action_row = []
        
        favorite_text = "‚ù§Ô∏è –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        action_row.append(InlineKeyboardButton(text=favorite_text, callback_data=f"gallery_favorite:{generation_id}"))
        action_row.append(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"gallery_delete:{generation_id}"))
        
        buttons.append(action_row)
        
        # üîô –ë–õ–û–ö 5: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
        back_row = [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
        buttons.append(back_row)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def _send_card_with_image_lightning_fast(
        self, 
        callback: CallbackQuery, 
        text: str, 
        keyboard, 
        image_data: bytes
    ):
        """‚ö° –ë–´–°–¢–†–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        try:
            image_file = BufferedInputFile(image_data, filename="img.jpg")
            
            if callback.message.photo:
                # ‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ (–ë–ï–ó –º–µ—Ä—Ü–∞–Ω–∏—è)
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=image_file, caption=text, parse_mode="Markdown"),
                    reply_markup=keyboard
                )
                logger.debug("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ edit_media (–±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è)")
                
            elif callback.message.text:
                # ‚úÖ –•–û–†–û–®–û: –£ –Ω–∞—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–æ—Ç–æ
                try:
                    await callback.message.edit_text(
                        text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
                        reply_markup=None
                    )
                    await asyncio.sleep(0.1)  # –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                    
                    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.debug("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                    
                except Exception as edit_error:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ: {edit_error}")
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.answer_photo(
                    photo=image_file,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
        except TelegramBadRequest as e:
            if "media" in str(e).lower() or "photo" in str(e).lower():
                logger.warning(f"–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ Telegram: {e}")
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                await self._send_image_fallback_with_button(callback, text, keyboard, image_data)
            else:
                logger.debug(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
                await self._send_card_text_loading(callback, text, keyboard)
                
        except Exception as e:
            logger.debug(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await self._send_card_text_loading(callback, text, keyboard)
    
    async def _send_image_fallback_with_button(
        self, 
        callback: CallbackQuery, 
        text: str, 
        keyboard, 
        image_data: bytes
    ):
        """Fallback: —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            fallback_text = f"{text}\n\nüì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É*\nüí° _–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫–∞–∑–∞_"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            new_buttons = []
            if hasattr(keyboard, 'inline_keyboard'):
                new_buttons = [row[:] for row in keyboard.inline_keyboard]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
            show_image_button = [
                InlineKeyboardButton(text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="show_current_image")
            ]
            new_buttons.insert(0, show_image_button)
            
            fallback_keyboard = InlineKeyboardMarkup(inline_keyboard=new_buttons)
            
            if callback.message.photo:
                # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç
                await callback.message.edit_caption(
                    caption=fallback_text,
                    reply_markup=fallback_keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    text=fallback_text,
                    reply_markup=fallback_keyboard,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ fallback —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            await self._send_card_text_loading(callback, text, keyboard)
    
    async def _send_card_text_loading(self, callback: CallbackQuery, text: str, keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        loading_text = f"{text}\n\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        
        try:
            if callback.message.photo:
                # ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ)
                await callback.message.edit_caption(
                    caption=loading_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ (loading)")
                
            elif callback.message.text:
                # ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                await callback.message.edit_text(
                    text=loading_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (loading)")
                
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    text=loading_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (loading)")
                
        except TelegramBadRequest as e:
            if "parse entities" in str(e):
                # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    if callback.message.photo:
                        await callback.message.edit_caption(
                            caption=loading_text.replace("*", "").replace("_", ""),
                            reply_markup=keyboard
                        )
                    elif callback.message.text:
                        await callback.message.edit_text(
                            text=loading_text.replace("*", "").replace("_", ""),
                            reply_markup=keyboard
                        )
                    else:
                        await callback.message.answer(
                            text=loading_text.replace("*", "").replace("_", ""),
                            reply_markup=keyboard
                        )
                except Exception:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
            else:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ loading: {e}")
                await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", show_alert=False)
                
        except Exception as e:
            logger.debug(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ loading: {e}")
            await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", show_alert=False)
    
    async def _async_load_and_update_image(self, callback: CallbackQuery, image_url: str, text: str, keyboard):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            image_data = await self._download_image_ultra_fast(image_url)
            
            if image_data:
                # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è)
                image_file = BufferedInputFile(image_data, filename="img.jpg")
                
                if callback.message.photo:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
                    await callback.message.edit_media(
                        media=InputMediaPhoto(media=image_file, caption=text, parse_mode="Markdown"),
                        reply_markup=keyboard
                    )
                    logger.debug("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ edit_media")
                    
                elif callback.message.text:
                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.debug("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.debug("‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                    
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π
                error_text = f"{text}\n\n‚ùå *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\nüí° _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_"
                
                if callback.message.photo:
                    await callback.message.edit_caption(
                        caption=error_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                elif callback.message.text:
                    await callback.message.edit_text(
                        text=error_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
                logger.debug("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø–æ–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å UX
    
    async def _download_image_ultra_fast(self, url: str) -> Optional[bytes]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        
        try:
            # üéØ –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = await ultra_gallery_cache.get_cached_image(url)
            if cached_data:
                logger.debug(f"üöÄ ULTRA FAST image load from cache: {len(cached_data)} bytes")
                return cached_data
            
            logger.debug(f"üîÑ Loading image from network: {url[:50]}...")
            
            # –ü–û–ü–´–¢–ö–ê 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
            image_data = await self._try_download_url(url)
            if image_data:
                await ultra_gallery_cache.set_cached_image(url, image_data)
                logger.debug(f"‚úÖ Image loaded and cached: {len(image_data)} bytes")
                return image_data
            
            # –ü–û–ü–´–¢–ö–ê 2: URL —É—Å—Ç–∞—Ä–µ–ª - –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ MinIO
            logger.debug(f"‚ö†Ô∏è Original URL failed, trying refresh: {url[:50]}...")
            updated_data = await self._try_refresh_minio_url_ultra_fast(url)
            if updated_data:
                await ultra_gallery_cache.set_cached_image(url, updated_data)
                logger.debug(f"‚úÖ Image refreshed and cached: {len(updated_data)} bytes")
                return updated_data
            
            # –ü–û–ü–´–¢–ö–ê 3: –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
            logger.debug(f"‚ö†Ô∏è Trying alternative URL paths: {url[:50]}...")
            alternative_data = await self._try_alternative_paths(url)
            if alternative_data:
                await ultra_gallery_cache.set_cached_image(url, alternative_data)
                logger.debug(f"‚úÖ Image loaded from alternative path: {len(alternative_data)} bytes")
                return alternative_data
            
            logger.warning(f"‚ùå All attempts failed for URL: {url[:50]}...")
            return None
                        
        except Exception as e:
            logger.debug(f"‚ùå Image load error: {url[:50]}... - {e}")
            return None
    
    async def _try_download_url(self, url: str, timeout: int = 5) -> Optional[bytes]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
                    if response.status == 200:
                        return await response.read()
                    elif response.status == 403:
                        logger.debug(f"URL expired (403): {url[:50]}...")
                        return None
                    else:
                        logger.debug(f"HTTP {response.status}: {url[:50]}...")
                        return None
        except asyncio.TimeoutError:
            logger.debug(f"Timeout loading: {url[:50]}...")
            return None
        except Exception as e:
            logger.debug(f"Error loading: {url[:50]}... - {e}")
            return None
    
    async def _try_alternative_paths(self, original_url: str) -> Optional[bytes]:
        """–ü—Ä–æ–±—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            from app.services.storage.minio import MinioStorage
            import urllib.parse
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed_url = urllib.parse.urlparse(original_url)
            path_parts = parsed_url.path.strip('/').split('/', 1)
            
            if len(path_parts) < 2:
                return None
            
            bucket = path_parts[0]
            object_name = path_parts[1].split('?')[0]
            
            storage = MinioStorage()
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            path_variants = [
                object_name,                        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                f"generated/{object_name}",         # –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º generated/
                object_name.replace("generated/", "") if "generated/" in object_name else f"images/{object_name}",
            ]
            
            for variant_path in path_variants:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if hasattr(storage, 'file_exists'):
                        exists = await storage.file_exists(bucket, variant_path)
                        if not exists:
                            continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL
                    new_url = await storage.generate_presigned_url(
                        bucket=bucket,
                        object_name=variant_path,
                        expires=3600
                    )
                    
                    if new_url:
                        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
                        image_data = await self._try_download_url(new_url, timeout=3)
                        if image_data:
                            logger.debug(f"‚úÖ Alternative path worked: {variant_path}")
                            return image_data
                            
                except Exception as variant_error:
                    logger.debug(f"Variant {variant_path} failed: {variant_error}")
                    continue
            
            return None
            
        except Exception as e:
            logger.debug(f"Alternative paths error: {e}")
            return None
    
    async def _try_refresh_minio_url_ultra_fast(self, old_url: str) -> Optional[bytes]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ MinIO URL"""
        
        try:
            from app.services.storage.minio import MinioStorage
            import urllib.parse
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed_url = urllib.parse.urlparse(old_url)
            path_parts = parsed_url.path.strip('/').split('/', 1)
            
            if len(path_parts) < 2:
                return None
            
            bucket = path_parts[0]
            object_name = path_parts[1].split('?')[0]
            
            # üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—É—Ç—å (–∏–∑ –ª–æ–≥–æ–≤ - "–≤–∞—Ä–∏–∞–Ω—Ç 2")
            correct_path = f"generated/{object_name}"
            
            storage = MinioStorage()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            new_url = await storage.generate_presigned_url(
                bucket=bucket,
                object_name=correct_path,
                expires=3600  # 1 —á–∞—Å (–≤–º–µ—Å—Ç–æ —Å—É—Ç–æ–∫)
            )
            
            if not new_url:
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –Ω–æ–≤–æ–º—É URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            async with aiohttp.ClientSession() as session:
                async with session.get(new_url, timeout=aiohttp.ClientTimeout(total=2)) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        logger.debug(f"üöÄ ULTRA FAST MinIO refresh: {len(image_data)} bytes")
                        return image_data
                    else:
                        return None
                        
        except Exception as e:
            logger.debug(f"‚ùå MinIO refresh error (ignored): {e}")
            return None
    
    async def _get_user_completed_images_ultra_fast(self, user_id: UUID) -> List[ImageGeneration]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è FAL –∫–ª–∏–µ–Ω—Ç–∞)"""
        
        try:
            # üéØ –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_images = await ultra_gallery_cache.get_user_images(user_id)
            if cached_images:
                logger.debug(f"üöÄ ULTRA FAST images from cache: {len(cached_images)} images")
                return cached_images
            
            # üî• –ü–†–Ø–ú–û–ô –∑–∞–ø—Ä–æ—Å –∫ –ë–î (–ë–ï–ó generation_service –∏ FAL –∫–ª–∏–µ–Ω—Ç–∞)
            logger.debug(f"üîÑ Direct DB query for user {user_id}")
            
            from app.core.database import get_session
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload
            
            async with get_session() as session:
                # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
                stmt = (
                    select(ImageGeneration)
                    .options(selectinload(ImageGeneration.avatar))
                    .where(
                        ImageGeneration.user_id == user_id,
                        ImageGeneration.status == GenerationStatus.COMPLETED,
                        ImageGeneration.result_urls.isnot(None)
                    )
                    .order_by(ImageGeneration.created_at.desc())
                    .limit(150)
                )
                
                result = await session.execute(stmt)
                generations = result.scalars().all()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                completed_images = [
                    gen for gen in generations
                    if (gen.result_urls and len(gen.result_urls) > 0)
                ]
            
            # üéØ –ö–≠–®–ò–†–£–ï–ú –Ω–∞ 15 –º–∏–Ω—É—Ç
            await ultra_gallery_cache.set_user_images(user_id, completed_images)
            
            logger.debug(f"üöÄ ULTRA FAST direct DB load: {len(completed_images)} images")
            return completed_images
            
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []

    def _format_image_card_text(
        self, 
        generation: ImageGeneration, 
        img_idx: int, 
        total_images: int
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)"""
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (–ë–ï–ó —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        avatar_name = generation.avatar.name if generation.avatar and generation.avatar.name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorite_status = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" if getattr(generation, 'is_favorite', False) else ""
        
        # –†–∞–∑–º–µ—Ä (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        aspect_ratio = getattr(generation, 'aspect_ratio', '1:1')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ë–ï–ó –ø—Ä–æ–º–ø—Ç–∞ (–µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–º–ø—Ç")
        text_parts = [
            f"üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_idx + 1} –∏–∑ {total_images}*",
            "",
            f"üé≠ *–ê–≤–∞—Ç–∞—Ä:* {avatar_name}",
            f"üìê *–†–∞–∑–º–µ—Ä:* {aspect_ratio}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if favorite_status:
            text_parts.append("")
            text_parts.append(favorite_status)
        
        return "\n".join(text_parts)
    
    async def _send_card_with_image_optimized(
        self, 
        callback: CallbackQuery, 
        text: str, 
        keyboard, 
        image_data: bytes
    ):
        """üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        
        try:
            image_file = BufferedInputFile(image_data, filename="gallery_image.jpg")
            
            # üéØ –ü–†–Ø–ú–û–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±)
            if callback.message.photo:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=image_file, caption=text, parse_mode="Markdown"),
                    reply_markup=keyboard
                )
            else:
                # –£–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–±—ã—Å—Ç—Ä–æ)
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                
                await callback.message.answer_photo(
                    photo=image_file,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        except TelegramBadRequest as markdown_error:
            if "parse entities" in str(markdown_error):
                # Fallback –±–µ–∑ Markdown
                logger.debug(f"Markdown error, using plain text: {markdown_error}")
                
                image_file = BufferedInputFile(image_data, filename="gallery_image.jpg")
                
                if callback.message.photo:
                    await callback.message.edit_media(
                        media=InputMediaPhoto(media=image_file, caption=text, parse_mode=None),
                        reply_markup=keyboard
                    )
                else:
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass
                    
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode=None
                    )
            else:
                logger.debug(f"Other Telegram error, fallback to text: {markdown_error}")
                await self._send_card_text_only(callback, text, keyboard)
        except Exception as e:
            logger.debug(f"Image send error, fallback to text: {e}")
            await self._send_card_text_only(callback, text, keyboard)
    
    async def _send_card_text_only(self, callback: CallbackQuery, text: str, keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)"""
        
        error_suffix = "\n\n‚ùå *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*"
        
        try:
            if callback.message.photo:
                # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                
                await callback.message.answer(
                    text=text + error_suffix,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    text=text + error_suffix,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        except TelegramBadRequest as markdown_error:
            if "parse entities" in str(markdown_error):
                # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤ —Ç–µ–∫—Å—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {markdown_error}")
                error_suffix_plain = "\n\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                
                try:
                    if callback.message.photo:
                        try:
                            await callback.message.delete()
                        except Exception:
                            pass
                        
                        await callback.message.answer(
                            text=text + error_suffix_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback.message.edit_text(
                            text=text + error_suffix_plain,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                except Exception as fallback_error:
                    logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ fallback –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {fallback_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏", show_alert=True)
            else:
                logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {markdown_error}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            await callback.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _show_empty_gallery_message(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ"""
        
        text = """üñºÔ∏è *–í–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞*

üé® *–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!*

üí° *–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–≤–æ–∏–º –ø—Ä–æ–º–ø—Ç–∞–º
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–º —Ñ–æ—Ç–æ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å—Ç–∏–ª–µ–π
‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏

üöÄ *–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*"""
        
        keyboard = build_empty_gallery_keyboard()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def show_full_prompt(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data
            data_parts = callback.data.split(":")
            generation_id_str = data_parts[1]
            generation_id = UUID(generation_id_str)
            
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ callback gallery_full_prompt: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback)
            if not user:
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–º–ø—Ç–∞")
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self.generation_service.get_generation_by_id(generation_id)
            if not generation:
                logger.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {generation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ ID –∫ UUID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            try:
                generation_user_id = UUID(str(generation.user_id)) if not isinstance(generation.user_id, UUID) else generation.user_id
                user_id_uuid = UUID(str(user.id)) if not isinstance(user.id, UUID) else user.id
                
                if generation_user_id != user_id_uuid:
                    logger.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {generation_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_uuid} (–≤–ª–∞–¥–µ–ª–µ—Ü: {generation_user_id})")
                    await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                    return
            except (ValueError, TypeError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –∫ UUID: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {generation.id}, –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(generation.final_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not generation.final_prompt:
                logger.warning(f"‚ùå –£ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç final_prompt")
                await callback.answer("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ –∫–æ–¥–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º
            prompt_text = f"""```
{generation.final_prompt}
```"""

            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ", callback_data=f"my_gallery_return:{str(generation_id)}"),
                    InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generation_menu")
                ]
            ])
            
            try:
                # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å Markdown
                await callback.message.reply(
                    prompt_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å Markdown –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
            except TelegramBadRequest as markdown_error:
                if "parse entities" in str(markdown_error):
                    # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML
                    logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –ø–∞—Ä—Å–∏–Ω–≥–æ–º, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ HTML: {markdown_error}")
                    
                    # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è HTML
                    html_text = f"""<pre>{generation.final_prompt}</pre>"""
                    
                    try:
                        await callback.message.reply(
                            html_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å HTML –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
                    except Exception as html_error:
                        # –£—Ä–æ–≤–µ–Ω—å 3: –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.exception(f"–û—à–∏–±–∫–∞ –∏ —Å HTML, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {html_error}")
                        
                        await callback.message.reply(
                            generation.final_prompt,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                        logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram
                    logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–º–ø—Ç–∞: {markdown_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
                    return
            
            await callback.answer("üìù –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            logger.info(f"üéØ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω callback gallery_full_prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
            
        except Exception as e:
            logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)

    def _build_optimized_gallery_keyboard(
        self,
        img_idx: int, 
        total_images: int, 
        generation_id: str,
        is_favorite: bool = False,
        user_id: str = ""
    ):
        """üî• –°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ë–ï–ó SQL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        buttons = []
        
        # üîù –ë–õ–û–ö 1: –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–∞–ª–µ—Ä–µ–µ (–Ω–∞–≤–µ—Ä—Ö—É)
        top_row = [
            InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="gallery_filters"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gallery_stats")
        ]
        buttons.append(top_row)
        
        # üîÑ –ë–õ–û–ö 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–ë–ï–ó user_id –≤ callback - –Ω–µ –Ω—É–∂–Ω–æ)
        nav_row = []
        
        if img_idx > 0:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"gallery_image_prev:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="noop"))
        
        nav_row.append(InlineKeyboardButton(text=f"{img_idx + 1}/{total_images}", callback_data="noop"))
        
        if img_idx < total_images - 1:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"gallery_image_next:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="noop"))
        
        buttons.append(nav_row)
        
        # üìã –ë–õ–û–ö 3: –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        content_row = [
            InlineKeyboardButton(text="üìã –ü—Ä–æ–º–ø—Ç", callback_data=f"gallery_full_prompt:{generation_id}"),
            InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"gallery_regenerate:{generation_id}")
        ]
        buttons.append(content_row)
        
        # ‚≠ê –ë–õ–û–ö 4: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        action_row = []
        
        favorite_text = "‚ù§Ô∏è –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        action_row.append(InlineKeyboardButton(text=favorite_text, callback_data=f"gallery_favorite:{generation_id}"))
        action_row.append(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"gallery_delete:{generation_id}"))
        
        buttons.append(action_row)
        
        # üîô –ë–õ–û–ö 5: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
        back_row = [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
        buttons.append(back_row)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons) 