"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
"""
import aiohttp
import asyncio
import random
from typing import List, Optional
from uuid import UUID

from app.core.logger import get_logger
from app.database.models import ImageGeneration
from .ultra_fast_cache import ultra_gallery_cache

logger = get_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–Ω–æ—Å–∏–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞)
PREFETCH_RANGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
RANDOM_PREFETCH_COUNT = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
PRIORITY_TIMEOUT = 3  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–µ–∫)
BACKGROUND_TIMEOUT = 8  # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–µ–∫)
PREFETCH_WAIT_TIMEOUT = 2  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ–∫)


class ImageCacheManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π"""
    
    def __init__(self):
        self._prefetch_tasks = {}  # –ó–∞–¥–∞—á–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    
    async def prefetch_adjacent_images(self, images: List[ImageGeneration], current_idx: int):
        """üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        
        prefetch_indices = []
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        for offset in range(-PREFETCH_RANGE, PREFETCH_RANGE + 1):
            if offset == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                continue
            idx = current_idx + offset
            if 0 <= idx < len(images):
                prefetch_indices.append(idx)
        
        # –¢–∞–∫–∂–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        random_indices = random.sample(range(len(images)), min(RANDOM_PREFETCH_COUNT, len(images)))
        for idx in random_indices:
            if idx not in prefetch_indices and idx != current_idx:
                prefetch_indices.append(idx)
        
        logger.debug(f"üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞: {len(prefetch_indices)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (current: {current_idx})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        priority_tasks = []  # –°–æ—Å–µ–¥–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        background_tasks = []  # –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        
        for idx in prefetch_indices:
            generation = images[idx]
            if generation.result_urls and len(generation.result_urls) > 0:
                url = generation.result_urls[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ
                cached_image = await ultra_gallery_cache.get_cached_image(url)
                if not cached_image:
                    task_key = f"prefetch_{url}"
                    
                    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
                    if task_key not in self._prefetch_tasks:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Å–æ—Å–µ–¥–Ω–∏–µ vs —Å–ª—É—á–∞–π–Ω—ã–µ)
                        is_adjacent = abs(idx - current_idx) <= PREFETCH_RANGE
                        
                        if is_adjacent:
                            task = asyncio.create_task(
                                self._prefetch_single_image_priority(url, high_priority=True)
                            )
                            priority_tasks.append(task)
                        else:
                            task = asyncio.create_task(
                                self._prefetch_single_image_priority(url, high_priority=False)
                            )
                            background_tasks.append(task)
                        
                        self._prefetch_tasks[task_key] = task
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
        if priority_tasks:
            asyncio.create_task(self._wait_priority_prefetch(priority_tasks))
    
    async def _wait_priority_prefetch(self, priority_tasks):
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await asyncio.wait_for(
                asyncio.gather(*priority_tasks, return_exceptions=True),
                timeout=PREFETCH_WAIT_TIMEOUT
            )
            logger.debug("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except asyncio.TimeoutError:
            logger.debug("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    async def _prefetch_single_image_priority(self, url: str, high_priority: bool = True):
        """üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ
            cached = await ultra_gallery_cache.get_cached_image(url)
            if cached:
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            timeout = PRIORITY_TIMEOUT if high_priority else BACKGROUND_TIMEOUT
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
                    if response.status == 200:
                        data = await response.read()
                        await ultra_gallery_cache.set_cached_image(url, data)
                        priority_text = "HIGH" if high_priority else "LOW"
                        logger.debug(f"üöÄ PREFETCH {priority_text}: {url[:50]}... ({len(data)} –±–∞–π—Ç)")
                    elif response.status == 403:
                        # URL —É—Å—Ç–∞—Ä–µ–ª - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                        if high_priority:
                            updated_data = await self._try_refresh_minio_url_ultra_fast(url)
                            if updated_data:
                                await ultra_gallery_cache.set_cached_image(url, updated_data)
                                logger.debug(f"üöÄ PREFETCH HIGH REFRESHED: {url[:50]}... ({len(updated_data)} –±–∞–π—Ç)")
                    else:
                        logger.debug(f"üöÄ PREFETCH FAILED: {url[:50]}... (HTTP {response.status})")
            
        except asyncio.TimeoutError:
            priority_text = "HIGH" if high_priority else "LOW"
            logger.debug(f"‚è±Ô∏è PREFETCH {priority_text} TIMEOUT: {url[:50]}...")
        except Exception as e:
            logger.debug(f"üöÄ PREFETCH ERROR: {url[:50]}... - {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            task_key = f"prefetch_{url}"
            if task_key in self._prefetch_tasks:
                del self._prefetch_tasks[task_key]
    
    async def _try_refresh_minio_url_ultra_fast(self, old_url: str) -> Optional[bytes]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ MinIO URL"""
        
        try:
            from app.services.storage.minio import MinioStorage
            import urllib.parse
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed_url = urllib.parse.urlparse(old_url)
            path_parts = parsed_url.path.strip('/').split('/', 1)
            
            if len(path_parts) < 2:
                return None
            
            bucket = path_parts[0]
            object_name = path_parts[1].split('?')[0]
            
            # üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—É—Ç—å (–∏–∑ –ª–æ–≥–æ–≤ - "–≤–∞—Ä–∏–∞–Ω—Ç 2")
            correct_path = f"generated/{object_name}"
            
            storage = MinioStorage()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            new_url = await storage.generate_presigned_url(
                bucket=bucket,
                object_name=correct_path,
                expires=3600  # 1 —á–∞—Å (–≤–º–µ—Å—Ç–æ —Å—É—Ç–æ–∫)
            )
            
            if not new_url:
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –Ω–æ–≤–æ–º—É URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            async with aiohttp.ClientSession() as session:
                async with session.get(new_url, timeout=aiohttp.ClientTimeout(total=2)) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        logger.debug(f"üöÄ ULTRA FAST MinIO refresh: {len(image_data)} bytes")
                        return image_data
                    else:
                        return None
                        
        except Exception as e:
            logger.debug(f"‚ùå MinIO refresh error (ignored): {e}")
            return None 