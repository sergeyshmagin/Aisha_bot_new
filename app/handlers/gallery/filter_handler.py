"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
"""
from datetime import datetime
from typing import Dict, List, Optional
from uuid import UUID

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.core.logger import get_logger
from app.services.gallery_service import gallery_service
from app.handlers.gallery.states import GalleryFilterStates, GalleryFilterData, GalleryData, gallery_state_manager
from .gallery_viewer import GalleryViewer
from .gallery_manager import GalleryManager

logger = get_logger(__name__)

router = Router()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
gallery_viewer = GalleryViewer()
gallery_manager = GalleryManager()


class GalleryFilterHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
    
    async def show_filter_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏"""
        try:
            text = """üîç **–§–∏–ª—å—Ç—Ä—ã –≥–∞–ª–µ—Ä–µ–∏**

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:

üìÖ **–ü–æ –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ –ó–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã

üìê **–ü–æ —Ä–∞–∑–º–µ—Ä—É:**
‚Ä¢ –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ (1:1)
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ (3:4, 9:16)
‚Ä¢ –ê–ª—å–±–æ–º–Ω—ã–µ (4:3, 16:9)

üé≠ **–ü–æ –∞–≤–∞—Ç–∞—Ä—É:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
‚Ä¢ –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÖ –ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="filter_time"),
                    InlineKeyboardButton(text="üìê –ü–æ —Ä–∞–∑–º–µ—Ä—É", callback_data="filter_size")
                ],
                [
                    InlineKeyboardButton(text="üé≠ –ü–æ –∞–≤–∞—Ç–∞—Ä—É", callback_data="filter_avatar")
                ],
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_filters"),
                    InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_filters")
                ],
                [
                    InlineKeyboardButton(text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ", callback_data="my_gallery")
                ]
            ])

            await self._safe_send_message(callback, text, keyboard)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤", show_alert=True)

    async def _safe_send_message(self, callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)"""
        try:
            # –£—Ä–æ–≤–µ–Ω—å 1: –ü–æ–ø—ã—Ç–∫–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
            else:
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
                
        except TelegramBadRequest as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {e}")
            try:
                # –£—Ä–æ–≤–µ–Ω—å 2: Fallback –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                plain_text = text.replace("*", "").replace("_", "").replace("`", "")
                if callback.message.photo:
                    await callback.message.delete()
                    await callback.message.answer(plain_text, reply_markup=keyboard)
                else:
                    await callback.message.edit_text(plain_text, reply_markup=keyboard)
                    
            except Exception as fallback_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
                # –£—Ä–æ–≤–µ–Ω—å 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback
                try:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ –≥–∞–ª–µ—Ä–µ—é.")
                except:
                    pass


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
gallery_filter_handler = GalleryFilterHandler()


@router.callback_query(F.data == "gallery_filters")
async def handle_gallery_filters(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ callback –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ callback gallery_filters –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await gallery_filter_handler.show_filter_menu(callback, state)


@router.callback_query(F.data == "filter_time")
async def handle_filter_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    text = """üìÖ **–§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥:"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞ –¥–µ–Ω—å", callback_data="time_day"),
            InlineKeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="time_week")
        ],
        [
            InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="time_month"),
            InlineKeyboardButton(text="–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="time_all")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="gallery_filters")
        ]
    ])

    await gallery_filter_handler._safe_send_message(callback, text, keyboard)


@router.callback_query(F.data == "filter_size")
async def handle_filter_size(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
    text = """üìê **–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨õ –ö–≤–∞–¥—Ä–∞—Ç 1:1", callback_data="size_1_1")
        ],
        [
            InlineKeyboardButton(text="üì± –ü–æ—Ä—Ç—Ä–µ—Ç 3:4", callback_data="size_3_4"),
            InlineKeyboardButton(text="üì± –ü–æ—Ä—Ç—Ä–µ—Ç 9:16", callback_data="size_9_16")
        ],
        [
            InlineKeyboardButton(text="üñºÔ∏è –ê–ª—å–±–æ–º 4:3", callback_data="size_4_3"),
            InlineKeyboardButton(text="üñºÔ∏è –ê–ª—å–±–æ–º 16:9", callback_data="size_16_9")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="gallery_filters")
        ]
    ])

    await gallery_filter_handler._safe_send_message(callback, text, keyboard)


@router.callback_query(F.data == "filter_avatar")
async def handle_filter_avatar(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∞–≤–∞—Ç–∞—Ä—É"""
    await callback.answer("üöß –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤–∞—Ç–∞—Ä–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
@router.callback_query(F.data.startswith("time_"))
async def handle_time_filter_value(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    value = callback.data.replace("time_", "")
    await callback.answer(f"üöß –§–∏–ª—å—Ç—Ä '{value}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data.startswith("size_"))
async def handle_size_filter_value(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    value = callback.data.replace("size_", "").replace("_", ":")
    await callback.answer(f"üöß –§–∏–ª—å—Ç—Ä —Ä–∞–∑–º–µ—Ä–∞ '{value}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "apply_filters")
async def apply_filters(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "reset_filters")
async def reset_filters(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
    await callback.answer("üóëÔ∏è –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã", show_alert=True)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–∞–ª–µ—Ä–µ–µ
    await handle_gallery_filters(callback, state) 