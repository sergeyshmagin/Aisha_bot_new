"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏
"""
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from uuid import UUID

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.core.logger import get_logger
from app.services.gallery_service import gallery_service
from app.handlers.gallery.states import GalleryFilterStates, GalleryFilterData, GalleryData, gallery_state_manager
from .gallery_viewer import GalleryViewer
from .gallery_manager import GalleryManager
from app.shared.utils.telegram_utils import safe_edit_callback_message

logger = get_logger(__name__)

router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
gallery_viewer = GalleryViewer()
gallery_manager = GalleryManager()


class GalleryFilterHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏"""
    
    def __init__(self):
        self.gallery_viewer = GalleryViewer()
        self.gallery_manager = GalleryManager()
    
    async def _save_filters_to_cache(self, telegram_id: int, filters: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫—ç—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
            from app.core.di import get_user_service
            async with get_user_service() as user_service:
                user = await user_service.get_user_by_telegram_id(telegram_id)
                if not user:
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
                from app.core.di import get_redis
                import json
                
                redis = await get_redis()
                cache_key = f"gallery:active_filters:{user.id}"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                existing_filters_json = await redis.get(cache_key)
                if existing_filters_json:
                    existing_filters = json.loads(existing_filters_json)
                    existing_filters.update(filters)
                else:
                    existing_filters = filters
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                await redis.setex(cache_key, 3600, json.dumps(existing_filters))  # 1 —á–∞—Å
                logger.debug(f"üîç –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {existing_filters}")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∫—ç—à: {e}")
    
    async def show_gallery_with_type_filter(self, callback: CallbackQuery, state: FSMContext, generation_type: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–∏–ø—É"""
        try:
            # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏
            await state.update_data(generation_type=generation_type)
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫—ç—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await self._save_filters_to_cache(callback.from_user.id, {'generation_type': generation_type})
            
            from .viewer.main import GalleryViewer
            gallery_viewer = GalleryViewer()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
            await gallery_viewer.show_gallery_main(callback, state)
            
            logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –≥–∞–ª–µ—Ä–µ—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–∏–ø—É: {generation_type}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–∏–ø—É: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def show_date_filter_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="gallery_date:today"),
                InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="gallery_date:yesterday")
            ],
            [
                InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="gallery_date:week"),
                InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="gallery_date:month")
            ],
            [
                InlineKeyboardButton(text="üìÖ –°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="gallery_date:custom"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gallery_all")
            ]
        ])
        
        await safe_edit_callback_message(
            callback,
            text="üìÖ **–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def show_filter_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        filters = {
            'generation_type': state_data.get('generation_type'),
            'start_date': state_data.get('start_date'),
            'end_date': state_data.get('end_date')
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_info = []
        if filters.get('generation_type'):
            if filters['generation_type'] == 'avatar':
                filter_info.append("üë§ –§–æ—Ç–æ —Å–æ –º–Ω–æ–π")
            elif filters['generation_type'] == 'imagen4':
                filter_info.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        if filters.get('start_date') or filters.get('end_date'):
            filter_info.append("üìÖ –ü–æ –¥–∞—Ç–µ")
        
        if filter_info:
            filter_text = f"üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**\n‚Ä¢ {chr(10).join(filter_info)}\n\n"
        else:
            filter_text = ""
        
        text = f"{filter_text}üîç **–§–∏–ª—å—Ç—Ä—ã –≥–∞–ª–µ—Ä–µ–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé≠ –ü–æ —Ç–∏–ø—É", callback_data="gallery_filter_type"),
                InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="gallery_filter_date")
            ],
            [
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="gallery_reset_filters"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="all_photos")
            ]
        ])
        
        await safe_edit_callback_message(
            callback,
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    async def show_gallery_with_date_filter(self, callback: CallbackQuery, state: FSMContext, start_date, end_date):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ"""
        try:
            # –í–ê–ñ–ù–û: –§–∏–ª—å—Ç—Ä—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ handle_date_filter
            # –ù–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ—â–µ —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            await state.update_data(
                start_date=start_date.isoformat() if start_date else None,
                end_date=end_date.isoformat() if end_date else None
            )
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫—ç—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            date_filters = {
                'start_date': start_date.isoformat() if start_date else None,
                'end_date': end_date.isoformat() if end_date else None
            }
            await self._save_filters_to_cache(callback.from_user.id, date_filters)
            
            from .viewer.main import GalleryViewer
            gallery_viewer = GalleryViewer()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
            await gallery_viewer.show_gallery_main(callback, state)
            
            logger.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –≥–∞–ª–µ—Ä–µ—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ: {start_date} - {end_date}")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
gallery_filter_handler = GalleryFilterHandler()

# ==================== –§–ò–õ–¨–¢–†–´ –ü–û –¢–ò–ü–£ ====================

@router.callback_query(F.data == "gallery_filter_type")
async def show_type_filter_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –§–æ—Ç–æ —Å–æ –º–Ω–æ–π", callback_data="gallery_type:avatar"),
            InlineKeyboardButton(text="üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="gallery_type:imagen4")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="all_photos")
        ]
    ])
    
    await safe_edit_callback_message(
        callback,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("gallery_type:"))
async def handle_type_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑ callback_data
        generation_type = callback.data.split(":")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(generation_type=generation_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        await gallery_filter_handler.show_gallery_with_type_filter(callback, state, generation_type)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ==================== –§–ò–õ–¨–¢–†–´ –ü–û –î–ê–¢–ï ====================

@router.callback_query(F.data == "gallery_filter_date")
async def show_date_filter_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"""
    await gallery_filter_handler.show_date_filter_menu(callback, state)

@router.callback_query(F.data.startswith("gallery_date:"))
async def handle_date_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data
        period = callback.data.split(":")[1]
        
        from datetime import datetime, timedelta
        now = datetime.now()
        
        if period == "today":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = now.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period == "yesterday":
            yesterday = now - timedelta(days=1)
            start_date = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period == "week":
            start_date = now - timedelta(days=7)
            end_date = now
        elif period == "month":
            start_date = now - timedelta(days=30)
            end_date = now
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            start_date=start_date.isoformat(),
            end_date=end_date.isoformat()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        await gallery_filter_handler.show_gallery_with_date_filter(callback, state, start_date, end_date)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(GalleryFilterStates.waiting_custom_date)
async def handle_custom_date_input(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = callback.message.text
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start_str, end_str = text.split("-")
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y")
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
            if end_date < start_date:
                await callback.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if (end_date - start_date).days > 90:
                await callback.answer("‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 90 –¥–Ω–µ–π", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                start_date=start_date.isoformat(),
                end_date=end_date.isoformat()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await gallery_viewer.show_gallery_main(callback, state)
            
        except ValueError:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", show_alert=True)
            return
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ==================== –°–ë–†–û–° –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data == "gallery_reset_filters")
async def handle_reset_filters(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
    try:
        # –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            generation_type=None,
            start_date=None,
            end_date=None
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        from .viewer.main import GalleryViewer
        gallery_viewer = GalleryViewer()
        await gallery_viewer.show_gallery_main(callback, state)
        
        await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True) 