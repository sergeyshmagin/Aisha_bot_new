"""
–ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import aiohttp
import asyncio
from typing import Optional

from app.core.logger import get_logger
from ..cache import ultra_gallery_cache

logger = get_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ (–≤—ã–Ω–æ—Å–∏–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞)
DEFAULT_TIMEOUT = 5  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ–∫)
FAST_TIMEOUT = 3     # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π (—Å–µ–∫)
ULTRA_FAST_TIMEOUT = 2  # –£–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–π –¥–ª—è MinIO refresh (—Å–µ–∫)


class ImageLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    
    async def download_image_ultra_fast(self, url: str) -> Optional[bytes]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        
        try:
            # üéØ –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = await ultra_gallery_cache.get_cached_image(url)
            if cached_data:
                logger.debug(f"üöÄ ULTRA FAST image load from cache: {len(cached_data)} bytes")
                return cached_data
            
            logger.debug(f"üîÑ Loading image from network: {url[:50]}...")
            
            # –ü–û–ü–´–¢–ö–ê 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
            image_data = await self._try_download_url(url)
            if image_data:
                await ultra_gallery_cache.set_cached_image(url, image_data)
                logger.debug(f"‚úÖ Image loaded and cached: {len(image_data)} bytes")
                return image_data
            
            # –ü–û–ü–´–¢–ö–ê 2: URL —É—Å—Ç–∞—Ä–µ–ª - –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ MinIO
            logger.debug(f"‚ö†Ô∏è Original URL failed, trying refresh: {url[:50]}...")
            updated_data = await self._try_refresh_minio_url_ultra_fast(url)
            if updated_data:
                await ultra_gallery_cache.set_cached_image(url, updated_data)
                logger.debug(f"‚úÖ Image refreshed and cached: {len(updated_data)} bytes")
                return updated_data
            
            # –ü–û–ü–´–¢–ö–ê 3: –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
            logger.debug(f"‚ö†Ô∏è Trying alternative URL paths: {url[:50]}...")
            alternative_data = await self._try_alternative_paths(url)
            if alternative_data:
                await ultra_gallery_cache.set_cached_image(url, alternative_data)
                logger.debug(f"‚úÖ Image loaded from alternative path: {len(alternative_data)} bytes")
                return alternative_data
            
            logger.warning(f"‚ùå All attempts failed for URL: {url[:50]}...")
            return None
                        
        except Exception as e:
            logger.debug(f"‚ùå Image load error: {url[:50]}... - {e}")
            return None
    
    async def _try_download_url(self, url: str, timeout: int = DEFAULT_TIMEOUT) -> Optional[bytes]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
                    if response.status == 200:
                        return await response.read()
                    elif response.status == 403:
                        logger.debug(f"URL expired (403): {url[:50]}...")
                        return None
                    else:
                        logger.debug(f"HTTP {response.status}: {url[:50]}...")
                        return None
        except asyncio.TimeoutError:
            logger.debug(f"Timeout loading: {url[:50]}...")
            return None
        except Exception as e:
            logger.debug(f"Error loading: {url[:50]}... - {e}")
            return None
    
    async def _try_alternative_paths(self, original_url: str) -> Optional[bytes]:
        """–ü—Ä–æ–±—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            from app.services.storage.minio import MinioStorage
            import urllib.parse
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed_url = urllib.parse.urlparse(original_url)
            path_parts = parsed_url.path.strip('/').split('/', 1)
            
            if len(path_parts) < 2:
                return None
            
            bucket = path_parts[0]
            object_name = path_parts[1].split('?')[0]
            
            storage = MinioStorage()
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            path_variants = [
                object_name,                        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                f"generated/{object_name}",         # –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º generated/
                object_name.replace("generated/", "") if "generated/" in object_name else f"images/{object_name}",
            ]
            
            for variant_path in path_variants:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if hasattr(storage, 'file_exists'):
                        exists = await storage.file_exists(bucket, variant_path)
                        if not exists:
                            continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL
                    new_url = await storage.generate_presigned_url(
                        bucket=bucket,
                        object_name=variant_path,
                        expires=3600
                    )
                    
                    if new_url:
                        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
                        image_data = await self._try_download_url(new_url, timeout=FAST_TIMEOUT)
                        if image_data:
                            logger.debug(f"‚úÖ Alternative path worked: {variant_path}")
                            return image_data
                            
                except Exception as variant_error:
                    logger.debug(f"Variant {variant_path} failed: {variant_error}")
                    continue
            
            return None
            
        except Exception as e:
            logger.debug(f"Alternative paths error: {e}")
            return None
    
    async def _try_refresh_minio_url_ultra_fast(self, old_url: str) -> Optional[bytes]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ MinIO URL"""
        
        try:
            from app.services.storage.minio import MinioStorage
            import urllib.parse
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed_url = urllib.parse.urlparse(old_url)
            path_parts = parsed_url.path.strip('/').split('/', 1)
            
            if len(path_parts) < 2:
                return None
            
            bucket = path_parts[0]
            object_name = path_parts[1].split('?')[0]
            
            # üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—É—Ç—å (–∏–∑ –ª–æ–≥–æ–≤ - "–≤–∞—Ä–∏–∞–Ω—Ç 2")
            correct_path = f"generated/{object_name}"
            
            storage = MinioStorage()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            new_url = await storage.generate_presigned_url(
                bucket=bucket,
                object_name=correct_path,
                expires=3600  # 1 —á–∞—Å (–≤–º–µ—Å—Ç–æ —Å—É—Ç–æ–∫)
            )
            
            if not new_url:
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –Ω–æ–≤–æ–º—É URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            async with aiohttp.ClientSession() as session:
                async with session.get(new_url, timeout=aiohttp.ClientTimeout(total=ULTRA_FAST_TIMEOUT)) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        logger.debug(f"üöÄ ULTRA FAST MinIO refresh: {len(image_data)} bytes")
                        return image_data
                    else:
                        return None
                        
        except Exception as e:
            logger.debug(f"‚ùå MinIO refresh error (ignored): {e}")
            return None 