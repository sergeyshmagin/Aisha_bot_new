"""
–ú–æ–¥—É–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–∞–ª–µ—Ä–µ–µ
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""
import asyncio
from datetime import datetime, timedelta
from typing import Optional
from uuid import UUID

from aiogram.types import CallbackQuery

from app.core.logger import get_logger
from app.shared.handlers.base_handler import BaseHandler
from ..cache import ultra_gallery_cache, ImageCacheManager

logger = get_logger(__name__)


class NavigationHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–∞–ª–µ—Ä–µ–µ"""
    
    def __init__(self):
        self.image_cache_manager = ImageCacheManager()
    
    async def handle_image_navigation(self, callback: CallbackQuery, direction: str):
        """‚ö° –ë–´–°–¢–†–ê–Ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –Ω–∞–¥–µ–∂–Ω—ã–º–∏ fallback"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
            data_parts = callback.data.split(":")
            current_idx = int(data_parts[1])
            
            # üî• –£–†–û–í–ï–ù–¨ 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–º –∫—ç—à–µ
            user_id = await self._get_user_id_from_session_cache(callback.from_user.id)
            
            # üî• –£–†–û–í–ï–ù–¨ 2: –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ SQL (fallback)
            if not user_id:
                user_id = await self._restore_user_session(callback)
                if not user_id:
                    await callback.answer("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –≥–∞–ª–µ—Ä–µ—é", show_alert=True)
                    return
            
            # üî• –£–†–û–í–ï–ù–¨ 3: –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—ç—à –∏–ª–∏ SQL fallback)
            images = await self._get_user_images_with_fallback(user_id, callback)
            if not images:
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            new_idx = self._calculate_new_index(current_idx, direction, len(images))
            
            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if new_idx == current_idx:
                await callback.answer()
                return
            
            # üöÄ –ê–ì–†–ï–°–°–ò–í–ù–û –ü–†–ï–î–ó–ê–ì–†–£–ñ–ê–ï–ú —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
            asyncio.create_task(
                self.image_cache_manager.prefetch_adjacent_images(images, new_idx)
            )
            
            # ‚ö° –ü–û–ö–ê–ó–´–í–ê–ï–ú –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ
            from .main import GalleryViewer
            gallery_viewer = GalleryViewer()
            await gallery_viewer.send_image_card_ultra_fast(callback, images, new_idx, user_id)
            
            logger.debug(f"‚ö° Navigation: {current_idx} ‚Üí {new_idx}")
            
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _get_user_id_from_session_cache(self, telegram_id: int) -> Optional[UUID]:
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ user_id –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–º –∫—ç—à–µ Redis"""
        
        try:
            from app.core.di import get_redis
            redis = await get_redis()
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π
            pattern = f"{ultra_gallery_cache._session_prefix}*"
            async for key in redis.scan_iter(match=pattern):
                try:
                    session_data_json = await redis.get(key)
                    if session_data_json:
                        import json
                        session_data = json.loads(session_data_json)
                        
                        if session_data.get('telegram_id') == telegram_id:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–ª—é—á–∞
                            user_id_str = key.decode().split(":")[-1]
                            return UUID(user_id_str)
                except Exception:
                    continue
            
            return None
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ —Å–µ—Å—Å–∏–π: {e}")
            return None
    
    async def _restore_user_session(self, callback: CallbackQuery) -> Optional[UUID]:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SQL"""
        
        telegram_id = callback.from_user.id
        logger.debug(f"Session cache miss, fallback to SQL for user {telegram_id}")
        
        user = await self.get_user_from_callback(callback, show_error=False)
        if not user:
            return None
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª–∏–∫–æ–≤
        await ultra_gallery_cache.set_session_data(user.id, {
            'telegram_id': telegram_id,
            'id': str(user.id),
            'username': user.username or '',
            'first_name': user.first_name
        })
        
        logger.debug(f"Session restored for user {user.id}")
        return user.id
    
    async def _get_user_images_with_fallback(self, user_id: UUID, callback: CallbackQuery):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback –Ω–∞ –ë–î"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à
        images = await ultra_gallery_cache.get_user_images(user_id)
        
        if not images:
            logger.debug(f"Images cache miss, loading from DB for user {user_id}")
            
            # Fallback –Ω–∞ –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –ë–î
            from .main import GalleryViewer
            gallery_viewer = GalleryViewer()
            images = await gallery_viewer.get_user_completed_images_ultra_fast(user_id)
            
            if not images:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return None
        
        return images
    
    @staticmethod
    def _calculate_new_index(current_idx: int, direction: str, total_images: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        
        if direction == "prev":
            return max(0, current_idx - 1)
        else:  # next
            return min(total_images - 1, current_idx + 1) 