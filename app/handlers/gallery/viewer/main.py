"""
üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–´–ô –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""
import asyncio
from typing import List, Optional
from uuid import UUID

from aiogram.types import CallbackQuery, BufferedInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user
from app.core.logger import get_logger
from app.core.di import get_user_service
from app.database.models import ImageGeneration, GenerationStatus
from app.handlers.gallery.viewer.card_formatter import CardFormatter
from app.services.gallery_service import GalleryService

from ..cache import ultra_gallery_cache, ImageCacheManager
from .navigation import NavigationHandler
from .image_loader import ImageLoader
from ..keyboards import build_empty_gallery_keyboard

logger = get_logger(__name__)


class GalleryViewer(BaseHandler):
    """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–´–ô –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π)"""
    
    def __init__(self):
        # üî• –ù–ï —Å–æ–∑–¥–∞–µ–º generation_service –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –æ–Ω —Å–æ–∑–¥–∞–µ—Ç FAL –∫–ª–∏–µ–Ω—Ç–∞!
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
        self._generation_service = None
        
        # –ú–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.navigation_handler = NavigationHandler()
        self.image_loader = ImageLoader()
        self.card_formatter = CardFormatter()
        self.image_cache_manager = ImageCacheManager()
    
    @property
    def generation_service(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if self._generation_service is None:
            from app.services.generation.generation_service import ImageGenerationService
            self._generation_service = ImageGenerationService()
        return self._generation_service
    
    @require_user()
    async def show_gallery_main(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        user=None,
        start_index: Optional[int] = None
    ):
        """üöÄ –ë–´–°–¢–†–´–ô –ø–æ–∫–∞–∑ –≥–∞–ª–µ—Ä–µ–∏ —Å –Ω–∞–¥–µ–∂–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            filters = {
                'generation_type': state_data.get('generation_type'),
                'start_date': state_data.get('start_date'),
                'end_date': state_data.get('end_date')
            }
            
            # üî• –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è (fire-and-forget)
            # –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            asyncio.create_task(self.safe_clear_state_preserve_filters(state, filters))
            
            # üéØ –°–ò–ù–•–†–û–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ—á–Ω–æ –±—ã–ª–∏ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            await ultra_gallery_cache.set_session_data(user.id, {
                'telegram_id': user.telegram_id,
                'id': str(user.id),
                'username': user.username or '',
                'first_name': user.first_name
            })
            
            # üéØ –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            asyncio.create_task(ultra_gallery_cache.cache_user_data(user.id, user))
            
            # üî• –ü–†–Ø–ú–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            images = await self.get_user_completed_images_ultra_fast(user.id, filters)
            
            if not images:
                await self._show_empty_gallery_message(callback, filters)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ë–ï–ó –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if start_index is not None:
                img_idx = max(0, min(start_index, len(images) - 1))
            else:
                # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ Redis (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI)
                try:
                    saved_index = await ultra_gallery_cache.get_user_gallery_state(user.id)
                    img_idx = saved_index if (saved_index is not None and saved_index < len(images)) else 0
                except:
                    img_idx = 0
            
            # üöÄ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
            asyncio.create_task(self.image_cache_manager.prefetch_adjacent_images(images, img_idx))
            
            # ‚ö° –ü–û–ö–ê–ó–´–í–ê–ï–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û
            await self.send_image_card_ultra_fast(callback, images, img_idx, user.id, filters)
            
            logger.info(f"‚ö° Gallery shown: user {user.telegram_id}, {len(images)} images, index {img_idx}, filters: {filters}")
            
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∞–ª–µ—Ä–µ–∏", show_alert=True)
    
    async def handle_image_navigation(self, callback: CallbackQuery, direction: str):
        """‚ö° –ë–´–°–¢–†–ê–Ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç NavigationHandler)"""
        await self.navigation_handler.handle_image_navigation(callback, direction)
    
    async def send_image_card_ultra_fast(
        self, 
        callback: CallbackQuery, 
        images: List[ImageGeneration], 
        img_idx: int,
        user_id: UUID,
        filters: dict
    ):
        """‚ö° –ú–û–õ–ù–ò–ï–ù–û–°–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨)"""
        
        generation = images[img_idx]
        
        # üéØ –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        text = self.card_formatter.format_image_card_text_fast(generation, img_idx, len(images))
        
        # üî• –ü–û–õ–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
        keyboard = self._build_optimized_gallery_keyboard_v2(
            img_idx=img_idx,
            total_images=len(images),
            generation_id=str(generation.id),
            is_favorite=getattr(generation, 'is_favorite', False),
            filters=filters
        )
        
        # ‚ö° –ü–†–Ø–ú–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞ (–ë–ï–ó –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        if generation.result_urls:
            image_url = generation.result_urls[0]
            image_data = await ultra_gallery_cache.get_cached_image(image_url)
            
            if image_data:
                # –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞
                await self._send_card_with_image_lightning_fast(callback, text, keyboard, image_data)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–æ–Ω–µ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è
                asyncio.create_task(ultra_gallery_cache.set_user_gallery_state(user_id, img_idx))
                return
        
        # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await self._send_card_text_loading(callback, text, keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(ultra_gallery_cache.set_user_gallery_state(user_id, img_idx))
        if generation.result_urls:
            asyncio.create_task(self._async_load_and_update_image(callback, generation.result_urls[0], text, keyboard))
    
    async def get_user_completed_images_ultra_fast(self, user_id: UUID, filters: dict) -> List[ImageGeneration]:
        """üöÄ –£–õ–¨–¢–†–ê–ë–´–°–¢–†–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        
        try:
            # üéØ –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
            if any(filters.values()):
                logger.debug(f"üîç Filtered query for user {user_id}, filters: {filters}")
                return await self._get_filtered_images_from_db(user_id, filters)
            
            # üéØ –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
            cached_images = await ultra_gallery_cache.get_user_images(user_id)
            if cached_images:
                logger.debug(f"üöÄ ULTRA FAST images from cache: {len(cached_images)} images")
                return cached_images
            
            # üî• –ü–†–Ø–ú–û–ô –∑–∞–ø—Ä–æ—Å –∫ –ë–î (–ë–ï–ó generation_service –∏ FAL –∫–ª–∏–µ–Ω—Ç–∞)
            logger.debug(f"üîÑ Direct DB query for user {user_id}")
            
            from app.core.database import get_session
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload
            
            async with get_session() as session:
                # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
                stmt = (
                    select(ImageGeneration)
                    .options(selectinload(ImageGeneration.avatar))
                    .where(
                        ImageGeneration.user_id == user_id,
                        ImageGeneration.status == GenerationStatus.COMPLETED,
                        ImageGeneration.result_urls.isnot(None)
                    )
                    .order_by(ImageGeneration.created_at.desc())
                    .limit(150)
                )
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if filters.get('generation_type'):
                    generation_type = filters['generation_type']
                    if generation_type == 'avatar':
                        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ)
                        stmt = stmt.where(
                            or_(
                                ImageGeneration.generation_type == 'avatar',
                                ImageGeneration.generation_type.is_(None)  # –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç–∏–ø–∞
                            )
                        )
                    elif generation_type == 'imagen4':
                        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Imagen4 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        stmt = stmt.where(ImageGeneration.generation_type == 'imagen4')
                    elif generation_type == 'video':
                        # –í–∏–¥–µ–æ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                        stmt = stmt.where(ImageGeneration.generation_type == 'video')
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                if filters.get('start_date') and filters.get('end_date'):
                    start_date = datetime.fromisoformat(filters['start_date'])
                    end_date = datetime.fromisoformat(filters['end_date'])
                    stmt = stmt.where(
                        and_(
                            ImageGeneration.created_at >= start_date,
                            ImageGeneration.created_at <= end_date
                        )
                    )
                
                stmt = stmt.order_by(ImageGeneration.created_at.desc()).limit(150)
                
                result = await session.execute(stmt)
                generations = result.scalars().all()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                completed_images = [
                    gen for gen in generations
                    if (gen.result_urls and len(gen.result_urls) > 0)
                ]
            
            # üéØ –ö–≠–®–ò–†–£–ï–ú –Ω–∞ 15 –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –Ω–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            await ultra_gallery_cache.set_user_images(user_id, completed_images)
            
            logger.debug(f"üöÄ ULTRA FAST direct DB load: {len(completed_images)} images")
            return completed_images
            
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return []
    
    async def _get_filtered_images_from_db(self, user_id: UUID, filters: dict) -> List[ImageGeneration]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from app.core.database import get_session
        from sqlalchemy import select, and_, or_
        from sqlalchemy.orm import selectinload
        from datetime import datetime
        import json
        import hashlib
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filter_hash = hashlib.md5(json.dumps(filters, sort_keys=True).encode()).hexdigest()
            cache_key = f"gallery:filtered:{user_id}:{filter_hash}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à Redis
            try:
                from app.core.di import get_redis
                redis = await get_redis()
                cached_data = await redis.get(cache_key)
                
                if cached_data:
                    logger.debug(f"üöÄ Filtered images from Redis cache: {cache_key}")
                    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
                    generation_ids = json.loads(cached_data)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î –ø–æ ID
                    if generation_ids:
                        async with get_session() as session:
                            stmt = (
                                select(ImageGeneration)
                                .options(selectinload(ImageGeneration.avatar))
                                .where(ImageGeneration.id.in_(generation_ids))
                                .order_by(ImageGeneration.created_at.desc())
                            )
                            result = await session.execute(stmt)
                            generations = result.scalars().all()
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                            completed_images = [
                                gen for gen in generations
                                if (gen.result_urls and len(gen.result_urls) > 0)
                            ]
                            
                            logger.debug(f"üöÄ Loaded {len(completed_images)} cached filtered images")
                            return completed_images
                    
                    return []
                    
            except Exception as cache_error:
                logger.warning(f"Redis cache error: {cache_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–µ—à–∞
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            async with get_session() as session:
                # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                stmt = (
                    select(ImageGeneration)
                    .options(selectinload(ImageGeneration.avatar))
                    .where(
                        ImageGeneration.user_id == user_id,
                        ImageGeneration.status == GenerationStatus.COMPLETED,
                        ImageGeneration.result_urls.isnot(None)
                    )
                )
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if filters.get('generation_type'):
                    generation_type = filters['generation_type']
                    if generation_type == 'avatar':
                        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ)
                        stmt = stmt.where(
                            or_(
                                ImageGeneration.generation_type == 'avatar',
                                ImageGeneration.generation_type.is_(None)  # –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç–∏–ø–∞
                            )
                        )
                    elif generation_type == 'imagen4':
                        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Imagen4 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        stmt = stmt.where(ImageGeneration.generation_type == 'imagen4')
                    elif generation_type == 'video':
                        # –í–∏–¥–µ–æ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                        stmt = stmt.where(ImageGeneration.generation_type == 'video')
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                if filters.get('start_date') and filters.get('end_date'):
                    start_date = datetime.fromisoformat(filters['start_date'])
                    end_date = datetime.fromisoformat(filters['end_date'])
                    stmt = stmt.where(
                        and_(
                            ImageGeneration.created_at >= start_date,
                            ImageGeneration.created_at <= end_date
                        )
                    )
                
                stmt = stmt.order_by(ImageGeneration.created_at.desc()).limit(150)
                
                result = await session.execute(stmt)
                generations = result.scalars().all()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                completed_images = [
                    gen for gen in generations
                    if (gen.result_urls and len(gen.result_urls) > 0)
                ]
                
                # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis –Ω–∞ 5 –º–∏–Ω—É—Ç
                try:
                    generation_ids = [str(gen.id) for gen in completed_images]
                    await redis.setex(cache_key, 300, json.dumps(generation_ids))
                    logger.debug(f"üîÑ Cached filtered results: {cache_key}")
                except Exception as cache_error:
                    logger.warning(f"Failed to cache filtered results: {cache_error}")
                
                logger.debug(f"üîç Filtered query result: {len(completed_images)} images")
                return completed_images
                
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []
    
    async def safe_clear_state_preserve_filters(self, state: FSMContext, filters: dict):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∏–ª—å—Ç—Ä—ã"""
        try:
            await state.clear()
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if any(filters.values()):
                await state.update_data(**filters)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _build_optimized_gallery_keyboard_v2(
        self,
        img_idx: int, 
        total_images: int, 
        generation_id: str,
        is_favorite: bool = False,
        filters: dict = None
    ):
        """üî• –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ü–û–õ–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        
        buttons = []
        
        # üîù –ë–õ–û–ö 1: –§–∏–ª—å—Ç—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        filters_text = "üîç –§–∏–ª—å—Ç—Ä—ã"
        if filters and any(filters.values()):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã
            active_filters = []
            if filters.get('generation_type'):
                if filters['generation_type'] == 'avatar':
                    active_filters.append("üë§")
                elif filters['generation_type'] == 'imagen4':
                    active_filters.append("üé®")
            if filters.get('start_date') or filters.get('end_date'):
                active_filters.append("üìÖ")
            
            if active_filters:
                filters_text = f"üîç –§–∏–ª—å—Ç—Ä—ã ({' '.join(active_filters)})"
        
        top_row = [
            InlineKeyboardButton(text=filters_text, callback_data="gallery_filters"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gallery_stats")
        ]
        buttons.append(top_row)
        
        # üîÑ –ë–õ–û–ö 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        nav_row = []
        
        if img_idx > 0:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"gallery_image_prev:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="noop"))
        
        nav_row.append(InlineKeyboardButton(text=f"{img_idx + 1}/{total_images}", callback_data="noop"))
        
        if img_idx < total_images - 1:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"gallery_image_next:{img_idx}"))
        else:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="noop"))
        
        buttons.append(nav_row)
        
        # üìã –ë–õ–û–ö 3: –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        content_row = [
            InlineKeyboardButton(text="üìã –ü—Ä–æ–º–ø—Ç", callback_data=f"gallery_full_prompt:{generation_id}"),
            InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"gallery_regenerate:{generation_id}")
        ]
        buttons.append(content_row)
        
        # ‚≠ê –ë–õ–û–ö 4: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        action_row = []
        
        favorite_text = "‚ù§Ô∏è –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        action_row.append(InlineKeyboardButton(text=favorite_text, callback_data=f"gallery_favorite:{generation_id}"))
        action_row.append(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"gallery_delete:{generation_id}"))
        
        buttons.append(action_row)
        
        # üîô –ë–õ–û–ö 5: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ - –ò–°–ü–†–ê–í–õ–ï–ù–û
        back_row = [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="all_photos"),  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ñ–æ—Ç–æ
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
        buttons.append(back_row)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def _send_card_with_image_lightning_fast(
        self, 
        callback: CallbackQuery, 
        text: str, 
        keyboard, 
        image_data: bytes
    ):
        """‚ö° –ë–´–°–¢–†–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        try:
            image_file = BufferedInputFile(image_data, filename="img.jpg")
            
            if callback.message.photo:
                # ‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ (–ë–ï–ó –º–µ—Ä—Ü–∞–Ω–∏—è)
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=image_file, caption=text, parse_mode="Markdown"),
                    reply_markup=keyboard
                )
                logger.debug("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ edit_media (–±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è)")
                
            elif callback.message.text:
                # ‚úÖ –•–û–†–û–®–û: –£ –Ω–∞—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                await callback.message.answer_photo(
                    photo=image_file,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.message.answer_photo(
                    photo=image_file,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
        except TelegramBadRequest as e:
            if "media" in str(e).lower() or "photo" in str(e).lower():
                logger.warning(f"–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ Telegram: {e}")
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                await self._send_image_fallback_with_button(callback, text, keyboard, image_data)
            else:
                logger.debug(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
                await self._send_card_text_loading(callback, text, keyboard)
                
        except Exception as e:
            logger.debug(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await self._send_card_text_loading(callback, text, keyboard)
    
    async def _send_card_text_loading(self, callback: CallbackQuery, text: str, keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        loading_text = f"{text}\n\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
        
        try:
            if callback.message.photo:
                # ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ)
                await callback.message.edit_caption(
                    caption=loading_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —Ñ–æ—Ç–æ (loading)")
                
            elif callback.message.text:
                # ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                await callback.message.edit_text(
                    text=loading_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (loading)")
                
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    text=loading_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.debug("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (loading)")
                
        except TelegramBadRequest as e:
            if "parse entities" in str(e):
                # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    if callback.message.photo:
                        await callback.message.edit_caption(
                            caption=loading_text.replace("*", "").replace("_", ""),
                            reply_markup=keyboard
                        )
                    elif callback.message.text:
                        await callback.message.edit_text(
                            text=loading_text.replace("*", "").replace("_", ""),
                            reply_markup=keyboard
                        )
                    else:
                        await callback.message.answer(
                            text=loading_text.replace("*", "").replace("_", ""),
                            reply_markup=keyboard
                        )
                except Exception:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
            else:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ loading: {e}")
                await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", show_alert=False)
                
        except Exception as e:
            logger.debug(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ loading: {e}")
            await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", show_alert=False)
    
    async def _async_load_and_update_image(self, callback: CallbackQuery, image_url: str, text: str, keyboard):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            image_data = await self.image_loader.download_image_ultra_fast(image_url)
            
            if image_data:
                # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è)
                image_file = BufferedInputFile(image_data, filename="img.jpg")
                
                if callback.message.photo:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
                    await callback.message.edit_media(
                        media=InputMediaPhoto(media=image_file, caption=text, parse_mode="Markdown"),
                        reply_markup=keyboard
                    )
                    logger.debug("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ edit_media")
                    
                elif callback.message.text:
                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.debug("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
                    await callback.message.answer_photo(
                        photo=image_file,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.debug("‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                    
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π
                error_text = f"{text}\n\n‚ùå *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\nüí° _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_"
                
                if callback.message.photo:
                    await callback.message.edit_caption(
                        caption=error_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                elif callback.message.text:
                    await callback.message.edit_text(
                        text=error_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
                logger.debug("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø–æ–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å UX
    
    async def _show_empty_gallery_message(self, callback: CallbackQuery, filters: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ"""
        
        text = f"""üñºÔ∏è **–í–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞**

üé® **–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

üì∑ **–§–æ—Ç–æ —Å–æ –º–Ω–æ–π** - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—É—á–µ–Ω–Ω—É—é –Ω–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ –º–æ–¥–µ–ª—å
   ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –≤ –ª—é–±—ã—Ö —Å—Ç–∏–ª—è—Ö
   ‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –æ–±—Ä–∞–∑–∞–º–∏ –∏ –ª–æ–∫–∞—Ü–∏—è–º–∏

üìù **–ü–æ –æ–ø–∏—Å–∞–Ω–∏—é** - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   ‚Ä¢ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—â—å Imagen 4 –æ—Ç Google
   ‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞—Ä—Ç, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ–Ω—Ü–µ–ø—Ç—ã

üé¨ **–í–∏–¥–µ–æ** - –æ–∂–∏–≤–ª—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫–æ—Ä–æ)
   ‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤
   ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ-—ç—Ñ—Ñ–µ–∫—Ç—ã

üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**

üîç –§–∏–ª—å—Ç—Ä—ã: {filters.get('generation_type', '–í—Å–µ —Ç–∏–ø—ã')}
üìÖ –ü–µ—Ä–∏–æ–¥: {filters.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω')} - {filters.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω')}"""
        
        keyboard = build_empty_gallery_keyboard()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def _send_image_fallback_with_button(
        self, 
        callback: CallbackQuery, 
        text: str, 
        keyboard, 
        image_data: bytes
    ):
        """Fallback: —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            fallback_text = f"{text}\n\nüì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É*\nüí° _–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫–∞–∑–∞_"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            # –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            new_buttons = []
            if hasattr(keyboard, 'inline_keyboard'):
                new_buttons = [row[:] for row in keyboard.inline_keyboard]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
            show_image_button = [
                InlineKeyboardButton(text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="show_current_image")
            ]
            new_buttons.insert(0, show_image_button)
            
            fallback_keyboard = InlineKeyboardMarkup(inline_keyboard=new_buttons)
            
            if callback.message.photo:
                # –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç
                await callback.message.edit_caption(
                    caption=fallback_text,
                    reply_markup=fallback_keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    text=fallback_text,
                    reply_markup=fallback_keyboard,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ fallback —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            await self._send_card_text_loading(callback, text, keyboard) 