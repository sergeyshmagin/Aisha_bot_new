"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–í–æ—Å—Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""
from uuid import UUID

from aiogram.types import CallbackQuery

from app.shared.handlers.base_handler import BaseHandler
from app.core.logger import get_logger
from app.database.models import ImageGeneration, GenerationStatus

logger = get_logger(__name__)


class RegenerationManager(BaseHandler):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    async def regenerate_image(self, callback: CallbackQuery):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data
            generation_id = callback.data.split(":")[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback, show_error=False)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            original_generation = await self._get_generation(UUID(generation_id), user.id)
            if not original_generation:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await callback.answer("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await self._start_regeneration(callback, original_generation, user.id)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
    
    async def _get_generation(self, generation_id: UUID, user_id: UUID):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ë–î"""
        
        from app.core.database import get_session
        from sqlalchemy import select
        from sqlalchemy.orm import selectinload
        
        async with get_session() as session:
            stmt = (
                select(ImageGeneration)
                .options(selectinload(ImageGeneration.avatar))
                .where(
                    ImageGeneration.id == generation_id,
                    ImageGeneration.user_id == user_id
                )
            )
            result = await session.execute(stmt)
            return result.scalar_one_or_none()
    
    async def _start_regeneration(self, callback: CallbackQuery, original_generation, user_id: UUID):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.core.constants import GENERATION_COST
            if not await self.check_user_balance_for_regeneration(user_id, GENERATION_COST):
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_params = {
                'prompt': original_generation.final_prompt or original_generation.original_prompt,
                'avatar_id': original_generation.avatar_id,
                'aspect_ratio': getattr(original_generation, 'aspect_ratio', '1:1'),
                'num_images': 1,  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                'model': getattr(original_generation, 'model', 'flux-pro'),
                'lora_weights': getattr(original_generation, 'lora_weights', None)
            }
            
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ø—Ä–æ–º–ø—Ç='{generation_params['prompt'][:50]}...', –∞–≤–∞—Ç–∞—Ä={original_generation.avatar_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            from app.core.di import get_avatar_service
            async with get_avatar_service() as avatar_service:
                avatar = await avatar_service.get_avatar(original_generation.avatar_id)
                if not avatar or avatar.status != "completed":
                    await callback.answer("‚ùå –ê–≤–∞—Ç–∞—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            from app.shared.utils.telegram_utils import format_prompt_for_display
            initial_message = f"""üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {original_generation.avatar.name if original_generation.avatar else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {format_prompt_for_display(generation_params['prompt'], 80)}
üìê <b>–†–∞–∑–º–µ—Ä:</b> {generation_params['aspect_ratio']}

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...
üîÑ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> 0%

üí° <i>–û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥</i>"""
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            try:
                if callback.message.photo:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await callback.message.delete()
                    status_message = await callback.message.answer(
                        text=initial_message,
                        parse_mode="HTML"
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await callback.message.edit_text(
                        text=initial_message,
                        parse_mode="HTML"
                    )
                    status_message = callback.message
            except Exception as msg_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}")
                # Fallback: –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                    
                status_message = await callback.message.answer(
                    text=initial_message,
                    parse_mode="HTML"
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            from app.services.generation.generation_service import ImageGenerationService
            generation_service = ImageGenerationService()
            
            new_generation = await generation_service.generate_custom(
                user_id=user_id,
                avatar_id=original_generation.avatar_id,
                custom_prompt=generation_params['prompt'],
                aspect_ratio=generation_params['aspect_ratio'],
                num_images=1
            )
            
            if not new_generation:
                await status_message.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é</b>\n\nüí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>",
                    parse_mode="HTML"
                )
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try:
                from app.core.di import get_user_service
                async with get_user_service() as user_service:
                    new_balance = await user_service.remove_coins(user_id, GENERATION_COST)
                    if new_balance is not None:
                        logger.info(f"–°–ø–∏—Å–∞–Ω–æ {GENERATION_COST} –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as balance_error:
                logger.exception(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {balance_error}")
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
            logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {new_generation.id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await self._monitor_regeneration_progress(
                status_message, 
                new_generation, 
                generation_params['prompt'], 
                original_generation.avatar.name if original_generation.avatar else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            
            # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–∞–ª–µ—Ä–µ—é", callback_data="gallery_main")
            ]])
            
            try:
                await callback.message.edit_text(
                    text="‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\nüí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            except Exception:
                await callback.message.answer(
                    text="‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\nüí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
    
    async def check_user_balance_for_regeneration(self, user_id: UUID, cost: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            from app.core.di import get_user_service
            
            async with get_user_service() as user_service:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_balance = await user_service.get_user_balance(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                has_sufficient_balance = current_balance >= cost
                
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –±–∞–ª–∞–Ω—Å={current_balance}, —Å—Ç–æ–∏–º–æ—Å—Ç—å={cost}, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ={has_sufficient_balance}")
                
                return has_sufficient_balance
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï —Ä–∞–∑—Ä–µ—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return False
    
    async def _monitor_regeneration_progress(self, message, generation, prompt: str, avatar_name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        import asyncio
        from app.shared.utils.telegram_utils import format_prompt_for_display
        
        try:
            max_attempts = 60  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
            attempt = 0
            
            while attempt < max_attempts:
                attempt += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
                updated_generation = await self._get_generation(generation.id, generation.user_id)
                
                if not updated_generation:
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if updated_generation.status == GenerationStatus.COMPLETED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                    await self._show_regeneration_result(message, updated_generation, prompt, avatar_name)
                    return
                    
                elif updated_generation.status == GenerationStatus.FAILED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å
                    await self._show_regeneration_error(message, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    return
                    
                elif updated_generation.status == GenerationStatus.CANCELLED:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
                    await self._show_regeneration_error(message, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                if attempt % 3 == 0:
                    progress = min(90, attempt * 2)  # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ 90%
                    
                    status_text = f"""üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {format_prompt_for_display(prompt, 80)}

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...
üîÑ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress}%

üí° <i>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {max_attempts - attempt} —Å–µ–∫—É–Ω–¥</i>"""
                    
                    try:
                        await message.edit_text(status_text, parse_mode="HTML")
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
                await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            
            # –¢–∞–π–º–∞—É—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await self._show_regeneration_error(message, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await self._show_regeneration_error(message, "–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    async def _show_regeneration_result(self, message, generation, prompt: str, avatar_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            from aiogram.types import BufferedInputFile
            from app.shared.utils.telegram_utils import format_prompt_for_display
            import aiohttp
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if generation.result_urls and len(generation.result_urls) > 0:
                image_url = generation.result_urls[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                async with aiohttp.ClientSession() as session:
                    async with session.get(image_url) as response:
                        if response.status == 200:
                            image_data = await response.read()
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"gallery_regenerate:{generation.id}"),
                                    InlineKeyboardButton(text="üñºÔ∏è –í –≥–∞–ª–µ—Ä–µ—é", callback_data="gallery_main")
                                ],
                                [
                                    InlineKeyboardButton(text="üé® –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generation_menu"),
                                    InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                                ]
                            ])
                            
                            caption = f"""‚úÖ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üé≠ <b>–ê–≤–∞—Ç–∞—Ä:</b> {avatar_name}
üìù <b>–ü—Ä–æ–º–ø—Ç:</b> {format_prompt_for_display(prompt, 100)}
üÜî <b>ID:</b> {str(generation.id)[:8]}...

üéâ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>"""
                            
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                            try:
                                await message.delete()
                            except Exception:
                                pass
                            
                            await message.answer_photo(
                                photo=BufferedInputFile(image_data, filename=f"regeneration_{generation.id}.jpg"),
                                caption=caption,
                                reply_markup=keyboard,
                                parse_mode="HTML"
                            )
                            
                            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω: {generation.id}")
                            return
            
            # Fallback –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üñºÔ∏è –í –≥–∞–ª–µ—Ä–µ—é", callback_data="gallery_main")]
            ])
            
            await message.edit_text(
                f"‚úÖ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\nüñºÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ–µ",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await self._show_regeneration_error(message, "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    async def _show_regeneration_error(self, message, error_text: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="generation_menu"),
                InlineKeyboardButton(text="üñºÔ∏è –í –≥–∞–ª–µ—Ä–µ—é", callback_data="gallery_main")
            ],
            [
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        try:
            await message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\nüí≠ {error_text}\n\nüí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>",
                reply_markup=keyboard,
                parse_mode="HTML"
            ) 
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}") 