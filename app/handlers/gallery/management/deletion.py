"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
"""
import re
from uuid import UUID

from aiogram.types import CallbackQuery

from app.shared.handlers.base_handler import BaseHandler
from app.core.logger import get_logger
from ..cache import ultra_gallery_cache
from app.database.models import ImageGeneration

logger = get_logger(__name__)


class DeletionManager(BaseHandler):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
        if not text:
            return text
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        text = re.sub(r'([*_`\[\]()])', r'\\\1', text)
        return text
    
    async def request_delete_confirmation(self, callback: CallbackQuery):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data
            generation_id = callback.data.split(":")[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback, show_error=False)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            generation = await self._get_generation(UUID(generation_id), user.id)
            if not generation:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            logger.info(f"[Deletion Manager] Generation found: {generation.id}, user_id: {generation.user_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            # –ë–ï–ó–û–ü–ê–°–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_text = generation.final_prompt or generation.original_prompt or '–ë–µ–∑ –ø—Ä–æ–º–ø—Ç–∞'
            truncated_prompt = prompt_text[:100]
            if len(prompt_text) > 100:
                truncated_prompt += '...'
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown-—Å–∏–º–≤–æ–ª—ã
            escaped_prompt = self._escape_markdown(truncated_prompt)
            
            text = f"""‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**

üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** {generation.id}

üìù **–ü—Ä–æ–º–ø—Ç:** {escaped_prompt}

‚ùì **–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?**

‚ö†Ô∏è _–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!_"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"gallery_delete_confirm:{generation_id}"),
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="my_gallery")
                ]
            ])
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            try:
                if callback.message.photo:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await callback.message.delete()
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            except Exception as msg_error:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û—à–∏–±–∫–∞ Markdown –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {msg_error}")
                
                plain_text = f"""‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è

üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {generation.id}

üìù –ü—Ä–æ–º–ø—Ç: {truncated_prompt}

‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"""
                
                try:
                    if callback.message.photo:
                        await callback.message.delete()
                        await callback.message.answer(
                            text=plain_text,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback.message.edit_text(
                            text=plain_text,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                except Exception:
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
                    return
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    async def _get_generation(self, generation_id: UUID, user_id: UUID):
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ –ë–î"""
        
        from app.core.database import get_session
        from sqlalchemy import select
        
        async with get_session() as session:
            stmt = select(ImageGeneration).where(
                ImageGeneration.id == generation_id,
                ImageGeneration.user_id == user_id
            )
            result = await session.execute(stmt)
            return result.scalar_one_or_none()
    
    async def delete_image(self, callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data
            generation_id = callback.data.split(":")[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback, show_error=False)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            deleted = await self._delete_generation(UUID(generation_id), user.id)
            
            if deleted:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await ultra_gallery_cache.clear_all_cache(user.id)
                
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–∞–ª–µ—Ä–µ—é –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≥–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞
                await self._refresh_gallery_after_deletion(callback, user.id)
                
                await callback.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            else:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
    
    async def _delete_generation(self, generation_id: UUID, user_id: UUID) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ë–î"""
        
        from app.core.database import get_session
        from sqlalchemy import select, delete
        
        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            stmt = select(ImageGeneration).where(
                ImageGeneration.id == generation_id,
                ImageGeneration.user_id == user_id
            )
            result = await session.execute(stmt)
            generation = result.scalar_one_or_none()
            
            if not generation:
                return False
            
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            delete_stmt = delete(ImageGeneration).where(
                ImageGeneration.id == generation_id,
                ImageGeneration.user_id == user_id
            )
            await session.execute(delete_stmt)
            await session.commit()
            
            logger.info(f"Image deleted: {generation_id} by user {user_id}")
            return True
    
    async def _refresh_gallery_after_deletion(self, callback: CallbackQuery, user_id: UUID):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–∞–ª–µ—Ä–µ—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        try:
            from ..viewer import GalleryViewer
            gallery_viewer = GalleryViewer()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = await gallery_viewer.get_user_completed_images_ultra_fast(user_id)
            
            if not images:
                # –ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await gallery_viewer._show_empty_gallery_message(callback)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ)
                await gallery_viewer.send_image_card_ultra_fast(callback, images, 0, user_id)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            # Fallback –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
            
            await callback.message.edit_text(
                text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ\n\nüîô –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=keyboard
            ) 