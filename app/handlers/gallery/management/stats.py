"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
from typing import Dict, Any
from uuid import UUID
from datetime import datetime, timedelta
from collections import Counter

from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.shared.handlers.base_handler import BaseHandler
from app.shared.decorators.auth_decorators import require_user
from app.core.logger import get_logger

logger = get_logger(__name__)


class GalleryStatsManager(BaseHandler):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–∞–ª–µ—Ä–µ–∏"""
    
    @require_user()
    async def show_gallery_stats(self, callback: CallbackQuery, user=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ LEGACY –∫–æ–¥–∞)"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self._get_detailed_stats(user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∫ –≤ LEGACY –∫–æ–¥–µ)
            text = f"""üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–ª–µ—Ä–µ–∏*

üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* {stats['total_images']}

‚ù§Ô∏è *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ:* {stats['favorite_images']}

üé≠ *–ê–≤–∞—Ç–∞—Ä—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {stats['used_avatars']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_avatars']}

üìÖ *–ó–∞ 30 –¥–Ω–µ–π:*
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {stats['recent_images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: \\~{stats['estimated_credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤

üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:* {stats['last_generation']}

üìà *–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥:* {stats['most_active_period']}"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ", callback_data="my_gallery")
                ]
            ])
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ LEGACY –∫–æ–¥–∞)
            try:
                if callback.message.photo:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass
                    
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            except Exception as edit_error:
                from aiogram.exceptions import TelegramBadRequest
                if isinstance(edit_error, TelegramBadRequest):
                    if "parse entities" in str(edit_error):
                        # –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        text_plain = text.replace('*', '').replace('\\~', '~')
                        
                        if callback.message.photo:
                            try:
                                await callback.message.delete()
                            except Exception:
                                pass
                            
                            await callback.message.answer(
                                text=text_plain,
                                reply_markup=keyboard,
                                parse_mode=None
                            )
                        else:
                            await callback.message.edit_text(
                                text=text_plain,
                                reply_markup=keyboard,
                                parse_mode=None
                            )
                    else:
                        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await callback.message.delete()
                        except Exception:
                            pass
                        
                        await callback.message.answer(
                            text=text,
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                else:
                    # –û–±—â–∞—è –æ—à–∏–±–∫–∞ - fallback
                    await callback.message.answer(
                        text=text,
                        reply_markup=keyboard,
                        parse_mode=None
                    )
            
            await callback.answer()
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    async def _get_detailed_stats(self, user_id: UUID) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ LEGACY –∫–æ–¥–∞)"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.services.generation.generation_service import ImageGenerationService
            generation_service = ImageGenerationService()
            
            all_generations = await generation_service.get_user_generations(
                user_id=user_id,
                limit=1000  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            )
            
            now = datetime.now()
            thirty_days_ago = now - timedelta(days=30)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_images = len(all_generations)
            
            # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ is_favorite)
            favorite_images = len([g for g in all_generations if getattr(g, 'is_favorite', False)])
            
            # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            recent_images = len([g for g in all_generations if g.created_at >= thirty_days_ago])
            estimated_credits = recent_images * 5  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
            used_avatars = len(set(g.avatar_id for g in all_generations if g.avatar_id))
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é –ë–î (–∫–∞–∫ –≤ LEGACY –∫–æ–¥–µ)
            active_avatars = 0
            try:
                from app.core.database import get_session
                from app.database.models import Avatar
                from sqlalchemy import select
                
                async with get_session() as session:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
                    stmt = select(Avatar).where(
                        Avatar.user_id == user_id,
                        Avatar.status == 'completed'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ enum
                    )
                    result = await session.execute(stmt)
                    avatars = result.scalars().all()
                    active_avatars = len(list(avatars))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
                active_avatars = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            last_generation = "–ù–∏–∫–æ–≥–¥–∞"
            if all_generations:
                sorted_gens = sorted(all_generations, key=lambda x: x.created_at, reverse=True)
                last_generation = sorted_gens[0].created_at.strftime("%d.%m.%Y %H:%M")
            
            # –ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –∫–∞–∫ –≤ LEGACY –∫–æ–¥–µ)
            most_active_period = "–£—Ç—Ä–æ (9:00-12:00)"  # –ó–∞–≥–ª—É—à–∫–∞
            
            return {
                'total_images': total_images,
                'favorite_images': favorite_images,
                'used_avatars': used_avatars,
                'active_avatars': active_avatars,
                'recent_images': recent_images,
                'estimated_credits': estimated_credits,
                'last_generation': last_generation,
                'most_active_period': most_active_period
            }
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                'total_images': 0,
                'favorite_images': 0,
                'used_avatars': 0,
                'active_avatars': 0,
                'recent_images': 0,
                'estimated_credits': 0,
                'last_generation': "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                'most_active_period': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            } 