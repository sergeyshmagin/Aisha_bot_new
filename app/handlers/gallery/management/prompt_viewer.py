"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""
from uuid import UUID

from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from app.shared.handlers.base_handler import BaseHandler
from app.core.logger import get_logger

logger = get_logger(__name__)


class PromptViewer(BaseHandler):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    async def show_full_prompt(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏–∑ LEGACY –∫–æ–¥–∞)"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º generation_id –∏–∑ callback_data
            data_parts = callback.data.split(":")
            generation_id = UUID(data_parts[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.get_user_from_callback(callback)
            if not user:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation = await self._get_generation_by_id(generation_id)
            if not generation:
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"[Prompt Viewer] Generation ID: {generation_id}")
            logger.info(f"[Prompt Viewer] Generation user_id: {generation.user_id} (type: {type(generation.user_id)})")
            logger.info(f"[Prompt Viewer] Current user.id: {user.id} (type: {type(user.id)})")
            logger.info(f"[Prompt Viewer] User telegram_id: {user.telegram_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
            generation_user_id = str(generation.user_id)
            current_user_id = str(user.id)
            
            if generation_user_id != current_user_id:
                logger.warning(f"[Prompt Viewer] Ownership mismatch: {generation_user_id} != {current_user_id}")
                await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)
                return
            else:
                logger.info(f"[Prompt Viewer] Ownership verified: {generation_user_id} == {current_user_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ LEGACY –∫–æ–¥–µ
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ —Å markdown
            prompt_text = f"""```
{generation.final_prompt}
```"""

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ö –≥–∞–ª–µ—Ä–µ–µ",
                        callback_data="my_gallery"
                    )
                ]
            ])
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            try:
                if callback.message.photo:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await callback.message.delete()
                    await callback.message.answer(
                        prompt_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await callback.message.edit_text(
                        prompt_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
                logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å Markdown –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
                    
            except TelegramBadRequest as markdown_error:
                if "parse entities" in str(markdown_error):
                    # –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML
                    logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Markdown –ø–∞—Ä—Å–∏–Ω–≥–æ–º, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ HTML: {markdown_error}")
                    
                    # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è HTML
                    html_text = f"""<pre>{generation.final_prompt}</pre>"""
                    
                    try:
                        if callback.message.photo:
                            await callback.message.delete()
                            await callback.message.answer(
                                html_text,
                                reply_markup=keyboard,
                                parse_mode="HTML"
                            )
                        else:
                            await callback.message.edit_text(
                                html_text,
                                reply_markup=keyboard,
                                parse_mode="HTML"
                            )
                        logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å HTML –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
                    except Exception as html_error:
                        # –£—Ä–æ–≤–µ–Ω—å 3: –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.exception(f"–û—à–∏–±–∫–∞ –∏ —Å HTML, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {html_error}")
                        
                        try:
                            if callback.message.photo:
                                await callback.message.delete()
                                await callback.message.answer(
                                    generation.final_prompt,
                                    reply_markup=keyboard,
                                    parse_mode=None
                                )
                            else:
                                await callback.message.edit_text(
                                    generation.final_prompt,
                                    reply_markup=keyboard,
                                    parse_mode=None
                                )
                            logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {generation_id}")
                        except Exception as final_error:
                            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {final_error}")
                            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
                            return
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram
                    logger.exception(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–º–ø—Ç–∞: {markdown_error}")
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞", show_alert=True)
                    return
            except Exception as msg_error:
                # Fallback: –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                logger.exception(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {msg_error}")
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                    
                await callback.message.answer(
                    prompt_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _get_generation_by_id(self, generation_id: UUID):
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ ID —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        
        from app.core.database import get_session
        from app.database.models.generation import ImageGeneration
        from sqlalchemy import select
        from sqlalchemy.orm import selectinload
        
        async with get_session() as session:
            stmt = (
                select(ImageGeneration)
                .options(selectinload(ImageGeneration.avatar))
                .where(ImageGeneration.id == generation_id)
            )
            result = await session.execute(stmt)
            return result.scalar_one_or_none() 