"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.keyboards.gallery import get_gallery_menu
from app.keyboards.main import get_main_menu
from app.core.di import get_user_service
from app.services.storage import StorageService
from app.core.logger import get_logger

logger = get_logger(__name__)
router = Router()

class GalleryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏"""
    waiting_for_image = State()
    waiting_for_folder = State()
    processing = State()

@router.callback_query(F.data == "gallery_my_images")
async def show_my_images(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(call.from_user.id)
            if not user:
                await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            async with StorageService() as storage:
                images = await storage.get_user_images(user.id)
                
                if not images:
                    await call.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", show_alert=True)
                    return

                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                await call.message.edit_text(
                    "üñº –í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=get_gallery_menu()
                )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", show_alert=True)

@router.callback_query(F.data == "gallery_upload")
async def upload_image(call: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    await call.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...", show_alert=False)
    await state.set_state(GalleryStates.waiting_for_image)
    await call.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WEBP\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB",
        reply_markup=get_gallery_menu()
    )

@router.callback_query(F.data == "gallery_search")
async def search_images(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    await call.answer("üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", show_alert=False)
    await call.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=get_gallery_menu()
    )

@router.callback_query(F.data == "gallery_folders")
async def show_folders(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        async with get_user_service() as user_service:
            user = await user_service.get_user_by_telegram_id(call.from_user.id)
            if not user:
                await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            async with StorageService() as storage:
                folders = await storage.get_user_folders(user.id)
                
                if not folders:
                    await call.answer("üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞–ø–æ–∫", show_alert=True)
                    return

                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–ø–æ–∫
                await call.message.edit_text(
                    "üìÅ –í–∞—à–∏ –ø–∞–ø–∫–∏\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=get_gallery_menu()
                )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–ø–æ–∫")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–ø–æ–∫", show_alert=True)

@router.message(GalleryStates.waiting_for_image)
async def handle_image(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    try:
        if not message.photo:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                reply_markup=get_gallery_menu()
            )
            return

        await state.set_state(GalleryStates.processing)
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        async with StorageService() as storage:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = await storage.upload_image(
                user_id=message.from_user.id,
                image=message.photo[-1]
            )

        await state.clear()
        await message.answer(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            f"ID: {result.id}\n"
            f"–†–∞–∑–º–µ—Ä: {result.size}",
            reply_markup=get_gallery_menu()
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=get_gallery_menu()
        ) 