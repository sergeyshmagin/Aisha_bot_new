"""
–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
from datetime import datetime
from typing import Dict, Optional
from uuid import UUID, uuid4
from enum import Enum

from sqlalchemy import JSON, Boolean, DateTime, Float, ForeignKey, Integer, BigInteger, String, Text, Enum as SQLEnum
from sqlalchemy.dialects.postgresql import UUID as PGUUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from ..base import Base

# –ù–æ–≤—ã–µ Enums –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
class AvatarGender(str, Enum):
    MALE = "male"
    FEMALE = "female"

class AvatarStatus(str, Enum):
    DRAFT = "draft"
    PHOTOS_UPLOADING = "photos_uploading"
    READY_FOR_TRAINING = "ready_for_training"
    TRAINING = "training"
    COMPLETED = "completed"
    ERROR = "error"
    CANCELLED = "cancelled"

class AvatarType(str, Enum):
    CHARACTER = "character"
    STYLE = "style"
    CUSTOM = "custom"

class AvatarTrainingType(str, Enum):
    """–¢–∏–ø –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–æ–≤—ã–π enum –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)"""
    PORTRAIT = "portrait"
    STYLE = "style"

class FALFinetuneType(str, Enum):
    """–¢–∏–ø —Ñ–∞–π–Ω—Ç—é–Ω–∏–Ω–≥–∞ FAL AI"""
    FULL = "full"
    LORA = "lora"

class FALPriority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—É—á–µ–Ω–∏—è FAL AI"""
    SPEED = "speed"
    QUALITY = "quality"
    HIGH_RES_ONLY = "high_res_only"

class PhotoValidationStatus(str, Enum):
    PENDING = "pending"
    VALID = "valid"
    INVALID = "invalid"
    DUPLICATE = "duplicate"

class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "users"

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    telegram_id: Mapped[str] = mapped_column(String(50), unique=True, index=True)
    first_name: Mapped[str] = mapped_column(String(64))
    last_name: Mapped[Optional[str]] = mapped_column(String(64), nullable=True)
    username: Mapped[Optional[str]] = mapped_column(String(64), nullable=True)
    language_code: Mapped[str] = mapped_column(String(8), default="ru")
    timezone: Mapped[Optional[str]] = mapped_column(String(32), nullable=True, default="UTC+5")
    is_premium: Mapped[bool] = mapped_column(Boolean, default=False)
    is_bot: Mapped[bool] = mapped_column(Boolean, default=False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_bot
    is_blocked: Mapped[bool] = mapped_column(Boolean, default=False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_blocked
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), default=datetime.utcnow
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # –°–≤—è–∑–∏
    avatars: Mapped[list["Avatar"]] = relationship(back_populates="user", cascade="all, delete-orphan")
    avatar_photos: Mapped[list["AvatarPhoto"]] = relationship(back_populates="user")
    balance: Mapped["UserBalance"] = relationship(back_populates="user")
    state: Mapped[Optional["UserState"]] = relationship(back_populates="user")
    transcripts: Mapped[list["UserTranscript"]] = relationship(back_populates="user")
    profile: Mapped[Optional["UserProfile"]] = relationship(back_populates="user")
    settings: Mapped[Optional["UserSettings"]] = relationship(back_populates="user")
    group: Mapped[Optional["UserGroup"]] = relationship(back_populates="user")

# UserBalance —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ app/database/models/user_balance.py

class UserState(Base):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "user_states"

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id"), unique=True)
    state_data: Mapped[Dict] = mapped_column(JSON)
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), default=datetime.utcnow
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # –°–≤—è–∑–∏
    user: Mapped[User] = relationship(back_populates="state")

class Avatar(Base):
    """–ú–æ–¥–µ–ª—å –∞–≤–∞—Ç–∞—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–ª—è FAL AI"""
    __tablename__ = "avatars"

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id"))
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    name: Mapped[str] = mapped_column(String(100))
    gender: Mapped[AvatarGender] = mapped_column(SQLEnum(AvatarGender, native_enum=False))
    avatar_type: Mapped[AvatarType] = mapped_column(SQLEnum(AvatarType, native_enum=False), default=AvatarType.CHARACTER)
    training_type: Mapped[AvatarTrainingType] = mapped_column(SQLEnum(AvatarTrainingType, native_enum=False), default=AvatarTrainingType.PORTRAIT)
    status: Mapped[AvatarStatus] = mapped_column(SQLEnum(AvatarStatus, native_enum=False), default=AvatarStatus.DRAFT)
    
    # FAL AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    finetune_id: Mapped[Optional[str]] = mapped_column(String(255), nullable=True, index=True)
    fal_request_id: Mapped[Optional[str]] = mapped_column(String(255), nullable=True, index=True)  # üÜï Request ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    training_progress: Mapped[int] = mapped_column(Integer, default=0)  # 0-100
    training_started_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)
    training_completed_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
    fal_mode: Mapped[str] = mapped_column(String(20), default="character")  # character, style, custom
    fal_iterations: Mapped[int] = mapped_column(Integer, default=500)
    fal_priority: Mapped[FALPriority] = mapped_column(SQLEnum(FALPriority, native_enum=False), default=FALPriority.QUALITY)
    trigger_word: Mapped[str] = mapped_column(String(50), default="TOK")
    lora_rank: Mapped[int] = mapped_column(Integer, default=32)
    
    # üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è FAL AI
    learning_rate: Mapped[Optional[float]] = mapped_column(Float, nullable=True)  # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    finetune_type: Mapped[FALFinetuneType] = mapped_column(SQLEnum(FALFinetuneType, native_enum=False), default=FALFinetuneType.LORA)
    finetune_comment: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—É—á–µ–Ω–∏—é
    
    # üÜï Portrait-specific –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (flux-lora-portrait-trainer)
    trigger_phrase: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)  # –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    steps: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)  # –®–∞–≥–∏ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–≤–º–µ—Å—Ç–æ iterations)
    multiresolution_training: Mapped[bool] = mapped_column(Boolean, default=True)  # –ú—É–ª—å—Ç–∏—Ä–∞–∑—Ä–µ—à–∞—é—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ
    subject_crop: Mapped[bool] = mapped_column(Boolean, default=True)  # –ê–≤—Ç–æ–æ–±—Ä–µ–∑–∫–∞ —Å—É–±—ä–µ–∫—Ç–∞
    create_masks: Mapped[bool] = mapped_column(Boolean, default=False)  # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫
    
    # üÜï Style-specific –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (flux-pro-trainer)
    captioning: Mapped[bool] = mapped_column(Boolean, default=True)  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–µ–π
    
    # üÜï –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    diffusers_lora_file_url: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)  # URL LoRA —Ñ–∞–π–ª–∞
    config_file_url: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)  # URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    training_logs: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # –õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è
    training_error: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # –û—à–∏–±–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    
    # üÜï Webhook –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    webhook_url: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    last_status_check: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    
    # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    avatar_data: Mapped[Dict] = mapped_column(JSON, default=dict)
    training_config: Mapped[Dict] = mapped_column(JSON, default=dict)
    fal_response_data: Mapped[Dict] = mapped_column(JSON, default=dict)  # üÜï –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç FAL AI
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    photos_count: Mapped[int] = mapped_column(Integer, default=0)
    generations_count: Mapped[int] = mapped_column(Integer, default=0)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä
    is_main: Mapped[bool] = mapped_column(Boolean, default=False)  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    user: Mapped[User] = relationship(back_populates="avatars")
    photos: Mapped[list["AvatarPhoto"]] = relationship(back_populates="avatar", cascade="all, delete-orphan")

    # ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –°–û –°–¢–ê–¢–£–°–û–ú
    def is_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∞–≤–∞—Ç–∞—Ä"""
        return self.status == AvatarStatus.COMPLETED
    
    def is_draft(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º"""
        return self.status == AvatarStatus.DRAFT
    
    def is_training(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—É—á–∞–µ—Ç—Å—è –ª–∏ –∞–≤–∞—Ç–∞—Ä"""
        return self.status == AvatarStatus.TRAINING
        
    def is_ready_for_generation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return self.status == AvatarStatus.COMPLETED and (self.diffusers_lora_file_url or self.finetune_id)
    
    def get_status_display(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å"""
        status_map = {
            AvatarStatus.DRAFT: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
            AvatarStatus.PHOTOS_UPLOADING: "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ",
            AvatarStatus.READY_FOR_TRAINING: "–ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é",
            AvatarStatus.TRAINING: "–û–±—É—á–∞–µ—Ç—Å—è",
            AvatarStatus.COMPLETED: "–ì–æ—Ç–æ–≤",
            AvatarStatus.ERROR: "–û—à–∏–±–∫–∞",
            AvatarStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω"
        }
        return status_map.get(self.status, str(self.status.value))

class AvatarPhoto(Base):
    """–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    __tablename__ = "avatar_photos"

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    avatar_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("avatars.id"))
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id"))
    
    # –•—Ä–∞–Ω–µ–Ω–∏–µ
    minio_key: Mapped[str] = mapped_column(String(255))  # –ü—É—Ç—å –≤ MinIO
    file_hash: Mapped[str] = mapped_column(String(64), index=True)  # MD5/SHA –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    # –ü–æ—Ä—è–¥–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
    upload_order: Mapped[int] = mapped_column(Integer)  # –ü–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    validation_status: Mapped[PhotoValidationStatus] = mapped_column(SQLEnum(PhotoValidationStatus, native_enum=False), default=PhotoValidationStatus.PENDING)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    file_size: Mapped[int] = mapped_column(Integer)  # –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    width: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)
    height: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)
    format: Mapped[str] = mapped_column(String(10))  # jpg, png, webp
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    has_face: Mapped[Optional[bool]] = mapped_column(Boolean, nullable=True)  # –ï—Å—Ç—å –ª–∏ –ª–∏—Ü–æ
    quality_score: Mapped[Optional[float]] = mapped_column(Float, nullable=True)  # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ 0-1
    validation_error: Mapped[Optional[str]] = mapped_column(Text, nullable=True)  # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    photo_metadata: Mapped[Dict] = mapped_column(JSON, default=dict)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow)
    validated_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)
    
    # –°–≤—è–∑–∏
    avatar: Mapped[Avatar] = relationship(back_populates="photos")
    user: Mapped[User] = relationship(back_populates="avatar_photos")

class UserTranscript(Base):
    """–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "user_transcripts"

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id"))
    audio_key: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    transcript_key: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    transcript_metadata: Mapped[Dict] = mapped_column(JSON, default=dict)
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), default=datetime.utcnow
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # –°–≤—è–∑–∏
    user: Mapped[User] = relationship(back_populates="transcripts")

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfile(Base):
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    __tablename__ = 'user_profiles'

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), unique=True)
    avatar_path: Mapped[Optional[str]] = mapped_column(String(255))
    bio: Mapped[Optional[str]] = mapped_column(Text)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)

    user: Mapped[User] = relationship(back_populates="profile")

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –∫—ç—à–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
class UserTranscriptCache(Base):
    """–ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)."""
    __tablename__ = "user_transcript_cache"
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id"), primary_key=True)
    path: Mapped[str] = mapped_column(String(512))
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow)

    user: Mapped[User] = relationship()

class UserGroup(Base):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI-—Ñ—É–Ω–∫—Ü–∏–π"""
    __tablename__ = "user_groups"

    id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), primary_key=True, default=uuid4)
    user_id: Mapped[UUID] = mapped_column(PGUUID(as_uuid=True), ForeignKey("users.id"), unique=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
    group_id: Mapped[str] = mapped_column(BigInteger, unique=True, index=True)  # Telegram group ID
    group_title: Mapped[str] = mapped_column(String(255))
    invite_link: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_via: Mapped[str] = mapped_column(String(50), default="pool_strategy")  # pool_strategy, manual, etc
    is_forum_enabled: Mapped[bool] = mapped_column(Boolean, default=True)
    setup_completed: Mapped[bool] = mapped_column(Boolean, default=False)
    
    # –¢–æ–ø–∏–∫–∏ –≥—Ä—É–ø–ø—ã (JSON —Å –º–∞—Å—Å–∏–≤–æ–º)
    topics: Mapped[Dict] = mapped_column(JSON, default=dict)  # {"transcription": 123, "generation": 456}
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    last_accessed_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)

    # –°–≤—è–∑–∏
    user: Mapped[User] = relationship(back_populates="group")

    def is_accessible(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞"""
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞
        return self.setup_completed and self.group_id is not None

    def get_topic_id(self, topic_type: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–æ–ø–∏–∫–∞ –ø–æ —Ç–∏–ø—É"""
        return self.topics.get(topic_type) if self.topics else None

    def update_topics(self, new_topics: Dict[str, int]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–∞—Ö"""
        if not self.topics:
            self.topics = {}
        self.topics.update(new_topics)
