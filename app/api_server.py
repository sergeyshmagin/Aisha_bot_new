"""
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI
"""
from typing import Dict, Any
from fastapi import FastAPI, HTTPException, Request, BackgroundTasks
from fastapi.responses import JSONResponse
from aiogram import Bot

from app.core.config import settings
from app.core.logger import get_logger
from app.database.connection import get_session_dependency
from app.services.avatar.training_service import AvatarTrainingService
from app.services.user import get_user_service_with_session

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Aisha Bot API", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π Bot instance –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot_instance = None

async def get_bot() -> Bot:
    """–ü–æ–ª—É—á–∞–µ—Ç Bot instance –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global bot_instance
    if bot_instance is None:
        bot_instance = Bot(token=settings.TELEGRAM_TOKEN)
    return bot_instance

async def send_avatar_ready_notification(user_telegram_id: str, avatar_name: str, training_type: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞
    
    Args:
        user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        training_type: –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (portrait/style)
    """
    try:
        bot = await get_bot()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        if training_type == "portrait":
            emoji = "üé≠"
            type_name = "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π"
        else:
            emoji = "üé®"
            type_name = "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
        
        message = (
            f"üéâ –í–∞—à –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!\n\n"
            f"{emoji} **{avatar_name}** ({type_name} —Å—Ç–∏–ª—å)\n"
            f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
        )
        
        await bot.send_message(
            chat_id=user_telegram_id,
            text=message,
            parse_mode="Markdown"
        )
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
        
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")

@app.post("/webhook/fal/status")
async def fal_status_webhook(request: Request, background_tasks: BackgroundTasks):
    """
    Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook –æ—Ç FAL AI –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
        webhook_data = await request.json()
        
        logger.info(f"[FAL WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook: {webhook_data}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        background_tasks.add_task(
            handle_fal_webhook,
            webhook_data
        )
        
        # –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º FAL AI —á—Ç–æ webhook –ø–æ–ª—É—á–µ–Ω
        return JSONResponse(
            content={"status": "received"},
            status_code=200
        )
        
    except Exception as e:
        logger.exception(f"[FAL WEBHOOK] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook: {e}")
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç webhook"
        )

async def handle_fal_webhook(webhook_data: Dict[str, Any]) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç FAL AI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        webhook_data: –î–∞–Ω–Ω—ã–µ –æ—Ç FAL AI
        
    Returns:
        bool: True –µ—Å–ª–∏ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        logger.info(f"[FAL WEBHOOK] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook: {webhook_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session = await get_session_dependency()
        training_service = AvatarTrainingService(session)
        user_service = get_user_service_with_session(session)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        success = await training_service.handle_webhook(webhook_data)
        
        if not success:
            logger.warning("[FAL WEBHOOK] Webhook –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return False
        
        # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        status = webhook_data.get("status")
        if status == "completed":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ webhook
            request_id = webhook_data.get("request_id") or webhook_data.get("finetune_id")
            training_type = webhook_data.get("training_type", "portrait")
            
            if request_id:
                # –ù–∞—Ö–æ–¥–∏–º –∞–≤–∞—Ç–∞—Ä –ø–æ request_id
                avatar = await training_service._find_avatar_by_request_id(request_id)
                
                if avatar:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await user_service.get_user_by_id(avatar.user_id)
                    
                    if user and user.telegram_id:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await send_avatar_ready_notification(
                            user_telegram_id=user.telegram_id,
                            avatar_name=avatar.name,
                            training_type=training_type
                        )
                        
                        logger.info(f"[FAL WEBHOOK] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    else:
                        logger.warning(f"[FAL WEBHOOK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ {avatar.id}")
                else:
                    logger.warning(f"[FAL WEBHOOK] –ê–≤–∞—Ç–∞—Ä —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        logger.exception(f"[FAL WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return False

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "service": "Aisha Bot API"}

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {"message": "Aisha Bot API Server", "version": "1.0.0"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
