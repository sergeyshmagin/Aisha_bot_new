#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è FAL AI webhook
–° –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
"""
import uvicorn
import os
import sys
import asyncio
from pathlib import Path
from typing import Dict, Any, Optional

def setup_paths():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞"""
    project_root = Path(__file__).parent
    api_server_dir = project_root / "api_server"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º –º–æ–¥—É–ª—è–º
    sys.path.insert(0, str(project_root))
    sys.path.insert(0, str(api_server_dir))
    
    os.chdir(api_server_dir)
    return project_root, api_server_dir

def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    from fastapi import FastAPI, Request, HTTPException, BackgroundTasks, Depends
    from fastapi.responses import JSONResponse
    from fastapi.middleware.cors import CORSMiddleware
    
    app = FastAPI(
        title="Aisha Bot FAL Webhook API",
        description="API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç FAL AI —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é",
        version="1.0.0"
    )
    
    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["https://aibots.kz"],
        allow_credentials=True,
        allow_methods=["GET", "POST"],
        allow_headers=["*"],
    )
    
    @app.get("/")
    async def root():
        return {
            "service": "Aisha Bot FAL Webhook API",
            "version": "1.0.0",
            "status": "running",
            "features": ["webhook_processing", "telegram_notifications", "database_integration"]
        }
    
    @app.get("/health")
    async def health():
        return {
            "status": "healthy",
            "service": "Aisha Bot FAL Webhook API"
        }
    
    @app.get("/api/v1/webhook/status")
    async def webhook_status():
        return {
            "webhook_endpoint": "/api/v1/avatar/status_update",
            "ssl_configured": False,  # nginx handles SSL
            "status": "active"
        }
    
    @app.post("/api/v1/avatar/status_update")
    async def fal_avatar_status_webhook(request: Request, background_tasks: BackgroundTasks):
        """
        Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç FAL AI –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
            webhook_data = await request.json()
            
            print(f"üì° [FAL WEBHOOK] –ü–æ–ª—É—á–µ–Ω webhook: {webhook_data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            request_id = webhook_data.get("request_id") or webhook_data.get("finetune_id")
            status = webhook_data.get("status")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not request_id:
                print(f"‚ùå request_id/finetune_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ webhook: {webhook_data}")
                raise HTTPException(status_code=400, detail="request_id/finetune_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ FAL AI
            background_tasks.add_task(
                handle_fal_webhook_processing,
                webhook_data
            )
            
            # –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º FAL AI
            return JSONResponse(
                content={
                    "status": "received",
                    "request_id": request_id,
                    "message": "Webhook –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                },
                status_code=200
            )
            
        except HTTPException:
            raise
        except Exception as e:
            print(f"‚ùå [FAL WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook: {e}")
            raise HTTPException(
                status_code=500,
                detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            )
    
    return app

async def handle_fal_webhook_processing(webhook_data: Dict[str, Any]) -> bool:
    """
    –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç FAL AI
    """
    try:
        print(f"üîÑ [FAL WEBHOOK] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {webhook_data}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            sys.path.insert(0, '/opt/aisha-backend')
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
            from app.database.connection import get_async_session
            
            print("‚úÖ Database connection –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ AvatarTrainingService
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
        except ImportError as e:
            print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É webhook")
        
        # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook
        request_id = webhook_data.get("request_id") or webhook_data.get("finetune_id")
        status = webhook_data.get("status")
        
        print(f"üìä Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: request_id={request_id}, status={status}")
        
        # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if status in ["completed", "ready"]:
            await send_simple_completion_notification(webhook_data)
        
        print("‚úÖ [FAL WEBHOOK] –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå [FAL WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

async def send_simple_completion_notification(webhook_data: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    """
    try:
        print(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è request_id={webhook_data.get('request_id')}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def run_server():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ FAL Webhook API —Å–µ—Ä–≤–µ—Ä–∞")
    print("üì° Endpoint: http://localhost:8000/api/v1/avatar/status_update")
    print("üîç Health check: http://localhost:8000/health")
    print("üìä Webhook status: http://localhost:8000/api/v1/webhook/status")
    print("üîß Features: webhook processing, basic notifications")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    host = "127.0.0.1"
    port = 8000
    
    app = create_app()
    
    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="info"
    )

if __name__ == "__main__":
    project_root, api_dir = setup_paths()
    run_server()
