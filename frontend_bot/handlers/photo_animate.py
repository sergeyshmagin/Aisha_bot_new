# """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ Telegram-–±–æ—Ç–µ Aisha."""
# from telebot.types import (
#     Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove,
#     ReplyKeyboardMarkup, KeyboardButton
# )
# from frontend_bot.handlers.general import bot
# from frontend_bot.services.state_manager import set_state, get_state
# from frontend_bot.utils.logger import get_logger
# from frontend_bot.keyboards.reply import (
#     photo_menu_keyboard, avatar_menu_keyboard, ai_photographer_keyboard,
#     my_avatars_keyboard
# )
# from frontend_bot.keyboards.main_menu_keyboard import main_menu_keyboard
# from frontend_bot.services.avatar_manager import get_avatars_index

# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ –ø–æ user_id
# user_photos = {}

# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ user_id
# # avatar_photos = defaultdict(list)
# # AVATAR_MIN_PHOTOS = 10

# # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: list of avatars)
# # user_avatars = defaultdict(list)
# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (user_id: True/False)
# # awaiting_avatar_name = set()
# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ (user_id: dict)
# # draft_avatar = {}

# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è-—Å—á—ë—Ç—á–∏–∫–∞
# # avatar_counter_message_ids = {}

# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: user_id -> avatar_id -> [message_id, ...]
# # user_photo_message_ids = {}

# logger = get_logger('photo_animate')

# # –£–î–ê–õ–ï–ù–û: AVATAR_MIN_PHOTOS = 10

# def _save_photo(file_info, user_id: int, suffix: str) -> str:
#     """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–ø–∫—É storage –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."""
#     # file_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API.
#     # user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#     # suffix (str): –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
#     # Returns:
#     #   str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
#     file_path = f"storage/{user_id}_{suffix}.jpg"
#     return file_path

# def gender_inline_keyboard():
#     keyboard = InlineKeyboardMarkup()
#     keyboard.row(
#         InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="avatar_gender_man"),
#         InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="avatar_gender_woman"),
#         InlineKeyboardButton("‚öß –î—Ä—É–≥–æ–µ", callback_data="avatar_gender_other"),
#     )
#     return keyboard

# async def build_avatars_keyboard(avatars):
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(KeyboardButton('üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä'))
#     for avatar in avatars:
#         if not isinstance(avatar, dict):
#             continue
#         title = avatar.get('title')
#         if title:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –∑–∞–¥–∞–Ω–æ –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
#             keyboard.add(KeyboardButton(str(title)))
#     keyboard.add(KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
#     return keyboard

# @bot.message_handler(func=lambda m: m.text == "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ")
# async def photo_menu_entry(message: Message):
#     set_state(message.from_user.id, "photo_menu")
#     await bot.send_message(
#         message.chat.id,
#         "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ\n\n–£–ª—É—á—à–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ò–ò-–∞–≤–∞—Ç–∞—Ä—ã.",
#         reply_markup=photo_menu_keyboard()
#     )

# @bot.message_handler(func=lambda m: m.text == "‚ú® –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ")
# async def enhance_photo_entry(message: Message):
#     await bot.send_message(
#         message.chat.id,
#         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ ‚ú®.",
#         reply_markup=ReplyKeyboardRemove()
#     )
#     set_state(message.from_user.id, 'photo_enhance')

# @bot.message_handler(func=lambda m: m.text == "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ")
# async def ai_photographer_menu(message: Message):
#     set_state(message.from_user.id, "ai_photographer")
#     await bot.send_message(
#         message.chat.id,
#         "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä—ã –∏ –æ–±—Ä–∞–∑—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.",
#         reply_markup=ai_photographer_keyboard()
#     )

# @bot.message_handler(func=lambda m: m.text == "üñº –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã")
# async def my_avatars_menu(message: Message):
#     set_state(message.from_user.id, "my_avatars")
#     user_id = message.from_user.id
#     avatars = get_avatars_index(user_id)
#     if not avatars:
#         await bot.send_message(
#             message.chat.id,
#             "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π! üöÄ",
#             reply_markup=my_avatars_keyboard()
#         )
#     else:
#         await bot.send_message(
#             message.chat.id,
#             "–ú–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤:",
#             reply_markup=await build_avatars_keyboard(avatars)
#         )

# @bot.message_handler(func=lambda m: m.text == "üñº –û–±—Ä–∞–∑—ã")
# async def gallery_menu(message: Message):
#     set_state(message.from_user.id, "gallery")
#     await bot.send_message(
#         message.chat.id,
#         "–ì–∞–ª–µ—Ä–µ—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ —Å—Ç–∏–ª–µ–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.",
#         reply_markup=ai_photographer_keyboard()
#     )

# @bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
# async def universal_back_handler(message: Message):
#     user_id = message.from_user.id
#     state = get_state(user_id)
#     if state == "photo_menu":
#         set_state(user_id, "main_menu")
#         await bot.send_message(
#             message.chat.id,
#             "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=main_menu_keyboard()
#         )
#     elif state == "ai_photographer":
#         set_state(user_id, "photo_menu")
#         await bot.send_message(
#             message.chat.id,
#             "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ\n\n–£–ª—É—á—à–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ò–ò-–∞–≤–∞—Ç–∞—Ä—ã.",
#             reply_markup=photo_menu_keyboard()
#         )
#     elif state in ["my_avatars", "gallery"]:
#         set_state(user_id, "ai_photographer")
#         await bot.send_message(
#             message.chat.id,
#             "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä—ã –∏ –æ–±—Ä–∞–∑—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.",
#             reply_markup=ai_photographer_keyboard()
#         )
#     else:
#         set_state(user_id, "main_menu")
#         await bot.send_message(
#             message.chat.id,
#             "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=main_menu_keyboard()
#         )

# def delete_photo_keyboard(photo_idx):
#     keyboard = InlineKeyboardMarkup()
#     keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"avatar_del_photo_{photo_idx}"))
#     return keyboard

# # –£–î–ê–õ–ï–ù–û: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å FSM –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
# # @bot.message_handler(content_types=['photo'])
# # async def handle_photo(message: Message) -> None:
# #     ...

# @bot.message_handler(func=lambda m: m.text == "üßë‚Äçüé® –ê–≤–∞—Ç–∞—Ä—ã")
# async def avatar_menu(message):
#     """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é '–ê–≤–∞—Ç–∞—Ä—ã'."""
#     await bot.send_message(
#         message.chat.id,
#         "–ú–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤:",
#         reply_markup=avatar_menu_keyboard()
#     )

# def style_inline_keyboard():
#     keyboard = InlineKeyboardMarkup()
#     styles = [
#         ("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "realistic"),
#         ("–ê–Ω–∏–º–µ", "anime"),
#         ("–ú—É–ª—å—Ç—Ñ–∏–ª—å–º", "cartoon"),
#         ("–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç", "pixel"),
#     ]
#     for label, value in styles:
#         keyboard.add(InlineKeyboardButton(label, callback_data=f"avatar_style_{value}"))
#     return keyboard

# # @bot.callback_query_handler(func=lambda call: call.data.startswith("avatar_style_"))
# # async def handle_style_select(call):
# #     user_id = call.from_user.id
# #     style = call.data.replace("avatar_style_", "")
# #     avatar_id = get_current_avatar_id(user_id)
# #     update_avatar_fsm(user_id, avatar_id, style=style)
# #     set_state(user_id, "avatar_name_input")
# #     await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:")

# # @bot.message_handler(func=lambda m: get_state(m.from_user.id) == "avatar_name_input")
# # async def handle_avatar_name_input(message):
# #     user_id = message.from_user.id
# #     avatar_id = get_current_avatar_id(user_id)
# #     name = message.text.strip()
# #     update_avatar_fsm(user_id, avatar_id, title=name)
# #     set_state(user_id, "my_avatars")
# #     await bot.send_message(
# #         message.chat.id,
# #         f"–ê–≤–∞—Ç–∞—Ä '{name}' –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!",
# #         reply_markup=my_avatars_keyboard()
# #     )

# # @bot.callback_query_handler(func=lambda call: call.data.startswith("avatar_del_photo_"))
# # async def handle_delete_photo(call):
# #     user_id = call.from_user.id
# #     avatar_id = get_current_avatar_id(user_id)
# #     idx = int(call.data.replace("avatar_del_photo_", ""))
# #     data = load_avatar_fsm(user_id, avatar_id)
# #     photos = data.get('photos', [])
# #     if 0 <= idx < len(photos):
# #         import os
# #         try:
# #             os.remove(photos[idx])
# #         except Exception:
# #             pass
# #         del photos[idx]
# #         update_avatar_fsm(user_id, avatar_id, photos=photos)
# #         await bot.answer_callback_query(call.id, "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")
# #         # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–±–æ—Ç–∞ —Å –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
# #         await bot.delete_message(call.message.chat.id, call.message.message_id)
# #         # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ
# #         try:
# #             user_msg_id = user_photo_message_ids[user_id][avatar_id][idx]
# #             await bot.delete_message(call.message.chat.id, user_msg_id)
# #             del user_photo_message_ids[user_id][avatar_id][idx]
# #         except Exception:
# #             pass
# #     else:
# #         await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.")

# # @bot.message_handler(content_types=['photo'])
# # async def collect_avatar_photos(message):
# #     user_id = message.from_user.id
# #     if user_id not in avatar_photos:
# #         return  # –ù–µ –≤ —Ä–µ–∂–∏–º–µ —Å–±–æ—Ä–∞ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
# #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
# #     file_info = await bot.get_file(message.photo[-1].file_id)
# #     file_path = f"storage/avatar_{user_id}_{len(avatar_photos[user_id])}.jpg"
# #     downloaded_file = await bot.download_file(file_info.file_path)
# #     async with aiofiles.open(file_path, "wb") as f:
# #         await f.write(downloaded_file)
# #     avatar_photos[user_id].append(file_path)
# #     if len(avatar_photos[user_id]) < AVATAR_MIN_PHOTOS:
# #         await bot.send_message(
# #             message.chat.id,
# #             f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ({len(avatar_photos[user_id])}/{AVATAR_MIN_PHOTOS}). –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë."
# #         )
# #     else:
# #         await bot.send_message(
# #             message.chat.id,
# #             "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' –µ—â—ë —Ä–∞–∑ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
# #         )

# # @bot.callback_query_handler(func=lambda call: call.data.startswith("avatar_gender_"))
# # async def avatar_gender_callback(call):
# #     user_id = call.from_user.id
# #     gender = call.data.replace("avatar_gender_", "")
# #     gender_emoji = {"man": "üë®", "woman": "üë©", "other": "‚öß"}.get(gender, "‚ùì")
# #     draft_avatar[user_id] = {"gender": gender, "gender_emoji": gender_emoji, "photos": avatar_photos[user_id]}
# #     awaiting_avatar_name.add(user_id)
# #     await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:")

# # @bot.message_handler(func=lambda m: m.from_user.id in awaiting_avatar_name)
# # async def avatar_name_input(message):
# #     user_id = message.from_user.id
# #     name = message.text.strip()
# #     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ uuid)
# #     avatar_id = f"{user_id}_{len(user_avatars[user_id]) + 1}"
# #     avatar = draft_avatar.pop(user_id)
# #     avatar.update({"id": avatar_id, "name": name})
# #     user_avatars[user_id].append(avatar)
# #     awaiting_avatar_name.discard(user_id)
# #     await bot.send_message(
# #         message.chat.id,
# #         f"–ê–≤–∞—Ç–∞—Ä '{name}' —Å–æ–∑–¥–∞–Ω!",
# #         reply_markup=avatars_menu_keyboard(user_id, selected_id=avatar_id)
# #     )

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è)
# # def show_avatars_menu(user_id, chat_id, selected_id=None):
# #     text = (
# #         "\U0001F98B –ú–û–ò –ê–í–ê–¢–ê–†–´\n\n"
# #         "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –∞–≤–∞—Ç–∞—Ä–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ:"
# #     )
# #     bot.send_message(chat_id, text, reply_markup=avatars_menu_keyboard(user_id, selected_id=selected_id))
