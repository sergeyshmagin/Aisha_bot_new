from frontend_bot.keyboards.common import confirm_keyboard
from frontend_bot.texts.avatar.texts import PHOTO_NAME_EMPTY, AVATAR_CONFIRM_TEXT
from frontend_bot.services.avatar_manager import update_avatar_fsm, load_avatar_fsm
from frontend_bot.services.state_manager import (
    get_state,
    set_state,
    get_current_avatar_id,
    fsm_states,
)
from frontend_bot.bot import bot
from frontend_bot.config import (
    FAL_MODE,
    FAL_ITERATIONS,
    FAL_PRIORITY,
    FAL_CAPTIONING,
    FAL_TRIGGER_WORD,
    FAL_LORA_RANK,
    FAL_FINETUNE_TYPE,
    FAL_WEBHOOK_URL,
    FAL_TRAINING_TEST_MODE,
)
from frontend_bot.services.fal_trainer import train_avatar
from frontend_bot.keyboards.reply import my_avatars_keyboard
from frontend_bot.texts.common import ERROR_FILE
from frontend_bot.utils.validators import validate_user_avatar
from frontend_bot.keyboards.avatar import avatar_confirm_keyboard
import logging
from frontend_bot.handlers.transcribe import user_states

print("CONFIRM HANDLERS LOADED")
# –ú–æ–¥—É–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–º
# –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞ handle_avatar_confirm_yes,
# handle_avatar_confirm_edit, handle_avatar_cancel, handle_create_avatar
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ avatar_manager,
# state_manager, utils, config –∏ —Ç.–¥.

logger = logging.getLogger(__name__)

MENU_COMMANDS = [
    "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
    "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤–∞—Ç–∞—Ä—ã",
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
]

CANCEL_COMMANDS = [
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    "–û—Ç–º–µ–Ω–∞",
]
ALL_MENU_COMMANDS = [
    "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
    "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤–∞—Ç–∞—Ä—ã",
    "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ",
    "‚ú® –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ",
    "üñº –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã",
    "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ",
    "üñº –û–±—Ä–∞–∑—ã",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
]


@bot.callback_query_handler(func=lambda call: call.data == "avatar_confirm_yes")
@validate_user_avatar
async def handle_avatar_confirm_yes(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    from frontend_bot.services.avatar_manager import load_avatar_fsm

    mark_avatar_ready = __import__(
        "frontend_bot.services.avatar_manager", fromlist=["mark_avatar_ready"]
    ).mark_avatar_ready
    await mark_avatar_ready(user_id, avatar_id)
    data = await load_avatar_fsm(user_id, avatar_id)
    photos = [p["path"] if isinstance(p, dict) else p for p in data.get("photos", [])]
    finetune_comment = f"user_id={user_id};avatar_id={avatar_id}"
    if FAL_TRAINING_TEST_MODE:
        logger.info(
            "FAL_TRAINING_TEST_MODE is ON: –æ–±—É—á–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ fal.ai, "
            "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π finetune_id."
        )
        finetune_id = "test-finetune-id"
    else:
        finetune_id = await train_avatar(
            user_id,
            avatar_id,
            data.get("title", ""),
            data.get("class_name", ""),
            photos,
            finetune_comment=finetune_comment,
            mode=FAL_MODE,
            iterations=FAL_ITERATIONS,
            priority=FAL_PRIORITY,
            captioning=FAL_CAPTIONING,
            trigger_word=FAL_TRIGGER_WORD,
            lora_rank=FAL_LORA_RANK,
            finetune_type=FAL_FINETUNE_TYPE,
            webhook_url=FAL_WEBHOOK_URL,
        )
    if not finetune_id:
        await bot.send_message(call.message.chat.id, ERROR_FILE)
        await bot.answer_callback_query(call.id)
        return
    await bot.send_message(
        call.message.chat.id,
        "‚è≥ –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞—á–∞–ª–æ—Å—å! –≠—Ç–æ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç. "
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.",
    )
    final_text = (
        "‚ú®‚ú® <b>–°–û–ó–î–ê–ù–ò–ï –ê–í–ê–¢–ê–†–ê...</b> ‚ú®‚ú®\n\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç.\n"
        "–ö–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ ‚Äî –º–∞–≥–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! ü¶ã"
    )
    await bot.send_message(call.message.chat.id, final_text, parse_mode="HTML")
    await bot.send_message(
        call.message.chat.id,
        "ü¶ã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤.",
        reply_markup=my_avatars_keyboard(),
    )
    await bot.answer_callback_query(call.id)


@bot.callback_query_handler(
    func=lambda call: call.data in ["avatar_type_man", "avatar_type_woman"]
)
async def handle_avatar_type(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    if not avatar_id:
        await bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä.")
        await bot.answer_callback_query(call.id)
        return
    gender = "man" if call.data == "avatar_type_man" else "woman"
    from frontend_bot.services.avatar_manager import update_avatar_fsm
    from frontend_bot.services.state_manager import set_state

    await update_avatar_fsm(user_id, avatar_id, gender=gender)
    await set_state(user_id, "avatar_enter_name")
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:")
    await bot.answer_callback_query(call.id)


def avatar_enter_name_filter(message):
    return fsm_states.get(message.from_user.id) == "avatar_enter_name"


@bot.message_handler(func=avatar_enter_name_filter)
async def handle_avatar_name_input(message):
    user_id = message.from_user.id
    logger.info(
        "[handle_avatar_name_input] –í—Ö–æ–¥: user_id=%s, message.text=%s",
        user_id,
        message.text,
    )
    try:
        # state = await get_state(user_id)  # –£–∂–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ñ–∏–ª—å—Ç—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
        if message.text in CANCEL_COMMANDS:
            await bot.send_message(
                message.chat.id,
                "–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–≤–∞—Ç–∞—Ä–æ–≤.",
                reply_markup=my_avatars_keyboard(),
            )
            await set_state(user_id, "my_avatars")
            return
        if message.text in ALL_MENU_COMMANDS:
            return
        name = message.text.strip()
        logger.info("[handle_avatar_name_input] name='%s'", name)
        if not name:
            logger.info("[handle_avatar_name_input] name is empty")
            await bot.send_message(message.chat.id, PHOTO_NAME_EMPTY)
            return
        avatar_id = get_current_avatar_id(user_id)
        logger.info(f"[DEBUG] handle_avatar_name_input: avatar_id={avatar_id}")
        if not avatar_id:
            await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä.")
            return
        try:
            await update_avatar_fsm(user_id, avatar_id, title=name)
            logger.info("[handle_avatar_name_input] update_avatar_fsm —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.info("[handle_avatar_name_input] –û—à–∏–±–∫–∞ –≤ update_avatar_fsm: %s", e)
            await bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞. " "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            )
            return
        try:
            await set_state(user_id, "avatar_confirm")
            logger.info(
                f"[DEBUG] handle_avatar_name_input: set_state avatar_confirm —É—Å–ø–µ—à–Ω–æ "
                f"–¥–ª—è user_id={user_id}"
            )
        except Exception as e:
            logger.info("[handle_avatar_name_input] –û—à–∏–±–∫–∞ –≤ set_state: %s", e)
            await bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é. " "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            )
            return
        try:
            data = await load_avatar_fsm(user_id, avatar_id)
            logger.info(
                f"[DEBUG] handle_avatar_name_input: load_avatar_fsm —É—Å–ø–µ—à–Ω–æ: " f"{data}"
            )
        except Exception as e:
            logger.info("[handle_avatar_name_input] –û—à–∏–±–∫–∞ –≤ load_avatar_fsm: %s", e)
            await bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–∞. " "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            )
            return
        gender = data.get("gender", "-")
        photos = data.get("photos", [])
        if gender == "man":
            gender_str = "–ú—É–∂—á–∏–Ω–∞"
            gender_emoji = "üë®‚Äçü¶∞"
        elif gender == "woman":
            gender_str = "–ñ–µ–Ω—â–∏–Ω–∞"
            gender_emoji = "üë©‚Äçü¶∞"
        else:
            gender_str = "-"
            gender_emoji = "‚ùì"
        # TODO: –ø–æ–ª—É—á–∏—Ç—å price –∏ balance –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏
        price = 150
        balance = 250
        text = AVATAR_CONFIRM_TEXT.format(
            title=name,
            gender=gender_str,
            gender_emoji=gender_emoji,
            photo_count=len(photos),
            price=price,
            balance=balance,
        )
        await bot.send_message(
            message.chat.id,
            text,
            parse_mode="HTML",
            reply_markup=avatar_confirm_keyboard(),
        )
        logger.info(
            "[handle_avatar_name_input] –°–æ–æ–±—â–µ–Ω–∏–µ —Å avatar_confirm_keyboard –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        )
    except Exception as e:
        logger.exception("[handle_avatar_name_input] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        await bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. " "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )


@bot.callback_query_handler(func=lambda call: call.data == "avatar_confirm_edit")
async def handle_avatar_confirm_edit(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    from frontend_bot.services.avatar_manager import load_avatar_fsm

    data = await load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
    await set_state(user_id, "avatar_gallery_review")
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        from frontend_bot.handlers.avatar.gallery import show_wizard_gallery

        await show_wizard_gallery(call.message.chat.id, user_id, avatar_id, photos, 0)
    except ImportError:
        await bot.send_message(
            call.message.chat.id,
            "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
        )


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handle_avatar_confirm_edit,
# handle_avatar_cancel, handle_create_avatar) –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
