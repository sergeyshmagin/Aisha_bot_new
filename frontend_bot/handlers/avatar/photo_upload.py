# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
# –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞ handle_avatar_photo_upload, flush_single_photo_buffer, flush_media_group
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ avatar_manager, state_manager, utils, config –∏ —Ç.–¥.

# ... –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ ... 

import logging
import asyncio
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from frontend_bot.bot import bot
from frontend_bot.services.avatar_manager import (
    load_avatar_fsm, add_photo_to_avatar, save_avatar_fsm, validate_photo
)
from frontend_bot.services.state_manager import (
    get_state, get_current_avatar_id, set_state
)
from frontend_bot.handlers.avatar.utils import get_progressbar, delete_last_error_message
from frontend_bot.config import AVATAR_MAX_PHOTOS, AVATAR_MIN_PHOTOS
from frontend_bot.handlers.avatar.state import (
    user_session, user_gallery, user_single_photo_buffer, user_media_group_buffer, user_media_group_timers, user_single_photo_timer, user_locks
)

logger = logging.getLogger(__name__)

@bot.message_handler(content_types=['photo'])
async def handle_avatar_photo_upload(message: Message):
    user_id = message.from_user.id
    logger.info(f"[FSM] handle_avatar_photo_upload: user_id={user_id}, message_id={message.message_id}")
    state = get_state(user_id)
    avatar_id = get_current_avatar_id(user_id)
    logger.info(f"[FSM] handle_avatar_photo_upload: state={state}, avatar_id={avatar_id}")
    if state != "avatar_photo_upload" or not avatar_id:
        logger.info(f"[FSM] handle_avatar_photo_upload: state not valid or no avatar_id")
        return
    file_info = await bot.get_file(message.photo[-1].file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    media_group_id = getattr(message, 'media_group_id', None)
    logger.info(f"[FSM] handle_avatar_photo_upload: media_group_id={media_group_id}")
    # --- –ï—Å–ª–∏ —ç—Ç–æ media_group ---
    if media_group_id:
        if user_id not in user_media_group_buffer:
            user_media_group_buffer[user_id] = {}
        if media_group_id not in user_media_group_buffer[user_id]:
            user_media_group_buffer[user_id][media_group_id] = []
        user_media_group_buffer[user_id][media_group_id].append((message.photo[-1].file_id, downloaded_file, message.message_id))
        # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
        if user_id in user_media_group_timers and media_group_id in user_media_group_timers[user_id]:
            user_media_group_timers[user_id][media_group_id].cancel()
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        task = asyncio.create_task(flush_media_group(user_id, media_group_id, message.chat.id, avatar_id))
        if user_id not in user_media_group_timers:
            user_media_group_timers[user_id] = {}
        user_media_group_timers[user_id][media_group_id] = task
        return
    # --- –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ forward –ø–∞—á–∫–æ–π) ---
    if user_id not in user_single_photo_buffer:
        user_single_photo_buffer[user_id] = []
    user_single_photo_buffer[user_id].append((message.photo[-1].file_id, downloaded_file, message.message_id))
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω
    if user_id not in user_single_photo_timer or user_single_photo_timer[user_id].done():
        task = asyncio.create_task(flush_single_photo_buffer(user_id, message.chat.id, avatar_id))
        user_single_photo_timer[user_id] = task
    return

async def flush_single_photo_buffer(user_id, chat_id, avatar_id):
    logger.info(f"[FSM] flush_single_photo_buffer called for user_id={user_id}, avatar_id={avatar_id}")
    try:
        if user_id not in user_locks:
            user_locks[user_id] = asyncio.Lock()
        async with user_locks[user_id]:
            await asyncio.sleep(1.5)
            photos = user_single_photo_buffer.pop(user_id, [])
            logger.info(f"[FSM] flush_single_photo_buffer: {len(photos)} photos to process")
            for file_id, photo_bytes, msg_id in photos:
                logger.info(f"[FSM] flush_single_photo_buffer: Processing photo {file_id}")
                data = load_avatar_fsm(user_id, avatar_id)
                logger.info(f"[FSM] flush_single_photo_buffer: loaded data.json: {data}")
                existing_photos = data.get("photos", [])
                existing_paths = [p["path"] if isinstance(p, dict) else p for p in existing_photos]
                is_valid, result = validate_photo(photo_bytes, existing_paths)
                logger.info(f"[FSM] flush_single_photo_buffer: validate_photo: {is_valid}, {result}")
                if not is_valid:
                    await delete_last_error_message(user_id, chat_id)
                    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                    try:
                        await bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
                    from io import BytesIO
                    text = None
                    if "–¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in result:
                        text = (
                            "‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                            "üì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                        )
                    else:
                        text = f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {result}\nüì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error"))
                    await bot.send_photo(
                        chat_id,
                        BytesIO(photo_bytes),
                        caption=text,
                        reply_markup=markup
                    )
                    user_session[user_id]['last_error_msg'] = None
                    continue
                await delete_last_error_message(user_id, chat_id)
                logger.info(f"[FSM] flush_single_photo_buffer: calling add_photo_to_avatar")
                photo_path = add_photo_to_avatar(user_id, avatar_id, photo_bytes, file_id=file_id)
                logger.info(f"[FSM] flush_single_photo_buffer: Photo added at {photo_path}")
                data = load_avatar_fsm(user_id, avatar_id)
                logger.info(f"[FSM] flush_single_photo_buffer: data after add_photo: {data}")
                # update_photo_hint –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –≥–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
                data["photos"][-1] = {"path": photo_path, "file_id": file_id}
                save_avatar_fsm(user_id, avatar_id, data)
                logger.info(f"[FSM] flush_single_photo_buffer: data after save_avatar_fsm: {data}")
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                try:
                    await bot.delete_message(chat_id, msg_id)
                except Exception:
                    pass
            # –ü–æ—Å–ª–µ –≤—Å–µ–π –ø–∞—á–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é
            data = load_avatar_fsm(user_id, avatar_id)
            photos = data.get("photos", [])
            msg_id = user_session[user_id]['wizard_message_ids'][-1] if user_session[user_id]['wizard_message_ids'] else None
            # notify_progress –∏ show_wizard_gallery –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ gallery.py
            # await notify_progress(chat_id, user_id, avatar_id, len(photos), msg_id)
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ review
            if len(photos) >= AVATAR_MAX_PHOTOS:
                set_state(user_id, "avatar_gallery_review")
                # await show_wizard_gallery(chat_id, user_id, avatar_id, photos, len(photos)-1 if photos else 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

async def flush_media_group(user_id, media_group_id, chat_id, avatar_id):
    if user_id not in user_locks:
        user_locks[user_id] = asyncio.Lock()
    async with user_locks[user_id]:
        logger.debug(f"[LOCK] user_id={user_id} lock acquired (media group)")
        await asyncio.sleep(1.5)
        photos = user_media_group_buffer[user_id].pop(media_group_id, [])
        for file_id, photo_bytes, msg_id in photos:
            data = load_avatar_fsm(user_id, avatar_id)
            existing_photos = data.get("photos", [])
            existing_paths = [p["path"] if isinstance(p, dict) else p for p in existing_photos]
            is_valid, result = validate_photo(photo_bytes, existing_paths)
            if not is_valid:
                await delete_last_error_message(user_id, chat_id)
                # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                try:
                    await bot.delete_message(chat_id, msg_id)
                except Exception:
                    pass
                from io import BytesIO
                text = None
                if "–¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in result:
                    text = (
                        "‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                        "üì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                    )
                else:
                    text = f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {result}\nüì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error"))
                await bot.send_photo(
                    chat_id,
                    BytesIO(photo_bytes),
                    caption=text,
                    reply_markup=markup
                )
                user_session[user_id]['last_error_msg'] = None
                continue
            await delete_last_error_message(user_id, chat_id)
            photo_path = add_photo_to_avatar(user_id, avatar_id, photo_bytes, file_id=file_id)
            data = load_avatar_fsm(user_id, avatar_id)
            data["photos"][-1] = {"path": photo_path, "file_id": file_id}
            save_avatar_fsm(user_id, avatar_id, data)
            # update_photo_hint –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –≥–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            try:
                await bot.delete_message(chat_id, msg_id)
            except Exception:
                pass
        # –ü–æ—Å–ª–µ –≤—Å–µ–π –ø–∞—á–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é
        data = load_avatar_fsm(user_id, avatar_id)
        photos = data.get("photos", [])
        msg_id = user_session[user_id]['wizard_message_ids'][-1] if user_session[user_id]['wizard_message_ids'] else None
        # notify_progress –∏ show_wizard_gallery –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ gallery.py
        # await notify_progress(chat_id, user_id, avatar_id, len(photos), msg_id)
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ review
        if len(photos) >= AVATAR_MAX_PHOTOS:
            set_state(user_id, "avatar_gallery_review")
            # await show_wizard_gallery(chat_id, user_id, avatar_id, photos, len(photos)-1 if photos else 0)
    logger.debug(f"[LOCK] user_id={user_id} lock released (media group)") 