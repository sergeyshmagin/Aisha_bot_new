"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ Aisha."""

import os
from dotenv import load_dotenv
from telebot.types import Message
from frontend_bot.keyboards.reply import (
    business_assistant_keyboard,
    photo_menu_keyboard,
    photo_enhance_keyboard,
    ai_photographer_keyboard,
)
from frontend_bot.keyboards.main_menu_keyboard import main_menu_keyboard
from frontend_bot.services.shared_menu import send_main_menu
from frontend_bot.bot_instance import bot
from frontend_bot.texts.menu.texts import BUSINESS_ASSISTANT_MENU_TEXT
from frontend_bot.repositories.user_repository import UserRepository
from frontend_bot.texts.common import HELP_TEXT
from database.config import AsyncSessionLocal

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), "../../.env"))


@bot.message_handler(commands=["start"])
async def start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_or_create(
            telegram_id=telegram_id,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
            language_code=getattr(message.from_user, 'language_code', None),
            is_bot=getattr(message.from_user, 'is_bot', False),
            is_premium=getattr(message.from_user, 'is_premium', None),
            phone_number=None,
        )
        await user_repo.update_if_changed(
            user,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
        )
    await send_main_menu(bot, message)


@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    await bot.send_message(
        message.chat.id,
        HELP_TEXT,
        reply_markup=main_menu_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "ü§ñ –ë–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
async def business_assistant_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç'."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_or_create(
            telegram_id=telegram_id,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
            language_code=getattr(message.from_user, 'language_code', None),
            is_bot=getattr(message.from_user, 'is_bot', False),
            is_premium=getattr(message.from_user, 'is_premium', None),
            phone_number=None,
        )
        await user_repo.update_if_changed(
            user,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
        )
    if not user:
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    uuid_user_id = user.id
    await bot.send_message(
        message.chat.id,
        BUSINESS_ASSISTANT_MENU_TEXT,
        reply_markup=business_assistant_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "üñº –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ")
async def photo_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ'."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_or_create(
            telegram_id=telegram_id,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
            language_code=getattr(message.from_user, 'language_code', None),
            is_bot=getattr(message.from_user, 'is_bot', False),
            is_premium=getattr(message.from_user, 'is_premium', None),
            phone_number=None,
        )
        await user_repo.update_if_changed(
            user,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
        )
    if not user:
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    uuid_user_id = user.id
    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ':",
        reply_markup=photo_menu_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "ü§ñ GPT-4o")
async def gpt4o_entrypoint(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º GPT-4o —á–µ—Ä–µ–∑ Playwright."""
    await bot.send_message(
        message.chat.id,
        (
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º GPT-4o. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, "
            "–∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ GPT-4o (Playwright)."
        ),
    )


@bot.message_handler(func=lambda m: m.text == "‚ú® –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ")
async def photo_enhance_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ'."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_or_create(
            telegram_id=telegram_id,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
            language_code=getattr(message.from_user, 'language_code', None),
            is_bot=getattr(message.from_user, 'is_bot', False),
            is_premium=getattr(message.from_user, 'is_premium', None),
            phone_number=None,
        )
        await user_repo.update_if_changed(
            user,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
        )
    if not user:
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    uuid_user_id = user.id
    await bot.send_message(
        message.chat.id,
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:",
        reply_markup=photo_enhance_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ")
async def ai_photographer_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ'."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_or_create(
            telegram_id=telegram_id,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
            language_code=getattr(message.from_user, 'language_code', None),
            is_bot=getattr(message.from_user, 'is_bot', False),
            is_premium=getattr(message.from_user, 'is_premium', None),
            phone_number=None,
        )
        await user_repo.update_if_changed(
            user,
            username=getattr(message.from_user, 'username', None),
            first_name=getattr(message.from_user, 'first_name', None),
            last_name=getattr(message.from_user, 'last_name', None),
        )
    if not user:
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    uuid_user_id = user.id
    await bot.send_message(
        message.chat.id,
        "üßë‚Äçüé® –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä—ã –∏ –æ–±—Ä–∞–∑—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.",
        reply_markup=ai_photographer_keyboard(),
    )


# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
# import asyncio
# asyncio.run(bot.polling())

# TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ state_utils —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PostgreSQL
