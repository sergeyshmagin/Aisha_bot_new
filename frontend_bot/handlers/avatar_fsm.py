import logging
import traceback
import asyncio

from telebot.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto
)
from frontend_bot.services.avatar_manager import (
    init_avatar_fsm,
    load_avatar_fsm,
    add_photo_to_avatar,
    remove_photo_from_avatar,
    update_avatar_fsm,
    validate_photo,
    save_avatar_fsm,
    clear_avatar_fsm,
    mark_avatar_ready
)
from frontend_bot.services.state_manager import (
    set_state,
    get_state,
    set_current_avatar_id,
    get_current_avatar_id,
    clear_state
)
from uuid import uuid4
import time

from frontend_bot.bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot

# –ò–º–ø–æ—Ä—Ç main_menu_keyboard, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
try:
    from frontend_bot.keyboards.main_menu_keyboard import main_menu_keyboard
except ImportError:
    def main_menu_keyboard():
        return None

from frontend_bot.keyboards.reply import my_avatars_keyboard
from frontend_bot.texts.avatar.texts import (
    PHOTO_REQUIREMENTS_TEXT
)

from frontend_bot.config import (
    AVATAR_MIN_PHOTOS, AVATAR_MAX_PHOTOS,
    PROGRESSBAR_EMOJI_FILLED, PROGRESSBAR_EMOJI_CURRENT, PROGRESSBAR_EMOJI_EMPTY,
    FAL_MODE, FAL_ITERATIONS, FAL_PRIORITY, FAL_CAPTIONING, FAL_TRIGGER_WORD, FAL_LORA_RANK, FAL_FINETUNE_TYPE,
    FAL_WEBHOOK_URL
)

from frontend_bot.services.fal_trainer import train_avatar

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –∏ –º–æ–¥–µ–ª–∏
AVATAR_TYPE_DISPLAY = {
    'man': '–ú—É–∂—á–∏–Ω–∞',
    'woman': '–ñ–µ–Ω—â–∏–Ω–∞',
    'boy': '–ú–∞–ª—å—á–∏–∫',
    'girl': '–î–µ–≤–æ—á–∫–∞',
    'cat': '–ö–æ—Ç',
    'dog': '–°–æ–±–∞–∫–∞',
}
AVATAR_MODEL_DISPLAY = {
    'Flux1.dev': '–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è',
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
cancel_keyboard = InlineKeyboardMarkup()
cancel_keyboard.add(
    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
type_keyboard = InlineKeyboardMarkup()
type_keyboard.add(
    InlineKeyboardButton(
        "üë® –ú—É–∂—á–∏–Ω–∞", callback_data="avatar_type_man"
    ),
    InlineKeyboardButton(
        "üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="avatar_type_woman"
    )
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
base_model_keyboard = InlineKeyboardMarkup()
base_model_keyboard.add(
    InlineKeyboardButton(
        "Flux1.dev (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", callback_data="avatar_base_flux1"
    )
)
# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
style_keyboard = InlineKeyboardMarkup()
style_keyboard.add(
    InlineKeyboardButton("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", callback_data="avatar_style_realistic"),
    InlineKeyboardButton("–ú—É–ª—å—Ç—è—à–Ω—ã–π", callback_data="avatar_style_cartoon"),
    InlineKeyboardButton("–ê–Ω–∏–º–µ", callback_data="avatar_style_anime"),
    InlineKeyboardButton("3D", callback_data="avatar_style_3d")
)
style_keyboard.add(
    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ 16 —Ñ–æ—Ç–æ
continue_keyboard = InlineKeyboardMarkup()
continue_keyboard.add(
    InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="avatar_next")
)
continue_keyboard.add(
    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
only_continue_keyboard = InlineKeyboardMarkup()
only_continue_keyboard.add(
    InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="avatar_next")
)
only_continue_keyboard.add(
    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
photo_stage_keyboard = InlineKeyboardMarkup()
photo_stage_keyboard.add(
    InlineKeyboardButton("üì∑ –ú–æ–∏ —Ñ–æ—Ç–æ", callback_data="avatar_show_photos"),
    InlineKeyboardButton("‚ÑπÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data="avatar_show_requirements"),
    InlineKeyboardButton("üëÄ –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ", callback_data="avatar_show_example")
)
photo_stage_keyboard.add(
    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
)

# --- –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---
user_session = {}  # user_id -> dict: wizard_message_ids, last_wizard_state,
                   # uploaded_photo_msgs, last_error_msg, last_info_msg_id
user_gallery = {}  # (user_id, avatar_id) -> dict: index, last_switch

# –û—á–µ—Ä–µ–¥—å media_group –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_media_group_queue = {}  # user_id -> list of (media_group_id, photos)
user_media_group_processing = set()  # user_id, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞

# --- –ë—É—Ñ–µ—Ä—ã –¥–ª—è —Ñ–æ—Ç–æ ---
user_single_photo_buffer = {}  # user_id -> [photo_bytes, ...]
user_media_group_buffer = {}   # user_id -> media_group_id -> [photo_bytes, ...]
user_media_group_timers = {}   # user_id -> media_group_id -> asyncio.Task
user_single_photo_timer = {}   # user_id -> asyncio.Task

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

user_locks = {}

async def send_and_track(user_id, chat_id, *args, **kwargs):
    msg = await bot.send_message(chat_id, *args, **kwargs)
    user_session[user_id]['wizard_message_ids'].append(msg.message_id)
    return msg

async def start_avatar_wizard(message: Message):
    logger.info(
        f"[AVATAR FSM] –ó–∞–ø—É—Å–∫ –≤–∏–∑–∞—Ä–¥–∞ –¥–ª—è user_id={message.from_user.id}"
    )
    user_id = message.from_user.id
    avatar_id = str(uuid4())
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_session –∏ user_gallery
    user_session[user_id] = {
        'wizard_message_ids': [],
        'last_wizard_state': None,
        'uploaded_photo_msgs': [],
        'last_error_msg': None,
        'last_info_msg_id': None
    }
    user_gallery[(user_id, avatar_id)] = {
        'index': 0,
        'last_switch': 0
    }
    # –ü–µ—Ä–µ–¥–∞—ë–º class_name –µ—Å–ª–∏ –µ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ)
    init_avatar_fsm(user_id, avatar_id, class_name="")
    set_state(user_id, "avatar_photo_upload")
    set_current_avatar_id(user_id, avatar_id)
    requirements = PHOTO_REQUIREMENTS_TEXT
    await send_and_track(
        user_id,
        message.chat.id,
        requirements,
        parse_mode="HTML"
    )
    logger.info(
        f"[DEBUG] –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∑–∞—Ä–¥–∞: user_id={user_id}, "
        f"state={get_state(user_id)}, "
        f"avatar_id={get_current_avatar_id(user_id)}"
    )

def get_progressbar(
    current,
    total,
    min_photos=AVATAR_MIN_PHOTOS,
    max_photos=AVATAR_MAX_PHOTOS,
    current_idx=None
):
    if current <= min_photos:
        bar_len = min_photos
    else:
        bar_len = max_photos
    bar = []
    for i in range(bar_len):
        if current_idx is not None and i == current_idx:
            bar.append(PROGRESSBAR_EMOJI_CURRENT)  # —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        elif i < current:
            bar.append(PROGRESSBAR_EMOJI_FILLED)  # –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        else:
            bar.append(PROGRESSBAR_EMOJI_EMPTY)  # –ø—É—Å—Ç–æ
    return f"{''.join(bar)} ({current}/{bar_len})"

user_media_groups = {}  # (user_id, media_group_id) -> [(file_id, photo_bytes), ...]

@bot.message_handler(content_types=['photo'])
async def handle_avatar_photo_upload(message: Message):
    user_id = message.from_user.id
    logger.info(f"[FSM] handle_avatar_photo_upload: user_id={user_id}, message_id={message.message_id}")
    state = get_state(user_id)
    avatar_id = get_current_avatar_id(user_id)
    logger.info(f"[FSM] handle_avatar_photo_upload: state={state}, avatar_id={avatar_id}")
    if state != "avatar_photo_upload" or not avatar_id:
        logger.info(f"[FSM] handle_avatar_photo_upload: state not valid or no avatar_id")
        return
    file_info = await bot.get_file(message.photo[-1].file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    media_group_id = getattr(message, 'media_group_id', None)
    logger.info(f"[FSM] handle_avatar_photo_upload: media_group_id={media_group_id}")
    # --- –ï—Å–ª–∏ —ç—Ç–æ media_group ---
    if media_group_id:
        if user_id not in user_media_group_buffer:
            user_media_group_buffer[user_id] = {}
        if media_group_id not in user_media_group_buffer[user_id]:
            user_media_group_buffer[user_id][media_group_id] = []
        user_media_group_buffer[user_id][media_group_id].append((message.photo[-1].file_id, downloaded_file, message.message_id))
        # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
        if user_id in user_media_group_timers and media_group_id in user_media_group_timers[user_id]:
            user_media_group_timers[user_id][media_group_id].cancel()
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        task = asyncio.create_task(flush_media_group(user_id, media_group_id, message.chat.id, avatar_id))
        if user_id not in user_media_group_timers:
            user_media_group_timers[user_id] = {}
        user_media_group_timers[user_id][media_group_id] = task
        return
    # --- –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ forward –ø–∞—á–∫–æ–π) ---
    if user_id not in user_single_photo_buffer:
        user_single_photo_buffer[user_id] = []
    user_single_photo_buffer[user_id].append((message.photo[-1].file_id, downloaded_file, message.message_id))
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω
    if user_id not in user_single_photo_timer or user_single_photo_timer[user_id].done():
        task = asyncio.create_task(flush_single_photo_buffer(user_id, message.chat.id, avatar_id))
        user_single_photo_timer[user_id] = task
    return

async def flush_single_photo_buffer(user_id, chat_id, avatar_id):
    logger.info(f"[FSM] flush_single_photo_buffer called for user_id={user_id}, avatar_id={avatar_id}")
    try:
        if user_id not in user_locks:
            user_locks[user_id] = asyncio.Lock()
        async with user_locks[user_id]:
            await asyncio.sleep(1.5)
            photos = user_single_photo_buffer.pop(user_id, [])
            logger.info(f"[FSM] flush_single_photo_buffer: {len(photos)} photos to process")
            for file_id, photo_bytes, msg_id in photos:
                logger.info(f"[FSM] flush_single_photo_buffer: Processing photo {file_id}")
                data = load_avatar_fsm(user_id, avatar_id)
                logger.info(f"[FSM] flush_single_photo_buffer: loaded data.json: {data}")
                existing_photos = data.get("photos", [])
                existing_paths = [p["path"] if isinstance(p, dict) else p for p in existing_photos]
                is_valid, result = validate_photo(photo_bytes, existing_paths)
                logger.info(f"[FSM] flush_single_photo_buffer: validate_photo: {is_valid}, {result}")
                if not is_valid:
                    await delete_last_error_message(user_id, chat_id)
                    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                    try:
                        await bot.delete_message(chat_id, msg_id)
                    except Exception:
                        pass
                    from io import BytesIO
                    text = None
                    if "–¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in result:
                        text = (
                            "‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                            "üì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                        )
                    else:
                        text = f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {result}\nüì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error"))
                    await bot.send_photo(
                        chat_id,
                        BytesIO(photo_bytes),
                        caption=text,
                        reply_markup=markup
                    )
                    user_session[user_id]['last_error_msg'] = None
                    continue
                await delete_last_error_message(user_id, chat_id)
                logger.info(f"[FSM] flush_single_photo_buffer: calling add_photo_to_avatar")
                photo_path = add_photo_to_avatar(user_id, avatar_id, photo_bytes, file_id=file_id)
                logger.info(f"[FSM] flush_single_photo_buffer: Photo added at {photo_path}")
                data = load_avatar_fsm(user_id, avatar_id)
                logger.info(f"[FSM] flush_single_photo_buffer: data after add_photo: {data}")
                # update_photo_hint –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –≥–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
                data["photos"][-1] = {"path": photo_path, "file_id": file_id}
                save_avatar_fsm(user_id, avatar_id, data)
                logger.info(f"[FSM] flush_single_photo_buffer: data after save_avatar_fsm: {data}")
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                try:
                    await bot.delete_message(chat_id, msg_id)
                except Exception:
                    pass
            # –ü–æ—Å–ª–µ –≤—Å–µ–π –ø–∞—á–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é
            data = load_avatar_fsm(user_id, avatar_id)
            photos = data.get("photos", [])
            msg_id = user_session[user_id]['wizard_message_ids'][-1] if user_session[user_id]['wizard_message_ids'] else None
            await notify_progress(chat_id, user_id, avatar_id, len(photos), msg_id)
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ review
            if len(photos) >= AVATAR_MAX_PHOTOS:
                set_state(user_id, "avatar_gallery_review")
                await show_wizard_gallery(chat_id, user_id, avatar_id, photos, len(photos)-1 if photos else 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")

async def flush_media_group(user_id, media_group_id, chat_id, avatar_id):
    if user_id not in user_locks:
        user_locks[user_id] = asyncio.Lock()
    async with user_locks[user_id]:
        logger.debug(f"[LOCK] user_id={user_id} lock acquired (media group)")
        await asyncio.sleep(1.5)
        photos = user_media_group_buffer[user_id].pop(media_group_id, [])
        for file_id, photo_bytes, msg_id in photos:
            data = load_avatar_fsm(user_id, avatar_id)
            existing_photos = data.get("photos", [])
            existing_paths = [p["path"] if isinstance(p, dict) else p for p in existing_photos]
            is_valid, result = validate_photo(photo_bytes, existing_paths)
            if not is_valid:
                await delete_last_error_message(user_id, chat_id)
                # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                try:
                    await bot.delete_message(chat_id, msg_id)
                except Exception:
                    pass
                from io import BytesIO
                text = None
                if "–¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in result:
                    text = (
                        "‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                        "üì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                    )
                else:
                    text = f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {result}\nüì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error"))
                await bot.send_photo(
                    chat_id,
                    BytesIO(photo_bytes),
                    caption=text,
                    reply_markup=markup
                )
                user_session[user_id]['last_error_msg'] = None
                continue
            await delete_last_error_message(user_id, chat_id)
            photo_path = add_photo_to_avatar(user_id, avatar_id, photo_bytes, file_id=file_id)
            data = load_avatar_fsm(user_id, avatar_id)
            data["photos"][-1] = {"path": photo_path, "file_id": file_id}
            save_avatar_fsm(user_id, avatar_id, data)
            # update_photo_hint –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –≥–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            try:
                await bot.delete_message(chat_id, msg_id)
            except Exception:
                pass
        # –ü–æ—Å–ª–µ –≤—Å–µ–π –ø–∞—á–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é
        data = load_avatar_fsm(user_id, avatar_id)
        photos = data.get("photos", [])
        msg_id = user_session[user_id]['wizard_message_ids'][-1] if user_session[user_id]['wizard_message_ids'] else None
        await notify_progress(chat_id, user_id, avatar_id, len(photos), msg_id)
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ review
        if len(photos) >= AVATAR_MAX_PHOTOS:
            set_state(user_id, "avatar_gallery_review")
            await show_wizard_gallery(chat_id, user_id, avatar_id, photos, len(photos)-1 if photos else 0)
    logger.debug(f"[LOCK] user_id={user_id} lock released (media group)")

@bot.callback_query_handler(func=lambda call: call.data == "avatar_next")
async def handle_avatar_next(call):
    user_id = call.from_user.id
    await bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:",
        reply_markup=style_keyboard
    )
    await bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: get_state(m.from_user.id) == "avatar_title")
async def handle_avatar_title(message: Message):
    user_id = message.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for mid in user_session[user_id]['wizard_message_ids']:
        try:
            await bot.delete_message(message.chat.id, mid)
        except Exception:
            pass
    user_session[user_id]['wizard_message_ids'] = []
    if not avatar_id:
        await bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_keyboard() if 'main_menu_keyboard' in globals() else None
        )
        reset_avatar_fsm(user_id)
        return
    title = message.text.strip()
    if not title:
        msg = await bot.send_message(
            message.chat.id,
            "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:",
            reply_markup=cancel_keyboard
        )
        user_session[user_id]['wizard_message_ids'] = [msg.message_id]
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ FSM
    update_avatar_fsm(user_id, avatar_id, title=title)
    set_state(user_id, "avatar_confirm")
    data = load_avatar_fsm(user_id, avatar_id)
    class_name = data.get('class_name', '')
    display_type = AVATAR_TYPE_DISPLAY.get(class_name, class_name)
    photos = data.get('photos', [])
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å (–∑–∞–≥–ª—É—à–∫–∏)
    avatar_price = 150  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    user_balance = 250  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        "ü¶ã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞</b>\n\n"
        f"üè∑ –ò–º—è: {title}\n"
        f"{'üë®‚Äçü¶∞' if class_name == 'man' else 'üë©‚Äçü¶∞'} –ü–æ–ª: {display_type}\n"
        f"üñº –§–æ—Ç–æ: {len(photos)}\n"
        f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {avatar_price}\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ <b>–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä</b>.\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å'."
    )
    # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="avatar_confirm_yes"),
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="avatar_confirm_edit")
    )
    confirm_keyboard.add(
        InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
    )
    msg = await bot.send_message(
        message.chat.id,
        confirm_text,
        reply_markup=confirm_keyboard,
        parse_mode="HTML"
    )
    user_session[user_id]['wizard_message_ids'] = [msg.message_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith("avatar_type_"))
async def handle_avatar_type(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for mid in user_session[user_id]['wizard_message_ids']:
        try:
            await bot.delete_message(call.message.chat.id, mid)
        except Exception:
            pass
    user_session[user_id]['wizard_message_ids'] = []
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    type_name = call.data.split("_")[-1]
    update_avatar_fsm(user_id, avatar_id, class_name=type_name, base_tune="Flux1.dev")
    set_state(user_id, "avatar_title")
    msg = await bot.send_message(
        call.message.chat.id,
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:",
        reply_markup=cancel_keyboard
    )
    user_session[user_id]['wizard_message_ids'] = [msg.message_id]
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("avatar_style_"))
async def handle_avatar_style(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    style = call.data.split("_")[-1]
    update_avatar_fsm(user_id, avatar_id, style=style)
    set_state(user_id, "avatar_confirm")
    # –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    title = data.get("title", "")
    class_name = data.get("class_name", "")
    base_tune = data.get("base_tune", "")
    style_name = style
    # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
    preview_text = (
        f"\U0001F4F7 –§–æ—Ç–æ: {len(photos)}\n"
        f"–ò–º—è: {title}\n"
        f"–¢–∏–ø: {class_name}\n"
        f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {base_tune}\n"
        f"–°—Ç–∏–ª—å: {style_name}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="avatar_confirm_yes"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="avatar_confirm_edit")
    )
    await show_wizard_gallery(call.message.chat.id, user_id, avatar_id, photos, 0, message_id=call.message.message_id)
    await bot.send_message(
        call.message.chat.id,
        preview_text,
        reply_markup=confirm_keyboard
    )
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "avatar_confirm_edit")
async def handle_avatar_confirm_edit(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    set_state(user_id, "avatar_gallery_review")
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    logger.info(f"[AVATAR FSM] avatar_confirm_edit: user_id={user_id}, avatar_id={avatar_id}, photos={len(photos)}")
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if not photos:
        await bot.send_message(
            call.message.chat.id,
            "–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ."
        )
        return
    # –°–±—Ä–æ—Å last_wizard_state –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏
    user_session[user_id]['last_wizard_state'] = None
    try:
        await show_wizard_gallery(call.message.chat.id, user_id, avatar_id, photos, 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–∞–ª–µ—Ä–µ–∏: {e}")
        await bot.send_message(
            call.message.chat.id,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–∞–ª–µ—Ä–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    await bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
@bot.callback_query_handler(func=lambda call: call.data == "avatar_show_photos")
async def handle_show_photos(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    if not photos:
        await bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.")
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
        await show_wizard_gallery(call.message.chat.id, user_id, avatar_id, photos, 0)
    await bot.answer_callback_query(call.id)

user_gallery_index = {}  # (user_id, avatar_id) -> int
user_gallery_last_switch = {}  # (user_id, avatar_id) -> timestamp

def get_full_gallery_keyboard(idx, total):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="avatar_gallery_prev"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="avatar_gallery_delete"),
        InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data="avatar_gallery_next")
    )
    if total >= AVATAR_MIN_PHOTOS:
        markup.row(InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="avatar_gallery_continue"))
    markup.row(InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel"))
    return markup

async def show_wizard_gallery(chat_id, user_id, avatar_id, photos, idx, message_id=None):
    logger.info(f"[show_wizard_gallery] user_id={user_id}, avatar_id={avatar_id}, idx={idx}, message_id={message_id}, photos={len(photos)}")
    instruction = PHOTO_REQUIREMENTS_TEXT
    if not photos:
        new_text = instruction
        new_markup = get_full_gallery_keyboard(0, 0)
        last = user_session[user_id]['last_wizard_state']
        logger.info(f"[show_wizard_gallery] last_wizard_state={last}")
        if last and last[0] == new_text and last[1].to_dict() == new_markup.to_dict():
            logger.info("[show_wizard_gallery] return: no change (no photos)")
            return  # –ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        if message_id:
            await bot.edit_message_text(
                new_text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=new_markup
            )
            await clear_old_wizard_messages(chat_id, user_id, message_id)
            user_session[user_id]['last_wizard_state'] = (new_text, new_markup)
        else:
            msg = await bot.send_message(chat_id, new_text, reply_markup=new_markup)
            await clear_old_wizard_messages(chat_id, user_id, msg.message_id)
            user_session[user_id]['last_wizard_state'] = (new_text, new_markup)
        logger.info("[show_wizard_gallery] return: sent requirements (no photos)")
        return
    idx = max(0, min(idx, len(photos) - 1))
    user_gallery[(user_id, avatar_id)]['index'] = idx
    photo = photos[idx]
    if isinstance(photo, dict):
        file_id = photo.get("file_id")
        photo_path = photo.get("path")
    else:
        file_id = None
        photo_path = photo
    total = len(photos)
    progress = get_progressbar(
        total, AVATAR_MAX_PHOTOS, AVATAR_MIN_PHOTOS, AVATAR_MAX_PHOTOS, idx
    )
    left = AVATAR_MAX_PHOTOS - total
    if total == AVATAR_MIN_PHOTOS:
        caption = (
            f"–§–æ—Ç–æ {idx+1} –∏–∑ {total}\n{progress}\n\n"
            f"‚úÖ –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (<b>{AVATAR_MIN_PHOTOS}</b>).\n\n"
            f"üîù –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –¥–æ <b>{AVATAR_MAX_PHOTOS}</b> —Ñ–æ—Ç–æ.\n\n"
            f"‚û°Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ."
        )
    elif AVATAR_MIN_PHOTOS < total < AVATAR_MAX_PHOTOS:
        caption = (
            f"–§–æ—Ç–æ {idx+1} –∏–∑ {total}\n{progress}\n\n"
            f"üîù –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë <b>{AVATAR_MAX_PHOTOS - total}</b> —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.\n\n"
            f"‚û°Ô∏è –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞."
        )
    elif total == AVATAR_MAX_PHOTOS:
        caption = (
            f"–§–æ—Ç–æ {idx+1} –∏–∑ {total}\n{progress}\n\n"
            f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ. –ú–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
    else:
        caption = (
            f"–§–æ—Ç–æ {idx+1} –∏–∑ {total}\n{progress}\n\n"
            f"‚ùóÔ∏è–ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: <b>{AVATAR_MIN_PHOTOS}</b> —Ñ–æ—Ç–æ.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: <b>{AVATAR_MIN_PHOTOS - total}</b> —Ñ–æ—Ç–æ.\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞."
        )
    keyboard = get_full_gallery_keyboard(idx, total)
    last = user_session[user_id]['last_wizard_state']
    logger.info(f"[show_wizard_gallery] last_wizard_state={last}")
    if last and last[0] == caption and last[1].to_dict() == keyboard.to_dict():
        logger.info("[show_wizard_gallery] return: no change (gallery)")
        return  # –ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if message_id:
        try:
            if file_id:
                await bot.edit_message_media(
                    media=InputMediaPhoto(file_id, caption=caption, parse_mode="HTML"),
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=keyboard
                )
            else:
                with open(photo_path, 'rb') as img:
                    await bot.edit_message_media(
                        media=InputMediaPhoto(img, caption=caption, parse_mode="HTML"),
                        chat_id=chat_id,
                        message_id=message_id,
                        reply_markup=keyboard
                    )
            await clear_old_wizard_messages(chat_id, user_id, message_id)
            user_session[user_id]['last_wizard_state'] = (caption, keyboard)
            logger.info("[show_wizard_gallery] return: edit_message_media")
        except Exception as e:
            logger.error(f"[show_wizard_gallery] Exception: {e}")
            if file_id:
                msg = await bot.send_photo(chat_id, file_id, caption=caption, reply_markup=keyboard, parse_mode="HTML")
            else:
                with open(photo_path, 'rb') as img:
                    msg = await bot.send_photo(chat_id, img, caption=caption, reply_markup=keyboard, parse_mode="HTML")
            await clear_old_wizard_messages(chat_id, user_id, msg.message_id)
            user_session[user_id]['wizard_message_ids'] = [msg.message_id]
            user_session[user_id]['last_wizard_state'] = (caption, keyboard)
            logger.info("[show_wizard_gallery] return: send_photo after exception")
    else:
        if file_id:
            msg = await bot.send_photo(chat_id, file_id, caption=caption, reply_markup=keyboard, parse_mode="HTML")
        else:
            with open(photo_path, 'rb') as img:
                msg = await bot.send_photo(chat_id, img, caption=caption, reply_markup=keyboard, parse_mode="HTML")
        await clear_old_wizard_messages(chat_id, user_id, msg.message_id)
        user_session[user_id]['wizard_message_ids'] = [msg.message_id]
        user_session[user_id]['last_wizard_state'] = (caption, keyboard)
        logger.info("[show_wizard_gallery] return: send_photo (new message)")

@bot.callback_query_handler(func=lambda call: call.data == "avatar_gallery_add")
async def handle_gallery_add(call):
    user_id = call.from_user.id
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.answer_callback_query(call.id, "–ñ–¥—ë–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ...")

@bot.callback_query_handler(func=lambda call: call.data == "avatar_gallery_continue")
async def handle_gallery_continue(call):
    user_id = call.from_user.id
    await show_type_menu(call.message.chat.id, user_id)
    await bot.answer_callback_query(call.id)

async def clear_old_wizard_messages(chat_id, user_id, keep_msg_id=None):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–∑–∞—Ä–¥–∞, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ)."""
    msg_ids = user_session[user_id]['wizard_message_ids']
    for mid in msg_ids:
        if keep_msg_id is not None and mid == keep_msg_id:
            continue
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π message_id
    if keep_msg_id:
        user_session[user_id]['wizard_message_ids'] = [keep_msg_id]
    else:
        user_session[user_id]['wizard_message_ids'] = []

@bot.callback_query_handler(func=lambda call: call.data == "avatar_gallery_prev")
async def handle_gallery_prev(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    idx = user_gallery[(user_id, avatar_id)]['index']
    if not photos:
        await bot.answer_callback_query(call.id)
        return
    # Debounce: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    now = time.monotonic()
    last = user_gallery[(user_id, avatar_id)]['last_switch']
    if now - last < 0.7:
        await bot.answer_callback_query(call.id, "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        return
    user_gallery[(user_id, avatar_id)]['last_switch'] = now
    if idx <= 0:
        idx = len(photos) - 1  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ
    else:
        idx -= 1
    await show_wizard_gallery(call.message.chat.id, user_id, avatar_id, photos, idx, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "avatar_gallery_next")
async def handle_gallery_next(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    idx = user_gallery[(user_id, avatar_id)]['index']
    if not photos:
        await bot.answer_callback_query(call.id)
        return
    # Debounce: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    now = time.monotonic()
    last = user_gallery[(user_id, avatar_id)]['last_switch']
    if now - last < 0.7:
        await bot.answer_callback_query(call.id, "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!")
        return
    user_gallery[(user_id, avatar_id)]['last_switch'] = now
    if idx >= len(photos) - 1:
        idx = 0  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
    else:
        idx += 1
    await show_wizard_gallery(call.message.chat.id, user_id, avatar_id, photos, idx, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "avatar_gallery_delete")
async def handle_gallery_delete(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    idx = user_gallery[(user_id, avatar_id)]['index']
    if not photos:
        try:
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        await clear_old_wizard_messages(call.message.chat.id, user_id)
        reset_avatar_fsm(user_id)
        import asyncio
        await asyncio.sleep(0.5)
        start_avatar_wizard_for_user(user_id, call.message.chat.id)
        return
    await remove_photo_from_avatar(user_id, avatar_id, idx)
    data = load_avatar_fsm(user_id, avatar_id)  # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    photos = data.get("photos", [])
    # update_photo_hint –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
    if not photos:
        try:
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        await clear_old_wizard_messages(call.message.chat.id, user_id)
        reset_avatar_fsm(user_id)
        import asyncio
        await asyncio.sleep(0.5)
        start_avatar_wizard_for_user(user_id, call.message.chat.id)
        return
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
    new_idx = min(idx, len(photos) - 1)
    user_gallery[(user_id, avatar_id)]['index'] = new_idx
    await show_wizard_gallery(
        call.message.chat.id, user_id, avatar_id, photos, new_idx, message_id=call.message.message_id
    )
    await bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data == "avatar_show_requirements")
async def handle_show_requirements(call):
    requirements = PHOTO_REQUIREMENTS_TEXT
    await bot.send_message(call.message.chat.id, requirements, parse_mode="HTML")
    await bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–æ—Ç–æ
@bot.callback_query_handler(func=lambda call: call.data == "avatar_show_example")
async def handle_show_example(call):
    try:
        with open("frontend_bot/templates/example_good_photo.jpg", 'rb') as img:
            await bot.send_photo(call.message.chat.id, img, caption="üëÄ –ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ —Ñ–æ—Ç–æ: —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞, —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.")
    except Exception:
        await bot.send_message(call.message.chat.id, "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    await bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.text == "üì∑ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä")
async def handle_create_avatar(message: Message):
    user_id = message.from_user.id
    state = get_state(user_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ‚Äî –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑–∞—Ä–¥
    if state == "avatar_photo_upload" and get_current_avatar_id(user_id):
        await bot.send_message(
            message.chat.id,
            "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞. "
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å."
        )
        return
    # –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑–∞—Ä–¥ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
    reset_avatar_fsm(user_id)
    await start_avatar_wizard(message)

@bot.callback_query_handler(func=lambda call: call.data == "avatar_cancel")
async def handle_avatar_cancel(call):
    user_id = call.from_user.id
    avatar_id = get_current_avatar_id(user_id)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ wizard-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_session:
        chat_id = call.message.chat.id
        for mid in user_session[user_id].get('wizard_message_ids', []):
            try:
                await bot.delete_message(chat_id, mid)
            except Exception:
                pass
        user_session[user_id]['wizard_message_ids'] = []
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å avatar_id
    if avatar_id:
        clear_avatar_fsm(user_id, avatar_id)
    reset_avatar_fsm(user_id)  # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å FSM, —Ñ–æ—Ç–æ –∏ —Å–µ—Å—Å–∏–∏
    await bot.send_message(
        call.message.chat.id,
        "–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤.",
        reply_markup=my_avatars_keyboard()
    )
    await bot.answer_callback_query(call.id)

async def delete_last_error_message(user_id, chat_id):
    old_err = user_session[user_id]['last_error_msg']
    if old_err:
        try:
            await bot.delete_message(chat_id, old_err)
        except Exception:
            pass
        user_session[user_id]['last_error_msg'] = None

async def delete_last_info_message(user_id, chat_id):
    msg_id = user_session[user_id].get('last_info_msg_id')
    if msg_id:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
        user_session[user_id]['last_info_msg_id'] = None

async def notify_progress(chat_id, user_id, avatar_id, count, msg_id):
    # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ ‚Äî –≤—Å–µ–≥–¥–∞ 0 (–∏–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –≤—ã–¥–µ–ª—è—Ç—å)
    progressbar = get_progressbar(
        count, AVATAR_MAX_PHOTOS, AVATAR_MIN_PHOTOS, AVATAR_MAX_PHOTOS, 0
    )
    data = load_avatar_fsm(user_id, avatar_id)
    await delete_last_info_message(user_id, chat_id)
    if count < AVATAR_MAX_PHOTOS:
        await show_wizard_gallery(
            chat_id, user_id, avatar_id, data.get("photos", []), 0, message_id=msg_id
        )
    elif count == AVATAR_MAX_PHOTOS:
        await show_wizard_gallery(
            chat_id, user_id, avatar_id, data.get("photos", []), 0, message_id=msg_id
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è UX
    await asyncio.sleep(0.2)
    for mid in user_session[user_id]['uploaded_photo_msgs']:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    user_session[user_id]['uploaded_photo_msgs'] = []

# --- –ù–æ–≤—ã–π —Å–±—Ä–æ—Å FSM ---
def reset_avatar_fsm(user_id):
    user_session.pop(user_id, None)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ avatar_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_gallery
    for key in list(user_gallery.keys()):
        if key[0] == user_id:
            user_gallery.pop(key, None)
    clear_state(user_id)
    set_current_avatar_id(user_id, None)

# --- –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –≤–∏–∑–∞—Ä–¥–∞ –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Message ---
def start_avatar_wizard_for_user(user_id, chat_id):
    avatar_id = str(uuid4())
    user_session[user_id] = {
        'wizard_message_ids': [],
        'last_wizard_state': None,
        'uploaded_photo_msgs': [],
        'last_error_msg': None,
        'last_info_msg_id': None
    }
    user_gallery[(user_id, avatar_id)] = {
        'index': 0,
        'last_switch': 0
    }
    init_avatar_fsm(user_id, avatar_id)
    set_state(user_id, "avatar_photo_upload")
    set_current_avatar_id(user_id, avatar_id)
    requirements = PHOTO_REQUIREMENTS_TEXT
    import asyncio
    async def send_requirements():
        msg = await bot.send_message(chat_id, requirements, parse_mode="HTML")
        user_session[user_id]['wizard_message_ids'].append(msg.message_id)
    asyncio.create_task(send_requirements())

async def process_user_media_group_queue(user_id, chat_id, avatar_id):
    user_media_group_processing.add(user_id)
    try:
        while user_media_group_queue.get(user_id):
            group = user_media_group_queue[user_id].pop(0)
            media_group_id, photos, wait_msg_id, n = group
            try:
                await asyncio.sleep(1.5)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                if get_state(user_id) != "avatar_photo_upload":
                    continue  # –ï—Å–ª–∏ —ç—Ç–∞–ø —É–∂–µ —Å–º–µ–Ω–∏–ª—Å—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                data = load_avatar_fsm(user_id, avatar_id)
                count = len(data.get("photos", []))
                photos_left = AVATAR_MAX_PHOTOS - count
                if len(photos) > photos_left:
                    accepted_photos = photos[:photos_left]
                    skipped_photos = photos[photos_left:]
                else:
                    accepted_photos = photos
                    skipped_photos = []
                added = 0
                for file_id, photo_bytes in accepted_photos:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ñ–æ—Ç–æ
                    if get_state(user_id) != "avatar_photo_upload":
                        continue
                    data = load_avatar_fsm(user_id, avatar_id)
                    existing_photos = data.get("photos", [])
                    existing_paths = [
                        p["path"] if isinstance(p, dict) else p
                        for p in existing_photos
                    ]
                    is_valid, result = validate_photo(photo_bytes, existing_paths)
                    if not is_valid:
                        await delete_last_error_message(user_id, chat_id)
                        # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                        try:
                            await bot.delete_message(chat_id, wait_msg_id)
                        except Exception:
                            pass
                        from io import BytesIO
                        text = None
                        if "–¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in result:
                            text = (
                                "‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                                "üì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                            )
                        else:
                            text = f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ: {result}\nüì∏ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
                        markup = InlineKeyboardMarkup()
                        markup.add(InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="delete_error"))
                        await bot.send_photo(
                            chat_id,
                            BytesIO(photo_bytes),
                            caption=text,
                            reply_markup=markup
                        )
                        user_session[user_id]['last_error_msg'] = None
                        continue
                    await delete_last_error_message(user_id, chat_id)
                    photo_path = add_photo_to_avatar(
                        user_id, avatar_id, photo_bytes, file_id=file_id
                    )
                    data = load_avatar_fsm(user_id, avatar_id)
                    data["photos"][-1] = {
                        "path": photo_path, "file_id": file_id
                    }
                    save_avatar_fsm(user_id, avatar_id, data)
                    added += 1
                # wait_msg_id –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ
                data = load_avatar_fsm(user_id, avatar_id)
                msg_id = user_session[user_id]['wizard_message_ids'][-1] if user_session[user_id]['wizard_message_ids'] else None
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥–∞–ª–µ—Ä–µ–∏
                if get_state(user_id) == "avatar_photo_upload" and msg_id:
                    await show_wizard_gallery(
                        chat_id, user_id, avatar_id,
                        data.get("photos", []),
                        len(data.get("photos", [])) - 1,
                        message_id=msg_id
                    )
                await notify_progress(
                    chat_id, user_id, avatar_id, len(data.get("photos", [])), msg_id
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è UX
                await asyncio.sleep(0.2)
                for mid in user_session[user_id]['uploaded_photo_msgs']:
                    try:
                        await bot.delete_message(chat_id, mid)
                    except Exception:
                        pass
                user_session[user_id]['uploaded_photo_msgs'] = []
                total = len(data.get("photos", []))
                if skipped_photos:
                    await bot.send_message(
                        chat_id,
                        f"–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ {AVATAR_MAX_PHOTOS} —Ñ–æ—Ç–æ. "
                        f"–ü—Ä–∏–Ω—è—Ç—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {AVATAR_MAX_PHOTOS}."
                    )
                if total >= AVATAR_MAX_PHOTOS:
                    # –°–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é (—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ)
                    for mid in user_session[user_id]['wizard_message_ids']:
                        try:
                            await bot.delete_message(chat_id, mid)
                        except Exception:
                            pass
                    user_session[user_id]['wizard_message_ids'] = []
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
                    set_state(user_id, "avatar_type")
                    await show_type_menu(chat_id, user_id)
                await notify_progress(
                    chat_id, user_id, avatar_id, total, msg_id
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å–±–æ–º–∞: {str(e)}\n{traceback.format_exc()}")
    finally:
        user_media_group_processing.discard(user_id)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
async def show_type_menu(chat_id, user_id):
    await clear_old_wizard_messages(chat_id, user_id)
    msg = await send_and_track(
        user_id,
        chat_id,
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:\n\n"
        "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞ —Ñ–æ—Ç–æ.",
        reply_markup=type_keyboard
    )
    return msg

def get_photo_hint_text(current, min_photos, max_photos):
    requirements = (
        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ. "
        f"–ú–∏–Ω–∏–º—É–º: {min_photos}, –º–∞–∫—Å–∏–º—É–º: {max_photos}."
    )
    if current < min_photos:
        return (
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {current} —Ñ–æ—Ç–æ –∏–∑ {min_photos}.\n"
            f"–î–æ –º–∏–Ω–∏–º—É–º–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {min_photos - current} —Ñ–æ—Ç–æ.\n\n"
            f"{requirements}"
        )
    elif current < max_photos:
        return (
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {current} —Ñ–æ—Ç–æ –∏–∑ {max_photos}.\n"
            f"–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë {max_photos - current} —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
            f"{requirements}"
        )
    else:
        return (
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {max_photos}.\n"
            f"{requirements}"
        )

async def update_photo_hint(user_id, chat_id, avatar_id):
    data = load_avatar_fsm(user_id, avatar_id)
    photos = data.get("photos", [])
    count = len(photos)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    msg_id = user_session[user_id].get('last_info_msg_id')
    if msg_id:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    text = get_photo_hint_text(count, AVATAR_MIN_PHOTOS, AVATAR_MAX_PHOTOS)
    msg = await bot.send_message(chat_id, text)
    user_session[user_id]['last_info_msg_id'] = msg.message_id

@bot.callback_query_handler(func=lambda call: call.data == "delete_error")
async def handle_delete_error(call):
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    await bot.answer_callback_query(call.id)
