"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, summary, MoM, ToDo –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º.
"""

import os
import aiofiles
import io
from telebot.types import Message
from telebot.async_telebot import AsyncTeleBot
from frontend_bot.handlers.general import bot
from frontend_bot.services.gpt_assistant import format_transcript_with_gpt
from frontend_bot.keyboards.reply import transcript_format_keyboard
from frontend_bot.services.file_utils import async_remove, async_exists
from frontend_bot.services.word_generator import generate_protocol_word
from frontend_bot.services.history import add_history_entry, STORAGE_DIR
from frontend_bot.utils.logger import get_logger
from frontend_bot.GPT_Prompts.transcribe.prompts import (
    PROTOCOL_PROMPT,
    SHORT_SUMMARY_PROMPT,
    MOM_PROMPT,
    TODO_PROMPT,
    FULL_TRANSCRIPT_PROMPT,
)
from datetime import datetime
from frontend_bot.services import transcript_cache
from frontend_bot.services.transcript_utils import get_user_transcript_or_error, send_document_with_caption, send_transcript_error

generate_word_protocol = generate_protocol_word

logger = get_logger("transcribe_protocol")

STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)")
async def send_meeting_protocol(message: Message):
    logger.info(f"[HANDLER] send_meeting_protocol, message.text={message.text!r}")
    transcript = await get_user_transcript_or_error(bot, message, logger)
    if not transcript:
        return

    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)...")
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)..."
    )
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not transcript.strip():
            raise ValueError("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

        protocol_text = await format_transcript_with_gpt(
            transcript, custom_prompt=PROTOCOL_PROMPT, temperature=0.2, top_p=0.7
        )
        if not protocol_text.strip():
            await bot.send_message(
                message.chat.id,
                "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=transcript_format_keyboard(),
            )
            return
        logger.info(f"GPT protocol_text: {protocol_text[:200]}...")
        
        if not protocol_text.strip():
            logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª!")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Word-–¥–æ–∫—É–º–µ–Ω—Ç
        temp_filename = await generate_protocol_word(protocol_text)
        if not temp_filename or not await async_exists(temp_filename):
            raise FileNotFoundError("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

        filename = (
            f"protocol_{message.from_user.id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.docx"
        )
        
        async with aiofiles.open(temp_filename, "rb") as f:
            data = await f.read()
            if not data:
                raise ValueError("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            
            logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
            await send_document_with_caption(bot, message.chat.id, filename, data, "üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)", transcript_format_keyboard())
        
        await async_remove(temp_filename)
        await add_history_entry(str(message.from_user.id), temp_filename, "word")
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}")
        error_msg = str(e)
    except FileNotFoundError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: {str(e)}")
        error_msg = str(e)
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        error_msg = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."
    
    if 'error_msg' in locals():
        await bot.send_chat_action(message.chat.id, "typing")
        await send_transcript_error(bot, message, error_msg, transcript_format_keyboard())


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
async def retry_meeting_protocol(message: Message):
    await send_meeting_protocol(message)


@bot.message_handler(func=lambda m: m.text == "–°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É")
async def send_short_summary(message: Message):
    logger.info(f"[HANDLER] send_short_summary, message.text={message.text!r}")
    logger.info(f"[DEBUG] User ID: {message.from_user.id}")
    transcript = await get_user_transcript_or_error(bot, message, logger)
    logger.info(f"[DEBUG] transcript: {transcript[:100] if transcript else transcript}")
    if not transcript:
        logger.info("[DEBUG] transcript is None, return")
        return
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é —Å–≤–æ–¥–∫—É –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        summary = await format_transcript_with_gpt(
            transcript, custom_prompt=SHORT_SUMMARY_PROMPT, temperature=0.3, top_p=0.7
        )
        logger.info(f"[DEBUG] summary: {summary[:100] if summary else summary}")
        if not summary.strip():
            logger.info("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: summary –ø—É—Å—Ç–æ–π")
            await send_transcript_error(bot, message, "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", transcript_format_keyboard())
            return
        filename = f"summary_{message.from_user.id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        data = summary.encode("utf-8")
        logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
        await send_document_with_caption(bot, message.chat.id, filename, data, "üìù –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É", transcript_format_keyboard())
    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
        await send_transcript_error(bot, message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", transcript_format_keyboard())


@bot.message_handler(func=lambda m: m.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å MoM")
async def send_mom(message: Message) -> None:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Minutes of Meeting (MoM) –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[HANDLER] send_mom, message.text={message.text!r}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        transcript = await get_user_transcript_or_error(bot, message, logger)
        if not transcript:
            return
            
        await bot.send_chat_action(message.chat.id, "typing")
        await bot.send_message(
            message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é MoM (Minutes of Meeting) —Å –ø–æ–º–æ—â—å—é GPT..."
        )
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ GPT
        mom_text = await format_transcript_with_gpt(
            transcript, custom_prompt=MOM_PROMPT, temperature=0.2, top_p=0.6
        )
        if not mom_text:
            await bot.send_message(
                message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=transcript_format_keyboard(),
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"mom_{message.from_user.id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        temp_path = os.path.join("storage", "temp", temp_file)
        os.makedirs(os.path.dirname(temp_path), exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º MoM –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        async with aiofiles.open(temp_path, "w", encoding="utf-8") as f:
            await f.write(mom_text)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        async with aiofiles.open(temp_path, "rb") as f:
            await bot.send_document(
                message.chat.id,
                (temp_file, f),
                caption="üìã –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ (MoM)",
                reply_markup=transcript_format_keyboard(),
            )
            
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(temp_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ MoM: {e}")
        await bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=transcript_format_keyboard(),
        )


@bot.message_handler(func=lambda m: m.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏")
async def send_todo_checklist(message: Message):
    logger.info(f"[HANDLER] send_todo_checklist, message.text={message.text!r}")
    transcript = await get_user_transcript_or_error(bot, message, logger)
    if not transcript:
        return
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        todo_text = await format_transcript_with_gpt(
            transcript, custom_prompt=TODO_PROMPT, temperature=0.5, top_p=0.9
        )
        if not todo_text.strip():
            await bot.send_message(
                message.chat.id,
                "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=transcript_format_keyboard(),
            )
            return
        if not todo_text.strip():
            logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π ToDo!")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π ToDo")
        filename = f"todo_{message.from_user.id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        data = todo_text.encode("utf-8")
        logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
        await send_document_with_caption(bot, message.chat.id, filename, data, "üìù ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏", transcript_format_keyboard())
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ ToDo")
        await send_transcript_error(bot, message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", transcript_format_keyboard())


@bot.message_handler(func=lambda m: m.text == "–ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
async def send_full_official_transcript(message: Message):
    logger.info(f"[HANDLER] send_full_official_transcript, message.text={message.text!r}")
    logger.info(f"[DEBUG] User ID: {message.from_user.id}")
    transcript = await get_user_transcript_or_error(bot, message, logger)
    logger.info(f"[DEBUG] transcript: {transcript[:100] if transcript else transcript}")
    if not transcript:
        logger.info("[DEBUG] transcript is None, return")
        return
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        formatted = await format_transcript_with_gpt(
            transcript, custom_prompt=FULL_TRANSCRIPT_PROMPT, temperature=0.2, top_p=0.7
        )
        logger.info(f"[DEBUG] Sending full transcript, length: {len(formatted)}")
        filename = (
            f"full_transcript_{message.from_user.id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        )
        data = formatted.encode("utf-8")
        await send_document_with_caption(bot, message.chat.id, filename, data, "üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç", transcript_format_keyboard())
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        await send_transcript_error(bot, message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", transcript_format_keyboard())

async def handle_transcribe_file(message: Message, file_data: bytes, file_name: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏."""
    user_id = str(message.from_user.id)
    file_path = await save_transcribe_file(user_id, file_data, file_name, STORAGE_DIR)
    await add_history_entry(user_id, file_name, str(file_path), STORAGE_DIR)
    await bot.send_message(
        message.chat.id,
        f"–§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.",
        reply_markup=transcribe_keyboard()
    )
