"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, summary, MoM, ToDo –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º.
"""

import os
import aiofiles
import io
from telebot.types import Message
from frontend_bot.handlers.general import bot
from frontend_bot.services.gpt_assistant import format_transcript_with_gpt
from frontend_bot.keyboards.reply import transcript_format_keyboard
from frontend_bot.services.file_utils import async_remove, async_exists
from frontend_bot.services.word_generator import generate_protocol_word

generate_word_protocol = generate_protocol_word
from frontend_bot.services.history import add_history_entry
from frontend_bot.utils.logger import get_logger
from frontend_bot.GPT_Prompts.transcribe.prompts import (
    PROTOCOL_PROMPT,
    SHORT_SUMMARY_PROMPT,
    MOM_PROMPT,
    TODO_PROMPT,
)
from datetime import datetime
from frontend_bot.services import user_transcripts_store

logger = get_logger("transcribe_protocol")

STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")


@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)")
async def send_meeting_protocol(message: Message):
    logger.info(f"[HANDLER] send_meeting_protocol, message.text={message.text!r}")
    user_id = message.from_user.id
    transcript_path = await user_transcripts_store.get(user_id)
    logger.info(f"[DEBUG] user_transcripts: {user_transcripts_store}")
    logger.info(f"[DEBUG] transcript_path for user {user_id}: {transcript_path}")
    if not transcript_path or not await async_exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    try:
        async with aiofiles.open(transcript_path, "r", encoding="utf-8") as f:
            transcript = await f.read()
            if not transcript.strip():
                await bot.send_message(
                    message.chat.id,
                    "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                    reply_markup=transcript_format_keyboard(),
                )
                return
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        await bot.send_message(
            message.chat.id,
            "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=transcript_format_keyboard(),
        )
        return

    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)...")
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)..."
    )
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not transcript.strip():
            raise ValueError("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

        protocol_text = await format_transcript_with_gpt(
            transcript, custom_prompt=PROTOCOL_PROMPT, temperature=0.2, top_p=0.7
        )
        if not protocol_text.strip():
            await bot.send_message(
                message.chat.id,
                "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=transcript_format_keyboard(),
            )
            return
        logger.info(f"GPT protocol_text: {protocol_text[:200]}...")
        
        if not protocol_text.strip():
            logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª!")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Word-–¥–æ–∫—É–º–µ–Ω—Ç
        temp_filename = await generate_protocol_word(protocol_text)
        if not temp_filename or not await async_exists(temp_filename):
            raise FileNotFoundError("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

        filename = (
            f"protocol_{user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.docx"
        )
        
        async with aiofiles.open(temp_filename, "rb") as f:
            data = await f.read()
            if not data:
                raise ValueError("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            
            logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
            await bot.send_document(
                message.chat.id,
                (filename, io.BytesIO(data)),
                caption="üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)",
                reply_markup=transcript_format_keyboard(),
            )
        
        await async_remove(temp_filename)
        await add_history_entry(str(user_id), temp_filename, "word", "protocol")
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}")
        error_msg = str(e)
    except FileNotFoundError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: {str(e)}")
        error_msg = str(e)
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        error_msg = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."
    
    if 'error_msg' in locals():
        await bot.send_chat_action(message.chat.id, "typing")
        await bot.send_message(
            message.chat.id,
            error_msg,
            reply_markup=transcript_format_keyboard(),
        )


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
async def retry_meeting_protocol(message: Message):
    await send_meeting_protocol(message)


@bot.message_handler(func=lambda m: m.text and "—Å–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É" in m.text.lower())
async def send_short_summary(message: Message):
    logger.info(f"[HANDLER] send_short_summary, message.text={message.text!r}")
    user_id = message.from_user.id
    transcript_path = await user_transcripts_store.get(user_id)
    logger.info(f"[DEBUG] user_transcripts: {user_transcripts_store}")
    logger.info(f"[DEBUG] transcript_path for user {user_id}: {transcript_path}")
    if not transcript_path or not await async_exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    try:
        async with aiofiles.open(transcript_path, "r", encoding="utf-8") as f:
            transcript = await f.read()
        if not transcript.strip():
            logger.info("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: transcript –ø—É—Å—Ç–æ–π")
            await bot.send_message(
                message.chat.id,
                "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=transcript_format_keyboard(),
            )
            return
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        await bot.send_message(
            message.chat.id,
            "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=transcript_format_keyboard(),
        )
        return

    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é —Å–≤–æ–¥–∫—É –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        summary = await format_transcript_with_gpt(
            transcript, custom_prompt=SHORT_SUMMARY_PROMPT, temperature=0.3, top_p=0.7
        )
        if not summary.strip():
            logger.info("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: summary –ø—É—Å—Ç–æ–π")
            await bot.send_message(
                message.chat.id,
                "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=transcript_format_keyboard(),
            )
            return
        filename = f"summary_{user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        data = summary.encode("utf-8")
        logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
        await bot.send_document(
            message.chat.id,
            (filename, io.BytesIO(data)),
            caption="üìù –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É",
            reply_markup=transcript_format_keyboard(),
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=transcript_format_keyboard(),
        )


@bot.message_handler(func=lambda m: m.text and "mom" in m.text.lower())
async def send_mom(message: Message) -> None:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Minutes of Meeting (MoM) –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[HANDLER] send_mom, message.text={message.text!r}")
    user_id = message.from_user.id
    transcript_path = await user_transcripts_store.get(user_id)
    
    if not transcript_path or not await async_exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    
    try:
        f_ctx = aiofiles.open(transcript_path, "r", encoding="utf-8")
        if hasattr(f_ctx, "__await__"):
            f_ctx = await f_ctx
        async with f_ctx as f:
            transcript = await f.read()

        if not transcript.strip():
            await bot.send_chat_action(message.chat.id, "typing")
            await bot.send_message(
                message.chat.id,
                "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
                reply_markup=transcript_format_keyboard(),
            )
            return
        
        await bot.send_chat_action(message.chat.id, "typing")
        await bot.send_message(
            message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é MoM (Minutes of Meeting) —Å –ø–æ–º–æ—â—å—é GPT..."
        )
        
        try:
            mom_text = await format_transcript_with_gpt(
                transcript, custom_prompt=MOM_PROMPT, temperature=0.2, top_p=0.6
            )
        except Exception as exc:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ MoM: {exc}")
            await bot.send_chat_action(message.chat.id, "typing")
            await bot.send_message(
                message.chat.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ MoM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=transcript_format_keyboard(),
            )
            return

        if not mom_text.strip():
            logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π MoM!")
            await bot.send_message(
                message.chat.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ MoM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=transcript_format_keyboard(),
            )
            return

        filename = f"mom_{user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        data = mom_text.encode("utf-8")
        logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
        
        await bot.send_document(
            message.chat.id,
            (filename, io.BytesIO(data)),
            caption="üìù MoM (Minutes of Meeting)",
            reply_markup=transcript_format_keyboard(),
        )
        
    except Exception as exc:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ MoM: {exc}")
        await bot.send_chat_action(message.chat.id, "typing")
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ MoM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )


@bot.message_handler(func=lambda m: m.text and "todo" in m.text.lower())
async def send_todo_checklist(message: Message):
    logger.info(f"[HANDLER] send_todo_checklist, message.text={message.text!r}")
    user_id = message.from_user.id
    transcript_path = await user_transcripts_store.get(user_id)
    logger.info(f"[DEBUG] user_transcripts: {user_transcripts_store}")
    logger.info(f"[DEBUG] transcript_path for user {user_id}: {transcript_path}")
    if not transcript_path or not await async_exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    try:
        async with aiofiles.open(transcript_path, "r", encoding="utf-8") as f:
            transcript = await f.read()
            if not transcript.strip():
                await bot.send_message(
                    message.chat.id,
                    "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                    reply_markup=transcript_format_keyboard(),
                )
                return
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        await bot.send_message(
            message.chat.id,
            "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=transcript_format_keyboard(),
        )
        return

        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª " "–µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    async with aiofiles.open(transcript_path, "r", encoding="utf-8") as f:
        transcript = await f.read()
    if not transcript.strip():
        await bot.send_message(
            message.chat.id,
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏ —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        todo_text = await format_transcript_with_gpt(
            transcript, custom_prompt=TODO_PROMPT, temperature=0.5, top_p=0.9
        )
        if not todo_text.strip():
            await bot.send_message(
                message.chat.id,
                "—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                reply_markup=transcript_format_keyboard(),
            )
            return
        if not todo_text.strip():
            logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π ToDo!")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π ToDo")
        filename = f"todo_{user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        data = todo_text.encode("utf-8")
        logger.info(f"[DEBUG] Sending file: {filename}, size: {len(data)} bytes")
        await bot.send_document(
            message.chat.id,
            (filename, io.BytesIO(data)),
            caption="üìù ToDo-–ø–ª–∞–Ω —Å —á–µ–∫–ª–∏—Å—Ç–∞–º–∏",
            reply_markup=transcript_format_keyboard(),
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ ToDo")
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=transcript_format_keyboard(),
        )


@bot.message_handler(
    func=lambda m: m.text and "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç" in m.text.lower()
)
async def send_full_official_transcript(message: Message):
    logger.info(
        f"[HANDLER] send_full_official_transcript, message.text={message.text!r}"
    )
    user_id = message.from_user.id
    transcript_path = await user_transcripts_store.get(user_id)
    logger.info(f"[DEBUG] user_transcripts: {user_transcripts_store}")
    logger.info(f"[DEBUG] transcript_path for user {user_id}: {transcript_path}")
    if not transcript_path or not await async_exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    async with aiofiles.open(transcript_path, "r", encoding="utf-8") as f:
        transcript = await f.read()
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT..."
    )
    try:
        full_prompt = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è —Ç–µ–∫—Å—Ç —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã —Ä–∞–±–æ—á–µ–π –≤—Å—Ç—Ä–µ—á–∏ –≤ "
            "–Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ (—Ä–µ–ø–ª–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–¥—É—Ç —Å–ø–ª–æ—à–Ω—è–∫–æ–º, "
            "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).\n"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
            "1. –í—ã–¥–µ–ª–∏—Ç—å **—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏** –∏ –∏—Ö —Ä–æ–ª–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ).\n"
            "2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å **—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π, –ª–æ–≥–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏—Ç—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç**, "
            "–≤—ã–¥–µ–ª—è—è:\n"
            "   - –ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, **–ò–≥–æ—Ä—å:**).\n"
            "   - –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–±–ª–æ–∫–∞–º–∏: üîπ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, üîπ –°—Ä–æ–∫–∏, "
            "üîπ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏ —Ç.–ø.).\n"
            "3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å: —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã, ¬´—ç-—ç¬ª, "
            "–≤–≤–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞, –Ω–æ –Ω–µ –∏—Å–∫–∞–∂–∞—Ç—å —Å–º—ã—Å–ª.\n"
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å **—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫** –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ "
            "–¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–µ–π.\n"
            "5. –í —Ñ–∏–Ω–∞–ª–µ ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å **–∏—Ç–æ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏** –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏.\n"
            "–°–æ—Ö—Ä–∞–Ω—è–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, –∏–∑–±–µ–≥–∞–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n---\n"
            "## üóì –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏  \n"
            "**–§–æ—Ä–º–∞—Ç:** –û–Ω–ª–∞–π–Ω  \n"
            "**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**  \n"
            "‚Äì –ò–≤–∞–Ω (PM), ‚Äì –û–ª—å–≥–∞ (–ê–Ω–∞–ª–∏—Ç–∏–∫), ‚Äì –°–µ—Ä–≥–µ–π (Dev)\n\n"
            "### üîπ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã  \n"
            "**–û–ª—å–≥–∞:** –û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–µ–∫, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º React –∏ WebView...  \n"
            "**–°–µ—Ä–≥–µ–π:** –ù—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –Ω–∞–±—Ä–æ—Å–∫–∏...\n\n"
            "### üîπ –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏  \n"
            "- –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–∫ –Ω–∞ Android  \n"
            "- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å URL –¥–ª—è WebView  \n---\n\n"
            "–ù–∞—á–Ω–∏ —Å –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π "
            "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ. –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:"
        )
        formatted = await format_transcript_with_gpt(
            transcript, custom_prompt=full_prompt, temperature=0.2, top_p=0.7
        )
        logger.info(f"[DEBUG] Sending full transcript, length: {len(formatted)}")
        filename = (
            f"full_transcript_{user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
        )
        data = formatted.encode("utf-8")
        await bot.send_document(
            message.chat.id,
            (filename, io.BytesIO(data)),
            caption="üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
            reply_markup=transcript_format_keyboard(),
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=transcript_format_keyboard(),
        )
