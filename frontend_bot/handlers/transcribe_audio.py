"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.
"""

import os
from telebot.types import Message
from frontend_bot.handlers.general import bot
from frontend_bot.services.transcribe_service import (
    process_audio,
    cleanup_old_transcripts,
    ensure_transcribe_dirs,
)
from frontend_bot.services.state_utils import set_state_pg, get_state_pg, clear_state_pg
from frontend_bot.keyboards.reply import transcript_format_keyboard
from frontend_bot.services.shared_menu import send_main_menu
from frontend_bot.utils.logger import get_logger
import asyncio
import io
from datetime import datetime
from frontend_bot.repositories.user_repository import UserRepository
from database.config import AsyncSessionLocal
from frontend_bot.config import settings
from shared_storage.storage_utils import download_file, upload_file
from frontend_bot.services import transcript_cache as user_transcripts_store
import aiofiles

logger = get_logger("transcribe_audio")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")


@bot.message_handler(func=lambda m: m.text == "üé§ –ê—É–¥–∏–æ")
async def audio_instruction(message: Message):
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
    if not user:
        logger.error(f"User {telegram_id} not found in the database")
        return
    uuid_user_id = user.id  # UUID
    try:
        await set_state_pg(uuid_user_id, "audio_transcribe", session)
        await session.commit()
        logger.info(f"[audio_instruction] set_state_pg —É—Å–ø–µ—à–Ω–æ –¥–ª—è user_id={uuid_user_id} (type={type(uuid_user_id)})")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
        state = await get_state_pg(uuid_user_id, session)
        logger.info(f"[audio_instruction] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {state}")
    except Exception as e:
        logger.error(f"[audio_instruction] –û—à–∏–±–∫–∞ –ø—Ä–∏ set_state_pg: {e}")
        await bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return
    await bot.send_message(
        message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3/ogg) –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏."
    )


@bot.message_handler(content_types=["voice", "audio"])
async def transcribe_audio(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
    if not user:
        logger.error(f"User {telegram_id} not found in the database")
        return
    uuid_user_id = user.id
    logger.info(f"[transcribe_audio] –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è user_id={uuid_user_id} (type={type(uuid_user_id)})")
    state = await get_state_pg(uuid_user_id, session)
    logger.info(f"[transcribe_audio] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {state}")
    if not state or state.get("state") != "audio_transcribe":
        logger.info("[transcribe_audio] –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ audio_transcribe, –≤—ã—Ö–æ–¥")
        await bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º '–ê—É–¥–∏–æ' –≤ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ üé§ –ê—É–¥–∏–æ)."
        )
        return
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(message.chat.id, "‚è≥ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    result = await process_audio(
        message, bot, OPENAI_API_KEY, STORAGE_DIR, TRANSCRIPTS_DIR, uuid_user_id
    )
    if not result.success:
        error_messages = {
            "file_too_large": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {settings.MAX_FILE_SIZE / 1024 / 1024}MB)",
            "ffmpeg_not_found": "–û—à–∏–±–∫–∞: ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            "unsupported_format": "–í–∞—à —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é. "
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: "
                                "mp3, wav, ogg, m4a, flac, aac, wma, opus.",
            "processing_error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        }
        error_msg = error_messages.get(result.error, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {result.error}")
        await bot.send_message(message.chat.id, error_msg)
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ MinIO
    async with aiofiles.open(result.transcript_path, "rb") as f:
        transcript_data = await f.read()
    minio_key = f"{uuid_user_id}/{os.path.basename(result.transcript_path)}"
    await upload_file(
        bucket=settings.MINIO_BUCKETS["transcripts"],
        object_name=minio_key,
        data=transcript_data,
        content_type="text/plain"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º MinIO-–∫–ª—é—á –≤ –∫—ç—à
    await user_transcripts_store.set(uuid_user_id, minio_key)
    logger.info(f"[transcribe_audio] transcript_cache.set: user={uuid_user_id}, minio_key={minio_key}")
    # –£—Å–ø–µ—à–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
    filename = f"transcript_{uuid_user_id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏–∑ MinIO
        data = await download_file(
            bucket=settings.MINIO_BUCKETS["transcripts"],
            object_name=minio_key
        )
        
        await bot.send_document(
            message.chat.id,
            (filename, io.BytesIO(data)),
            caption="–í–∞—à —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
            reply_markup=transcript_format_keyboard(),
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await clear_state_pg(uuid_user_id, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        await bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_audio_instruction(message: Message):
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
    if not user:
        logger.error(f"User {telegram_id} not found in the database")
        return
    uuid_user_id = user.id
    await bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
        "–≤ —ç—Ç–æ—Ç —á–∞—Ç –µ—â—ë —Ä–∞–∑.",
        reply_markup=None,
    )
    logger.info(f"User {uuid_user_id} requested to repeat audio upload.")


@bot.message_handler(func=lambda m: m.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_anywhere(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
    if not user:
        logger.error(f"User {telegram_id} not found in the database")
        return
    uuid_user_id = user.id
    await send_main_menu(bot, message)
    logger.info(f"User {uuid_user_id} returned to main menu.")
