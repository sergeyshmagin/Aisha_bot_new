"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.
"""

import os
from telebot.types import Message
from frontend_bot.handlers.general import bot
from frontend_bot.services.transcribe_service import process_audio
from frontend_bot.services.state_manager import set_state, get_state, clear_state
from frontend_bot.keyboards.reply import transcript_format_keyboard
from frontend_bot.services.file_utils import async_makedirs
from frontend_bot.services.shared_menu import send_main_menu
from frontend_bot.utils.logger import get_logger
import asyncio
import io
from datetime import datetime
import aiofiles

logger = get_logger("transcribe_audio")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")
asyncio.get_event_loop().run_until_complete(async_makedirs(STORAGE_DIR, exist_ok=True))
asyncio.get_event_loop().run_until_complete(
    async_makedirs(TRANSCRIPTS_DIR, exist_ok=True)
)


@bot.message_handler(func=lambda m: m.text == "üé§ –ê—É–¥–∏–æ")
async def audio_instruction(message: Message):
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
    await set_state(message.from_user.id, "audio_transcribe")
    await bot.send_message(
        message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3/ogg) –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏."
    )


@bot.message_handler(content_types=["voice", "audio"])
async def transcribe_audio(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logger.info(
        f"[transcribe_audio] –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è user_id={message.from_user.id}"
    )
    if await get_state(message.from_user.id) != "audio_transcribe":
        logger.info("[transcribe_audio] –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ audio_transcribe, –≤—ã—Ö–æ–¥")
        return
    await clear_state(message.from_user.id)
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(message.chat.id, "‚è≥ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    result = await process_audio(
        message, bot, OPENAI_API_KEY, STORAGE_DIR, TRANSCRIPTS_DIR
    )
    if not result.success:
        if result.error == "unsupported_format":
            await bot.send_message(
                message.chat.id,
                "–í–∞—à —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: "
                "mp3, wav, ogg, m4a, flac, aac, wma, opus.",
            )
        else:
            await bot.send_message(
                message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {result.error}"
            )
        return
    # –£—Å–ø–µ—à–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
    filename = f"transcript_{message.from_user.id}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
    async with aiofiles.open(result.transcript_path, "rb") as f:
        data = await f.read()
    await bot.send_document(
        message.chat.id,
        (filename, io.BytesIO(data)),
        caption="–í–∞—à —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
        reply_markup=transcript_format_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_audio_instruction(message: Message):
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ."""
    await bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
        "–≤ —ç—Ç–æ—Ç —á–∞—Ç –µ—â—ë —Ä–∞–∑.",
        reply_markup=None,
    )
    logger.info(f"User {message.from_user.id} requested to repeat audio upload.")


@bot.message_handler(func=lambda m: m.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_anywhere(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await send_main_menu(bot, message)
    logger.info(f"User {message.from_user.id} returned to main menu.")
