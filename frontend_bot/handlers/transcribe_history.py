"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
"""

import os
from telebot.types import Message
from frontend_bot.handlers.general import bot
from frontend_bot.services.history_service import HistoryService
from frontend_bot.keyboards.reply import history_keyboard
from frontend_bot.services.file_utils import async_remove, async_exists
from frontend_bot.utils.logger import get_logger
from typing import List, Dict, Any
from pathlib import Path
from frontend_bot.services.transcribe_service import delete_user_transcripts
from frontend_bot.services.transcript_service_context import transcript_service_context
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.config import AsyncSessionLocal
from frontend_bot.repositories.user_repository import UserRepository

logger = get_logger("transcribe_history")

STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")

@bot.message_handler(commands=["history"])
async def show_history(message: Message):
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
        if not user:
            await bot.send_message(
                message.chat.id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=history_keyboard(),
            )
            return
        uuid_user_id = user.id
        history_service = HistoryService(session)
        entries = await history_service.get_user_history(
            session,
            str(uuid_user_id),
            limit=10
        )
        
    if entries:
        msg = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n"
        for entry in reversed(entries):
            action_data = entry.action_data
            msg += f"\nüìÑ {action_data.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | {entry.action_type} | {action_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | {entry.created_at}"
        await bot.send_message(
            message.chat.id,
            msg,
            reply_markup=history_keyboard(),
        )
    else:
        await bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
            reply_markup=history_keyboard(),
        )


@bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–π —Ñ–∞–π–ª")
async def delete_my_file(message: Message):
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
        if not user:
            await bot.send_message(
                message.chat.id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=history_keyboard(),
            )
            return
        uuid_user_id = user.id
        async with transcript_service_context as transcript_service:
            transcript_path = await transcript_service.get_transcript_path(uuid_user_id)
            if transcript_path and await async_exists(transcript_path):
                await async_remove(transcript_path)
                await transcript_service.clear_transcript_cache(uuid_user_id)
                
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ HistoryService
                async with AsyncSessionLocal() as session:
                    history_service = HistoryService(session)
                    await history_service.clear_user_history(session, str(uuid_user_id))
                    
                await delete_user_transcripts(str(uuid_user_id), STORAGE_DIR)
                await bot.send_message(
                    message.chat.id,
                    "–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.",
                    reply_markup=history_keyboard(),
                )
            else:
                await bot.send_message(
                    message.chat.id,
                    "–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    reply_markup=history_keyboard(),
                )


async def get_history(user_id: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with AsyncSessionLocal() as session:
        history_service = HistoryService(session)
        entries = await history_service.get_user_history(session, user_id)
        return [
            {
                "id": entry.id,
                "action_type": entry.action_type,
                "action_data": entry.action_data,
                "created_at": entry.created_at.isoformat()
            }
            for entry in entries
        ]


async def clear_history(user_id: str) -> None:
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with AsyncSessionLocal() as session:
        history_service = HistoryService(session)
        await history_service.clear_user_history(session, user_id)


async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        telegram_id = update.effective_user.id
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(telegram_id)
            if not user:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            uuid_user_id = user.id
            history_service = HistoryService(session)
            entries = await history_service.get_user_history(
                session,
                str(uuid_user_id),
                limit=10
            )
        
        if not entries:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        message = "üìö –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n\n"
        for i, entry in enumerate(entries, 1):
            action_data = entry.action_data
            message += f"{i}. {action_data.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({entry.action_type}) - {entry.created_at}\n"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"),
                InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_history")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.exception(f"[history_handler] –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")


async def clear_history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        telegram_id = update.effective_user.id
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(telegram_id)
            if not user:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            uuid_user_id = user.id
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ HistoryService
            async with AsyncSessionLocal() as session:
                history_service = HistoryService(session)
                await history_service.clear_user_history(session, str(uuid_user_id))
            
        await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        logger.exception(f"[clear_history_handler] –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

# TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–∞–±–æ—Ç—É —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏ –Ω–∞ MinIO/PostgreSQL
