"""–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞."""

import os
import aiofiles
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
from uuid import uuid4
from dotenv import load_dotenv
from frontend_bot.handlers.general import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
from frontend_bot.services.gpt_assistant import format_transcript_with_gpt
from frontend_bot.utils.logger import get_logger
from frontend_bot.keyboards.reply import (
    transcript_format_keyboard,
)
from frontend_bot.services.state_utils import set_state, get_state, clear_state
from frontend_bot.services.file_utils import (
    async_remove,
    async_makedirs,
    async_exists,
)
import io
from frontend_bot.GPT_Prompts.transcribe.prompts import (
    PROTOCOL_PROMPT,
)
import asyncio
from frontend_bot.services.word_generator import generate_protocol_word
from frontend_bot.services.history import add_history_entry, STORAGE_DIR
from frontend_bot.services import user_transcripts_store
from datetime import datetime

logger = get_logger("transcribe")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), "../../.env"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")
TRANSCRIPTS_DIR = os.path.join(STORAGE_DIR, "transcripts")
asyncio.get_event_loop().run_until_complete(async_makedirs(STORAGE_DIR, exist_ok=True))
asyncio.get_event_loop().run_until_complete(
    async_makedirs(TRANSCRIPTS_DIR, exist_ok=True)
)

MAX_CHUNK_SIZE = 24 * 1024 * 1024  # 24 –ú–ë

HISTORY_FILE = os.path.join(STORAGE_DIR, "history.json")

user_states = {}


def protocol_error_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"))
    markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup


@bot.message_handler(func=lambda m: m.text == "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
async def text_instruction(message: Message):
    await set_state(message.from_user.id, "transcribe_txt")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º: transcribe_txt")
    await bot.send_message(
        message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt-—Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )


@bot.message_handler(content_types=["document"])
async def handle_text_transcript_file(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ .txt-—Ñ–∞–π–ª—ã."""
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {message.from_user.id}: "
        f"{getattr(message.document, 'file_name', 'NO_FILENAME')}"
    )
    try:
        if await get_state(message.from_user.id) != "transcribe_txt":
            logger.info("State –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞")
            return
        if not message.document or not message.document.file_name.endswith(".txt"):
            logger.info("–§–∞–π–ª –Ω–µ .txt, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞")
            return
        user_id = message.from_user.id
        user_dir = os.path.join(TRANSCRIPTS_DIR, str(user_id))
        await async_makedirs(user_dir, exist_ok=True)
        file_info = await bot.get_file(message.document.file_id)
        file_path = os.path.join(user_dir, f"transcript_{uuid4()}.txt")
        downloaded_file = await bot.download_file(file_info.file_path)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏: {file_path}")
        async with aiofiles.open(file_path, "wb") as f:
            await f.write(downloaded_file)
        await user_transcripts_store.set(user_id, file_path)
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await clear_state(user_id)
        await bot.send_message(
            message.chat.id,
            "\u2705 –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=transcript_format_keyboard(),
        )
    except Exception as e:  
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –°–æ–æ–±—â–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
async def formats_info(message: Message):
    await bot.send_message(
        message.chat.id,
        "üìö –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å "
        "–≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–µ–º –∏ –∏—Ç–æ–≥–æ–≤.\n\n"
        "üìÑ –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.\n\n"
        "üìã MoM ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "‚úÖ ToDo-–ø–ª–∞–Ω ‚Äî —á–µ–∫–ª–∏—Å—Ç –∑–∞–¥–∞—á –ø–æ –∏—Ç–æ–≥–∞–º –≤—Å—Ç—Ä–µ—á–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ!",
        reply_markup=transcript_format_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)")
async def send_meeting_protocol(message: Message):
    user_id = message.from_user.id
    transcript_path = await user_transcripts_store.get(user_id)
    if not transcript_path or not await async_exists(transcript_path):
        await bot.send_message(
            message.chat.id,
            "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
            "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=transcript_format_keyboard(),
        )
        return
    async with aiofiles.open(transcript_path, "r", encoding="utf-8") as f:
        transcript = await f.read()
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(
        message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)..."
    )
    try:
        protocol_text = await format_transcript_with_gpt(
            transcript,
            custom_prompt=PROTOCOL_PROMPT,
            temperature=0.2,
            top_p=0.7,
        )
        logger.info(f"GPT protocol_text: {protocol_text[:200]}...")
        if not protocol_text.strip():
            logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª!")
            raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
        temp_filename = await generate_protocol_word(protocol_text)
        filename = (
            f"protocol_{user_id}_" f"{datetime.now().strftime('%Y-%m-%d_%H-%M')}.docx"
        )
        async with aiofiles.open(temp_filename, "rb") as f:
            data = await f.read()
            await bot.send_document(
                message.chat.id,
                (filename, io.BytesIO(data)),
                caption="üìÑ –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)",
                reply_markup=transcript_format_keyboard(),
            )
        await async_remove(temp_filename)
        await add_history_entry(str(user_id), temp_filename, "word")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. "
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=protocol_error_keyboard(),
        )


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
async def retry_meeting_protocol(message: Message):
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    await send_meeting_protocol(message)


async def handle_transcribe_file(message: Message, file_data: bytes, file_name: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏."""
    user_id = str(message.from_user.id)
    file_path = await save_transcribe_file(user_id, file_data, file_name, STORAGE_DIR)
    await add_history_entry(user_id, file_name, str(file_path), STORAGE_DIR)
    await bot.send_message(
        message.chat.id,
        f"–§–∞–π–ª {file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.",
        reply_markup=transcribe_keyboard()
    )
