"""–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞."""

import os
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
from uuid import uuid4
from dotenv import load_dotenv
from frontend_bot.handlers.general import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
from frontend_bot.services.gpt_assistant import format_transcript_with_gpt
from frontend_bot.utils.logger import get_logger
from frontend_bot.keyboards.reply import (
    transcript_format_keyboard,
)
from frontend_bot.services.state_utils import set_state_pg, get_state_pg, clear_state_pg
from frontend_bot.services.file_utils import (
    async_remove,
    async_makedirs,
    async_exists,
)
import io
from frontend_bot.GPT_Prompts.transcribe.prompts import (
    PROTOCOL_PROMPT,
)
import asyncio
from frontend_bot.services.word_generator import generate_protocol_word
from frontend_bot.services.history_service import add_history_entry, HistoryService
from frontend_bot.services.transcribe_service import process_audio
from frontend_bot.config import settings
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from frontend_bot.services.transcript_service import TranscriptService
from minio import Minio
from datetime import datetime
from database.config import AsyncSessionLocal
import aiofiles
from frontend_bot.texts.menu.texts import (
    BUSINESS_ASSISTANT_MENU_TEXT,
    TRANSCRIBE_MENU_TEXT,
)
from frontend_bot.texts.transcribe.texts import (
    FORMATS_INFO_TEXT,
    PROTOCOL_CAPTION,
    PROTOCOL_ERROR_TEXT,
)
from frontend_bot.repositories.user_repository import UserRepository
from shared_storage.storage_utils import upload_file, download_file
from frontend_bot.services import transcript_cache as user_transcripts_store

logger = get_logger("transcribe")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), "../../.env"))
settings.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
STORAGE_DIR = os.getenv("STORAGE_DIR", "storage")

MAX_CHUNK_SIZE = 24 * 1024 * 1024  # 24 –ú–ë

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
minio_client = Minio(
    settings.MINIO_ENDPOINT,
    access_key=settings.MINIO_ACCESS_KEY,
    secret_key=settings.MINIO_SECRET_KEY,
    secure=settings.MINIO_SECURE
)
transcript_service = TranscriptService(minio_client)

def protocol_error_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"))
    markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup

@bot.message_handler(func=lambda m: m.text == "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
async def text_instruction(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start.")
            return
        uuid_user_id = user.id
        try:
            await set_state_pg(uuid_user_id, "transcribe_txt", session)
            await session.commit()
            logger.info(f"[text_instruction] set_state_pg —É—Å–ø–µ—à–Ω–æ –¥–ª—è user_id={uuid_user_id} (type={type(uuid_user_id)})")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
            state = await get_state_pg(uuid_user_id, session)
            logger.info(f"[text_instruction] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {state}")
        except Exception as e:
            logger.error(f"[text_instruction] –û—à–∏–±–∫–∞ –ø—Ä–∏ set_state_pg: {e}")
            await bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return
    await bot.send_message(
        message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt-—Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )

@bot.message_handler(content_types=["document"])
async def handle_text_transcript_file(message: Message):
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start.")
            return
        uuid_user_id = user.id
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {uuid_user_id}: "
            f"{getattr(message.document, 'file_name', 'NO_FILENAME')}"
        )
        try:
            state = await get_state_pg(uuid_user_id, session)
            logger.info(f"[handle_text_transcript_file] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
            if not state or state.get("state") != "transcribe_txt":
                logger.info("[handle_text_transcript_file] State –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞")
                return
            if not message.document or not message.document.file_name.endswith(".txt"):
                logger.info("[handle_text_transcript_file] –§–∞–π–ª –Ω–µ .txt, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞")
                return
            
            file_info = await bot.get_file(message.document.file_id)
            downloaded_file = await bot.download_file(file_info.file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ MinIO
            minio_key = f"{uuid_user_id}/{message.document.file_name}"
            await upload_file(
                bucket=settings.MINIO_BUCKETS["transcripts"],
                object_name=minio_key,
                data=downloaded_file,
                content_type="text/plain"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º MinIO-–∫–ª—é—á –≤ –∫—ç—à
            await user_transcripts_store.set(uuid_user_id, minio_key)
            logger.info(f"[handle_text_transcript_file] transcript_cache.set: user={uuid_user_id}, minio_key={minio_key}")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            await HistoryService(session).add_entry(
                session,
                str(uuid_user_id),
                "transcribe",
                {
                    "filename": message.document.file_name,
                    "file_key": minio_key,
                    "created_at": datetime.now().isoformat()
                }
            )
            
            await clear_state_pg(uuid_user_id, session)
            await session.commit()
            logger.info(f"[handle_text_transcript_file] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è user_id={uuid_user_id}")
            await bot.send_message(
                message.chat.id,
                "\u2705 –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=transcript_format_keyboard(),
            )
        except Exception as e:  
            logger.exception(f"[handle_text_transcript_file] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –°–æ–æ–±—â–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
async def formats_info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start.")
            return
        uuid_user_id = user.id
    await bot.send_message(
        message.chat.id,
        "üìö –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "üìù –ü–æ–ª–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å "
        "–≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–µ–º –∏ –∏—Ç–æ–≥–æ–≤.\n\n"
        "üìÑ –°–≤–æ–¥–∫–∞ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.\n\n"
        "üìã MoM ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "‚úÖ ToDo-–ø–ª–∞–Ω ‚Äî —á–µ–∫–ª–∏—Å—Ç –∑–∞–¥–∞—á –ø–æ –∏—Ç–æ–≥–∞–º –≤—Å—Ç—Ä–µ—á–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ!",
        reply_markup=transcript_format_keyboard(),
    )

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)")
async def send_meeting_protocol(message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word."""
    telegram_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_telegram_id(telegram_id)
        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start.")
            return
        uuid_user_id = user.id
        minio_key = await user_transcripts_store.get(uuid_user_id)
        if not minio_key:
            await bot.send_message(
                message.chat.id,
                "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
                "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.",
                reply_markup=transcript_format_keyboard(),
            )
            return
        try:
            data = await download_file(
                bucket=settings.MINIO_BUCKETS["transcripts"],
                object_name=minio_key
            )
            transcript = data.decode("utf-8")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ MinIO: {e}")
            await bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.",
                reply_markup=transcript_format_keyboard(),
            )
            return
        await bot.send_chat_action(message.chat.id, "typing")
        await bot.send_message(
            message.chat.id, "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)..."
        )
        try:
            protocol_text = await format_transcript_with_gpt(
                transcript,
                custom_prompt=PROTOCOL_PROMPT,
                temperature=0.2,
                top_p=0.7,
            )
            logger.info(f"GPT protocol_text: {protocol_text[:200]}...")
            if not protocol_text.strip():
                logger.error("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª!")
                raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
            temp_filename = await generate_protocol_word(protocol_text)
            filename = (
                f"protocol_{uuid_user_id}_" f"{datetime.now().strftime('%Y-%m-%d_%H-%M')}.docx"
            )
            async with aiofiles.open(temp_filename, "rb") as f:
                data = await f.read()
                await bot.send_document(
                    message.chat.id,
                    (filename, io.BytesIO(data)),
                    caption="–ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞—Å–µ–¥–∞–Ω–∏—è (Word)",
                    reply_markup=transcript_format_keyboard(),
                )
            await async_remove(temp_filename)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            await HistoryService(session).add_entry(
                session,
                str(uuid_user_id),
                "protocol",
                {
                    "filename": filename,
                    "type": "word",
                    "created_at": datetime.now().isoformat()
                }
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
            await bot.send_message(
                message.chat.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. "
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
                reply_markup=protocol_error_keyboard(),
            )

@bot.message_handler(func=lambda m: m.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
async def retry_meeting_protocol(message: Message):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è."""
    await send_meeting_protocol(message)

async def transcribe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏—Ö.
    """
    try:
        message = update.message
        if not message:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
        if not (message.voice or message.audio):
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await message.reply_text("üéôÔ∏è –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        result = await process_audio(
            message=message,
            bot=context.bot,
            openai_api_key=settings.OPENAI_API_KEY,
            storage_dir=str(STORAGE_DIR),
            transcripts_dir=str(STORAGE_DIR / "transcripts")
        )

        if not result.success:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"
            if result.error == "unsupported_format":
                error_msg = "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ"
            await status_message.edit_text(error_msg)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = message.from_user.id
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(telegram_id)
            if not user:
                await status_message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            uuid_user_id = user.id
            transcripts = await transcript_service.list_user_transcripts(
                user_id=uuid_user_id,
                limit=1
            )
            
            if not transcripts:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
                return
            
            transcript = transcripts[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            await HistoryService(session).add_entry(
                session,
                str(uuid_user_id),
                "transcribe",
                {
                    "filename": transcript.filename,
                    "file_path": transcript.file_path,
                    "created_at": datetime.now().isoformat()
                }
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìù –ü—Ä–æ—Ç–æ–∫–æ–ª", callback_data="protocol"),
                InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="todo")
            ],
            [
                InlineKeyboardButton("üìÑ –°–≤–æ–¥–∫–∞", callback_data="summary"),
                InlineKeyboardButton("üìã MoM", callback_data="mom")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await status_message.edit_text(
            "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.exception(f"[transcribe_handler] –û—à–∏–±–∫–∞: {e}")
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
