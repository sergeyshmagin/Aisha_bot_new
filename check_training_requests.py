#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ë–î
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
current_dir = Path(__file__).parent
app_dir = current_dir / "app"
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(app_dir))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if not os.getenv('PYTHONPATH'):
    os.environ['PYTHONPATH'] = str(current_dir)

try:
    from app.database.connection import get_async_session
    from app.database.models import Avatar, AvatarStatus
    from sqlalchemy import select, and_
    from sqlalchemy.orm import selectinload
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   cd /opt/aisha-backend")
    print("   python check_training_requests.py")
    sys.exit(1)

async def check_training_requests():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—É—á–µ–Ω–∏—è –≤ –ë–î"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ó–ê–ü–†–û–°–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        async for session in get_async_session():
            try:
                # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è
                query = (
                    select(Avatar)
                    .where(
                        and_(
                            Avatar.status == AvatarStatus.TRAINING,
                            Avatar.finetune_id.isnot(None)
                        )
                    )
                    .options(selectinload(Avatar.photos))
                )
                
                result = await session.execute(query)
                training_avatars = result.scalars().all()
                
                if not training_avatars:
                    print("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
                    completed_query = (
                        select(Avatar)
                        .where(Avatar.status == AvatarStatus.COMPLETED)
                        .order_by(Avatar.training_completed_at.desc())
                        .limit(5)
                    )
                    
                    completed_result = await session.execute(completed_query)
                    completed_avatars = completed_result.scalars().all()
                    
                    if completed_avatars:
                        print("\n‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã:")
                        for avatar in completed_avatars:
                            print(f"   üé≠ {avatar.name} (ID: {avatar.id})")
                            print(f"      Request ID: {avatar.finetune_id}")
                            print(f"      –ó–∞–≤–µ—Ä—à–µ–Ω: {avatar.training_completed_at}")
                            print()
                    
                    return
                
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(training_avatars)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
                print()
                
                for i, avatar in enumerate(training_avatars, 1):
                    print(f"{i}. üé≠ **{avatar.name}**")
                    print(f"   ID –∞–≤–∞—Ç–∞—Ä–∞: {avatar.id}")
                    print(f"   Request ID: {avatar.finetune_id}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {avatar.status.value}")
                    print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {avatar.training_progress}%")
                    print(f"   –ù–∞—á–∞—Ç–æ: {avatar.training_started_at}")
                    print(f"   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(avatar.photos) if avatar.photos else 0}")
                    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {avatar.user_id}")
                    print()
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å request_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                print("üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook'–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ Request ID –≤—ã—à–µ")
                print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Request ID –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_local_webhook.py")
                
                break
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: {e}")
                await session.rollback()
                raise
            finally:
                await session.close()
                
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def check_recent_avatars():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã"""
    
    print("\nüìÖ –ù–ï–î–ê–í–ù–û –°–û–ó–î–ê–ù–ù–´–ï –ê–í–ê–¢–ê–†–´")
    print("=" * 30)
    
    try:
        async for session in get_async_session():
            try:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–≤–∞—Ç–∞—Ä–æ–≤
                query = (
                    select(Avatar)
                    .order_by(Avatar.created_at.desc())
                    .limit(10)
                )
                
                result = await session.execute(query)
                recent_avatars = result.scalars().all()
                
                for i, avatar in enumerate(recent_avatars, 1):
                    status_emoji = {
                        AvatarStatus.DRAFT: "üìù",
                        AvatarStatus.TRAINING: "üîÑ",
                        AvatarStatus.COMPLETED: "‚úÖ",
                        AvatarStatus.ERROR: "‚ùå"
                    }.get(avatar.status, "‚ùì")
                    
                    print(f"{i:2d}. {status_emoji} {avatar.name}")
                    print(f"     ID: {avatar.id}")
                    print(f"     Request ID: {avatar.finetune_id or '–ù–µ—Ç'}")
                    print(f"     –°—Ç–∞—Ç—É—Å: {avatar.status.value}")
                    print(f"     –°–æ–∑–¥–∞–Ω: {avatar.created_at}")
                    print()
                
                break
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: {e}")
                await session.rollback()
                raise
            finally:
                await session.close()
                
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await check_training_requests()
    await check_recent_avatars()
    
    print("\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π API: python test_local_webhook.py")
    print("2. –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Request ID –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main()) 